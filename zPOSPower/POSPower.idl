/****************************************************************************
**
** POSPower.idl -- IDL source for POSPower.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (POSPower.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91221-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPOSPower 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPOSPower_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SODataDummy")] HRESULT SODataDummy( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOErrorDummy")] HRESULT SOErrorDummy( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.5
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(50), helpstring("property CapFanAlarm")]
        HRESULT CapFanAlarm( [out, retval] VARIANT_BOOL* pCapFanAlarm );
        [propget, id(51), helpstring("property CapHeatAlarm")]
        HRESULT CapHeatAlarm( [out, retval] VARIANT_BOOL* pCapHeatAlarm );
        [propget, id(52), helpstring("property CapQuickCharge")]
        HRESULT CapQuickCharge( [out, retval] VARIANT_BOOL* pCapQuickCharge );
        [propget, id(53), helpstring("property CapShutdownPOS")]
        HRESULT CapShutdownPOS( [out, retval] VARIANT_BOOL* pCapShutdownPOS );
        [propget, id(54), helpstring("property CapUPSChargeState")]
        HRESULT CapUPSChargeState( [out, retval] long* pCapUPSChargeState );
        [propget, id(55), helpstring("property EnforcedShutdownDelayTime")]
        HRESULT EnforcedShutdownDelayTime( [out, retval] long* pEnforcedShutdownDelayTime );
        [propput, id(55), helpstring("property EnforcedShutdownDelayTime")]
        HRESULT EnforcedShutdownDelayTime( [in] long EnforcedShutdownDelayTime );
        [propget, id(56), helpstring("property PowerFailDelayTime")]
        HRESULT PowerFailDelayTime( [out, retval] long* pPowerFailDelayTime );
        [propget, id(57), helpstring("property QuickChargeMode")]
        HRESULT QuickChargeMode( [out, retval] VARIANT_BOOL* pQuickChargeMode );
        [propget, id(58), helpstring("property QuickChargeTime")]
        HRESULT QuickChargeTime( [out, retval] long* pQuickChargeTime );
        [propget, id(59), helpstring("property UPSChargeState")]
        HRESULT UPSChargeState( [out, retval] long* pUPSChargeState );
        [id(70), helpstring("method ShutdownPOS")]
        HRESULT ShutdownPOS( 
            [out, retval] long* pRC );
    // Release 1.6
    // Release 1.7
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB92221-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPOSPower 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPOSPower_1_8 : IOPOSPOSPower_1_5
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Current Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB93221-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPOSPower 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPOSPower_1_9 : IOPOSPOSPower_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(60), helpstring("property BatteryCapacityRemaining")]
        HRESULT BatteryCapacityRemaining( [out, retval] long* pBatteryCapacityRemaining );
        [propget, id(61), helpstring("property BatteryCriticallyLowThreshold")]
        HRESULT BatteryCriticallyLowThreshold( [out, retval] long* pBatteryCriticallyLowThreshold );
        [propput, id(61), helpstring("property BatteryCriticallyLowThreshold")]
        HRESULT BatteryCriticallyLowThreshold( [in] long BatteryCriticallyLowThreshold );
        [propget, id(62), helpstring("property BatteryLowThreshold")]
        HRESULT BatteryLowThreshold( [out, retval] long* pBatteryLowThreshold );
        [propput, id(62), helpstring("property BatteryLowThreshold")]
        HRESULT BatteryLowThreshold( [in] long BatteryLowThreshold );
        [propget, id(63), helpstring("property CapBatteryCapacityRemaining")]
        HRESULT CapBatteryCapacityRemaining( [out, retval] VARIANT_BOOL* pCapBatteryCapacityRemaining );
        [propget, id(64), helpstring("property CapRestartPOS")]
        HRESULT CapRestartPOS( [out, retval] VARIANT_BOOL* pCapRestartPOS );
        [propget, id(65), helpstring("property CapStandbyPOS")]
        HRESULT CapStandbyPOS( [out, retval] VARIANT_BOOL* pCapStandbyPOS );
        [propget, id(66), helpstring("property CapSuspendPOS")]
        HRESULT CapSuspendPOS( [out, retval] VARIANT_BOOL* pCapSuspendPOS );
        [propget, id(67), helpstring("property CapVariableBatteryCriticallyLowThreshold")]
        HRESULT CapVariableBatteryCriticallyLowThreshold( [out, retval] VARIANT_BOOL* pCapVariableBatteryCriticallyLowThreshold );
        [propget, id(68), helpstring("property CapVariableBatteryLowThreshold")]
        HRESULT CapVariableBatteryLowThreshold( [out, retval] VARIANT_BOOL* pCapVariableBatteryLowThreshold );
        [propget, id(69), helpstring("property PowerSource")]
        HRESULT PowerSource( [out, retval] long* pPowerSource );
        [id(71), helpstring("method RestartPOS")]
        HRESULT RestartPOS( 
            [out, retval] long* pRC );
        [id(72), helpstring("method StandbyPOS")]
        HRESULT StandbyPOS( 
            [in] long Reason, 
            [out, retval] long* pRC );
        [id(73), helpstring("method SuspendPOS")]
        HRESULT SuspendPOS( 
            [in] long Reason, 
            [out, retval] long* pRC );
    // Release 1.10
    // Release 1.11
    // Release 1.12
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSPOSPower Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB94221-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPOSPower Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPOSPower : IOPOSPOSPower_1_9
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90220-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS POSPower Control 1.15.000 [Public, by CRM/MCS]")
]
library OposPOSPower_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90223-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSPOSPowerEvents Interface")
    ]
    dispinterface _IOPOSPOSPowerEvents
    {
        properties:
        methods:
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90222-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS POSPower Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSPOSPower
    {
        [default] interface IOPOSPOSPower;
        interface IOPOSPOSPower_1_9;
        interface IOPOSPOSPower_1_8;
        interface IOPOSPOSPower_1_5;
        [default, source] dispinterface _IOPOSPOSPowerEvents;
    };
};

// End POSPower.idl
