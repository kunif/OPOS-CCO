; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?WM_ATLGETHOST@ATL@@3IA				; ATL::WM_ATLGETHOST
PUBLIC	?WM_ATLGETCONTROL@ATL@@3IA			; ATL::WM_ATLGETCONTROL
PUBLIC	LIBID_ATLLib
PUBLIC	__pobjMapEntryFirst
PUBLIC	__pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPEAUHINSTANCE__@@@ZEA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZEA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA		; ATL::_pAtlModule
PUBLIC	?_pModule@ATL@@3PEAVCComModule@1@EA		; ATL::_pModule
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PEAUIAtlAutoThreadModule@1@EA ; ATL::_pAtlAutoThreadModule
PUBLIC	??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@ ; `string'
PUBLIC	??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@ ; `string'
PUBLIC	??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@ ; `string'
PUBLIC	??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@ ; `string'
PUBLIC	??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@ ; `string'
PUBLIC	??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@ ; `string'
PUBLIC	??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@ ; `string'
PUBLIC	??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ ; `string'
PUBLIC	??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@ ; `string'
PUBLIC	?chDirSep@ATL@@3_WB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3_WB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3_WB			; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3_WB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3_WB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QEB_WEB			; ATL::szStringVal
PUBLIC	??_C@_13HADIAKP@?$AAS@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QEB_WEB			; ATL::multiszStringVal
PUBLIC	??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@ ; `string'
PUBLIC	??_C@_13LHMFKAAD@?$AAM@				; `string'
PUBLIC	?szDwordVal@ATL@@3QEB_WEB			; ATL::szDwordVal
PUBLIC	??_C@_13MKMNOPIJ@?$AAD@				; `string'
PUBLIC	?szBinaryVal@ATL@@3QEB_WEB			; ATL::szBinaryVal
PUBLIC	??_C@_13OPKGLAFF@?$AAB@				; `string'
PUBLIC	?szValToken@ATL@@3QEB_WEB			; ATL::szValToken
PUBLIC	??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@		; `string'
PUBLIC	?szForceRemove@ATL@@3QEB_WEB			; ATL::szForceRemove
PUBLIC	??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; `string'
PUBLIC	?szNoRemove@ATL@@3QEB_WEB			; ATL::szNoRemove
PUBLIC	??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; `string'
PUBLIC	?szDelete@ATL@@3QEB_WEB				; ATL::szDelete
PUBLIC	??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@ ; `string'
PUBLIC	??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@ ; `string'
PUBLIC	??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@ ; `string'
PUBLIC	??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@ ; `string'
PUBLIC	CLSID_Registrar
PUBLIC	IID_IRegistrar
PUBLIC	IID_IDocHostUIHandlerDispatch
PUBLIC	IID_IAxWinHostWindow
PUBLIC	IID_IAxWinHostWindowLic
PUBLIC	IID_IAxWinAmbientDispatch
PUBLIC	IID_IAxWinAmbientDispatchEx
PUBLIC	IID_IInternalConnection
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
EXTRN	__ImageBase:ZWORD
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
;	COMDAT ?WM_ATLGETHOST@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETHOST@ATL@@3IA DD 01H DUP (?)			; ATL::WM_ATLGETHOST
_BSS	ENDS
;	COMDAT ?WM_ATLGETCONTROL@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETCONTROL@ATL@@3IA DD 01H DUP (?)		; ATL::WM_ATLGETCONTROL
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPEAUHINSTANCE__@@@ZEA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPEAUHINSTANCE__@@@ZEA DQ 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZEA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZEA DQ 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA
_BSS	SEGMENT
?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA DQ 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PEAVCComModule@1@EA
_BSS	SEGMENT
?_pModule@ATL@@3PEAVCComModule@1@EA DQ 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PEAUIAtlAutoThreadModule@1@EA
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PEAUIAtlAutoThreadModule@1@EA DQ 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT IID_IInternalConnection
CONST	SEGMENT
IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT IID_IAxWinAmbientDispatch
CONST	SEGMENT
IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT IID_IAxWinHostWindowLic
CONST	SEGMENT
IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT IID_IAxWinHostWindow
CONST	SEGMENT
IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT IID_IRegistrar
CONST	SEGMENT
IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT CLSID_Registrar
CONST	SEGMENT
CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@
CONST	SEGMENT
??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'I', 00H, 'S', 00H, 'A', 00H, 'P', 00H, 'I', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@
CONST	SEGMENT
??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@
CONST	SEGMENT
??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@
CONST	SEGMENT
??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'U', 00H, 't', 00H, 'i', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@
CONST	SEGMENT
??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@
CONST	SEGMENT
??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ DB 'D', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 't', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QEB_WEB
CONST	SEGMENT
?szDelete@ATL@@3QEB_WEB DQ FLAT:??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@
CONST	SEGMENT
??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ DB 'N', 00H, 'o'
	DB	00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QEB_WEB
CONST	SEGMENT
?szNoRemove@ATL@@3QEB_WEB DQ FLAT:??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@
CONST	SEGMENT
??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ DB 'F'
	DB	00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QEB_WEB
CONST	SEGMENT
?szForceRemove@ATL@@3QEB_WEB DQ FLAT:??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@ DB 'V', 00H, 'a', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QEB_WEB
CONST	SEGMENT
?szValToken@ATL@@3QEB_WEB DQ FLAT:??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_13OPKGLAFF@?$AAB@
CONST	SEGMENT
??_C@_13OPKGLAFF@?$AAB@ DB 'B', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QEB_WEB
CONST	SEGMENT
?szBinaryVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13OPKGLAFF@?$AAB@ ; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ??_C@_13MKMNOPIJ@?$AAD@
CONST	SEGMENT
??_C@_13MKMNOPIJ@?$AAD@ DB 'D', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QEB_WEB
CONST	SEGMENT
?szDwordVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13MKMNOPIJ@?$AAD@ ; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_13LHMFKAAD@?$AAM@
CONST	SEGMENT
??_C@_13LHMFKAAD@?$AAM@ DB 'M', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@
CONST	SEGMENT
??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'i'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QEB_WEB
CONST	SEGMENT
?multiszStringVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13LHMFKAAD@?$AAM@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_13HADIAKP@?$AAS@
CONST	SEGMENT
??_C@_13HADIAKP@?$AAS@ DB 'S', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QEB_WEB
CONST	SEGMENT
?szStringVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13HADIAKP@?$AAS@ ; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3_WB
CONST	SEGMENT
?chEquals@ATL@@3_WB DW 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3_WB
CONST	SEGMENT
?chQuote@ATL@@3_WB DW 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3_WB
CONST	SEGMENT
?chLeftBracket@ATL@@3_WB DW 07bH			; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3_WB
CONST	SEGMENT
?chRightBracket@ATL@@3_WB DW 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3_WB
CONST	SEGMENT
?chDirSep@ATL@@3_WB DW 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@
CONST	SEGMENT
??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@
CONST	SEGMENT
??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
CONST	SEGMENT
??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@
CONST	SEGMENT
??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@
CONST	SEGMENT
??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'I', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@
CONST	SEGMENT
??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'D', 00H, 'B', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'v'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@
CONST	SEGMENT
??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'D', 00H, 'B', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@
CONST	SEGMENT
??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o'
	DB	00H, 'l', 00H, 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@
CONST	SEGMENT
??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@
CONST	SEGMENT
??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@
CONST	SEGMENT
??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'Q', 00H, 'I', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@
CONST	SEGMENT
??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@
CONST	SEGMENT
??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT __pobjMapEntryLast
ATL$__z	SEGMENT
__pobjMapEntryLast DQ 0000000000000000H
ATL$__z	ENDS
;	COMDAT __pobjMapEntryFirst
ATL$__a	SEGMENT
__pobjMapEntryFirst DQ 0000000000000000H
ATL$__a	ENDS
;	COMDAT LIBID_ATLLib
CONST	SEGMENT
LIBID_ATLLib DD	044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YAXPEAX_K1P6AX0@Z@Z			; `vector destructor iterator'
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	??0CAtlComModule@ATL@@QEAA@XZ			; ATL::CAtlComModule::CAtlComModule
PUBLIC	?Term@CAtlComModule@ATL@@QEAAXXZ		; ATL::CAtlComModule::Term
PUBLIC	??0CAtlWinModule@ATL@@QEAA@XZ			; ATL::CAtlWinModule::CAtlWinModule
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z		; OposVariant::SetVARIANT_BOOL
PUBLIC	?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z ; OposVariant::SetVARIANT_BOOL_Ptr
PUBLIC	?GetLONG@OposVariant@@QEAAJXZ			; OposVariant::GetLONG
PUBLIC	?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z	; OposVariant::ChangeLONG
PUBLIC	?SetLONG@OposVariant@@QEAAXJ@Z			; OposVariant::SetLONG
PUBLIC	?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z	; OposVariant::SetLONG_Ptr
PUBLIC	?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z ; OposVariant::ChangeCURRENCY
PUBLIC	?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z	; OposVariant::SetCURRENCY
PUBLIC	?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z ; OposVariant::SetCURRENCY_Ptr
PUBLIC	?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z	; OposVariant::ChangeBSTR
PUBLIC	?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z		; OposVariant::SetBSTR
PUBLIC	?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z	; OposVariant::SetBSTR_Copy
PUBLIC	?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ; OposVariant::SetBSTR_OutPtr
PUBLIC	?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ; OposVariant::SetBSTR_InOutPtr
PUBLIC	?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z ; OposVariant::SetVARIANT
PUBLIC	?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z ; OposVariant::SetVARIANT_Ptr
PUBLIC	?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z	; OposVariant::SetString
PUBLIC	?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z ; OposVariant::SetDispatch_Ptr
PUBLIC	??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z	; OposDispParms::OposDispParms
PUBLIC	??1OposDispParms@@QEAA@XZ			; OposDispParms::~OposDispParms
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	?_AtlComModule@ATL@@3VCAtlComModule@1@A		; ATL::_AtlComModule
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	??_C@_11LOCGONAA@@				; `string'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPEAX_K@Z:PROC				; operator delete[]
EXTRN	atexit:PROC
EXTRN	free:PROC
EXTRN	__imp_DecodePointer:PROC
EXTRN	__imp_RaiseException:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_InitializeCriticalSectionEx:PROC
EXTRN	__imp_DeleteCriticalSection:PROC
EXTRN	__imp_UnregisterClassW:PROC
EXTRN	__imp_SysAllocString:PROC
EXTRN	__imp_SysAllocStringLen:PROC
EXTRN	__imp_SysFreeString:PROC
EXTRN	__imp_SysStringLen:PROC
EXTRN	__imp_VariantClear:PROC
EXTRN	__imp_VariantCopyInd:PROC
EXTRN	__imp_VariantChangeType:PROC
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ?_AtlComModule@ATL@@3VCAtlComModule@1@A
_BSS	SEGMENT
?_AtlComModule@ATL@@3VCAtlComModule@1@A DB 048H DUP (?)	; ATL::_AtlComModule
_BSS	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 048H DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN12
	DD	imagerel $LN12+72
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_I@YAXPEAX_K1P6AX0@Z@Z DD imagerel $LN12
	DD	imagerel $LN12+79
	DD	imagerel $unwind$??_I@YAXPEAX_K1P6AX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Init@CComCriticalSection@ATL@@QEAAJXZ DD imagerel $LN9
	DD	imagerel $LN9+51
	DD	imagerel $unwind$?Init@CComCriticalSection@ATL@@QEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Term@CComCriticalSection@ATL@@QEAAJXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?Term@CComCriticalSection@ATL@@QEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+40
	DD	imagerel $unwind$??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAXXZ DD imagerel $LN12
	DD	imagerel $LN12+40
	DD	imagerel $unwind$?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAAEAGH@Z DD imagerel $LN7
	DD	imagerel $LN7+44
	DD	imagerel $unwind$??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_ATL_WIN_MODULE70@ATL@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+42
	DD	imagerel $unwind$??1_ATL_WIN_MODULE70@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtlWinModuleInit@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@@Z DD imagerel $LN15
	DD	imagerel $LN15+76
	DD	imagerel $unwind$?AtlWinModuleInit@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z DD imagerel $LN35
	DD	imagerel $LN35+176
	DD	imagerel $unwind$?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CAtlComModule@ATL@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+127
	DD	imagerel $unwind$??0CAtlComModule@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Term@CAtlComModule@ATL@@QEAAXXZ DD imagerel $LN16
	DD	imagerel $LN16+111
	DD	imagerel $unwind$?Term@CAtlComModule@ATL@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_AtlComModule@ATL@@YAXXZ DD imagerel ??__E_AtlComModule@ATL@@YAXXZ
	DD	imagerel ??__E_AtlComModule@ATL@@YAXXZ+32
	DD	imagerel $unwind$??__E_AtlComModule@ATL@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CAtlWinModule@ATL@@QEAA@XZ DD imagerel $LN24
	DD	imagerel $LN24+107
	DD	imagerel $unwind$??0CAtlWinModule@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CAtlWinModule@ATL@@QEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+54
	DD	imagerel $unwind$??1CAtlWinModule@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_AtlWinModule@ATL@@YAXXZ DD imagerel ??__E_AtlWinModule@ATL@@YAXXZ
	DD	imagerel ??__E_AtlWinModule@ATL@@YAXXZ+32
	DD	imagerel $unwind$??__E_AtlWinModule@ATL@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__F_AtlWinModule@ATL@@YAXXZ DD imagerel ??__F_AtlWinModule@ATL@@YAXXZ
	DD	imagerel ??__F_AtlWinModule@ATL@@YAXXZ+67
	DD	imagerel $unwind$??__F_AtlWinModule@ATL@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z DD imagerel $LN25
	DD	imagerel $LN25+164
	DD	imagerel $unwind$??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z DD imagerel $LN6
	DD	imagerel $LN6+55
	DD	imagerel $unwind$?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+75
	DD	imagerel $unwind$?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetLONG@OposVariant@@QEAAJXZ DD imagerel $LN4
	DD	imagerel $LN4+33
	DD	imagerel $unwind$?GetLONG@OposVariant@@QEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z DD imagerel $LN6
	DD	imagerel $LN6+92
	DD	imagerel $unwind$?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetLONG@OposVariant@@QEAAXJ@Z DD imagerel $LN6
	DD	imagerel $LN6+47
	DD	imagerel $unwind$?SetLONG@OposVariant@@QEAAXJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+75
	DD	imagerel $unwind$?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+94
	DD	imagerel $unwind$?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+75
	DD	imagerel $unwind$?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z DD imagerel $LN6
	DD	imagerel $LN6+94
	DD	imagerel $unwind$?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+61
	DD	imagerel $unwind$?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+110
	DD	imagerel $unwind$?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z DD imagerel $LN5
	DD	imagerel $LN5+28
	DD	imagerel $unwind$?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z DD imagerel $LN7
	DD	imagerel $LN7+79
	DD	imagerel $unwind$?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z DD imagerel $LN9
	DD	imagerel $LN9+110
	DD	imagerel $unwind$?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z DD imagerel $LN11
	DD	imagerel $LN11+125
	DD	imagerel $unwind$?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+99
	DD	imagerel $unwind$?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+88
	DD	imagerel $unwind$?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z DD imagerel $LN11
	DD	imagerel $LN11+168
	DD	imagerel $unwind$??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1OposDispParms@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+22
	DD	imagerel $unwind$??1OposDispParms@@QEAA@XZ
pdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlComModule$initializer$@ATL@@3P6AXXZEA DQ FLAT:??__E_AtlComModule@ATL@@YAXXZ ; ATL::_AtlComModule$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1OposDispParms@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z DD 0a1901H
	DD	097419H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	0e0153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetLONG@OposVariant@@QEAAXJ@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetLONG@OposVariant@@QEAAJXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z DD 0a1901H
	DD	097419H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	0e0153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__F_AtlWinModule@ATL@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_AtlWinModule@ATL@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CAtlWinModule@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CAtlWinModule@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_AtlComModule@ATL@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Term@CAtlComModule@ATL@@QEAAXXZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CAtlComModule@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtlWinModuleInit@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_ATL_WIN_MODULE70@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAAEAGH@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Term@CComCriticalSection@ATL@@QEAAJXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Init@CComCriticalSection@ATL@@QEAAJXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_I@YAXPEAX_K1P6AX0@Z@Z DD 081901H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 081901H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	070153219H
xdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlWinModule$initializer$@ATL@@3P6AXXZEA DQ FLAT:??__E_AtlWinModule@ATL@@YAXXZ ; ATL::_AtlWinModule$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ??1OposDispParms@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1OposDispParms@@QEAA@XZ PROC				; OposDispParms::~OposDispParms, COMDAT

; 427  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 428  :     // If we allocated some variables, delete them.
; 429  :     if (rgvarg)

  00004	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00007	48 85 c9	 test	 rcx, rcx
  0000a	74 05		 je	 SHORT $LN2@OposDispPa

; 430  :         delete [] rgvarg;

  0000c	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN2@OposDispPa:

; 431  : }

  00011	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00015	c3		 ret	 0
??1OposDispParms@@QEAA@XZ ENDP				; OposDispParms::~OposDispParms
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z
_TEXT	SEGMENT
this$ = 48
pVars$ = 56
nVars$ = 64
??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z PROC	; OposDispParms::OposDispParms, COMDAT

; 396  : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 397  :     // Initialize the DISPPARAMS to empty.
; 398  :     rgvarg = 0;

  0000f	48 83 21 00	 and	 QWORD PTR [rcx], 0
  00013	48 8b f2	 mov	 rsi, rdx

; 399  :     rgdispidNamedArgs = 0;

  00016	48 83 61 08 00	 and	 QWORD PTR [rcx+8], 0
  0001b	48 8b d9	 mov	 rbx, rcx

; 400  :     cArgs = 0;

  0001e	83 61 10 00	 and	 DWORD PTR [rcx+16], 0

; 401  :     cNamedArgs = 0;

  00022	83 61 14 00	 and	 DWORD PTR [rcx+20], 0
  00026	49 63 f8	 movsxd	 rdi, r8d

; 402  : 
; 403  :     // If some variables and we successfully allocate memory...
; 404  :     if ( nVars != 0 && ( rgvarg = new VARIANT[nVars] ) != 0 )

  00029	45 85 c0	 test	 r8d, r8d
  0002c	74 67		 je	 SHORT $LN3@OposDispPa
  0002e	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00035	b8 18 00 00 00	 mov	 eax, 24
  0003a	48 f7 e7	 mul	 rdi
  0003d	48 0f 40 c1	 cmovo	 rax, rcx
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  00049	48 89 03	 mov	 QWORD PTR [rbx], rax
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 44		 je	 SHORT $LN3@OposDispPa

; 408  :         // Copy OposVariant array elements to the VARIANT array.
; 409  :         //  - For [in] arguments, this will copy the type (VT_BOOL, VT_I4, VT_CY, VT_BSTR) and
; 410  :         //      its corresponding data. Note that for VT_BSTR, the data is a system string pointer.
; 411  :         //  - For [out] or [in,out] arguments, this will copy the type (VT_BYREF ORed with one
; 412  :         //      of the above 4 types) and the corresponding pointer to data.
; 413  :         //       * For VT_BYREF|VT_BOOL, VT_BYREF|VT_I4, and VT_BYREF|VT_CY, the pointer is to a primitive type.
; 414  :         //       * For VT_BYREF|VT_BSTR, the pointer is to a system string pointer.
; 415  :         //      If the function that is called (in a SO method or App event) changes the VARIANT,
; 416  :         //      it does so by updating the data that is pointed to -- which is the pointer that
; 417  :         //      was set by the OposVariant::Set...Ptr call.
; 418  :         // Because of the above, we must not call VariantClear on destruction of our class instance,
; 419  :         //   since that would delete the original OposVariant's data for VT_BSTR ([in]) and for
; 420  :         //   the VT_BYREF types ([out] and [in,out]).
; 421  :         while ( --nVars >= 0 )

  00051	8d 47 ff	 lea	 eax, DWORD PTR [rdi-1]
  00054	89 7b 10	 mov	 DWORD PTR [rbx+16], edi
  00057	48 63 d0	 movsxd	 rdx, eax
  0005a	85 c0		 test	 eax, eax
  0005c	78 37		 js	 SHORT $LN3@OposDispPa

; 405  :     {
; 406  :         // Set variable count.
; 407  :         cArgs = nVars;

  0005e	4c 8d 04 52	 lea	 r8, QWORD PTR [rdx+rdx*2]
  00062	48 8b ca	 mov	 rcx, rdx
  00065	49 c1 e0 03	 shl	 r8, 3
  00069	48 c1 e1 05	 shl	 rcx, 5
  0006d	48 03 ce	 add	 rcx, rsi
$LL2@OposDispPa:

; 408  :         // Copy OposVariant array elements to the VARIANT array.
; 409  :         //  - For [in] arguments, this will copy the type (VT_BOOL, VT_I4, VT_CY, VT_BSTR) and
; 410  :         //      its corresponding data. Note that for VT_BSTR, the data is a system string pointer.
; 411  :         //  - For [out] or [in,out] arguments, this will copy the type (VT_BYREF ORed with one
; 412  :         //      of the above 4 types) and the corresponding pointer to data.
; 413  :         //       * For VT_BYREF|VT_BOOL, VT_BYREF|VT_I4, and VT_BYREF|VT_CY, the pointer is to a primitive type.
; 414  :         //       * For VT_BYREF|VT_BSTR, the pointer is to a system string pointer.
; 415  :         //      If the function that is called (in a SO method or App event) changes the VARIANT,
; 416  :         //      it does so by updating the data that is pointed to -- which is the pointer that
; 417  :         //      was set by the OposVariant::Set...Ptr call.
; 418  :         // Because of the above, we must not call VariantClear on destruction of our class instance,
; 419  :         //   since that would delete the original OposVariant's data for VT_BSTR ([in]) and for
; 420  :         //   the VT_BYREF types ([out] and [in,out]).
; 421  :         while ( --nVars >= 0 )

  00070	48 83 ea 01	 sub	 rdx, 1

; 422  :             rgvarg[nVars] = pVars[nVars];

  00074	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00077	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0007a	48 8d 49 e0	 lea	 rcx, QWORD PTR [rcx-32]
  0007e	41 0f 11 04 00	 movups	 XMMWORD PTR [r8+rax], xmm0
  00083	4d 8d 40 e8	 lea	 r8, QWORD PTR [r8-24]
  00087	f2 0f 10 49 30	 movsd	 xmm1, QWORD PTR [rcx+48]
  0008c	f2 41 0f 11 4c
	00 28		 movsd	 QWORD PTR [r8+rax+40], xmm1
  00093	79 db		 jns	 SHORT $LL2@OposDispPa
$LN3@OposDispPa:

; 423  :     }
; 424  : }

  00095	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0009a	48 8b c3	 mov	 rax, rbx
  0009d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a6	5f		 pop	 rdi
  000a7	c3		 ret	 0
??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z ENDP	; OposDispParms::OposDispParms
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z
_TEXT	SEGMENT
this$ = 48
pSrc$ = 56
hr$ = 64
?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z PROC ; OposVariant::SetDispatch_Ptr, COMDAT

; 373  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 373  : {

  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 377  :     if ( pSrc == 0 )

  00022	48 85 ff	 test	 rdi, rdi
  00025	75 08		 jne	 SHORT $LN2@SetDispatc

; 378  :         hr = E_POINTER;

  00027	c7 06 03 40 00
	80		 mov	 DWORD PTR [rsi], -2147467261 ; ffffffff80004003H
  0002d	eb 19		 jmp	 SHORT $LN3@SetDispatc
$LN2@SetDispatc:

; 379  : 
; 380  :     // Set the variant, plus set flag so that the pointer is released by destructor.
; 381  :     else
; 382  :     {
; 383  :         vt = VT_DISPATCH;

  0002f	b8 09 00 00 00	 mov	 eax, 9

; 384  :         pdispVal = pSrc;

  00034	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
  00038	66 89 03	 mov	 WORD PTR [rbx], ax

; 385  :         pSrc->AddRef();

  0003b	48 8b cf	 mov	 rcx, rdi
  0003e	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00041	ff 50 08	 call	 QWORD PTR [rax+8]

; 386  :         _bNeedClear = true;

  00044	c6 43 18 01	 mov	 BYTE PTR [rbx+24], 1
$LN3@SetDispatc:

; 387  :     }
; 388  : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z ENDP ; OposVariant::SetDispatch_Ptr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z
_TEXT	SEGMENT
this$ = 48
lpszSrc$ = 56
hr$ = 64
?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z PROC		; OposVariant::SetString, COMDAT

; 350  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 350  : {

  00016	48 8b da	 mov	 rbx, rdx
  00019	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 354  :     bstrVal = SysAllocString(

  00022	48 85 db	 test	 rbx, rbx
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_11LOCGONAA@@
  0002c	48 0f 45 cb	 cmovne	 rcx, rbx
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysAllocString
  00036	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 355  :         lpszSrc ? lpszSrc : L"" );  // Source string, or empty string if NULL.
; 356  : 
; 357  :     // Set HRESULT if failed.
; 358  :     if ( NULL == bstrVal )

  0003a	48 85 c0	 test	 rax, rax
  0003d	75 08		 jne	 SHORT $LN2@SetString

; 359  :         hr = E_OUTOFMEMORY;

  0003f	c7 06 0e 00 07
	80		 mov	 DWORD PTR [rsi], -2147024882 ; ffffffff8007000eH
  00045	eb 0c		 jmp	 SHORT $LN3@SetString
$LN2@SetString:

; 360  :     // Otherwise set variant type, plus set flag so that the BSTR is deleted by destructor.
; 361  :     else
; 362  :     {
; 363  :         vt = VT_BSTR;

  00047	b8 08 00 00 00	 mov	 eax, 8

; 364  :         _bNeedClear = true;

  0004c	c6 47 18 01	 mov	 BYTE PTR [rdi+24], 1
  00050	66 89 07	 mov	 WORD PTR [rdi], ax
$LN3@SetString:

; 365  :     }
; 366  : }

  00053	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00058	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z ENDP		; OposVariant::SetString
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z
_TEXT	SEGMENT
this$ = 48
pvar$ = 56
Type$ = 64
hr$ = 72
?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z PROC ; OposVariant::SetVARIANT_Ptr, COMDAT

; 323  : {

$LN11:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00019	45 33 f6	 xor	 r14d, r14d
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 323  : {

  0001c	49 8b f1	 mov	 rsi, r9
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001f	44 88 71 18	 mov	 BYTE PTR [rcx+24], r14b
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 323  : {

  00023	41 0f b7 e8	 movzx	 ebp, r8w
  00027	48 8b da	 mov	 rbx, rdx
  0002a	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 327  :     if ( pvar->vt == VT_EMPTY )

  00033	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00036	0f b7 0a	 movzx	 ecx, WORD PTR [rdx]
  00039	66 85 c9	 test	 cx, cx
  0003c	74 24		 je	 SHORT $LN5@SetVARIANT

; 328  :         ;
; 329  : 
; 330  :     // If type matches (ignoring the BYREF flag), then copy the variant.
; 331  :     //   Strips the BYREF if present.
; 332  :     else if ( ( pvar->vt & ~VT_BYREF ) == Type )

  0003e	0f ba f1 0e	 btr	 ecx, 14
  00042	66 3b cd	 cmp	 cx, bp
  00045	75 15		 jne	 SHORT $LN4@SetVARIANT

; 333  :     {
; 334  :         HRESULT hrTmp = VariantCopyInd( this, pvar );

  00047	48 8b cf	 mov	 rcx, rdi
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantCopyInd

; 335  :         if ( FAILED(hrTmp) )

  00050	85 c0		 test	 eax, eax
  00052	79 02		 jns	 SHORT $LN6@SetVARIANT

; 336  :             hr = hrTmp;

  00054	89 06		 mov	 DWORD PTR [rsi], eax
$LN6@SetVARIANT:

; 337  :         _bNeedClear = true;

  00056	c6 47 18 01	 mov	 BYTE PTR [rdi+24], 1

; 338  :     }

  0005a	eb 06		 jmp	 SHORT $LN5@SetVARIANT
$LN4@SetVARIANT:

; 339  : 
; 340  :     // If type doesn't match, then return failure.
; 341  :     else
; 342  :         hr = E_INVALIDARG;

  0005c	c7 06 57 00 07
	80		 mov	 DWORD PTR [rsi], -2147024809 ; ffffffff80070057H
$LN5@SetVARIANT:

; 343  : }

  00062	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00067	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00071	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	41 5e		 pop	 r14
  0007c	c3		 ret	 0
?SetVARIANT_Ptr@OposVariant@@QEAAXAEAPEAUtagVARIANT@@GAEAJ@Z ENDP ; OposVariant::SetVARIANT_Ptr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z
_TEXT	SEGMENT
this$ = 48
var$ = 56
Type$ = 64
hr$ = 72
?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z PROC ; OposVariant::SetVARIANT, COMDAT

; 305  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f1	 mov	 rsi, r9
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00017	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 305  : {

  0001b	41 0f b7 d8	 movzx	 ebx, r8w
  0001f	48 8b ea	 mov	 rbp, rdx
  00022	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 310  :     if ( ( var.vt & ~VT_BYREF ) == Type )

  0002b	44 0f b7 55 00	 movzx	 r10d, WORD PTR [rbp]
  00030	41 0f ba f2 0e	 btr	 r10d, 14
  00035	66 44 3b d3	 cmp	 r10w, bx
  00039	75 18		 jne	 SHORT $LN2@SetVARIANT

; 311  :     {
; 312  :         HRESULT hrTmp = VariantCopyInd( this, &var );

  0003b	48 8b d5	 mov	 rdx, rbp
  0003e	48 8b cf	 mov	 rcx, rdi
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantCopyInd

; 313  :         if ( FAILED(hrTmp) )

  00047	85 c0		 test	 eax, eax
  00049	79 02		 jns	 SHORT $LN4@SetVARIANT

; 314  :             hr = hrTmp;

  0004b	89 06		 mov	 DWORD PTR [rsi], eax
$LN4@SetVARIANT:

; 315  :         _bNeedClear = true;

  0004d	c6 47 18 01	 mov	 BYTE PTR [rdi+24], 1

; 316  :     }

  00051	eb 06		 jmp	 SHORT $LN3@SetVARIANT
$LN2@SetVARIANT:

; 317  :     // If type doesn't match, then return failure.
; 318  :     else
; 319  :         hr = E_INVALIDARG;

  00053	c7 06 57 00 07
	80		 mov	 DWORD PTR [rsi], -2147024809 ; ffffffff80070057H
$LN3@SetVARIANT:

; 320  : }

  00059	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00063	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
?SetVARIANT@OposVariant@@QEAAXAEAUtagVARIANT@@GAEAJ@Z ENDP ; OposVariant::SetVARIANT
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z
_TEXT	SEGMENT
this$ = 48
pbstrSrc$ = 56
hr$ = 64
?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z PROC ; OposVariant::SetBSTR_InOutPtr, COMDAT

; 284  : {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 284  : {

  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 288  :     if ( pbstrSrc == 0 )

  00022	48 85 ff	 test	 rdi, rdi
  00025	75 0a		 jne	 SHORT $LN2@SetBSTR_In

; 289  :     {
; 290  :         hr = E_POINTER;

  00027	c7 06 03 40 00
	80		 mov	 DWORD PTR [rsi], -2147467261 ; ffffffff80004003H

; 291  :         return false;

  0002d	32 c0		 xor	 al, al
  0002f	eb 0e		 jmp	 SHORT $LN1@SetBSTR_In
$LN2@SetBSTR_In:

; 292  :     }
; 293  : 
; 294  :     // Set the variant.
; 295  :     vt = VT_BYREF | VT_BSTR;

  00031	b8 08 40 00 00	 mov	 eax, 16392		; 00004008H

; 296  :     pbstrVal = pbstrSrc;

  00036	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
  0003a	66 89 03	 mov	 WORD PTR [rbx], ax

; 297  :     return true;

  0003d	b0 01		 mov	 al, 1
$LN1@SetBSTR_In:

; 298  : }

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ENDP ; OposVariant::SetBSTR_InOutPtr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z
_TEXT	SEGMENT
this$ = 48
pbstrSrc$ = 56
hr$ = 64
?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z PROC	; OposVariant::SetBSTR_OutPtr, COMDAT

; 270  : {

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 271  :     // Perform the in/out work first.
; 272  :     bool bRC = SetBSTR_InOutPtr( pbstrSrc, hr );

  00009	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 273  : 
; 274  :     // If succeeded, then ensure that the BSTR* points to zero:
; 275  :     //   This relieves subsequent code from needing to know out vs. in/out,
; 276  :     //   so that they won't wrongly try to reallocate an out.
; 277  :     if (bRC)

  0000e	84 c0		 test	 al, al
  00010	74 04		 je	 SHORT $LN2@SetBSTR_Ou

; 278  :         *pbstrSrc = 0;

  00012	48 83 23 00	 and	 QWORD PTR [rbx], 0
$LN2@SetBSTR_Ou:

; 279  : 
; 280  :     return bRC;
; 281  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
?SetBSTR_OutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ENDP	; OposVariant::SetBSTR_OutPtr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z
_TEXT	SEGMENT
this$ = 48
bstrSrc$ = 56
hr$ = 64
?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z PROC	; OposVariant::SetBSTR_Copy, COMDAT

; 248  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 248  : {

  00016	48 8b da	 mov	 rbx, rdx
  00019	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 252  :     bstrVal = SysAllocStringLen(

  00022	48 8b cb	 mov	 rcx, rbx
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysStringLen
  0002b	48 85 db	 test	 rbx, rbx
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_11LOCGONAA@@
  00035	8b d0		 mov	 edx, eax
  00037	48 0f 45 cb	 cmovne	 rcx, rbx
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysAllocStringLen
  00041	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax

; 253  :            bstrSrc ? bstrSrc : L"",     // Source string, or empty string if NULL.
; 254  :            SysStringLen(bstrSrc) );     // Length of string; will return zero if NULL.
; 255  : 
; 256  :     // Set HRESULT if failed.
; 257  :     if ( NULL == bstrVal )

  00045	48 85 c0	 test	 rax, rax
  00048	75 08		 jne	 SHORT $LN2@SetBSTR_Co

; 258  :         hr = E_OUTOFMEMORY;

  0004a	c7 06 0e 00 07
	80		 mov	 DWORD PTR [rsi], -2147024882 ; ffffffff8007000eH
  00050	eb 0c		 jmp	 SHORT $LN3@SetBSTR_Co
$LN2@SetBSTR_Co:

; 259  :     // Otherwise set variant type, plus set flag so that the BSTR is deleted by destructor.
; 260  :     else
; 261  :     {
; 262  :         vt = VT_BSTR;

  00052	b8 08 00 00 00	 mov	 eax, 8

; 263  :         _bNeedClear = true;

  00057	c6 47 18 01	 mov	 BYTE PTR [rdi+24], 1
  0005b	66 89 07	 mov	 WORD PTR [rdi], ax
$LN3@SetBSTR_Co:

; 264  :     }
; 265  : }

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z ENDP	; OposVariant::SetBSTR_Copy
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z
_TEXT	SEGMENT
this$ = 48
bstrSrc$ = 56
hr$ = 64
?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z PROC		; OposVariant::SetBSTR, COMDAT

; 227  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx
  0000d	48 8b d9	 mov	 rbx, rcx

; 228  :     // If non-NULL BSTR, then just pass BSTR in the variant.
; 229  :     //   _bNeedClear flag remains off because we are not responsible
; 230  :     //   for deleting the BSTR.
; 231  :     if ( bstrSrc != 0 )

  00010	48 85 d2	 test	 rdx, rdx
  00013	74 18		 je	 SHORT $LN2@SetBSTR
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00015	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 234  :         vt = VT_BSTR;

  0001f	b8 08 00 00 00	 mov	 eax, 8

; 235  :         bstrVal = bstrSrc;

  00024	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
  00028	66 89 03	 mov	 WORD PTR [rbx], ax

; 236  :     }

  0002b	eb 05		 jmp	 SHORT $LN3@SetBSTR
$LN2@SetBSTR:

; 237  : 
; 238  :     // If NULL BSTR, call function so that zero-length BSTR is passed.
; 239  :     //   This may prevent a lazy/bad service objects from causing GPF,
; 240  :     //   in case they don't check each BSTR for NULL.
; 241  :     else
; 242  :         SetBSTR_Copy( 0, hr );

  0002d	e8 00 00 00 00	 call	 ?SetBSTR_Copy@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR_Copy
$LN3@SetBSTR:

; 243  : }

  00032	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ENDP		; OposVariant::SetBSTR
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z
_TEXT	SEGMENT
var$1 = 32
this$ = 80
pbstrSrc$ = 88
hr$ = 96
?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z PROC	; OposVariant::ChangeBSTR, COMDAT

; 206  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 207  :     // Validate that the parameter is not NULL.
; 208  :     if ( pbstrSrc == 0 )

  0000f	33 db		 xor	 ebx, ebx
  00011	49 8b f8	 mov	 rdi, r8
  00014	48 8b f2	 mov	 rsi, rdx
  00017	48 85 d2	 test	 rdx, rdx
  0001a	75 09		 jne	 SHORT $LN2@ChangeBSTR

; 209  :         hr = E_POINTER;

  0001c	41 c7 00 03 40
	00 80		 mov	 DWORD PTR [r8], -2147467261 ; ffffffff80004003H
  00023	eb 29		 jmp	 SHORT $LN3@ChangeBSTR
$LN2@ChangeBSTR:

; 210  : 
; 211  :     // If pointer OK, set it after trying to coerce variant.
; 212  :     else
; 213  :     {
; 214  :         // Try to coerce variant to a new variant of type BSTR.
; 215  :         VARIANT var;
; 216  :         var.vt = VT_EMPTY;
; 217  :         hr = VariantChangeType(

  00025	48 8b d1	 mov	 rdx, rcx
  00028	66 89 5c 24 20	 mov	 WORD PTR var$1[rsp], bx
  0002d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR var$1[rsp]
  00032	41 b9 08 00 00
	00		 mov	 r9d, 8
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantChangeType

; 218  :             &var, static_cast<VARIANT*>(this), 0, VT_BSTR );
; 219  :         // If coercion was successful, then update to the BSTR; else set to NULL.
; 220  :         *pbstrSrc = ( hr == S_OK ) ? var.bstrVal : 0;

  00041	85 c0		 test	 eax, eax
  00043	89 07		 mov	 DWORD PTR [rdi], eax
  00045	48 0f 44 5c 24
	28		 cmove	 rbx, QWORD PTR var$1[rsp+8]
  0004b	48 89 1e	 mov	 QWORD PTR [rsi], rbx
$LN3@ChangeBSTR:

; 221  :     }
; 222  : }

  0004e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00053	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00058	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z ENDP	; OposVariant::ChangeBSTR
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z
_TEXT	SEGMENT
this$ = 48
pcySrc$ = 56
hr$ = 64
?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z PROC ; OposVariant::SetCURRENCY_Ptr, COMDAT

; 185  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 185  : {

  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 189  :     if ( pcySrc == 0 )

  00022	48 85 ff	 test	 rdi, rdi
  00025	75 08		 jne	 SHORT $LN2@SetCURRENC

; 190  :         hr = E_POINTER;

  00027	c7 06 03 40 00
	80		 mov	 DWORD PTR [rsi], -2147467261 ; ffffffff80004003H
  0002d	eb 0c		 jmp	 SHORT $LN3@SetCURRENC
$LN2@SetCURRENC:

; 191  : 
; 192  :     // Set the variant.
; 193  :     else
; 194  :     {
; 195  :         vt = VT_BYREF | VT_CY;

  0002f	b8 06 40 00 00	 mov	 eax, 16390		; 00004006H

; 196  :         pcyVal = pcySrc;

  00034	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
  00038	66 89 03	 mov	 WORD PTR [rbx], ax
$LN3@SetCURRENC:

; 197  :     }
; 198  : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
?SetCURRENCY_Ptr@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z ENDP ; OposVariant::SetCURRENCY_Ptr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z
_TEXT	SEGMENT
this$ = 48
cySrc$ = 56
?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z PROC		; OposVariant::SetCURRENCY, COMDAT

; 176  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0000d	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 176  : {

  00011	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 178  :     vt = VT_CY;

  0001a	b8 06 00 00 00	 mov	 eax, 6

; 179  :     cyVal = cySrc;

  0001f	48 89 5f 08	 mov	 QWORD PTR [rdi+8], rbx

; 180  : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	66 89 07	 mov	 WORD PTR [rdi], ax
  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?SetCURRENCY@OposVariant@@QEAAXTtagCY@@@Z ENDP		; OposVariant::SetCURRENCY
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z
_TEXT	SEGMENT
var$1 = 32
this$ = 80
pcySrc$ = 88
hr$ = 96
?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z PROC ; OposVariant::ChangeCURRENCY, COMDAT

; 152  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 153  :     // Validate that the parameter is not NULL.
; 154  :     if ( pcySrc == 0 )

  0000f	33 db		 xor	 ebx, ebx
  00011	49 8b f8	 mov	 rdi, r8
  00014	48 8b f2	 mov	 rsi, rdx
  00017	48 85 d2	 test	 rdx, rdx
  0001a	75 09		 jne	 SHORT $LN2@ChangeCURR

; 155  :         hr = E_POINTER;

  0001c	41 c7 00 03 40
	00 80		 mov	 DWORD PTR [r8], -2147467261 ; ffffffff80004003H
  00023	eb 29		 jmp	 SHORT $LN4@ChangeCURR
$LN2@ChangeCURR:

; 156  : 
; 157  :     // If pointer OK, set it after trying to coerce variant.
; 158  :     else
; 159  :     {
; 160  :         // Try to coerce variant to a new variant of type CURRENCY (CY).
; 161  :         VARIANT var;
; 162  :         var.vt = VT_EMPTY;
; 163  :         hr = VariantChangeType(

  00025	48 8b d1	 mov	 rdx, rcx
  00028	66 89 5c 24 20	 mov	 WORD PTR var$1[rsp], bx
  0002d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR var$1[rsp]
  00032	41 b9 06 00 00
	00		 mov	 r9d, 6
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantChangeType

; 164  :             &var, static_cast<VARIANT*>(this), 0, VT_CY );
; 165  :         // If coercion was successful, then update to the CURRENCY; else set to zero.
; 166  :         if ( hr == S_OK )

  00041	85 c0		 test	 eax, eax
  00043	89 07		 mov	 DWORD PTR [rdi], eax
  00045	48 0f 44 5c 24
	28		 cmove	 rbx, QWORD PTR var$1[rsp+8]
  0004b	48 89 1e	 mov	 QWORD PTR [rsi], rbx
$LN4@ChangeCURR:

; 167  :             *pcySrc = var.cyVal;
; 168  :         else
; 169  :             pcySrc->int64 = 0;
; 170  :     }
; 171  : }

  0004e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00053	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00058	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
?ChangeCURRENCY@OposVariant@@QEAAXPEATtagCY@@AEAJ@Z ENDP ; OposVariant::ChangeCURRENCY
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z
_TEXT	SEGMENT
this$ = 48
pnSrc$ = 56
hr$ = 64
?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z PROC		; OposVariant::SetLONG_Ptr, COMDAT

; 132  : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 132  : {

  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 136  :     if ( pnSrc == 0 )

  00022	48 85 ff	 test	 rdi, rdi
  00025	75 08		 jne	 SHORT $LN2@SetLONG_Pt

; 137  :         hr = E_POINTER;

  00027	c7 06 03 40 00
	80		 mov	 DWORD PTR [rsi], -2147467261 ; ffffffff80004003H
  0002d	eb 0c		 jmp	 SHORT $LN3@SetLONG_Pt
$LN2@SetLONG_Pt:

; 138  : 
; 139  :     // Set the variant.
; 140  :     else
; 141  :     {
; 142  :         vt = VT_BYREF | VT_I4;

  0002f	b8 03 40 00 00	 mov	 eax, 16387		; 00004003H

; 143  :         plVal = pnSrc;

  00034	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
  00038	66 89 03	 mov	 WORD PTR [rbx], ax
$LN3@SetLONG_Pt:

; 144  :     }
; 145  : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z ENDP		; OposVariant::SetLONG_Ptr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetLONG@OposVariant@@QEAAXJ@Z
_TEXT	SEGMENT
this$ = 48
nSrc$ = 56
?SetLONG@OposVariant@@QEAAXJ@Z PROC			; OposVariant::SetLONG, COMDAT

; 123  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0000c	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 123  : {

  00010	48 8b d9	 mov	 rbx, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 125  :     vt = VT_I4;

  00019	b8 03 00 00 00	 mov	 eax, 3

; 126  :     lVal = nSrc;

  0001e	89 7b 08	 mov	 DWORD PTR [rbx+8], edi
  00021	66 89 03	 mov	 WORD PTR [rbx], ax

; 127  : }

  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
?SetLONG@OposVariant@@QEAAXJ@Z ENDP			; OposVariant::SetLONG
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z
_TEXT	SEGMENT
var$1 = 32
this$ = 80
pLong$ = 88
hr$ = 96
?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z PROC		; OposVariant::ChangeLONG, COMDAT

; 102  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 103  :     // Validate that the parameter is not NULL.
; 104  :     if ( pLong == 0 )

  0000f	33 db		 xor	 ebx, ebx
  00011	49 8b f8	 mov	 rdi, r8
  00014	48 8b f2	 mov	 rsi, rdx
  00017	48 85 d2	 test	 rdx, rdx
  0001a	75 09		 jne	 SHORT $LN2@ChangeLONG

; 105  :         hr = E_POINTER;

  0001c	41 c7 00 03 40
	00 80		 mov	 DWORD PTR [r8], -2147467261 ; ffffffff80004003H
  00023	eb 27		 jmp	 SHORT $LN3@ChangeLONG
$LN2@ChangeLONG:

; 106  : 
; 107  :     // If pointer OK, set it after trying to coerce variant.
; 108  :     else
; 109  :     {
; 110  :         // Try to coerce variant to a new variant of type LONG (I4).
; 111  :         VARIANT var;
; 112  :         var.vt = VT_EMPTY;
; 113  :         hr = VariantChangeType(

  00025	48 8b d1	 mov	 rdx, rcx
  00028	66 89 5c 24 20	 mov	 WORD PTR var$1[rsp], bx
  0002d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR var$1[rsp]
  00032	41 b9 03 00 00
	00		 mov	 r9d, 3
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantChangeType

; 114  :             &var, static_cast<VARIANT*>(this), 0, VT_I4 );
; 115  :         // If coercion was successful, then update to the LONG; else set to zero.
; 116  :         *pLong = ( hr == S_OK ) ? var.lVal : 0;

  00041	85 c0		 test	 eax, eax
  00043	89 07		 mov	 DWORD PTR [rdi], eax
  00045	0f 44 5c 24 28	 cmove	 ebx, DWORD PTR var$1[rsp+8]
  0004a	89 1e		 mov	 DWORD PTR [rsi], ebx
$LN3@ChangeLONG:

; 117  :     }
; 118  : }

  0004c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00051	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00056	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z ENDP		; OposVariant::ChangeLONG
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?GetLONG@OposVariant@@QEAAJXZ
_TEXT	SEGMENT
this$ = 48
nLong$ = 56
hr$ = 64
?GetLONG@OposVariant@@QEAAJXZ PROC			; OposVariant::GetLONG, COMDAT

; 92   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 93   :     LONG nLong = 0;

  00004	83 64 24 38 00	 and	 DWORD PTR nLong$[rsp], 0

; 94   :     HRESULT hr;
; 95   :     ChangeLONG( &nLong, hr );

  00009	4c 8d 44 24 40	 lea	 r8, QWORD PTR hr$[rsp]
  0000e	48 8d 54 24 38	 lea	 rdx, QWORD PTR nLong$[rsp]
  00013	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::ChangeLONG

; 96   :     return nLong;

  00018	8b 44 24 38	 mov	 eax, DWORD PTR nLong$[rsp]

; 97   : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
?GetLONG@OposVariant@@QEAAJXZ ENDP			; OposVariant::GetLONG
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z
_TEXT	SEGMENT
this$ = 48
pbSrc$ = 56
hr$ = 64
?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z PROC	; OposVariant::SetVARIANT_BOOL_Ptr, COMDAT

; 72   : {

$LN8:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00012	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 72   : {

  00016	48 8b fa	 mov	 rdi, rdx
  00019	48 8b d9	 mov	 rbx, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 76   :     if ( pbSrc == 0 )

  00022	48 85 ff	 test	 rdi, rdi
  00025	75 08		 jne	 SHORT $LN2@SetVARIANT

; 77   :         hr = E_POINTER;

  00027	c7 06 03 40 00
	80		 mov	 DWORD PTR [rsi], -2147467261 ; ffffffff80004003H
  0002d	eb 0c		 jmp	 SHORT $LN3@SetVARIANT
$LN2@SetVARIANT:

; 78   : 
; 79   :     // Set the variant.
; 80   :     else
; 81   :     {
; 82   :         vt = VT_BYREF | VT_BOOL;

  0002f	b8 0b 40 00 00	 mov	 eax, 16395		; 0000400bH

; 83   :         pboolVal = pbSrc;

  00034	48 89 7b 08	 mov	 QWORD PTR [rbx+8], rdi
  00038	66 89 03	 mov	 WORD PTR [rbx], ax
$LN3@SetVARIANT:

; 84   :     }
; 85   : }

  0003b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00040	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
?SetVARIANT_BOOL_Ptr@OposVariant@@QEAAXPEAFAEAJ@Z ENDP	; OposVariant::SetVARIANT_BOOL_Ptr
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp
;	COMDAT ?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z
_TEXT	SEGMENT
this$ = 48
bSrc$ = 56
?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z PROC		; OposVariant::SetVARIANT_BOOL, COMDAT

; 63   : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	0f b7 da	 movzx	 ebx, dx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0000d	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 63   : {

  00011	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\Common\OposVariant.cpp

; 65   :     vt = VT_BOOL;

  0001a	b8 0b 00 00 00	 mov	 eax, 11

; 66   :     boolVal = bSrc ? VARIANT_TRUE : VARIANT_FALSE;

  0001f	66 f7 db	 neg	 bx

; 67   : }

  00022	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00027	66 89 07	 mov	 WORD PTR [rdi], ax
  0002a	66 1b c0	 sbb	 ax, ax
  0002d	66 89 47 08	 mov	 WORD PTR [rdi+8], ax
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z ENDP		; OposVariant::SetVARIANT_BOOL
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z PROC ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
$LN25:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	8b ea		 mov	 ebp, edx
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	f6 c2 02	 test	 dl, 2
  00021	74 47		 je	 SHORT $LN2@vector
  00023	48 8d 71 f8	 lea	 rsi, QWORD PTR [rcx-8]
  00027	4c 8b 36	 mov	 r14, QWORD PTR [rsi]
  0002a	49 8b fe	 mov	 rdi, r14
  0002d	48 c1 e7 04	 shl	 rdi, 4
  00031	48 03 f9	 add	 rdi, rcx
  00034	4d 85 f6	 test	 r14, r14
  00037	74 13		 je	 SHORT $LN19@vector
$LL7@vector:
  00039	48 8d 7f f0	 lea	 rdi, QWORD PTR [rdi-16]

; 1674 :     ::SysFreeString(m_str);

  0003d	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysFreeString
  00046	49 83 ee 01	 sub	 r14, 1
  0004a	75 ed		 jne	 SHORT $LL7@vector
$LN19@vector:
  0004c	40 f6 c5 01	 test	 bpl, 1
  00050	74 13		 je	 SHORT $LN3@vector
  00052	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00055	48 8b ce	 mov	 rcx, rsi
  00058	48 c1 e2 04	 shl	 rdx, 4
  0005c	48 83 c2 08	 add	 rdx, 8
  00060	e8 00 00 00 00	 call	 ??_V@YAXPEAX_K@Z	; operator delete[]
$LN3@vector:
  00065	48 8b c6	 mov	 rax, rsi
  00068	eb 1f		 jmp	 SHORT $LN1@vector
$LN2@vector:
  0006a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysFreeString
  00073	40 f6 c5 01	 test	 bpl, 1
  00077	74 0d		 je	 SHORT $LN4@vector
  00079	ba 10 00 00 00	 mov	 edx, 16
  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN4@vector:
  00086	48 8b c3	 mov	 rax, rbx
$LN1@vector:
  00089	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00093	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00098	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	41 5e		 pop	 r14
  000a3	c3		 ret	 0
??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z ENDP ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT

; 1674 :     ::SysFreeString(m_str);

  00000	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_SysFreeString
??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??__F_AtlWinModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlWinModule'', COMDAT
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2957 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

  00004	48 8b 15 08 00
	00 00		 mov	 rdx, QWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+8
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  00012	e8 00 00 00 00	 call	 ?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

  00017	48 8b 0d 38 00
	00 00		 mov	 rcx, QWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+56
  0001e	48 85 c9	 test	 rcx, rcx
  00021	74 0d		 je	 SHORT $LN15@dynamic

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

  00023	e8 00 00 00 00	 call	 free

; 221  : 			m_aT = NULL;

  00028	48 83 25 38 00
	00 00 00	 and	 QWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+56, 0
$LN15@dynamic:

; 222  : 		}
; 223  : 		m_nSize = 0;

  00030	83 25 40 00 00
	00 00		 and	 DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+64, 0

; 224  : 		m_nAllocSize = 0;

  00037	83 25 44 00 00
	00 00		 and	 DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+68, 0
  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
??__F_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlWinModule''
text$yd	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlWinModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlWinModule'', COMDAT

; 2972 : __declspec(selectany) CAtlWinModule _AtlWinModule;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  0000b	e8 00 00 00 00	 call	 ??0CAtlWinModule@ATL@@QEAA@XZ ; ATL::CAtlWinModule::CAtlWinModule
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F_AtlWinModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlWinModule''
  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 atexit
??__E_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlWinModule''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlWinModule@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0CAtlWinModule@ATL@@QEAA@XZ PROC			; ATL::CAtlWinModule::CAtlWinModule, COMDAT

; 2937 : 	CAtlWinModule()

$LN24:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00009	33 c0		 xor	 eax, eax
  0000b	48 83 c1 08	 add	 rcx, 8
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00012	45 33 c0	 xor	 r8d, r8d
  00015	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00017	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  0001a	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
  0001e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

  00022	48 21 43 38	 and	 QWORD PTR [rbx+56], rax
  00026	21 43 40	 and	 DWORD PTR [rbx+64], eax
  00029	21 43 44	 and	 DWORD PTR [rbx+68], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 8404 : 	pWinModule->m_pCreateWndList = NULL;

  0002c	48 21 43 30	 and	 QWORD PTR [rbx+48], rax

; 2938 : 	{
; 2939 : 		cbSize = sizeof(_ATL_WIN_MODULE);

  00030	c7 03 48 00 00
	00		 mov	 DWORD PTR [rbx], 72	; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionEx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 145  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

  0003c	85 c0		 test	 eax, eax
  0003e	75 22		 jne	 SHORT $LN2@CAtlWinMod

; 146  : 		{
; 147  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h

; 29051: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00046	0f b7 c8	 movzx	 ecx, ax
  00049	81 c9 00 00 07
	80		 or	 ecx, -2147024896	; ffffffff80070000H
  0004f	85 c0		 test	 eax, eax
  00051	0f 4e c8	 cmovle	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2941 : 		if (FAILED(hr))

  00054	85 c9		 test	 ecx, ecx
  00056	79 0a		 jns	 SHORT $LN2@CAtlWinMod

; 2942 : 		{
; 2943 : 			ATLASSERT(0);
; 2944 : 			CAtlBaseModule::m_bInitFailed = true;

  00058	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2945 : 			cbSize = 0;

  0005f	83 23 00	 and	 DWORD PTR [rbx], 0
$LN2@CAtlWinMod:

; 2946 : 			return;
; 2947 : 		}
; 2948 : 	}

  00062	48 8b c3	 mov	 rax, rbx
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
??0CAtlWinModule@ATL@@QEAA@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__F_AtlComModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlComModule'', COMDAT

; 2608 : 		Term();

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  00007	e9 00 00 00 00	 jmp	 ?Term@CAtlComModule@ATL@@QEAAXXZ ; ATL::CAtlComModule::Term
??__F_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlComModule''
text$yd	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlComModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlComModule'', COMDAT

; 2716 : __declspec(selectany) CAtlComModule _AtlComModule;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  0000b	e8 00 00 00 00	 call	 ??0CAtlComModule@ATL@@QEAA@XZ ; ATL::CAtlComModule::CAtlComModule
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F_AtlComModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlComModule''
  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 atexit
??__E_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlComModule''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlComModule@ATL@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?Term@CAtlComModule@ATL@@QEAAXXZ PROC			; ATL::CAtlComModule::Term, COMDAT

; 2613 : 	{

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2614 : 		if (cbSize == 0)

  0000f	83 39 00	 cmp	 DWORD PTR [rcx], 0
  00012	48 8b d9	 mov	 rbx, rcx
  00015	74 48		 je	 SHORT $LN1@Term

; 2615 : 			return;
; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00017	48 8b 79 10	 mov	 rdi, QWORD PTR [rcx+16]
  0001b	48 3b 79 18	 cmp	 rdi, QWORD PTR [rcx+24]
  0001f	73 31		 jae	 SHORT $LN3@Term
$LL4@Term:

; 2618 : 		{
; 2619 : 			if (*ppEntry != NULL)

  00021	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00024	48 85 c0	 test	 rax, rax
  00027	74 1f		 je	 SHORT $LN2@Term

; 2620 : 			{
; 2621 : 				_ATL_OBJMAP_CACHE* pCache = (**ppEntry).pCache;

  00029	48 8b 70 20	 mov	 rsi, QWORD PTR [rax+32]

; 2622 : 
; 2623 : 				if (pCache->pCF != NULL)

  0002d	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00030	48 85 c9	 test	 rcx, rcx
  00033	74 13		 je	 SHORT $LN2@Term

; 2624 : 				{
; 2625 : 					// Decode factory pointer if it's not null
; 2626 : 					IUnknown *factory = reinterpret_cast<IUnknown*>(::DecodePointer(pCache->pCF));

  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DecodePointer

; 2627 : 					_Analysis_assume_(factory != nullptr);
; 2628 : 					factory->Release();

  0003b	48 8b c8	 mov	 rcx, rax
  0003e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00041	ff 52 10	 call	 QWORD PTR [rdx+16]

; 2629 : 					pCache->pCF = NULL;

  00044	48 83 26 00	 and	 QWORD PTR [rsi], 0
$LN2@Term:

; 2615 : 			return;
; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00048	48 83 c7 08	 add	 rdi, 8
  0004c	48 3b 7b 18	 cmp	 rdi, QWORD PTR [rbx+24]
  00050	72 cf		 jb	 SHORT $LL4@Term
$LN3@Term:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  00052	48 8d 4b 20	 lea	 rcx, QWORD PTR [rbx+32]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteCriticalSection
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2637 : 		cbSize = 0;

  0005c	83 23 00	 and	 DWORD PTR [rbx], 0
$LN1@Term:

; 2638 : 	}

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
?Term@CAtlComModule@ATL@@QEAAXXZ ENDP			; ATL::CAtlComModule::Term
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlComModule@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0CAtlComModule@ATL@@QEAA@XZ PROC			; ATL::CAtlComModule::CAtlComModule, COMDAT

; 2586 : 	CAtlComModule() throw()

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00009	33 c0		 xor	 eax, eax
  0000b	48 83 c1 20	 add	 rcx, 32			; 00000020H
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00012	45 33 c0	 xor	 r8d, r8d
  00015	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00017	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  0001a	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
  0001e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2588 : 		cbSize = 0;

  00022	21 03		 and	 DWORD PTR [rbx], eax

; 2589 : 
; 2590 : 		m_hInstTypeLib = reinterpret_cast<HINSTANCE>(&__ImageBase);

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  0002b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 2591 : 
; 2592 : 		m_ppAutoObjMapFirst = &__pobjMapEntryFirst + 1;

  0002f	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:__pobjMapEntryFirst+8
  00036	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 2593 : 		m_ppAutoObjMapLast = &__pobjMapEntryLast;

  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__pobjMapEntryLast
  00041	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionEx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 145  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

  0004b	85 c0		 test	 eax, eax
  0004d	75 21		 jne	 SHORT $LN2@CAtlComMod

; 146  : 		{
; 147  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h

; 29051: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00055	0f b7 c8	 movzx	 ecx, ax
  00058	81 c9 00 00 07
	80		 or	 ecx, -2147024896	; ffffffff80070000H
  0005e	85 c0		 test	 eax, eax
  00060	0f 4e c8	 cmovle	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2595 : 		if (FAILED(m_csObjMap.Init()))

  00063	85 c9		 test	 ecx, ecx
  00065	79 09		 jns	 SHORT $LN2@CAtlComMod

; 2596 : 		{
; 2597 : 			ATLTRACE(atlTraceCOM, 0, _T("ERROR : Unable to initialize critical section in CAtlComModule\n"));
; 2598 : 			ATLASSERT(0);
; 2599 : 			CAtlBaseModule::m_bInitFailed = true;

  00067	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2600 : 			return;

  0006e	eb 06		 jmp	 SHORT $LN1@CAtlComMod
$LN2@CAtlComMod:

; 2601 : 		}
; 2602 : 		// Set cbSize on success.
; 2603 : 		cbSize = sizeof(_ATL_COM_MODULE);

  00070	c7 03 48 00 00
	00		 mov	 DWORD PTR [rbx], 72	; 00000048H
$LN1@CAtlComMod:

; 2604 : 	}

  00076	48 8b c3	 mov	 rax, rbx
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
??0CAtlComModule@ATL@@QEAA@XZ ENDP			; ATL::CAtlComModule::CAtlComModule
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z
_TEXT	SEGMENT
pWinModule$ = 48
hInst$ = 56
?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z PROC ; ATL::AtlWinModuleTerm, COMDAT

; 7652 : {

$LN35:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b ea	 mov	 rbp, rdx
  00017	48 8b d9	 mov	 rbx, rcx

; 7653 : 	if (pWinModule == NULL)

  0001a	48 85 c9	 test	 rcx, rcx
  0001d	74 67		 je	 SHORT $LN31@AtlWinModu

; 7654 : 		return E_INVALIDARG;
; 7655 : 	if (pWinModule->cbSize == 0)

  0001f	83 39 00	 cmp	 DWORD PTR [rcx], 0
  00022	75 04		 jne	 SHORT $LN6@AtlWinModu
$LN33@AtlWinModu:

; 7666 : }

  00024	33 c0		 xor	 eax, eax
  00026	eb 63		 jmp	 SHORT $LN1@AtlWinModu
$LN6@AtlWinModu:

; 7656 : 		return S_OK;
; 7657 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  00028	83 39 48	 cmp	 DWORD PTR [rcx], 72	; 00000048H
  0002b	75 59		 jne	 SHORT $LN31@AtlWinModu

; 7659 : 
; 7660 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

  0002d	33 ff		 xor	 edi, edi
  0002f	39 79 40	 cmp	 DWORD PTR [rcx+64], edi
  00032	7e 28		 jle	 SHORT $LN3@AtlWinModu

; 7661 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00034	33 f6		 xor	 esi, esi
$LL4@AtlWinModu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

  00036	48 85 f6	 test	 rsi, rsi
  00039	78 65		 js	 SHORT $LN24@AtlWinModu
  0003b	3b 7b 40	 cmp	 edi, DWORD PTR [rbx+64]
  0003e	7d 60		 jge	 SHORT $LN24@AtlWinModu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 7661 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00040	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00044	48 8b d5	 mov	 rdx, rbp
  00047	0f b7 0c 30	 movzx	 ecx, WORD PTR [rax+rsi]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnregisterClassW
  00051	ff c7		 inc	 edi
  00053	48 83 c6 02	 add	 rsi, 2
  00057	3b 7b 40	 cmp	 edi, DWORD PTR [rbx+64]
  0005a	7c da		 jl	 SHORT $LL4@AtlWinModu
$LN3@AtlWinModu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

  0005c	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00060	48 85 c9	 test	 rcx, rcx
  00063	74 0a		 je	 SHORT $LN18@AtlWinModu

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

  00065	e8 00 00 00 00	 call	 free

; 221  : 			m_aT = NULL;

  0006a	48 83 63 38 00	 and	 QWORD PTR [rbx+56], 0
$LN18@AtlWinModu:

; 222  : 		}
; 223  : 		m_nSize = 0;

  0006f	83 63 40 00	 and	 DWORD PTR [rbx+64], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  00073	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 224  : 		m_nAllocSize = 0;

  00077	83 63 44 00	 and	 DWORD PTR [rbx+68], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteCriticalSection
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 7664 : 	pWinModule->cbSize = 0;

  00081	83 23 00	 and	 DWORD PTR [rbx], 0

; 7665 : 	return S_OK;

  00084	eb 9e		 jmp	 SHORT $LN33@AtlWinModu
$LN31@AtlWinModu:

; 7658 : 		return E_INVALIDARG;

  00086	b8 57 00 07 80	 mov	 eax, -2147024809	; ffffffff80070057H
$LN1@AtlWinModu:

; 7666 : }

  0008b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00090	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
$LN24@AtlWinModu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	b9 8c 00 00 c0	 mov	 ecx, -1073741684	; c000008cH
  000aa	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
  000af	cc		 int	 3
$LN32@AtlWinModu:
?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
lpCriticalSection$ = 8
dwSpinCount$ = 16
Flags$ = 24
?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InitializeCriticalSectionEx
?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
dwExceptionCode$ = 8
dwExceptionFlags$ = 16
?_AtlRaiseException@ATL@@YAXKK@Z PROC			; ATL::_AtlRaiseException, COMDAT

; 31   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_RaiseException
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_I@YAXPEAX_K1P6AX0@Z@Z
_TEXT	SEGMENT
__t$ = 48
__s$ = 56
__n$ = 64
__f$ = 72
??_I@YAXPEAX_K1P6AX0@Z@Z PROC				; `vector destructor iterator', COMDAT
$LN12:
  00000	4d 85 c0	 test	 r8, r8
  00003	74 49		 je	 SHORT $LN10@vector
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000f	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00014	57		 push	 rdi
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	49 8b e9	 mov	 rbp, r9
  0001f	49 0f af f8	 imul	 rdi, r8
  00023	49 8b d8	 mov	 rbx, r8
  00026	48 8b f2	 mov	 rsi, rdx
  00029	48 03 f9	 add	 rdi, rcx
$LL2@vector:
  0002c	48 2b fe	 sub	 rdi, rsi
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	ff d5		 call	 rbp
  00034	48 83 eb 01	 sub	 rbx, 1
  00038	75 f2		 jne	 SHORT $LL2@vector
  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00044	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
$LN10@vector:
  0004e	c3		 ret	 0
??_I@YAXPEAX_K1P6AX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
__t$ = 48
__s$ = 56
__n$ = 64
__f$ = 72
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN12:
  00000	4d 85 c0	 test	 r8, r8
  00003	74 42		 je	 SHORT $LN10@vector
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000f	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00014	57		 push	 rdi
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	49 8b f1	 mov	 rsi, r9
  0001c	49 8b d8	 mov	 rbx, r8
  0001f	48 8b ea	 mov	 rbp, rdx
  00022	48 8b f9	 mov	 rdi, rcx
$LL2@vector:
  00025	48 8b cf	 mov	 rcx, rdi
  00028	ff d6		 call	 rsi
  0002a	48 03 fd	 add	 rdi, rbp
  0002d	48 83 eb 01	 sub	 rbx, 1
  00031	75 f2		 jne	 SHORT $LL2@vector
  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0003d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
$LN10@vector:
  00047	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
