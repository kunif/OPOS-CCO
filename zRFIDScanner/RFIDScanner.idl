/****************************************************************************
**
** RFIDScanner.idl -- IDL source for RFIDScanner.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (RFIDScanner.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

    [
        object,
        uuid(CCB90371-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRFIDScanner 1.12 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRFIDScanner_1_12 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SOData")] HRESULT SOData( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputComplete")] HRESULT SOOutputComplete( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.12
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(10), helpstring("property AutoDisable")]
        HRESULT AutoDisable( [out, retval] VARIANT_BOOL* pAutoDisable );
        [propput, id(10), helpstring("property AutoDisable")]
        HRESULT AutoDisable( [in] VARIANT_BOOL AutoDisable );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(15), helpstring("property DataCount")]
        HRESULT DataCount( [out, retval] long* pDataCount );
        [propget, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [out, retval] VARIANT_BOOL* pDataEventEnabled );
        [propput, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [in] VARIANT_BOOL DataEventEnabled );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(19), helpstring("property OutputID")]
        HRESULT OutputID( [out, retval] long* pOutputID );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
        [id(34), helpstring("method ClearOutput")]
        HRESULT ClearOutput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [id(48), helpstring("method ClearInputProperties")]
        HRESULT ClearInputProperties( 
            [out, retval] long* pRC );
        [propget, id(70), helpstring("property CapContinuousRead")]
        HRESULT CapContinuousRead( [out, retval] VARIANT_BOOL* pCapContinuousRead );
        [propget, id(71), helpstring("property CapDisableTag")]
        HRESULT CapDisableTag( [out, retval] VARIANT_BOOL* pCapDisableTag );
        [propget, id(72), helpstring("property CapLockTag")]
        HRESULT CapLockTag( [out, retval] VARIANT_BOOL* pCapLockTag );
        [propget, id(73), helpstring("property CapMultipleProtocols")]
        HRESULT CapMultipleProtocols( [out, retval] long* pCapMultipleProtocols );
        [propget, id(74), helpstring("property CapReadTimer")]
        HRESULT CapReadTimer( [out, retval] VARIANT_BOOL* pCapReadTimer );
        [propget, id(75), helpstring("property CapWriteTag")]
        HRESULT CapWriteTag( [out, retval] long* pCapWriteTag );
        [propget, id(76), helpstring("property ContinuousReadMode")]
        HRESULT ContinuousReadMode( [out, retval] VARIANT_BOOL* pContinuousReadMode );
        [propget, id(77), helpstring("property CurrentTagID")]
        HRESULT CurrentTagID( [out, retval] BSTR* pCurrentTagID );
        [propget, id(78), helpstring("property CurrentTagProtocol")]
        HRESULT CurrentTagProtocol( [out, retval] long* pCurrentTagProtocol );
        [propget, id(79), helpstring("property CurrentTagUserData")]
        HRESULT CurrentTagUserData( [out, retval] BSTR* pCurrentTagUserData );
        [propget, id(80), helpstring("property ProtocolMask")]
        HRESULT ProtocolMask( [out, retval] long* pProtocolMask );
        [propput, id(80), helpstring("property ProtocolMask")]
        HRESULT ProtocolMask( [in] long ProtocolMask );
        [propget, id(81), helpstring("property ReadTimerInterval")]
        HRESULT ReadTimerInterval( [out, retval] long* pReadTimerInterval );
        [propput, id(81), helpstring("property ReadTimerInterval")]
        HRESULT ReadTimerInterval( [in] long ReadTimerInterval );
        [propget, id(82), helpstring("property TagCount")]
        HRESULT TagCount( [out, retval] long* pTagCount );
        [id(100), helpstring("method DisableTag")]
        HRESULT DisableTag( 
            [in] BSTR TagID, 
            [in] long Timeout, 
            [in] BSTR Password, 
            [out, retval] long* pRC );
        [id(101), helpstring("method FirstTag")]
        HRESULT FirstTag( 
            [out, retval] long* pRC );
        [id(102), helpstring("method LockTag")]
        HRESULT LockTag( 
            [in] BSTR TagID, 
            [in] long Timeout, 
            [in] BSTR Password, 
            [out, retval] long* pRC );
        [id(103), helpstring("method NextTag")]
        HRESULT NextTag( 
            [out, retval] long* pRC );
        [id(104), helpstring("method PreviousTag")]
        HRESULT PreviousTag( 
            [out, retval] long* pRC );
        [id(105), helpstring("method ReadTags")]
        HRESULT ReadTags( 
            [in] long Cmd, 
            [in] BSTR FilterID, 
            [in] BSTR Filtermask, 
            [in] long Start, 
            [in] long Length, 
            [in] long Timeout, 
            [in] BSTR Password, 
            [out, retval] long* pRC );
        [id(106), helpstring("method StartReadTags")]
        HRESULT StartReadTags( 
            [in] long Cmd, 
            [in] BSTR FilterID, 
            [in] BSTR Filtermask, 
            [in] long Start, 
            [in] long Length, 
            [in] BSTR Password, 
            [out, retval] long* pRC );
        [id(107), helpstring("method StopReadTags")]
        HRESULT StopReadTags( 
            [in] BSTR Password, 
            [out, retval] long* pRC );
        [id(108), helpstring("method WriteTagData")]
        HRESULT WriteTagData( 
            [in] BSTR TagID, 
            [in] BSTR Userdata, 
            [in] long Start, 
            [in] long Timeout, 
            [in] BSTR Password, 
            [out, retval] long* pRC );
        [id(109), helpstring("method WriteTagID")]
        HRESULT WriteTagID( 
            [in] BSTR SourceID, 
            [in] BSTR DestID, 
            [in] long Timeout, 
            [in] BSTR Password, 
            [out, retval] long* pRC );
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSRFIDScanner Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB91371-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRFIDScanner Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRFIDScanner : IOPOSRFIDScanner_1_12
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90370-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS RFIDScanner Control 1.15.000 [Public, by CRM/MCS]")
]
library OposRFIDScanner_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90373-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSRFIDScannerEvents Interface")
    ]
    dispinterface _IOPOSRFIDScannerEvents
    {
        properties:
        methods:
        [id(1), helpstring("method DataEvent")]
            void DataEvent( [in] long Status );
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), helpstring("method OutputCompleteEvent")]
            void OutputCompleteEvent( [in] long OutputID );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90372-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS RFIDScanner Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSRFIDScanner
    {
        [default] interface IOPOSRFIDScanner;
        interface IOPOSRFIDScanner_1_12;
        [default, source] dispinterface _IOPOSRFIDScannerEvents;
    };
};

// End RFIDScanner.idl
