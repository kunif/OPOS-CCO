; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?WM_ATLGETHOST@ATL@@3IA				; ATL::WM_ATLGETHOST
PUBLIC	?WM_ATLGETCONTROL@ATL@@3IA			; ATL::WM_ATLGETCONTROL
PUBLIC	?g_WindowName@@3PA_WA				; g_WindowName
PUBLIC	?g_ControlDescription@@3PADA			; g_ControlDescription
PUBLIC	_LIBID_ATLLib
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?s_nInstances@COPOSSoundRecorder@@1HA		; COPOSSoundRecorder::s_nInstances
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@ ; `string'
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@ ; `string'
PUBLIC	??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@ ; `string'
PUBLIC	?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B ; `COPOSSoundRecorder::GetConnMap'::`2'::_entries
PUBLIC	??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	?$TSS0@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSSoundRecorder::GetConnMap'::`2'::$TSS0
PUBLIC	??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@ ; `string'
PUBLIC	??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@ ; `string'
PUBLIC	??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@ ; `string'
PUBLIC	??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@ ; `string'
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@ ; `string'
PUBLIC	??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ ; `string'
PUBLIC	?g_ControlVersion@@3JA				; g_ControlVersion
PUBLIC	??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0P@MMNMMLGK@COFreezeEvents@		; `string'
PUBLIC	??_C@_0BC@OGCGGIMP@GetPropertyNumber@		; `string'
PUBLIC	??_C@_0BC@MDCNODNB@SetPropertyNumber@		; `string'
PUBLIC	??_C@_0BC@CFCCMIMD@GetPropertyString@		; `string'
PUBLIC	??_C@_0BC@CJEDNN@SetPropertyString@		; `string'
PUBLIC	??_C@_0M@LNPKKKDA@OpenService@			; `string'
PUBLIC	??_C@_0M@PCMCHHMH@CheckHealth@			; `string'
PUBLIC	??_C@_0M@JGMIDNEK@ClaimDevice@			; `string'
PUBLIC	??_C@_0L@BNEIFEJC@ClearInput@			; `string'
PUBLIC	??_C@_0N@DDFIIBMP@CloseService@			; `string'
PUBLIC	??_C@_08EEIHICPC@DirectIO@			; `string'
PUBLIC	??_C@_0O@BCPMENMJ@ReleaseDevice@		; `string'
PUBLIC	??_C@_0BA@GFABKEEE@ResetStatistics@		; `string'
PUBLIC	??_C@_0BD@DPALHJGC@RetrieveStatistics@		; `string'
PUBLIC	??_C@_0BB@KOHIKNFC@UpdateStatistics@		; `string'
PUBLIC	??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@	; `string'
PUBLIC	??_C@_0P@FBPDPIPA@UpdateFirmware@		; `string'
PUBLIC	??_C@_0BF@CMAPCJGM@ClearInputProperties@	; `string'
PUBLIC	??_C@_0P@JNOIKEIC@StartRecording@		; `string'
PUBLIC	??_C@_0O@CHILAIKI@StopRecording@		; `string'
PUBLIC	??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@ ; `string'
PUBLIC	??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@ ; `string'
PUBLIC	??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@ ; `string'
PUBLIC	??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@ ; `string'
PUBLIC	??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@ ; `string'
PUBLIC	??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@ ; `string'
PUBLIC	?chDirSep@ATL@@3_WB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3_WB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3_WB			; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3_WB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3_WB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QB_WB			; ATL::szStringVal
PUBLIC	??_C@_13HADIAKP@?$AAS@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QB_WB			; ATL::multiszStringVal
PUBLIC	??_C@_13LHMFKAAD@?$AAM@				; `string'
PUBLIC	?szDwordVal@ATL@@3QB_WB				; ATL::szDwordVal
PUBLIC	??_C@_13MKMNOPIJ@?$AAD@				; `string'
PUBLIC	?szBinaryVal@ATL@@3QB_WB			; ATL::szBinaryVal
PUBLIC	??_C@_13OPKGLAFF@?$AAB@				; `string'
PUBLIC	?szValToken@ATL@@3QB_WB				; ATL::szValToken
PUBLIC	??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@		; `string'
PUBLIC	?szForceRemove@ATL@@3QB_WB			; ATL::szForceRemove
PUBLIC	??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; `string'
PUBLIC	?szNoRemove@ATL@@3QB_WB				; ATL::szNoRemove
PUBLIC	??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; `string'
PUBLIC	?szDelete@ATL@@3QB_WB				; ATL::szDelete
PUBLIC	??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ ; `string'
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	_IID_IInternalConnection
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___ImageBase:BYTE
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?WM_ATLGETHOST@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETHOST@ATL@@3IA DD 01H DUP (?)			; ATL::WM_ATLGETHOST
_BSS	ENDS
;	COMDAT ?WM_ATLGETCONTROL@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETCONTROL@ATL@@3IA DD 01H DUP (?)		; ATL::WM_ATLGETCONTROL
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
_BSS	SEGMENT
?s_nInstances@COPOSSoundRecorder@@1HA DD 01H DUP (?)	; COPOSSoundRecorder::s_nInstances
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B
_BSS	SEGMENT
?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B DD 03H DUP (?) ; `COPOSSoundRecorder::GetConnMap'::`2'::_entries
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA DD 01H DUP (?) ; `COPOSSoundRecorder::GetConnMap'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@
CONST	SEGMENT
??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ DB 'D', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 't', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QB_WB
CONST	SEGMENT
?szDelete@ATL@@3QB_WB DD FLAT:??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@
CONST	SEGMENT
??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ DB 'N', 00H, 'o'
	DB	00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QB_WB
CONST	SEGMENT
?szNoRemove@ATL@@3QB_WB DD FLAT:??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@
CONST	SEGMENT
??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ DB 'F'
	DB	00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QB_WB
CONST	SEGMENT
?szForceRemove@ATL@@3QB_WB DD FLAT:??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@ DB 'V', 00H, 'a', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QB_WB
CONST	SEGMENT
?szValToken@ATL@@3QB_WB DD FLAT:??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_13OPKGLAFF@?$AAB@
CONST	SEGMENT
??_C@_13OPKGLAFF@?$AAB@ DB 'B', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QB_WB
CONST	SEGMENT
?szBinaryVal@ATL@@3QB_WB DD FLAT:??_C@_13OPKGLAFF@?$AAB@ ; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ??_C@_13MKMNOPIJ@?$AAD@
CONST	SEGMENT
??_C@_13MKMNOPIJ@?$AAD@ DB 'D', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QB_WB
CONST	SEGMENT
?szDwordVal@ATL@@3QB_WB DD FLAT:??_C@_13MKMNOPIJ@?$AAD@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_13LHMFKAAD@?$AAM@
CONST	SEGMENT
??_C@_13LHMFKAAD@?$AAM@ DB 'M', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QB_WB
CONST	SEGMENT
?multiszStringVal@ATL@@3QB_WB DD FLAT:??_C@_13LHMFKAAD@?$AAM@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_13HADIAKP@?$AAS@
CONST	SEGMENT
??_C@_13HADIAKP@?$AAS@ DB 'S', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QB_WB
CONST	SEGMENT
?szStringVal@ATL@@3QB_WB DD FLAT:??_C@_13HADIAKP@?$AAS@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3_WB
CONST	SEGMENT
?chEquals@ATL@@3_WB DW 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3_WB
CONST	SEGMENT
?chQuote@ATL@@3_WB DW 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3_WB
CONST	SEGMENT
?chLeftBracket@ATL@@3_WB DW 07bH			; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3_WB
CONST	SEGMENT
?chRightBracket@ATL@@3_WB DW 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3_WB
CONST	SEGMENT
?chDirSep@ATL@@3_WB DW 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@
CONST	SEGMENT
??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'I', 00H, 'S', 00H, 'A', 00H, 'P', 00H, 'I', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@
CONST	SEGMENT
??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@
CONST	SEGMENT
??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@
CONST	SEGMENT
??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'U', 00H, 't', 00H, 'i', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@
CONST	SEGMENT
??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@
CONST	SEGMENT
??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'i'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@
CONST	SEGMENT
??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CHILAIKI@StopRecording@
CONST	SEGMENT
??_C@_0O@CHILAIKI@StopRecording@ DB 'StopRecording', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JNOIKEIC@StartRecording@
CONST	SEGMENT
??_C@_0P@JNOIKEIC@StartRecording@ DB 'StartRecording', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CMAPCJGM@ClearInputProperties@
CONST	SEGMENT
??_C@_0BF@CMAPCJGM@ClearInputProperties@ DB 'ClearInputProperties', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FBPDPIPA@UpdateFirmware@
CONST	SEGMENT
??_C@_0P@FBPDPIPA@UpdateFirmware@ DB 'UpdateFirmware', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@
CONST	SEGMENT
??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@ DB 'CompareFirmwareVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KOHIKNFC@UpdateStatistics@
CONST	SEGMENT
??_C@_0BB@KOHIKNFC@UpdateStatistics@ DB 'UpdateStatistics', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DPALHJGC@RetrieveStatistics@
CONST	SEGMENT
??_C@_0BD@DPALHJGC@RetrieveStatistics@ DB 'RetrieveStatistics', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFABKEEE@ResetStatistics@
CONST	SEGMENT
??_C@_0BA@GFABKEEE@ResetStatistics@ DB 'ResetStatistics', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCPMENMJ@ReleaseDevice@
CONST	SEGMENT
??_C@_0O@BCPMENMJ@ReleaseDevice@ DB 'ReleaseDevice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEIHICPC@DirectIO@
CONST	SEGMENT
??_C@_08EEIHICPC@DirectIO@ DB 'DirectIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DDFIIBMP@CloseService@
CONST	SEGMENT
??_C@_0N@DDFIIBMP@CloseService@ DB 'CloseService', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNEIFEJC@ClearInput@
CONST	SEGMENT
??_C@_0L@BNEIFEJC@ClearInput@ DB 'ClearInput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGMIDNEK@ClaimDevice@
CONST	SEGMENT
??_C@_0M@JGMIDNEK@ClaimDevice@ DB 'ClaimDevice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCMCHHMH@CheckHealth@
CONST	SEGMENT
??_C@_0M@PCMCHHMH@CheckHealth@ DB 'CheckHealth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNPKKKDA@OpenService@
CONST	SEGMENT
??_C@_0M@LNPKKKDA@OpenService@ DB 'OpenService', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJEDNN@SetPropertyString@
CONST	SEGMENT
??_C@_0BC@CJEDNN@SetPropertyString@ DB 'SetPropertyString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFCCMIMD@GetPropertyString@
CONST	SEGMENT
??_C@_0BC@CFCCMIMD@GetPropertyString@ DB 'GetPropertyString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MDCNODNB@SetPropertyNumber@
CONST	SEGMENT
??_C@_0BC@MDCNODNB@SetPropertyNumber@ DB 'SetPropertyNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGCGGIMP@GetPropertyNumber@
CONST	SEGMENT
??_C@_0BC@OGCGGIMP@GetPropertyNumber@ DB 'GetPropertyNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MMNMMLGK@COFreezeEvents@
CONST	SEGMENT
??_C@_0P@MMNMMLGK@COFreezeEvents@ DB 'COFreezeEvents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@
CONST	SEGMENT
??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
CONST	SEGMENT
??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@
CONST	SEGMENT
??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@
CONST	SEGMENT
??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'I', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@
CONST	SEGMENT
??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'D', 00H, 'B', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'v'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@
CONST	SEGMENT
??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'D', 00H, 'B', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@
CONST	SEGMENT
??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o'
	DB	00H, 'l', 00H, 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@
CONST	SEGMENT
??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@
CONST	SEGMENT
??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@
CONST	SEGMENT
??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'Q', 00H, 'I', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@
CONST	SEGMENT
??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@
CONST	SEGMENT
??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
_DATA	SEGMENT
?g_WindowName@@3PA_WA DB 'H', 00H, 'W', 00H, '_', 00H, 'O', 00H, 'P', 00H
	DB	'O', 00H, 'S', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd'
	DB	00H, 'R', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H			; g_WindowName
	ORG $+2
?g_ControlDescription@@3PADA DB 'OPOS SoundRecorder Control 1.16.000 [Pub'
	DB	'lic, by KF]', 00H				; g_ControlDescription
?g_ControlVersion@@3JA DD 0f80c0H			; g_ControlVersion
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIIP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	_InlineIsEqualGUID
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	??$AtlMultiply@H@ATL@@YAJPAHHH@Z		; ATL::AtlMultiply<int>
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	?Init@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Init
PUBLIC	??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z ; ATL::CComPtr<IUnknown>::operator=
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
PUBLIC	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
PUBLIC	?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ; ATL::AtlInternalQueryInterface
PUBLIC	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
PUBLIC	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z	; ATL::InlineIsEqualUnknown
PUBLIC	??0CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::CAtlComModule
PUBLIC	?Term@CAtlComModule@ATL@@QAEXXZ			; ATL::CAtlComModule::Term
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ; ATL::_Copy<tagCONNECTDATA>::copy
PUBLIC	?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::Add
PUBLIC	?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z	; ATL::CComDynamicUnkArray::Remove
PUBLIC	?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::GetCookie
PUBLIC	?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z ; ATL::CComDynamicUnkArray::GetUnknown
PUBLIC	?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
PUBLIC	??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
PUBLIC	??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z	; ATL::CComControlBase::CComControlBase
PUBLIC	??1CComControlBase@ATL@@UAE@XZ			; ATL::CComControlBase::~CComControlBase
PUBLIC	??0OposVariant@@QAE@XZ				; OposVariant::OposVariant
PUBLIC	??1OposVariant@@QAE@XZ				; OposVariant::~OposVariant
PUBLIC	??0?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
PUBLIC	??1?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::~CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
PUBLIC	??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
PUBLIC	??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>
PUBLIC	?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface
PUBLIC	?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface
PUBLIC	?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer
PUBLIC	?Advise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::Advise
PUBLIC	?Unadvise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::Unadvise
PUBLIC	?EnumConnections@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::EnumConnections
PUBLIC	?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DataEvent
PUBLIC	?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJPAJPAPA_W@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DirectIOEvent
PUBLIC	?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJJJPAJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_ErrorEvent
PUBLIC	?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_StatusUpdateEvent
PUBLIC	??0?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAE@XZ ; CProxy_IOPOSEvents<COPOSSoundRecorder>::CProxy_IOPOSEvents<COPOSSoundRecorder>
PUBLIC	?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent
PUBLIC	??0COPOSSoundRecorder@@QAE@XZ			; COPOSSoundRecorder::COPOSSoundRecorder
PUBLIC	?FinalConstruct@COPOSSoundRecorder@@QAEJXZ	; COPOSSoundRecorder::FinalConstruct
PUBLIC	??1COPOSSoundRecorder@@UAE@XZ			; COPOSSoundRecorder::~COPOSSoundRecorder
PUBLIC	?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z	; COPOSSoundRecorder::GetOposProp
PUBLIC	?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z	; COPOSSoundRecorder::SetOposProp
PUBLIC	?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z	; COPOSSoundRecorder::GetOposProp
PUBLIC	?SetOposProp@COPOSSoundRecorder@@IAEJJFJ@Z	; COPOSSoundRecorder::SetOposProp
PUBLIC	?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z	; COPOSSoundRecorder::GetOposProp
PUBLIC	?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z	; COPOSSoundRecorder::SetOposProp
PUBLIC	?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
PUBLIC	?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z	; COPOSSoundRecorder::SetCOFreezeEvents
PUBLIC	?FreezeEvents@COPOSSoundRecorder@@MAGJH@Z	; COPOSSoundRecorder::FreezeEvents
PUBLIC	?OnDraw@COPOSSoundRecorder@@MAEJAAUATL_DRAWINFO@@@Z ; COPOSSoundRecorder::OnDraw
PUBLIC	?GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z ; COPOSSoundRecorder::GetConnMap
PUBLIC	?EventInit@COPOSSoundRecorder@@IAEJXZ		; COPOSSoundRecorder::EventInit
PUBLIC	?EventClose@COPOSSoundRecorder@@IAEXXZ		; COPOSSoundRecorder::EventClose
PUBLIC	?EventUninit@COPOSSoundRecorder@@IAEXXZ		; COPOSSoundRecorder::EventUninit
PUBLIC	?s_EventWindowProc@COPOSSoundRecorder@@KGJPAUHWND__@@IIJ@Z ; COPOSSoundRecorder::s_EventWindowProc
PUBLIC	?EventWindowProc@COPOSSoundRecorder@@IAGJIIJ@Z	; COPOSSoundRecorder::EventWindowProc
PUBLIC	?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ	; COPOSSoundRecorder::FireEventSetup
PUBLIC	?FireEventCleanup@COPOSSoundRecorder@@IAEXXZ	; COPOSSoundRecorder::FireEventCleanup
PUBLIC	?SOProcessID@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::SOProcessID
PUBLIC	?get_OpenResult@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_OpenResult
PUBLIC	?get_AutoDisable@COPOSSoundRecorder@@UAGJPAF@Z	; COPOSSoundRecorder::get_AutoDisable
PUBLIC	?put_AutoDisable@COPOSSoundRecorder@@UAGJF@Z	; COPOSSoundRecorder::put_AutoDisable
PUBLIC	?get_BinaryConversion@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_BinaryConversion
PUBLIC	?put_BinaryConversion@COPOSSoundRecorder@@UAGJJ@Z ; COPOSSoundRecorder::put_BinaryConversion
PUBLIC	?get_CapPowerReporting@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_CapPowerReporting
PUBLIC	?get_CheckHealthText@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_CheckHealthText
PUBLIC	?get_Claimed@COPOSSoundRecorder@@UAGJPAF@Z	; COPOSSoundRecorder::get_Claimed
PUBLIC	?get_DataCount@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_DataCount
PUBLIC	?get_DataEventEnabled@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_DataEventEnabled
PUBLIC	?put_DataEventEnabled@COPOSSoundRecorder@@UAGJF@Z ; COPOSSoundRecorder::put_DataEventEnabled
PUBLIC	?get_DeviceEnabled@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_DeviceEnabled
PUBLIC	?put_DeviceEnabled@COPOSSoundRecorder@@UAGJF@Z	; COPOSSoundRecorder::put_DeviceEnabled
PUBLIC	?get_FreezeEvents@COPOSSoundRecorder@@UAGJPAF@Z	; COPOSSoundRecorder::get_FreezeEvents
PUBLIC	?put_FreezeEvents@COPOSSoundRecorder@@UAGJF@Z	; COPOSSoundRecorder::put_FreezeEvents
PUBLIC	?get_PowerNotify@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_PowerNotify
PUBLIC	?put_PowerNotify@COPOSSoundRecorder@@UAGJJ@Z	; COPOSSoundRecorder::put_PowerNotify
PUBLIC	?get_PowerState@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_PowerState
PUBLIC	?get_ResultCode@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_ResultCode
PUBLIC	?get_ResultCodeExtended@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_ResultCodeExtended
PUBLIC	?get_State@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_State
PUBLIC	?get_ControlObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_ControlObjectDescription
PUBLIC	?get_ControlObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_ControlObjectVersion
PUBLIC	?get_ServiceObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_ServiceObjectDescription
PUBLIC	?get_ServiceObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_ServiceObjectVersion
PUBLIC	?get_DeviceDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_DeviceDescription
PUBLIC	?get_DeviceName@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_DeviceName
PUBLIC	?get_CapStatisticsReporting@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_CapStatisticsReporting
PUBLIC	?get_CapUpdateStatistics@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_CapUpdateStatistics
PUBLIC	?get_CapCompareFirmwareVersion@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_CapCompareFirmwareVersion
PUBLIC	?get_CapUpdateFirmware@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_CapUpdateFirmware
PUBLIC	?CheckHealth@COPOSSoundRecorder@@UAGJJPAJ@Z	; COPOSSoundRecorder::CheckHealth
PUBLIC	?ClaimDevice@COPOSSoundRecorder@@UAGJJPAJ@Z	; COPOSSoundRecorder::ClaimDevice
PUBLIC	?ClearInput@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::ClearInput
PUBLIC	?Close@COPOSSoundRecorder@@UAGJPAJ@Z		; COPOSSoundRecorder::Close
PUBLIC	?DirectIO@COPOSSoundRecorder@@UAGJJPAJPAPA_W0@Z	; COPOSSoundRecorder::DirectIO
PUBLIC	?Open@COPOSSoundRecorder@@UAGJPA_WPAJ@Z		; COPOSSoundRecorder::Open
PUBLIC	?ReleaseDevice@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::ReleaseDevice
PUBLIC	?ResetStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ; COPOSSoundRecorder::ResetStatistics
PUBLIC	?RetrieveStatistics@COPOSSoundRecorder@@UAGJPAPA_WPAJ@Z ; COPOSSoundRecorder::RetrieveStatistics
PUBLIC	?UpdateStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ; COPOSSoundRecorder::UpdateStatistics
PUBLIC	?CompareFirmwareVersion@COPOSSoundRecorder@@UAGJPA_WPAJ1@Z ; COPOSSoundRecorder::CompareFirmwareVersion
PUBLIC	?UpdateFirmware@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ; COPOSSoundRecorder::UpdateFirmware
PUBLIC	?ClearInputProperties@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::ClearInputProperties
PUBLIC	?get_CapAssociatedHardTotalsDevice@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_CapAssociatedHardTotalsDevice
PUBLIC	?get_CapChannel@COPOSSoundRecorder@@UAGJPAF@Z	; COPOSSoundRecorder::get_CapChannel
PUBLIC	?get_CapRecordingLevel@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_CapRecordingLevel
PUBLIC	?get_CapSamplingRate@COPOSSoundRecorder@@UAGJPAF@Z ; COPOSSoundRecorder::get_CapSamplingRate
PUBLIC	?get_CapSoundType@COPOSSoundRecorder@@UAGJPAF@Z	; COPOSSoundRecorder::get_CapSoundType
PUBLIC	?get_CapStorage@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_CapStorage
PUBLIC	?get_Channel@COPOSSoundRecorder@@UAGJPAPA_W@Z	; COPOSSoundRecorder::get_Channel
PUBLIC	?put_Channel@COPOSSoundRecorder@@UAGJPA_W@Z	; COPOSSoundRecorder::put_Channel
PUBLIC	?get_ChannelList@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_ChannelList
PUBLIC	?get_RecordingLevel@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_RecordingLevel
PUBLIC	?put_RecordingLevel@COPOSSoundRecorder@@UAGJJ@Z	; COPOSSoundRecorder::put_RecordingLevel
PUBLIC	?get_RemainingRecordingTimeInSec@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::get_RemainingRecordingTimeInSec
PUBLIC	?get_SamplingRate@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_SamplingRate
PUBLIC	?put_SamplingRate@COPOSSoundRecorder@@UAGJPA_W@Z ; COPOSSoundRecorder::put_SamplingRate
PUBLIC	?get_SamplingRateList@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_SamplingRateList
PUBLIC	?get_SoundData@COPOSSoundRecorder@@UAGJPAPA_W@Z	; COPOSSoundRecorder::get_SoundData
PUBLIC	?get_SoundType@COPOSSoundRecorder@@UAGJPAPA_W@Z	; COPOSSoundRecorder::get_SoundType
PUBLIC	?put_SoundType@COPOSSoundRecorder@@UAGJPA_W@Z	; COPOSSoundRecorder::put_SoundType
PUBLIC	?get_SoundTypeList@COPOSSoundRecorder@@UAGJPAPA_W@Z ; COPOSSoundRecorder::get_SoundTypeList
PUBLIC	?get_Storage@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::get_Storage
PUBLIC	?put_Storage@COPOSSoundRecorder@@UAGJJ@Z	; COPOSSoundRecorder::put_Storage
PUBLIC	?StartRecording@COPOSSoundRecorder@@UAGJPA_WFJPAJ@Z ; COPOSSoundRecorder::StartRecording
PUBLIC	?StopRecording@COPOSSoundRecorder@@UAGJPAJ@Z	; COPOSSoundRecorder::StopRecording
PUBLIC	??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
PUBLIC	?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next
PUBLIC	?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip
PUBLIC	?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset
PUBLIC	?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone
PUBLIC	?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
PUBLIC	??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
PUBLIC	??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
PUBLIC	?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef
PUBLIC	?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release
PUBLIC	?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface
PUBLIC	?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
PUBLIC	??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor'
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	?_AtlComModule@ATL@@3VCAtlComModule@1@A		; ATL::_AtlComModule
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	__GUID_b196b287_bab4_101a_b69c_00aa00341d07
PUBLIC	?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B ; ATL::IConnectionPointContainerImpl<COPOSSoundRecorder>::pConnMap
PUBLIC	??_7?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@6B@ ; CProxy_IOPOSEvents<COPOSSoundRecorder>::`vftable'
PUBLIC	??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@ ; `string'
PUBLIC	??_C@_0DA@NFPIBIIC@SOFTWARE?2OLEforRetail?2ServiceOP@ ; `string'
PUBLIC	??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@	; `string'
PUBLIC	??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@	; `string'
PUBLIC	??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_0O@NJPKGFFJ@SoundRecorder@		; `string'
PUBLIC	??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ ; `string'
PUBLIC	??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	__GUID_b196b286_bab4_101a_b69c_00aa00341d07
PUBLIC	??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vftable'
PUBLIC	?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	__recalloc:PROC
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__imp__DecodePointer@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__RaiseException@16:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__InitializeCriticalSectionEx@12:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__CreateMutexW@12:PROC
EXTRN	__imp__CreateEventW@16:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__GetObjectW@12:PROC
EXTRN	__imp__PeekMessageW@20:PROC
EXTRN	__imp__DefWindowProcW@16:PROC
EXTRN	__imp__RegisterClassW@4:PROC
EXTRN	__imp__UnregisterClassW@8:PROC
EXTRN	__imp__CreateWindowExW@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__LoadBitmapW@8:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExW@20:PROC
EXTRN	__imp__RegQueryValueExW@24:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	__imp__CLSIDFromProgID@8:PROC
EXTRN	__imp__SysAllocString@4:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__SysStringLen@4:PROC
EXTRN	__imp__VariantClear@4:PROC
EXTRN	_AtlThunk_FreeData@4:PROC
EXTRN	?SetVARIANT_BOOL@OposVariant@@QAEXF@Z:PROC	; OposVariant::SetVARIANT_BOOL
EXTRN	?GetLONG@OposVariant@@QAEJXZ:PROC		; OposVariant::GetLONG
EXTRN	?ChangeLONG@OposVariant@@QAEXPAJAAJ@Z:PROC	; OposVariant::ChangeLONG
EXTRN	?SetLONG@OposVariant@@QAEXJ@Z:PROC		; OposVariant::SetLONG
EXTRN	?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z:PROC	; OposVariant::SetLONG_Ptr
EXTRN	?ChangeBSTR@OposVariant@@QAEXPAPA_WAAJ@Z:PROC	; OposVariant::ChangeBSTR
EXTRN	?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z:PROC	; OposVariant::SetBSTR
EXTRN	?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z:PROC ; OposVariant::SetBSTR_InOutPtr
EXTRN	?SetString@OposVariant@@QAEXPB_WAAJ@Z:PROC	; OposVariant::SetString
EXTRN	?SetDispatch_Ptr@OposVariant@@QAEXPAUIDispatch@@AAJ@Z:PROC ; OposVariant::SetDispatch_Ptr
EXTRN	??0OposDispParms@@QAE@PAVOposVariant@@H@Z:PROC	; OposDispParms::OposDispParms
EXTRN	??1OposDispParms@@QAE@XZ:PROC			; OposDispParms::~OposDispParms
EXTRN	?cw_strcpy@@YAHPA_WPBD@Z:PROC			; cw_strcpy
EXTRN	?DupWide@_CW@@AAEXXZ:PROC			; _CW::DupWide
EXTRN	??_E?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z:PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	_IID_IUnknown:BYTE
EXTRN	_GUID_NULL:BYTE
EXTRN	_IID_IDispatch:BYTE
EXTRN	_DIID__IOPOSSoundRecorderEvents:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ?_AtlComModule@ATL@@3VCAtlComModule@1@A
_BSS	SEGMENT
?_AtlComModule@ATL@@3VCAtlComModule@1@A DB 028H DUP (?)	; ATL::_AtlComModule
_BSS	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
;	COMDAT ?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B
_BSS	SEGMENT
?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B DD 01H DUP (?) ; ATL::IConnectionPointContainerImpl<COPOSSoundRecorder>::pConnMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlComModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlComModule@ATL@@YAXXZ ; ATL::_AtlComModule$initializer$
CRT$XCU	ENDS
;	COMDAT ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT
?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B DD FLAT:__GUID_b196b287_bab4_101a_b69c_00aa00341d07 ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
CONST	SEGMENT
??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@ DD FLAT:?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vftable'
	DD	FLAT:?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
	DD	FLAT:?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
	DD	FLAT:?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z
	DD	FLAT:?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z
	DD	FLAT:?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ
	DD	FLAT:?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
	DD	FLAT:??_E?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b286_bab4_101a_b69c_00aa00341d07 DD 0b196b286H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I', 00H
	DB	'O', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'E'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 'E', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@
CONST	SEGMENT
??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@ DB 'S'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'u', 00H, 's', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
CONST	SEGMENT
??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ DB 'G'
	DB	00H, 'e', 00H, 't', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NJPKGFFJ@SoundRecorder@
CONST	SEGMENT
??_C@_0O@NJPKGFFJ@SoundRecorder@ DB 'SoundRecorder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@
CONST	SEGMENT
??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@ DB 'R', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@
CONST	SEGMENT
??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@ DB 'C', 00H, 'l', 00H, 'a', 00H
	DB	'i', 00H, 'm', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@
CONST	SEGMENT
??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@ DB 'C', 00H, 'l', 00H, 'o', 00H
	DB	's', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NFPIBIIC@SOFTWARE?2OLEforRetail?2ServiceOP@
CONST	SEGMENT
??_C@_0DA@NFPIBIIC@SOFTWARE?2OLEforRetail?2ServiceOP@ DB 'SOFTWARE\OLEfor'
	DB	'Retail\ServiceOPOS\SoundRecorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@
CONST	SEGMENT
??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@ DB '[', 00H, 'E'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?s_RequiredMethodsPerRelease@@3PAHA DD 014H		; s_RequiredMethodsPerRelease
?s_SOMethodNames@@3PAPADA DD FLAT:??_C@_0P@MMNMMLGK@COFreezeEvents@ ; s_SOMethodNames
	DD	FLAT:??_C@_0BC@OGCGGIMP@GetPropertyNumber@
	DD	FLAT:??_C@_0BC@MDCNODNB@SetPropertyNumber@
	DD	FLAT:??_C@_0BC@CFCCMIMD@GetPropertyString@
	DD	FLAT:??_C@_0BC@CJEDNN@SetPropertyString@
	DD	FLAT:??_C@_0M@LNPKKKDA@OpenService@
	DD	FLAT:??_C@_0M@PCMCHHMH@CheckHealth@
	DD	FLAT:??_C@_0M@JGMIDNEK@ClaimDevice@
	DD	FLAT:??_C@_0L@BNEIFEJC@ClearInput@
	DD	FLAT:??_C@_0N@DDFIIBMP@CloseService@
	DD	FLAT:??_C@_08EEIHICPC@DirectIO@
	DD	FLAT:??_C@_0O@BCPMENMJ@ReleaseDevice@
	DD	FLAT:??_C@_0BA@GFABKEEE@ResetStatistics@
	DD	FLAT:??_C@_0BD@DPALHJGC@RetrieveStatistics@
	DD	FLAT:??_C@_0BB@KOHIKNFC@UpdateStatistics@
	DD	FLAT:??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@
	DD	FLAT:??_C@_0P@FBPDPIPA@UpdateFirmware@
	DD	FLAT:??_C@_0BF@CMAPCJGM@ClearInputProperties@
	DD	FLAT:??_C@_0P@JNOIKEIC@StartRecording@
	DD	FLAT:??_C@_0O@CHILAIKI@StopRecording@
	DD	00H
_DATA	ENDS
;	COMDAT ??_7?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@6B@
CONST	SEGMENT
??_7?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@6B@ DD FLAT:?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z
	DD	FLAT:?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z
	DD	FLAT:?Advise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z
	DD	FLAT:?Unadvise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z
	DD	FLAT:?EnumConnections@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b287_bab4_101a_b69c_00aa00341d07 DD 0b196b287H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlWinModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlWinModule@ATL@@YAXXZ ; ATL::_AtlWinModule$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??pConnMap$initializer$@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0P6AXXZA@@3P6AXXZA DD FLAT:??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ ; ??pConnMap$initializer$@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogsp
;	COMDAT ??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0a		 je	 SHORT $LN2@scalar
  00011	6a 1c		 push	 28			; 0000001cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	59		 pop	 ecx
  0001a	59		 pop	 ecx
$LN2@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance, COMDAT

; 2963 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2964 : 	ATLASSERT(pp != NULL);
; 2965 : 	if (pp == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pp$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 07		 jne	 SHORT $LN2@CreateInst

; 2966 : 		return E_POINTER;

  0000b	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00010	eb 33		 jmp	 SHORT $LN1@CreateInst
$LN2@CreateInst:

; 2967 : 	*pp = NULL;

  00012	83 26 00	 and	 DWORD PTR [esi], 0
  00015	57		 push	 edi

; 2968 : 
; 2969 : 	HRESULT hRes = E_OUTOFMEMORY;
; 2970 : 	CComObject<Base>* p = NULL;
; 2971 : 	ATLTRY(p = _ATL_NEW CComObject<Base>())

  00016	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0001b	6a 1c		 push	 28			; 0000001cH
  0001d	bf 0e 00 07 80	 mov	 edi, -2147024882	; 8007000eH
  00022	e8 00 00 00 00	 call	 ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new
  00027	59		 pop	 ecx
  00028	59		 pop	 ecx
  00029	85 c0		 test	 eax, eax
  0002b	74 11		 je	 SHORT $LN8@CreateInst
  0002d	6a 00		 push	 0
  0002f	8b c8		 mov	 ecx, eax
  00031	e8 00 00 00 00	 call	 ??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >

; 2972 : 	if (p != NULL)

  00036	85 c0		 test	 eax, eax
  00038	74 06		 je	 SHORT $LN6@CreateInst

; 2973 : 	{
; 2974 : 		p->SetVoid(NULL);
; 2975 : 		p->InternalFinalConstructAddRef();
; 2976 : 		hRes = p->_AtlInitialConstruct();
; 2977 : 		if (SUCCEEDED(hRes))
; 2978 : 			hRes = p->FinalConstruct();
; 2979 : 		if (SUCCEEDED(hRes))
; 2980 : 			hRes = p->_AtlFinalConstruct();
; 2981 : 		p->InternalFinalConstructRelease();
; 2982 : 		if (hRes != S_OK)

  0003a	33 ff		 xor	 edi, edi
  0003c	eb 02		 jmp	 SHORT $LN6@CreateInst
$LN8@CreateInst:

; 2968 : 
; 2969 : 	HRESULT hRes = E_OUTOFMEMORY;
; 2970 : 	CComObject<Base>* p = NULL;
; 2971 : 	ATLTRY(p = _ATL_NEW CComObject<Base>())

  0003e	33 c0		 xor	 eax, eax
$LN6@CreateInst:

; 2983 : 		{
; 2984 : 			delete p;
; 2985 : 			p = NULL;
; 2986 : 		}
; 2987 : 	}
; 2988 : 	*pp = p;

  00040	89 06		 mov	 DWORD PTR [esi], eax

; 2989 : 	return hRes;

  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
$LN1@CreateInst:
  00045	5e		 pop	 esi

; 2990 : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_ppvObject$ = 16					; size = 4
?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface, COMDAT

; 2947 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  00003	ff 75 10	 push	 DWORD PTR _ppvObject$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _iid$[ebp]
  00009	68 00 00 00 00	 push	 OFFSET ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  0000e	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ; ATL::AtlInternalQueryInterface

; 2948 : 		return this->_InternalQueryInterface(iid, ppvObject);
; 2949 : 	}

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release, COMDAT

; 2933 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2934 : 		ULONG l = this->InternalRelease();

  00004	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 444  : 		return --(*p);

  00008	83 6e 18 01	 sub	 DWORD PTR [esi+24], 1
  0000c	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2935 : 		if (l == 0)

  0000f	75 23		 jne	 SHORT $LN2@Release

; 2891 : 		_pAtlModule->Lock();

  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	ff 50 04	 call	 DWORD PTR [eax+4]

; 2936 : 		{
; 2937 : 			// Lock the module to avoid DLL unload when destruction of member variables take a long time
; 2938 : 			ModuleLockHelper lock;
; 2939 : 			delete this;

  0001c	85 f6		 test	 esi, esi
  0001e	74 09		 je	 SHORT $LN4@Release
  00020	8b 16		 mov	 edx, DWORD PTR [esi]
  00022	8b ce		 mov	 ecx, esi
  00024	6a 01		 push	 1
  00026	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN4@Release:

; 2898 : 		_pAtlModule->Unlock();

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	ff 52 08	 call	 DWORD PTR [edx+8]
$LN2@Release:

; 2940 : 		}
; 2941 : 		return l;

  00034	8b c7		 mov	 eax, edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 2942 : 	}

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef, COMDAT

; 2929 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2930 : 		return this->InternalAddRef();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 440  : 		return ++(*p);

  00006	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00009	40		 inc	 eax
  0000a	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2931 : 	}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >, COMDAT
; _this$ = ecx

; 2918 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@

; 2919 : 		this->m_dwRef = -(LONG_MAX/2);

  00009	c7 46 18 01 00
	00 c0		 mov	 DWORD PTR [esi+24], -1073741823 ; c0000001H

; 2920 : 		this->FinalRelease();
; 2921 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 2922 : 		_AtlDebugInterfacesModule.DeleteNonAddRefThunk(_GetRawUnknown());
; 2923 : #endif
; 2924 : 		_pAtlModule->Unlock();

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	ff 50 08	 call	 DWORD PTR [eax+8]
  0001b	8b ce		 mov	 ecx, esi
  0001d	5e		 pop	 esi
  0001e	e9 00 00 00 00	 jmp	 ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 165  :         p = NULL;

  00000	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2911 : 	CComObject(_In_opt_ void* = NULL)

  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 165  :         p = NULL;

  00005	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5501 : 		m_begin = m_end = m_iter = NULL;

  00008	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0000b	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0000e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5502 : 		m_dwFlags = 0;

  00011	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 2430 : 		m_dwRef = 0L;

  00014	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 2912 : 	{

  00017	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@

; 2913 : 		_pAtlModule->Lock();

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	ff 50 04	 call	 DWORD PTR [eax+4]

; 2914 : 	}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 04 00	 ret	 4
??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z
_TEXT	SEGMENT
_hr$1$ = 8						; size = 4
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
_pUnk$ = 16						; size = 4
tv427 = 20						; size = 4
_flags$ = 20						; size = 4
?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init, COMDAT
; _this$ = ecx

; 5627 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 5628 : 	if (flags == AtlFlagCopy)

  00004	8b 5d 14	 mov	 ebx, DWORD PTR _flags$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	83 fb 03	 cmp	 ebx, 3
  0000e	0f 85 a2 00 00
	00		 jne	 $LN10@Init

; 5629 : 	{
; 5630 : 		ATLASSUME(m_begin == NULL); //Init called twice?
; 5631 : 		ATLTRY(m_begin = _ATL_NEW T[end-begin])

  00014	8b 45 0c	 mov	 eax, DWORD PTR _end$[ebp]
  00017	33 c9		 xor	 ecx, ecx
  00019	8b 7d 08	 mov	 edi, DWORD PTR _begin$[ebp]
  0001c	2b c7		 sub	 eax, edi
  0001e	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00023	c1 f8 03	 sar	 eax, 3
  00026	6a 08		 push	 8
  00028	5a		 pop	 edx
  00029	89 45 14	 mov	 DWORD PTR tv427[ebp], eax
  0002c	f7 e2		 mul	 edx
  0002e	0f 90 c1	 seto	 cl
  00031	f7 d9		 neg	 ecx
  00033	0b c8		 or	 ecx, eax
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  0003b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5632 : 		m_iter = m_begin;

  0003e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00041	59		 pop	 ecx
  00042	59		 pop	 ecx

; 5633 : 		if (m_begin == NULL)

  00043	85 c0		 test	 eax, eax
  00045	75 0a		 jne	 SHORT $LN12@Init

; 5634 : 			return E_OUTOFMEMORY;

  00047	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0004c	e9 87 00 00 00	 jmp	 $LN1@Init
$LN12@Init:

; 5635 : 		for (T* i=begin; i != end; i++)

  00051	3b 7d 0c	 cmp	 edi, DWORD PTR _end$[ebp]
  00054	74 22		 je	 SHORT $LN27@Init
$LL7@Init:

; 5636 : 		{
; 5637 : 			Copy::init(m_iter);
; 5638 : 			HRESULT hr = Copy::copy(m_iter, i);

  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ; ATL::_Copy<tagCONNECTDATA>::copy
  0005d	89 45 08	 mov	 DWORD PTR _hr$1$[ebp], eax
  00060	59		 pop	 ecx
  00061	59		 pop	 ecx

; 5639 : 			if (FAILED(hr))

  00062	85 c0		 test	 eax, eax
  00064	78 1a		 js	 SHORT $LN20@Init

; 5647 : 			}
; 5648 : 			m_iter++;

  00066	83 46 10 08	 add	 DWORD PTR [esi+16], 8
  0006a	83 c7 08	 add	 edi, 8
  0006d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00070	3b 7d 0c	 cmp	 edi, DWORD PTR _end$[ebp]
  00073	75 e1		 jne	 SHORT $LL7@Init

; 5639 : 			if (FAILED(hr))

  00075	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN27@Init:

; 5649 : 		}
; 5650 : 		m_end = m_begin + (end-begin);

  00078	8b 4d 14	 mov	 ecx, DWORD PTR tv427[ebp]
  0007b	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 5651 : 	}

  0007e	eb 3f		 jmp	 SHORT $LN11@Init
$LN20@Init:

; 5640 : 			{
; 5641 : 				T* p = m_begin;

  00080	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 5642 : 				while (p < m_iter)

  00083	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00086	73 17		 jae	 SHORT $LN9@Init
$LL8@Init:

; 5436 : 		if (p->pUnk)

  00088	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0008a	85 c9		 test	 ecx, ecx
  0008c	74 06		 je	 SHORT $LN16@Init

; 5437 : 		{
; 5438 : 			p->pUnk->Release();

  0008e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00090	51		 push	 ecx
  00091	ff 50 08	 call	 DWORD PTR [eax+8]
$LN16@Init:

; 5643 : 					Copy::destroy(p++);

  00094	83 c7 08	 add	 edi, 8
  00097	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0009a	72 ec		 jb	 SHORT $LL8@Init
  0009c	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
$LN9@Init:

; 5644 : 				delete [] m_begin;

  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 5645 : 				m_begin = m_end = m_iter = NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000aa	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000ad	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5646 : 				return hr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _hr$1$[ebp]
  000b3	59		 pop	 ecx
  000b4	eb 22		 jmp	 SHORT $LN1@Init
$LN10@Init:

; 5652 : 	else
; 5653 : 	{
; 5654 : 		m_begin = begin;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  000b9	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5655 : 		m_end = end;

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _end$[ebp]
$LN11@Init:

; 5656 : 	}
; 5657 : 	m_spUnk = pUnk;

  000bf	ff 75 10	 push	 DWORD PTR _pUnk$[ebp]
  000c2	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000c5	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000c8	e8 00 00 00 00	 call	 ??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z ; ATL::CComPtr<IUnknown>::operator=

; 5658 : 	m_iter = m_begin;

  000cd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d0	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 5659 : 	m_dwFlags = flags;
; 5660 : 	return S_OK;

  000d3	33 c0		 xor	 eax, eax
  000d5	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
$LN1@Init:

; 5661 : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_p$2 = -8						; size = 4
$T3 = -4						; size = 4
$T4 = 8							; size = 4
$T5 = 8							; size = 4
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone, COMDAT

; 5596 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	83 65 f8 00	 and	 DWORD PTR $T1[ebp], 0

; 5597 : 	typedef CComObject<CComEnum<Base, piid, T, Copy> > _class;
; 5598 : 	HRESULT hRes = E_POINTER;
; 5599 : 	if (ppEnum != NULL)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ppEnum$[ebp]
  0000c	53		 push	 ebx
  0000d	bb 03 40 00 80	 mov	 ebx, -2147467261	; 80004003H
  00012	85 c0		 test	 eax, eax
  00014	0f 84 c0 00 00
	00		 je	 $LN9@Clone

; 5600 : 	{
; 5601 : 		*ppEnum = NULL;

  0001a	83 20 00	 and	 DWORD PTR [eax], 0

; 5602 : 		_class* p;
; 5603 : 		hRes = _class::CreateInstance(&p);

  0001d	8d 45 f8	 lea	 eax, DWORD PTR _p$2[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
  00026	8b d8		 mov	 ebx, eax

; 5604 : 		if (SUCCEEDED(hRes))

  00028	85 db		 test	 ebx, ebx
  0002a	0f 88 aa 00 00
	00		 js	 $LN9@Clone

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  00030	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  00033	56		 push	 esi
  00034	57		 push	 edi
  00035	f6 43 14 02	 test	 BYTE PTR [ebx+20], 2
  00039	74 12		 je	 SHORT $LN7@Clone
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  0003b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003d	8b fb		 mov	 edi, ebx
  0003f	53		 push	 ebx
  00040	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  00043	8b 75 08	 mov	 esi, DWORD PTR $T4[ebp]
  00046	33 c9		 xor	 ecx, ecx
  00048	8b c3		 mov	 eax, ebx
  0004a	41		 inc	 ecx
  0004b	eb 17		 jmp	 SHORT $LN40@Clone
$LN7@Clone:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 169  :         p = lp;

  0004d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00050	8b f0		 mov	 esi, eax
  00052	85 c0		 test	 eax, eax

; 170  :         if (p != NULL)

  00054	74 08		 je	 SHORT $LN21@Clone

; 171  :             p->AddRef();

  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	56		 push	 esi
  00059	ff 50 04	 call	 DWORD PTR [eax+4]
  0005c	8b c6		 mov	 eax, esi
$LN21@Clone:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  0005e	8b 7d 08	 mov	 edi, DWORD PTR $T5[ebp]
  00061	6a 02		 push	 2
  00063	59		 pop	 ecx
$LN40@Clone:
  00064	6a 00		 push	 0
  00066	50		 push	 eax
  00067	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0006a	89 4d fc	 mov	 DWORD PTR $T3[ebp], ecx
  0006d	ff 73 08	 push	 DWORD PTR [ebx+8]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _p$2[ebp]
  00073	e8 00 00 00 00	 call	 ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
  00078	8b d8		 mov	 ebx, eax
  0007a	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	a8 02		 test	 al, 2
  0007f	74 13		 je	 SHORT $LN26@Clone
  00081	83 e0 fd	 and	 eax, -3			; fffffffdH
  00084	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  00087	85 f6		 test	 esi, esi
  00089	74 09		 je	 SHORT $LN26@Clone

; 184  :             p->Release();

  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	56		 push	 esi
  0008e	ff 50 08	 call	 DWORD PTR [eax+8]
  00091	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
$LN26@Clone:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  00094	a8 01		 test	 al, 1
  00096	74 0a		 je	 SHORT $LN31@Clone
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  00098	85 ff		 test	 edi, edi
  0009a	74 06		 je	 SHORT $LN31@Clone

; 184  :             p->Release();

  0009c	8b 07		 mov	 eax, DWORD PTR [edi]
  0009e	57		 push	 edi
  0009f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN31@Clone:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5608 : 			if (SUCCEEDED(hRes))

  000a2	8b 75 f8	 mov	 esi, DWORD PTR _p$2[ebp]
  000a5	85 db		 test	 ebx, ebx
  000a7	78 22		 js	 SHORT $LN37@Clone

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  000a9	ff 75 0c	 push	 DWORD PTR _ppEnum$[ebp]

; 5609 : 			{
; 5610 : 				p->m_iter = m_iter;

  000ac	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  000af	68 00 00 00 00	 push	 OFFSET __GUID_b196b287_bab4_101a_b69c_00aa00341d07
  000b4	68 00 00 00 00	 push	 OFFSET ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  000b9	56		 push	 esi

; 5609 : 			{
; 5610 : 				p->m_iter = m_iter;

  000ba	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000bd	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  000c0	e8 00 00 00 00	 call	 ?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ; ATL::AtlInternalQueryInterface

; 5611 : 				hRes = p->_InternalQueryInterface(*piid, (void**)ppEnum);

  000c5	8b d8		 mov	 ebx, eax

; 5612 : 			}
; 5613 : 			if (FAILED(hRes))

  000c7	85 db		 test	 ebx, ebx
  000c9	79 0d		 jns	 SHORT $LN39@Clone
$LN37@Clone:

; 5614 : 				delete p;

  000cb	85 f6		 test	 esi, esi
  000cd	74 09		 je	 SHORT $LN39@Clone
  000cf	8b 06		 mov	 eax, DWORD PTR [esi]
  000d1	8b ce		 mov	 ecx, esi
  000d3	6a 01		 push	 1
  000d5	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN39@Clone:
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
$LN9@Clone:

; 5615 : 		}
; 5616 : 	}
; 5617 : 
; 5618 : 	return hRes;

  000da	8b c3		 mov	 eax, ebx
  000dc	5b		 pop	 ebx

; 5619 : }

  000dd	c9		 leave
  000de	c2 08 00	 ret	 8
?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset, COMDAT

; 5512 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5513 : 		m_iter = m_begin;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5514 : 		return S_OK;

  0000c	33 c0		 xor	 eax, eax

; 5515 : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_celt$ = 12						; size = 4
?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip, COMDAT

; 5586 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5587 : 	ULONG nRem = ULONG(m_end - m_iter);
; 5588 : 	ULONG nSkip = (celt > nRem) ? nRem : celt;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _celt$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0000a	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0000d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 03	 sar	 eax, 3
  00015	3b c8		 cmp	 ecx, eax
  00017	0f 47 c8	 cmova	 ecx, eax

; 5589 : 	m_iter += nSkip;

  0001a	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  0001d	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 5590 : 	return (celt == nSkip) ? S_OK : S_FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	39 4d 0c	 cmp	 DWORD PTR _celt$[ebp], ecx
  00025	5e		 pop	 esi
  00026	0f 95 c0	 setne	 al

; 5591 : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_hr$1$ = 12						; size = 4
_celt$ = 12						; size = 4
tv294 = 16						; size = 4
_rgelt$ = 16						; size = 4
_pelt$1$ = 20						; size = 4
_pceltFetched$ = 20					; size = 4
?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next, COMDAT

; 5552 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 5553 : 	if (pceltFetched != NULL)

  00006	8b 7d 14	 mov	 edi, DWORD PTR _pceltFetched$[ebp]
  00009	85 ff		 test	 edi, edi
  0000b	74 03		 je	 SHORT $LN6@Next

; 5554 : 		*pceltFetched = 0;

  0000d	83 27 00	 and	 DWORD PTR [edi], 0
$LN6@Next:

; 5555 : 	if (rgelt == NULL || (celt > 1 && pceltFetched == NULL))

  00010	8b 5d 10	 mov	 ebx, DWORD PTR _rgelt$[ebp]
  00013	85 db		 test	 ebx, ebx
  00015	0f 84 b0 00 00
	00		 je	 $LN8@Next
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _celt$[ebp]
  0001e	83 f9 01	 cmp	 ecx, 1
  00021	76 08		 jbe	 SHORT $LN7@Next
  00023	85 ff		 test	 edi, edi
  00025	0f 84 a0 00 00
	00		 je	 $LN8@Next
$LN7@Next:

; 5557 : 	if (m_begin == NULL || m_end == NULL || m_iter == NULL)

  0002b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00032	0f 84 8c 00 00
	00		 je	 $LN10@Next
  00038	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0003b	85 f6		 test	 esi, esi
  0003d	0f 84 81 00 00
	00		 je	 $LN10@Next
  00043	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00047	74 7b		 je	 SHORT $LN10@Next

; 5559 : 	ULONG nRem = (ULONG)(m_end - m_iter);

  00049	2b 70 10	 sub	 esi, DWORD PTR [eax+16]
  0004c	c1 fe 03	 sar	 esi, 3

; 5560 : 	HRESULT hRes = S_OK;
; 5561 : 	if (nRem < celt)
; 5562 : 		hRes = S_FALSE;
; 5563 : 	ULONG nMin = celt < nRem ? celt : nRem ;

  0004f	3b f1		 cmp	 esi, ecx
  00051	1b d2		 sbb	 edx, edx
  00053	f7 da		 neg	 edx
  00055	3b ce		 cmp	 ecx, esi
  00057	89 55 10	 mov	 DWORD PTR tv294[ebp], edx
  0005a	0f 42 f1	 cmovb	 esi, ecx

; 5564 : 	if (pceltFetched != NULL)

  0005d	85 ff		 test	 edi, edi
  0005f	74 02		 je	 SHORT $LN12@Next

; 5565 : 		*pceltFetched = nMin;

  00061	89 37		 mov	 DWORD PTR [edi], esi
$LN12@Next:

; 5566 : 	T* pelt = rgelt;

  00063	8b cb		 mov	 ecx, ebx
  00065	89 4d 14	 mov	 DWORD PTR _pelt$1$[ebp], ecx

; 5567 : 	while(nMin--)

  00068	85 f6		 test	 esi, esi
  0006a	74 2e		 je	 SHORT $LN21@Next
  0006c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
$LL2@Next:

; 5568 : 	{
; 5569 : 		HRESULT hr = Copy::copy(pelt, m_iter);

  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	4e		 dec	 esi
  00072	e8 00 00 00 00	 call	 ?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ; ATL::_Copy<tagCONNECTDATA>::copy
  00077	89 45 0c	 mov	 DWORD PTR _hr$1$[ebp], eax
  0007a	59		 pop	 ecx
  0007b	59		 pop	 ecx

; 5570 : 		if (FAILED(hr))

  0007c	85 c0		 test	 eax, eax
  0007e	78 1e		 js	 SHORT $LN20@Next

; 5577 : 		}
; 5578 : 		pelt++;
; 5579 : 		m_iter++;

  00080	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d 14	 mov	 ecx, DWORD PTR _pelt$1$[ebp]
  00086	83 c1 08	 add	 ecx, 8
  00089	89 4d 14	 mov	 DWORD PTR _pelt$1$[ebp], ecx
  0008c	83 40 10 08	 add	 DWORD PTR [eax+16], 8
  00090	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00093	85 f6		 test	 esi, esi
  00095	75 d8		 jne	 SHORT $LL2@Next

; 5570 : 		if (FAILED(hr))

  00097	8b 55 10	 mov	 edx, DWORD PTR tv294[ebp]
$LN21@Next:

; 5580 : 	}
; 5581 : 	return hRes;

  0009a	8b c2		 mov	 eax, edx
  0009c	eb 32		 jmp	 SHORT $LN1@Next
$LN20@Next:

; 5571 : 		{
; 5572 : 			while (rgelt < pelt)

  0009e	8b 75 14	 mov	 esi, DWORD PTR _pelt$1$[ebp]
  000a1	3b de		 cmp	 ebx, esi
  000a3	73 16		 jae	 SHORT $LN5@Next
$LL4@Next:

; 5436 : 		if (p->pUnk)

  000a5	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 06		 je	 SHORT $LN17@Next

; 5437 : 		{
; 5438 : 			p->pUnk->Release();

  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	51		 push	 ecx
  000ae	ff 50 08	 call	 DWORD PTR [eax+8]
$LN17@Next:

; 5573 : 				Copy::destroy(rgelt++);

  000b1	83 c3 08	 add	 ebx, 8
  000b4	3b de		 cmp	 ebx, esi
  000b6	72 ed		 jb	 SHORT $LL4@Next
  000b8	8b 45 0c	 mov	 eax, DWORD PTR _hr$1$[ebp]
$LN5@Next:

; 5574 : 			if (pceltFetched != NULL)

  000bb	85 ff		 test	 edi, edi
  000bd	74 11		 je	 SHORT $LN1@Next

; 5575 : 				*pceltFetched = 0;

  000bf	83 27 00	 and	 DWORD PTR [edi], 0

; 5576 : 			return hr;

  000c2	eb 0c		 jmp	 SHORT $LN1@Next
$LN10@Next:

; 5558 : 		return E_FAIL;

  000c4	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  000c9	eb 05		 jmp	 SHORT $LN1@Next
$LN8@Next:

; 5556 : 		return E_POINTER;

  000cb	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
$LN1@Next:
  000d0	5f		 pop	 edi

; 5582 : }

  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	5d		 pop	 ebp
  000d4	c2 10 00	 ret	 16			; 00000010H
?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >, COMDAT
; _this$ = ecx

; 5538 : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 5539 : 	if (m_dwFlags & BitOwn)

  00003	f6 47 14 02	 test	 BYTE PTR [edi+20], 2
  00007	74 28		 je	 SHORT $LN5@CComEnumIm

; 5540 : 	{
; 5541 : 		for (T* p = m_begin; p != m_end; p++)

  00009	56		 push	 esi
  0000a	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000d	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  00010	74 17		 je	 SHORT $LN3@CComEnumIm
$LL4@CComEnumIm:

; 5436 : 		if (p->pUnk)

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN2@CComEnumIm

; 5437 : 		{
; 5438 : 			p->pUnk->Release();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	51		 push	 ecx
  0001b	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@CComEnumIm:

; 5540 : 	{
; 5541 : 		for (T* p = m_begin; p != m_end; p++)

  0001e	83 c6 08	 add	 esi, 8
  00021	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  00024	75 ec		 jne	 SHORT $LL4@CComEnumIm
  00026	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
$LN3@CComEnumIm:

; 5542 : 			Copy::destroy(p);
; 5543 : 		delete [] m_begin;

  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002f	59		 pop	 ecx
  00030	5e		 pop	 esi
$LN5@CComEnumIm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  00031	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00034	5f		 pop	 edi
  00035	85 c9		 test	 ecx, ecx
  00037	74 06		 je	 SHORT $LN13@CComEnumIm

; 184  :             p->Release();

  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	51		 push	 ecx
  0003c	ff 50 08	 call	 DWORD PTR [eax+8]
$LN13@CComEnumIm:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5545 : }

  0003f	c3		 ret	 0
??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ
text$di	SEGMENT
??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ PROC ; `dynamic initializer for 'ATL::IConnectionPointContainerImpl<COPOSSoundRecorder>::pConnMap'', COMDAT

; 6573 : __declspec(selectany) const ATL::_ATL_CONNMAP_ENTRY* IConnectionPointContainerImpl<T>::pConnMap = T::GetConnMap(NULL);

  00000	6a 00		 push	 0
  00002	e8 00 00 00 00	 call	 ?GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z ; COPOSSoundRecorder::GetConnMap
  00007	59		 pop	 ecx
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B, eax ; ATL::IConnectionPointContainerImpl<COPOSSoundRecorder>::pConnMap
  0000d	c3		 ret	 0
??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSSoundRecorder@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ ENDP ; `dynamic initializer for 'ATL::IConnectionPointContainerImpl<COPOSSoundRecorder>::pConnMap''
text$di	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?StopRecording@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?StopRecording@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::StopRecording, COMDAT

; 1290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 :     return DoInvoke( DEBUGPARAM("StopRecording") S_OK, NULL, 0, nDIStopRecording, pRC );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	6a 01		 push	 1
  0000a	ff 75 0c	 push	 DWORD PTR _pRC$[ebp]
  0000d	6a 13		 push	 19			; 00000013H
  0000f	50		 push	 eax
  00010	50		 push	 eax
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke

; 1292 : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?StopRecording@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::StopRecording
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?StartRecording@COPOSSoundRecorder@@UAGJPA_WFJPAJ@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -84					; size = 4
_hRC$ = -80						; size = 4
_Vars$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_FileName$ = 12						; size = 4
_OverWrite$ = 16					; size = 2
_RecordingTime$ = 20					; size = 4
_pRC$ = 24						; size = 4
?StartRecording@COPOSSoundRecorder@@UAGJPA_WFJPAJ@Z PROC ; COPOSSoundRecorder::StartRecording, COMDAT

; 1277 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 0c	 mov	 edx, DWORD PTR _FileName$[ebp]

; 1278 :     OposVariant Vars[3];

  00013	8d 45 b4	 lea	 eax, DWORD PTR _Vars$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 18	 mov	 ebx, DWORD PTR _pRC$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0001e	57		 push	 edi
  0001f	6a 03		 push	 3
  00021	5f		 pop	 edi
  00022	89 75 ac	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00025	8b cf		 mov	 ecx, edi
$LL4@StartRecor:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00027	33 f6		 xor	 esi, esi
  00029	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
  0002d	66 89 30	 mov	 WORD PTR [eax], si
  00030	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00033	83 e9 01	 sub	 ecx, 1
  00036	75 ef		 jne	 SHORT $LL4@StartRecor
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1279 :     HRESULT hRC = S_OK;

  00038	21 75 b0	 and	 DWORD PTR _hRC$[ebp], esi

; 1280 :     Vars[2].SetBSTR( FileName, hRC );

  0003b	8d 45 b0	 lea	 eax, DWORD PTR _hRC$[ebp]
  0003e	50		 push	 eax
  0003f	52		 push	 edx
  00040	8d 4d e4	 lea	 ecx, DWORD PTR _Vars$[ebp+48]
  00043	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1281 :     Vars[1].SetVARIANT_BOOL( OverWrite );

  00048	ff 75 10	 push	 DWORD PTR _OverWrite$[ebp]
  0004b	8d 4d cc	 lea	 ecx, DWORD PTR _Vars$[ebp+24]
  0004e	e8 00 00 00 00	 call	 ?SetVARIANT_BOOL@OposVariant@@QAEXF@Z ; OposVariant::SetVARIANT_BOOL

; 1282 :     Vars[0].SetLONG( RecordingTime );

  00053	ff 75 14	 push	 DWORD PTR _RecordingTime$[ebp]
  00056	8d 4d b4	 lea	 ecx, DWORD PTR _Vars$[ebp]
  00059	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1283 :     return DoInvoke( DEBUGPARAM("StartRecording") hRC, Vars, 3, nDIStartRecording, pRC );

  0005e	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00061	8d 45 b4	 lea	 eax, DWORD PTR _Vars$[ebp]
  00064	6a 01		 push	 1
  00066	53		 push	 ebx
  00067	6a 12		 push	 18			; 00000012H
  00069	57		 push	 edi
  0006a	50		 push	 eax
  0006b	ff 75 b0	 push	 DWORD PTR _hRC$[ebp]
  0006e	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
  00073	8b d8		 mov	 ebx, eax
  00075	8d 75 fc	 lea	 esi, DWORD PTR _Vars$[ebp+72]
$LL23@StartRecor:
  00078	83 ee 18	 sub	 esi, 24			; 00000018H
  0007b	4f		 dec	 edi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0007c	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  00080	74 0b		 je	 SHORT $LN14@StartRecor

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00082	56		 push	 esi
  00083	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN14@StartRecor:
  0008d	85 ff		 test	 edi, edi
  0008f	75 e7		 jne	 SHORT $LL23@StartRecor
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1284 : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	8b c3		 mov	 eax, ebx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	33 cd		 xor	 ecx, ebp
  0009a	5b		 pop	 ebx
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	c9		 leave
  000a1	c2 14 00	 ret	 20			; 00000014H
?StartRecording@COPOSSoundRecorder@@UAGJPA_WFJPAJ@Z ENDP ; COPOSSoundRecorder::StartRecording
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_Storage@COPOSSoundRecorder@@UAGJJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_Storage$ = 12						; size = 4
?put_Storage@COPOSSoundRecorder@@UAGJJ@Z PROC		; COPOSSoundRecorder::put_Storage, COMDAT

; 1731 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1732 :     return SetOposProp( DEBUGPARAM("Storage") PIDXSrec_Storage, Storage, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _Storage$[ebp]
  0000b	68 13 a4 00 00	 push	 42003			; 0000a413H
  00010	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1733 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?put_Storage@COPOSSoundRecorder@@UAGJJ@Z ENDP		; COPOSSoundRecorder::put_Storage
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_Storage@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pStorage$ = 12						; size = 4
?get_Storage@COPOSSoundRecorder@@UAGJPAJ@Z PROC		; COPOSSoundRecorder::get_Storage, COMDAT

; 1724 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1725 :     return GetOposProp( DEBUGPARAM("Storage") PIDXSrec_Storage, pStorage, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pStorage$[ebp]
  0000b	68 13 a4 00 00	 push	 42003			; 0000a413H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1726 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_Storage@COPOSSoundRecorder@@UAGJPAJ@Z ENDP		; COPOSSoundRecorder::get_Storage
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_SoundTypeList@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSoundTypeList$ = 12					; size = 4
?get_SoundTypeList@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_SoundTypeList, COMDAT

; 1717 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1718 :     return GetOposProp( DEBUGPARAM("SoundTypeList") PIDXSrec_SoundTypeList, pSoundTypeList, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pSoundTypeList$[ebp]
  0000b	68 57 e6 0f 00	 push	 1042007			; 000fe657H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1719 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_SoundTypeList@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_SoundTypeList
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_SoundType@COPOSSoundRecorder@@UAGJPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_SoundType$ = 12					; size = 4
?put_SoundType@COPOSSoundRecorder@@UAGJPA_W@Z PROC	; COPOSSoundRecorder::put_SoundType, COMDAT

; 1710 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1711 :     return SetOposProp( DEBUGPARAM("SoundType") PIDXSrec_SoundType, SoundType, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _SoundType$[ebp]
  0000b	68 56 e6 0f 00	 push	 1042006			; 000fe656H
  00010	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z ; COPOSSoundRecorder::SetOposProp

; 1712 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?put_SoundType@COPOSSoundRecorder@@UAGJPA_W@Z ENDP	; COPOSSoundRecorder::put_SoundType
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_SoundType@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSoundType$ = 12					; size = 4
?get_SoundType@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC	; COPOSSoundRecorder::get_SoundType, COMDAT

; 1703 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1704 :     return GetOposProp( DEBUGPARAM("SoundType") PIDXSrec_SoundType, pSoundType, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pSoundType$[ebp]
  0000b	68 56 e6 0f 00	 push	 1042006			; 000fe656H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1705 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_SoundType@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP	; COPOSSoundRecorder::get_SoundType
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_SoundData@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSoundData$ = 12					; size = 4
?get_SoundData@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC	; COPOSSoundRecorder::get_SoundData, COMDAT

; 1696 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1697 :     return GetOposProp( DEBUGPARAM("SoundData") PIDXSrec_SoundData, pSoundData, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pSoundData$[ebp]
  0000b	68 55 e6 0f 00	 push	 1042005			; 000fe655H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1698 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_SoundData@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP	; COPOSSoundRecorder::get_SoundData
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_SamplingRateList@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSamplingRateList$ = 12				; size = 4
?get_SamplingRateList@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_SamplingRateList, COMDAT

; 1689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1690 :     return GetOposProp( DEBUGPARAM("SamplingRateList") PIDXSrec_SamplingRateList, pSamplingRateList, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pSamplingRateList$[ebp]
  0000b	68 54 e6 0f 00	 push	 1042004			; 000fe654H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1691 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_SamplingRateList@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_SamplingRateList
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_SamplingRate@COPOSSoundRecorder@@UAGJPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_SamplingRate$ = 12					; size = 4
?put_SamplingRate@COPOSSoundRecorder@@UAGJPA_W@Z PROC	; COPOSSoundRecorder::put_SamplingRate, COMDAT

; 1682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1683 :     return SetOposProp( DEBUGPARAM("SamplingRate") PIDXSrec_SamplingRate, SamplingRate, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _SamplingRate$[ebp]
  0000b	68 53 e6 0f 00	 push	 1042003			; 000fe653H
  00010	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z ; COPOSSoundRecorder::SetOposProp

; 1684 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?put_SamplingRate@COPOSSoundRecorder@@UAGJPA_W@Z ENDP	; COPOSSoundRecorder::put_SamplingRate
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_SamplingRate@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSamplingRate$ = 12					; size = 4
?get_SamplingRate@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC	; COPOSSoundRecorder::get_SamplingRate, COMDAT

; 1675 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1676 :     return GetOposProp( DEBUGPARAM("SamplingRate") PIDXSrec_SamplingRate, pSamplingRate, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pSamplingRate$[ebp]
  0000b	68 53 e6 0f 00	 push	 1042003			; 000fe653H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1677 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_SamplingRate@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP	; COPOSSoundRecorder::get_SamplingRate
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_RemainingRecordingTimeInSec@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRemainingRecordingTimeInSec$ = 12			; size = 4
?get_RemainingRecordingTimeInSec@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::get_RemainingRecordingTimeInSec, COMDAT

; 1668 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1669 :     return GetOposProp( DEBUGPARAM("RemainingRecordingTimeInSec") PIDXSrec_RemainingRecordingTimeInSec, pRemainingRecordingTimeInSec, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pRemainingRecordingTimeInSec$[ebp]
  0000b	68 12 a4 00 00	 push	 42002			; 0000a412H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1670 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_RemainingRecordingTimeInSec@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::get_RemainingRecordingTimeInSec
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_RecordingLevel@COPOSSoundRecorder@@UAGJJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_RecordingLevel$ = 12					; size = 4
?put_RecordingLevel@COPOSSoundRecorder@@UAGJJ@Z PROC	; COPOSSoundRecorder::put_RecordingLevel, COMDAT

; 1661 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1662 :     return SetOposProp( DEBUGPARAM("RecordingLevel") PIDXSrec_RecordingLevel, RecordingLevel, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _RecordingLevel$[ebp]
  0000b	68 11 a4 00 00	 push	 42001			; 0000a411H
  00010	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1663 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?put_RecordingLevel@COPOSSoundRecorder@@UAGJJ@Z ENDP	; COPOSSoundRecorder::put_RecordingLevel
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_RecordingLevel@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRecordingLevel$ = 12					; size = 4
?get_RecordingLevel@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_RecordingLevel, COMDAT

; 1654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 :     return GetOposProp( DEBUGPARAM("RecordingLevel") PIDXSrec_RecordingLevel, pRecordingLevel, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pRecordingLevel$[ebp]
  0000b	68 11 a4 00 00	 push	 42001			; 0000a411H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1656 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_RecordingLevel@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_RecordingLevel
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ChannelList@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pChannelList$ = 12					; size = 4
?get_ChannelList@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC	; COPOSSoundRecorder::get_ChannelList, COMDAT

; 1647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1648 :     return GetOposProp( DEBUGPARAM("ChannelList") PIDXSrec_ChannelList, pChannelList, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pChannelList$[ebp]
  0000b	68 52 e6 0f 00	 push	 1042002			; 000fe652H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1649 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_ChannelList@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP	; COPOSSoundRecorder::get_ChannelList
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_Channel@COPOSSoundRecorder@@UAGJPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_Channel$ = 12						; size = 4
?put_Channel@COPOSSoundRecorder@@UAGJPA_W@Z PROC	; COPOSSoundRecorder::put_Channel, COMDAT

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1641 :     return SetOposProp( DEBUGPARAM("Channel") PIDXSrec_Channel, Channel, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _Channel$[ebp]
  0000b	68 51 e6 0f 00	 push	 1042001			; 000fe651H
  00010	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z ; COPOSSoundRecorder::SetOposProp

; 1642 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?put_Channel@COPOSSoundRecorder@@UAGJPA_W@Z ENDP	; COPOSSoundRecorder::put_Channel
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_Channel@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pChannel$ = 12						; size = 4
?get_Channel@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC	; COPOSSoundRecorder::get_Channel, COMDAT

; 1633 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1634 :     return GetOposProp( DEBUGPARAM("Channel") PIDXSrec_Channel, pChannel, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pChannel$[ebp]
  0000b	68 51 e6 0f 00	 push	 1042001			; 000fe651H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1635 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_Channel@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP	; COPOSSoundRecorder::get_Channel
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapStorage@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapStorage$ = 12					; size = 4
?get_CapStorage@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_CapStorage, COMDAT

; 1626 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1627 :     return GetOposProp( DEBUGPARAM("CapStorage") PIDXSrec_CapStorage, pCapStorage, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapStorage$[ebp]
  0000b	68 09 a6 00 00	 push	 42505			; 0000a609H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1628 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapStorage@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_CapStorage
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapSoundType@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapSoundType$ = 12					; size = 4
?get_CapSoundType@COPOSSoundRecorder@@UAGJPAF@Z PROC	; COPOSSoundRecorder::get_CapSoundType, COMDAT

; 1619 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1620 :     return GetOposProp( DEBUGPARAM("CapSoundType") PIDXSrec_CapSoundType, pCapSoundType, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapSoundType$[ebp]
  0000b	68 08 a6 00 00	 push	 42504			; 0000a608H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1621 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapSoundType@COPOSSoundRecorder@@UAGJPAF@Z ENDP	; COPOSSoundRecorder::get_CapSoundType
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapSamplingRate@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapSamplingRate$ = 12					; size = 4
?get_CapSamplingRate@COPOSSoundRecorder@@UAGJPAF@Z PROC	; COPOSSoundRecorder::get_CapSamplingRate, COMDAT

; 1612 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1613 :     return GetOposProp( DEBUGPARAM("CapSamplingRate") PIDXSrec_CapSamplingRate, pCapSamplingRate, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapSamplingRate$[ebp]
  0000b	68 07 a6 00 00	 push	 42503			; 0000a607H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1614 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapSamplingRate@COPOSSoundRecorder@@UAGJPAF@Z ENDP	; COPOSSoundRecorder::get_CapSamplingRate
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapRecordingLevel@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapRecordingLevel$ = 12				; size = 4
?get_CapRecordingLevel@COPOSSoundRecorder@@UAGJPAF@Z PROC ; COPOSSoundRecorder::get_CapRecordingLevel, COMDAT

; 1605 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1606 :     return GetOposProp( DEBUGPARAM("CapRecordingLevel") PIDXSrec_CapRecordingLevel, pCapRecordingLevel, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapRecordingLevel$[ebp]
  0000b	68 06 a6 00 00	 push	 42502			; 0000a606H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1607 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapRecordingLevel@COPOSSoundRecorder@@UAGJPAF@Z ENDP ; COPOSSoundRecorder::get_CapRecordingLevel
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapChannel@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapChannel$ = 12					; size = 4
?get_CapChannel@COPOSSoundRecorder@@UAGJPAF@Z PROC	; COPOSSoundRecorder::get_CapChannel, COMDAT

; 1598 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1599 :     return GetOposProp( DEBUGPARAM("CapChannel") PIDXSrec_CapChannel, pCapChannel, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapChannel$[ebp]
  0000b	68 05 a6 00 00	 push	 42501			; 0000a605H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1600 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapChannel@COPOSSoundRecorder@@UAGJPAF@Z ENDP	; COPOSSoundRecorder::get_CapChannel
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapAssociatedHardTotalsDevice@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapAssociatedHardTotalsDevice$ = 12			; size = 4
?get_CapAssociatedHardTotalsDevice@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_CapAssociatedHardTotalsDevice, COMDAT

; 1591 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1592 :     return GetOposProp( DEBUGPARAM("CapAssociatedHardTotalsDevice") PIDXSrec_CapAssociatedHardTotalsDevice, pCapAssociatedHardTotalsDevice, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapAssociatedHardTotalsDevice$[ebp]
  0000b	68 45 e8 0f 00	 push	 1042501			; 000fe845H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1593 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapAssociatedHardTotalsDevice@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_CapAssociatedHardTotalsDevice
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?ClearInputProperties@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ClearInputProperties@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::ClearInputProperties, COMDAT

; 1266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1267 :     return DoInvoke( DEBUGPARAM("ClearInputProperties") S_OK, NULL, 0, nDIClearInputProperties, pRC );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	6a 01		 push	 1
  0000a	ff 75 0c	 push	 DWORD PTR _pRC$[ebp]
  0000d	6a 11		 push	 17			; 00000011H
  0000f	50		 push	 eax
  00010	50		 push	 eax
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke

; 1268 : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?ClearInputProperties@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::ClearInputProperties
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?UpdateFirmware@COPOSSoundRecorder@@UAGJPA_WPAJ@Z
_TEXT	SEGMENT
_Var$ = -28						; size = 24
_hRC$ = -4						; size = 4
_this$ = 8						; size = 4
_FirmwareFileName$ = 12					; size = 4
_pRC$ = 16						; size = 4
?UpdateFirmware@COPOSSoundRecorder@@UAGJPA_WPAJ@Z PROC	; COPOSSoundRecorder::UpdateFirmware, COMDAT

; 1255 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00006	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1258 :     Var.SetBSTR( FirmwareFileName, hRC );

  00008	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0000b	21 45 fc	 and	 DWORD PTR _hRC$[ebp], eax
  0000e	56		 push	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000f	66 89 45 e4	 mov	 WORD PTR _Var$[ebp], ax
  00013	88 45 f4	 mov	 BYTE PTR _Var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1258 :     Var.SetBSTR( FirmwareFileName, hRC );

  00016	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00019	50		 push	 eax
  0001a	ff 75 0c	 push	 DWORD PTR _FirmwareFileName$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1259 :     return DoInvoke( DEBUGPARAM("UpdateFirmware") hRC, &Var, 1, nDIUpdateFirmware, pRC );

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00028	6a 01		 push	 1
  0002a	ff 75 10	 push	 DWORD PTR _pRC$[ebp]
  0002d	6a 10		 push	 16			; 00000010H
  0002f	6a 01		 push	 1
  00031	50		 push	 eax
  00032	ff 75 fc	 push	 DWORD PTR _hRC$[ebp]
  00035	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0003a	80 7d f4 00	 cmp	 BYTE PTR _Var$[ebp+16], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1259 :     return DoInvoke( DEBUGPARAM("UpdateFirmware") hRC, &Var, 1, nDIUpdateFirmware, pRC );

  0003e	8b f0		 mov	 esi, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00040	74 0e		 je	 SHORT $LN6@UpdateFirm

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00042	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00045	c6 45 f4 00	 mov	 BYTE PTR _Var$[ebp+16], 0
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN6@UpdateFirm:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1259 :     return DoInvoke( DEBUGPARAM("UpdateFirmware") hRC, &Var, 1, nDIUpdateFirmware, pRC );

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 1260 : }

  00053	c9		 leave
  00054	c2 0c 00	 ret	 12			; 0000000cH
?UpdateFirmware@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ENDP	; COPOSSoundRecorder::UpdateFirmware
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?CompareFirmwareVersion@COPOSSoundRecorder@@UAGJPA_WPAJ1@Z
_TEXT	SEGMENT
_Vars$ = -52						; size = 48
_hRC$ = -4						; size = 4
_this$ = 8						; size = 4
_FirmwareFileName$ = 12					; size = 4
_pResult$ = 16						; size = 4
_pRC$ = 20						; size = 4
?CompareFirmwareVersion@COPOSSoundRecorder@@UAGJPA_WPAJ1@Z PROC ; COPOSSoundRecorder::CompareFirmwareVersion, COMDAT

; 1242 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 1243 :     OposVariant Vars[2];

  00006	8d 45 cc	 lea	 eax, DWORD PTR _Vars$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 02		 push	 2
  0000e	5e		 pop	 esi
  0000f	8b ce		 mov	 ecx, esi
$LL4@CompareFir:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00011	33 d2		 xor	 edx, edx
  00013	66 89 10	 mov	 WORD PTR [eax], dx
  00016	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00019	88 50 f8	 mov	 BYTE PTR [eax-8], dl
  0001c	83 e9 01	 sub	 ecx, 1
  0001f	75 f0		 jne	 SHORT $LL4@CompareFir
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1244 :     HRESULT hRC = S_OK;

  00021	21 55 fc	 and	 DWORD PTR _hRC$[ebp], edx

; 1245 :     Vars[1].SetBSTR( FirmwareFileName, hRC );

  00024	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00027	50		 push	 eax
  00028	ff 75 0c	 push	 DWORD PTR _FirmwareFileName$[ebp]
  0002b	8d 4d e4	 lea	 ecx, DWORD PTR _Vars$[ebp+24]
  0002e	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1246 :     Vars[0].SetLONG_Ptr( pResult, hRC );

  00033	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00036	50		 push	 eax
  00037	ff 75 10	 push	 DWORD PTR _pResult$[ebp]
  0003a	8d 4d cc	 lea	 ecx, DWORD PTR _Vars$[ebp]
  0003d	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 1247 :     return DoInvoke( DEBUGPARAM("CompareFirmwareVersion") hRC, Vars, 2, nDICompareFirmwareVersion, pRC );

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8d 45 cc	 lea	 eax, DWORD PTR _Vars$[ebp]
  00048	6a 01		 push	 1
  0004a	ff 75 14	 push	 DWORD PTR _pRC$[ebp]
  0004d	6a 0f		 push	 15			; 0000000fH
  0004f	56		 push	 esi
  00050	50		 push	 eax
  00051	ff 75 fc	 push	 DWORD PTR _hRC$[ebp]
  00054	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
  00059	8b d8		 mov	 ebx, eax
  0005b	8d 7d fc	 lea	 edi, DWORD PTR _Vars$[ebp+48]
$LL23@CompareFir:
  0005e	83 ef 18	 sub	 edi, 24			; 00000018H
  00061	4e		 dec	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00062	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  00066	74 0b		 je	 SHORT $LN14@CompareFir

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00068	57		 push	 edi
  00069	c6 47 10 00	 mov	 BYTE PTR [edi+16], 0
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN14@CompareFir:
  00073	85 f6		 test	 esi, esi
  00075	75 e7		 jne	 SHORT $LL23@CompareFir
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1247 :     return DoInvoke( DEBUGPARAM("CompareFirmwareVersion") hRC, Vars, 2, nDICompareFirmwareVersion, pRC );

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	8b c3		 mov	 eax, ebx
  0007b	5b		 pop	 ebx

; 1248 : }

  0007c	c9		 leave
  0007d	c2 10 00	 ret	 16			; 00000010H
?CompareFirmwareVersion@COPOSSoundRecorder@@UAGJPA_WPAJ1@Z ENDP ; COPOSSoundRecorder::CompareFirmwareVersion
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?UpdateStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z
_TEXT	SEGMENT
_Var$ = -28						; size = 24
_hRC$ = -4						; size = 4
_this$ = 8						; size = 4
_StatisticsBuffer$ = 12					; size = 4
_pRC$ = 16						; size = 4
?UpdateStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z PROC ; COPOSSoundRecorder::UpdateStatistics, COMDAT

; 1229 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00006	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1232 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00008	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0000b	21 45 fc	 and	 DWORD PTR _hRC$[ebp], eax
  0000e	56		 push	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000f	66 89 45 e4	 mov	 WORD PTR _Var$[ebp], ax
  00013	88 45 f4	 mov	 BYTE PTR _Var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1232 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00016	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00019	50		 push	 eax
  0001a	ff 75 0c	 push	 DWORD PTR _StatisticsBuffer$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1233 :     return DoInvoke( DEBUGPARAM("UpdateStatistics") hRC, &Var, 1, nDIUpdateStatistics, pRC );

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00028	6a 01		 push	 1
  0002a	ff 75 10	 push	 DWORD PTR _pRC$[ebp]
  0002d	6a 0e		 push	 14			; 0000000eH
  0002f	6a 01		 push	 1
  00031	50		 push	 eax
  00032	ff 75 fc	 push	 DWORD PTR _hRC$[ebp]
  00035	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0003a	80 7d f4 00	 cmp	 BYTE PTR _Var$[ebp+16], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1233 :     return DoInvoke( DEBUGPARAM("UpdateStatistics") hRC, &Var, 1, nDIUpdateStatistics, pRC );

  0003e	8b f0		 mov	 esi, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00040	74 0e		 je	 SHORT $LN6@UpdateStat

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00042	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00045	c6 45 f4 00	 mov	 BYTE PTR _Var$[ebp+16], 0
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN6@UpdateStat:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1233 :     return DoInvoke( DEBUGPARAM("UpdateStatistics") hRC, &Var, 1, nDIUpdateStatistics, pRC );

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 1234 : }

  00053	c9		 leave
  00054	c2 0c 00	 ret	 12			; 0000000cH
?UpdateStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ENDP ; COPOSSoundRecorder::UpdateStatistics
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?RetrieveStatistics@COPOSSoundRecorder@@UAGJPAPA_WPAJ@Z
_TEXT	SEGMENT
_Var$ = -28						; size = 24
_hRC$ = -4						; size = 4
_this$ = 8						; size = 4
_pStatisticsBuffer$ = 12				; size = 4
_pRC$ = 16						; size = 4
?RetrieveStatistics@COPOSSoundRecorder@@UAGJPAPA_WPAJ@Z PROC ; COPOSSoundRecorder::RetrieveStatistics, COMDAT

; 1217 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00006	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1220 :     Var.SetBSTR_InOutPtr( pStatisticsBuffer, hRC );

  00008	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0000b	21 45 fc	 and	 DWORD PTR _hRC$[ebp], eax
  0000e	56		 push	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000f	66 89 45 e4	 mov	 WORD PTR _Var$[ebp], ax
  00013	88 45 f4	 mov	 BYTE PTR _Var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1220 :     Var.SetBSTR_InOutPtr( pStatisticsBuffer, hRC );

  00016	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00019	50		 push	 eax
  0001a	ff 75 0c	 push	 DWORD PTR _pStatisticsBuffer$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 1221 :     return DoInvoke( DEBUGPARAM("RetrieveStatistics") hRC, &Var, 1, nDIRetrieveStatistics, pRC );

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00028	6a 01		 push	 1
  0002a	ff 75 10	 push	 DWORD PTR _pRC$[ebp]
  0002d	6a 0d		 push	 13			; 0000000dH
  0002f	6a 01		 push	 1
  00031	50		 push	 eax
  00032	ff 75 fc	 push	 DWORD PTR _hRC$[ebp]
  00035	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0003a	80 7d f4 00	 cmp	 BYTE PTR _Var$[ebp+16], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1221 :     return DoInvoke( DEBUGPARAM("RetrieveStatistics") hRC, &Var, 1, nDIRetrieveStatistics, pRC );

  0003e	8b f0		 mov	 esi, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00040	74 0e		 je	 SHORT $LN6@RetrieveSt

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00042	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00045	c6 45 f4 00	 mov	 BYTE PTR _Var$[ebp+16], 0
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN6@RetrieveSt:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1221 :     return DoInvoke( DEBUGPARAM("RetrieveStatistics") hRC, &Var, 1, nDIRetrieveStatistics, pRC );

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 1222 : }

  00053	c9		 leave
  00054	c2 0c 00	 ret	 12			; 0000000cH
?RetrieveStatistics@COPOSSoundRecorder@@UAGJPAPA_WPAJ@Z ENDP ; COPOSSoundRecorder::RetrieveStatistics
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?ResetStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z
_TEXT	SEGMENT
_Var$ = -28						; size = 24
_hRC$ = -4						; size = 4
_this$ = 8						; size = 4
_StatisticsBuffer$ = 12					; size = 4
_pRC$ = 16						; size = 4
?ResetStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z PROC	; COPOSSoundRecorder::ResetStatistics, COMDAT

; 1205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00006	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1208 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00008	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0000b	21 45 fc	 and	 DWORD PTR _hRC$[ebp], eax
  0000e	56		 push	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000f	66 89 45 e4	 mov	 WORD PTR _Var$[ebp], ax
  00013	88 45 f4	 mov	 BYTE PTR _Var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1208 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00016	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00019	50		 push	 eax
  0001a	ff 75 0c	 push	 DWORD PTR _StatisticsBuffer$[ebp]
  0001d	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1209 :     return DoInvoke( DEBUGPARAM("ResetStatistics") hRC, &Var, 1, nDIResetStatistics, pRC );

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00028	6a 01		 push	 1
  0002a	ff 75 10	 push	 DWORD PTR _pRC$[ebp]
  0002d	6a 0c		 push	 12			; 0000000cH
  0002f	6a 01		 push	 1
  00031	50		 push	 eax
  00032	ff 75 fc	 push	 DWORD PTR _hRC$[ebp]
  00035	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0003a	80 7d f4 00	 cmp	 BYTE PTR _Var$[ebp+16], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1209 :     return DoInvoke( DEBUGPARAM("ResetStatistics") hRC, &Var, 1, nDIResetStatistics, pRC );

  0003e	8b f0		 mov	 esi, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00040	74 0e		 je	 SHORT $LN6@ResetStati

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00042	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00045	c6 45 f4 00	 mov	 BYTE PTR _Var$[ebp+16], 0
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN6@ResetStati:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1209 :     return DoInvoke( DEBUGPARAM("ResetStatistics") hRC, &Var, 1, nDIResetStatistics, pRC );

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 1210 : }

  00053	c9		 leave
  00054	c2 0c 00	 ret	 12			; 0000000cH
?ResetStatistics@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ENDP	; COPOSSoundRecorder::ResetStatistics
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?ReleaseDevice@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ReleaseDevice@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::ReleaseDevice, COMDAT

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00004	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00007	83 8e f0 00 00
	00 ff		 or	 DWORD PTR [esi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1134 :     if ( ! _bOpened )

  0000e	80 be e0 00 00
	00 00		 cmp	 BYTE PTR [esi+224], 0
  00015	75 0d		 jne	 SHORT $LN2@ReleaseDev

; 1135 :     {
; 1136 :         *pRC = OPOS_E_CLOSED;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  0001a	c7 00 65 00 00
	00		 mov	 DWORD PTR [eax], 101	; 00000065H

; 1137 :         DOTRACEV( ( _T("*ReleaseDevice [Function] -- Closed") ) );
; 1138 :         return S_OK;

  00020	33 c0		 xor	 eax, eax
  00022	eb 26		 jmp	 SHORT $LN1@ReleaseDev
$LN2@ReleaseDev:
  00024	53		 push	 ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h

; 230  :         ::SetEvent( _Event_FiringDoneEvent );

  00025	ff b6 5c 01 00
	00		 push	 DWORD PTR [esi+348]
  0002b	33 db		 xor	 ebx, ebx
  0002d	88 9e 59 01 00
	00		 mov	 BYTE PTR [esi+345], bl
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1145 :     return DoInvoke( DEBUGPARAM("ReleaseDevice") S_OK, NULL, 0, nDIReleaseDevice, pRC, false );

  00039	53		 push	 ebx
  0003a	ff 75 0c	 push	 DWORD PTR _pRC$[ebp]
  0003d	8b ce		 mov	 ecx, esi
  0003f	6a 0b		 push	 11			; 0000000bH
  00041	53		 push	 ebx
  00042	53		 push	 ebx
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
  00049	5b		 pop	 ebx
$LN1@ReleaseDev:
  0004a	5e		 pop	 esi

; 1146 : }

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?ReleaseDevice@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::ReleaseDevice
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?Open@COPOSSoundRecorder@@UAGJPA_WPAJ@Z
_TEXT	SEGMENT
_VarResult$1 = -1720					; size = 24
_nSOVersion$ = -1696					; size = 4
_pUnknown$ = -1692					; size = 4
_hServiceKey$ = -1688					; size = 4
tv1290 = -1684						; size = 4
_pDispatch$ = -1680					; size = 4
_dwType$ = -1676					; size = 4
_dwSize$ = -1672					; size = 4
_hBaseKey$ = -1668					; size = 4
_pMN$2 = -1664						; size = 4
_pMN$3 = -1664						; size = 4
_pRC$GSCopy$1$ = -1660					; size = 4
_hRCTmp$4 = -1660					; size = 4
tv1257 = -1656						; size = 4
tv1223 = -1656						; size = 4
$T5 = -1656						; size = 4
_DispID$6 = -1656					; size = 4
$T7 = -1652						; size = 20
$T8 = -1652						; size = 20
_MN$9 = -1652						; size = 20
$T10 = -1652						; size = 20
$T11 = -1652						; size = 20
_Disp$12 = -1648					; size = 16
_hRC$ = -1632						; size = 4
_SOClassID$ = -1628					; size = 16
_Vars$ = -1612						; size = 72
_szBaseKey$ = -1540					; size = 512
_sSOProgID$ = -1028					; size = 512
_szPhysicalDeviceName$ = -516				; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_DeviceName$ = 12					; size = 4
_pRC$ = 16						; size = 4
?Open@COPOSSoundRecorder@@UAGJPA_WPAJ@Z PROC		; COPOSSoundRecorder::Open, COMDAT

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 06 00
	00		 sub	 esp, 1720		; 000006b8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _DeviceName$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
  0001e	89 85 84 f9 ff
	ff		 mov	 DWORD PTR _pRC$GSCopy$1$[ebp], eax

; 683  :     HRESULT hRC;
; 684  :     LONG nError;
; 685  : 
; 686  :     DOTRACE( ( _T("*Open [Function]: DeviceName <%ls>"), DeviceName ) );
; 687  : 
; 688  :     // If already open, return error.
; 689  :     if ( _bOpened )

  00024	80 bf e0 00 00
	00 00		 cmp	 BYTE PTR [edi+224], 0
  0002b	74 1c		 je	 SHORT $LN4@Open
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0002d	6a 6a		 push	 106			; 0000006aH
  0002f	59		 pop	 ecx
  00030	89 8f f0 00 00
	00		 mov	 DWORD PTR [edi+240], ecx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 691  :         *pRC = SetRC( OPOS_E_ILLEGAL );

  00036	89 08		 mov	 DWORD PTR [eax], ecx

; 692  :         _nOpenResult = OPOS_OR_ALREADYOPEN;
; 693  :         DOTRACE( ( _T("-  Failed: CCO already open (%d/%d)"), *pRC, _nOpenResult ) );
; 694  :         return S_OK;

  00038	33 c0		 xor	 eax, eax
  0003a	c7 87 e4 00 00
	00 2d 01 00 00	 mov	 DWORD PTR [edi+228], 301 ; 0000012dH
  00044	e9 e9 07 00 00	 jmp	 $LN1@Open
$LN4@Open:
  00049	53		 push	 ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0004a	6a 6d		 push	 109			; 0000006dH
  0004c	59		 pop	 ecx
  0004d	89 8f f0 00 00
	00		 mov	 DWORD PTR [edi+240], ecx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 698  :     *pRC = SetRC( OPOS_E_NOEXIST );

  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 699  :     _nOpenResult = OPOS_OR_REGBADNAME;
; 700  : 
; 701  :     // Check the DeviceName length...
; 702  :     UINT nDeviceNameLen = ::SysStringLen( DeviceName );

  00055	56		 push	 esi
  00056	c7 87 e4 00 00
	00 2e 01 00 00	 mov	 DWORD PTR [edi+228], 302 ; 0000012eH
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringLen@4

; 703  : 
; 704  :     //  - Ensure that the DeviceName is not an empty string.
; 705  :     if ( nDeviceNameLen == 0 )

  00066	85 c0		 test	 eax, eax
  00068	0f 84 c1 07 00
	00		 je	 $LN12@Open

; 706  :     {
; 707  :         DOTRACE( ( _T("-  Failed: Empty device name (%d/%d)"), *pRC, _nOpenResult ) );
; 708  :         return S_OK;
; 709  :     }
; 710  : 
; 711  :     //  - Ensure that the DeviceName is not unreasonably long.
; 712  :     //     Otherwise it may overrun this line below: wcscpy( szPhysicalDeviceName, DeviceName )
; 713  :     if ( nDeviceNameLen >= MAX_REGBUFFER_SIZE )

  0006e	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00073	0f 83 b6 07 00
	00		 jae	 $LN12@Open

; 714  :     {
; 715  :         DOTRACE( ( _T("-  Failed: Device name too big (%d/%d)"), *pRC, _nOpenResult ) );
; 716  :         return S_OK;
; 717  :     }
; 718  : 
; 719  :     // Form and open the base key.
; 720  :     TCHAR szBaseKey[ MAX_REGBUFFER_SIZE ];
; 721  :     HKEY hBaseKey;
; 722  :     cw_strcpy( szBaseKey, OPOS_ROOTKEY "\\" OPOS_CLASSKEY_SREC );

  00079	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _szBaseKey$[ebp]
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@NFPIBIIC@SOFTWARE?2OLEforRetail?2ServiceOP@
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?cw_strcpy@@YAHPA_WPBD@Z ; cw_strcpy
  0008a	59		 pop	 ecx
  0008b	59		 pop	 ecx

; 723  :     nError = RegOpenKeyEx(

  0008c	8d 85 7c f9 ff
	ff		 lea	 eax, DWORD PTR _hBaseKey$[ebp]
  00092	33 db		 xor	 ebx, ebx
  00094	50		 push	 eax
  00095	68 19 00 02 00	 push	 131097			; 00020019H
  0009a	53		 push	 ebx
  0009b	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _szBaseKey$[ebp]
  000a1	50		 push	 eax
  000a2	68 02 00 00 80	 push	 -2147483646		; 80000002H
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExW@20

; 724  :             HKEY_LOCAL_MACHINE,         // Handle to open key
; 725  :             szBaseKey,                  // Address of name of subkey to open
; 726  :             0,                          // Reserved
; 727  :             KEY_READ,                   // Security access mask
; 728  :             &hBaseKey );                // Address of handle to open key
; 729  :     if ( ERROR_SUCCESS != nError )

  000ad	85 c0		 test	 eax, eax
  000af	0f 85 7a 07 00
	00		 jne	 $LN12@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  000b5	83 8d 8c f9 ff
	ff ff		 or	 DWORD PTR $T11[ebp], -1

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  000bc	8b c6		 mov	 eax, esi
  000be	83 8d 98 f9 ff
	ff ff		 or	 DWORD PTR $T11[ebp+12], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 743  :     DWORD dwSize = sizeof( szPhysicalDeviceName );

  000c5	c7 85 78 f9 ff
	ff 00 02 00 00	 mov	 DWORD PTR _dwSize$[ebp], 512 ; 00000200H
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  000cf	89 85 90 f9 ff
	ff		 mov	 DWORD PTR $T11[ebp+4], eax
  000d5	88 9d 9c f9 ff
	ff		 mov	 BYTE PTR $T11[ebp+16], bl
  000db	83 fe ff	 cmp	 esi, -1

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  000de	75 11		 jne	 SHORT $LN56@Open
  000e0	8d 8d 8c f9 ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  000e6	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
  000eb	8b 85 90 f9 ff
	ff		 mov	 eax, DWORD PTR $T11[ebp+4]
$LN56@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 751  :             &dwSize ) ||                // Address of data buffer size

  000f1	8d 8d 78 f9 ff
	ff		 lea	 ecx, DWORD PTR _dwSize$[ebp]
  000f7	51		 push	 ecx
  000f8	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR _szPhysicalDeviceName$[ebp]
  000fe	51		 push	 ecx
  000ff	8d 8d 74 f9 ff
	ff		 lea	 ecx, DWORD PTR _dwType$[ebp]
  00105	51		 push	 ecx
  00106	53		 push	 ebx
  00107	50		 push	 eax
  00108	ff b5 7c f9 ff
	ff		 push	 DWORD PTR _hBaseKey$[ebp]
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24
  00114	85 c0		 test	 eax, eax
  00116	75 09		 jne	 SHORT $LN41@Open
  00118	83 bd 74 f9 ff
	ff 01		 cmp	 DWORD PTR _dwType$[ebp], 1
  0011f	74 02		 je	 SHORT $LN42@Open
$LN41@Open:
  00121	b3 01		 mov	 bl, 1
$LN42@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00123	8a 85 9c f9 ff
	ff		 mov	 al, BYTE PTR $T11[ebp+16]
  00129	3c 63		 cmp	 al, 99			; 00000063H
  0012b	75 08		 jne	 SHORT $LN59@Open
  0012d	ff b5 8c f9 ff
	ff		 push	 DWORD PTR $T11[ebp]
  00133	eb 0a		 jmp	 SHORT $LN224@Open
$LN59@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00135	3c 77		 cmp	 al, 119			; 00000077H
  00137	75 0c		 jne	 SHORT $LN61@Open
  00139	ff b5 90 f9 ff
	ff		 push	 DWORD PTR $T11[ebp+4]
$LN224@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 751  :             &dwSize ) ||                // Address of data buffer size

  0013f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00144	59		 pop	 ecx
$LN61@Open:
  00145	84 db		 test	 bl, bl
  00147	74 19		 je	 SHORT $LN8@Open

; 752  :          dwType != REG_SZ
; 753  :        )
; 754  :     {
; 755  :         wcscpy( szPhysicalDeviceName, DeviceName );

  00149	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR _szPhysicalDeviceName$[ebp]
  0014f	2b ce		 sub	 ecx, esi
$LL43@Open:
  00151	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00154	66 89 04 31	 mov	 WORD PTR [ecx+esi], ax
  00158	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  0015b	66 85 c0	 test	 ax, ax
  0015e	75 f1		 jne	 SHORT $LL43@Open

; 756  :         DOTRACE( ( _T("    DeviceName is not a LogicalName; treating as PhysicalName") ) );
; 757  :     }

  00160	eb 06		 jmp	 SHORT $LN9@Open
$LN8@Open:

; 758  :     else
; 759  :     {
; 760  :         NULTERMINATE(szPhysicalDeviceName);

  00162	33 c0		 xor	 eax, eax
  00164	66 89 45 fa	 mov	 WORD PTR _szPhysicalDeviceName$[ebp+510], ax
$LN9@Open:

; 761  :         DOTRACE( ( _T("    DeviceName is a LogicalName; converted to PhysicalName <%s>"), szPhysicalDeviceName ) );
; 762  :     }
; 763  : 
; 764  :     // Open the physical registry entry. Close the base key.
; 765  :     //   If fails, then return error.
; 766  :     HKEY hServiceKey;
; 767  :     LONG nRegStat = RegOpenKeyEx(

  00168	8d 85 68 f9 ff
	ff		 lea	 eax, DWORD PTR _hServiceKey$[ebp]
  0016e	50		 push	 eax
  0016f	68 19 00 02 00	 push	 131097			; 00020019H
  00174	6a 00		 push	 0
  00176	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szPhysicalDeviceName$[ebp]
  0017c	50		 push	 eax
  0017d	ff b5 7c f9 ff
	ff		 push	 DWORD PTR _hBaseKey$[ebp]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExW@20

; 768  :             hBaseKey,                   // handle to open key
; 769  :             szPhysicalDeviceName,       // address of name of subkey to open
; 770  :             0,                          // reserved
; 771  :             KEY_READ,                   // security access mask
; 772  :             &hServiceKey );             // address of handle to open key
; 773  :     RegCloseKey( hBaseKey );

  00189	ff b5 7c f9 ff
	ff		 push	 DWORD PTR _hBaseKey$[ebp]
  0018f	8b f0		 mov	 esi, eax
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 774  :     if ( ERROR_SUCCESS != nRegStat )

  00197	85 f6		 test	 esi, esi
  00199	0f 85 90 06 00
	00		 jne	 $LN12@Open

; 783  :     *pRC = SetRC( OPOS_E_NOSERVICE );

  0019f	8b 8d 84 f9 ff
	ff		 mov	 ecx, DWORD PTR _pRC$GSCopy$1$[ebp]

; 784  :     _nOpenResult = OPOS_OR_REGPROGID;

  001a5	8d 9f e4 00 00
	00		 lea	 ebx, DWORD PTR [edi+228]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  001ab	6a 68		 push	 104			; 00000068H
  001ad	58		 pop	 eax
  001ae	89 87 f0 00 00
	00		 mov	 DWORD PTR [edi+240], eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 783  :     *pRC = SetRC( OPOS_E_NOSERVICE );

  001b4	89 01		 mov	 DWORD PTR [ecx], eax

; 785  : 
; 786  :     // Now get the Service Object's ProgID, which is the default value's data for the device's key.
; 787  :     //   If fails, then return error.
; 788  :     TCHAR sSOProgID[ MAX_REGBUFFER_SIZE ];
; 789  :     dwSize = sizeof( sSOProgID );
; 790  :     nRegStat = RegQueryValueEx(

  001b6	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _dwSize$[ebp]
  001bc	50		 push	 eax
  001bd	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _sSOProgID$[ebp]
  001c3	89 9d 6c f9 ff
	ff		 mov	 DWORD PTR tv1290[ebp], ebx
  001c9	50		 push	 eax
  001ca	8d 85 74 f9 ff
	ff		 lea	 eax, DWORD PTR _dwType$[ebp]
  001d0	c7 03 2f 01 00
	00		 mov	 DWORD PTR [ebx], 303	; 0000012fH
  001d6	50		 push	 eax
  001d7	56		 push	 esi
  001d8	56		 push	 esi
  001d9	ff b5 68 f9 ff
	ff		 push	 DWORD PTR _hServiceKey$[ebp]
  001df	c7 85 78 f9 ff
	ff 00 02 00 00	 mov	 DWORD PTR _dwSize$[ebp], 512 ; 00000200H
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24

; 791  :             hServiceKey,                // Handle to key to query
; 792  :             0,                          // Address of name of value to query
; 793  :             0,                          // Reserved
; 794  :             &dwType,                    // Address of buffer for value type
; 795  :             (LPBYTE) sSOProgID,         // Address of data buffer
; 796  :             &dwSize );                  // Address of data buffer size
; 797  :     RegCloseKey( hServiceKey );

  001ef	ff b5 68 f9 ff
	ff		 push	 DWORD PTR _hServiceKey$[ebp]
  001f5	8b f0		 mov	 esi, eax
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 798  :     if ( ERROR_SUCCESS != nRegStat || dwType != REG_SZ )

  001fd	85 f6		 test	 esi, esi
  001ff	0f 85 2a 06 00
	00		 jne	 $LN12@Open
  00205	83 bd 74 f9 ff
	ff 01		 cmp	 DWORD PTR _dwType$[ebp], 1
  0020c	0f 85 1d 06 00
	00		 jne	 $LN12@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  00212	83 8d 8c f9 ff
	ff ff		 or	 DWORD PTR $T10[ebp], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 804  :     NULTERMINATE(sSOProgID);

  00219	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  0021b	83 8d 98 f9 ff
	ff ff		 or	 DWORD PTR $T10[ebp+12], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 804  :     NULTERMINATE(sSOProgID);

  00222	66 89 85 fa fd
	ff ff		 mov	 WORD PTR _sSOProgID$[ebp+510], ax
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  00229	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _sSOProgID$[ebp]
  0022f	8b c8		 mov	 ecx, eax
  00231	89 85 90 f9 ff
	ff		 mov	 DWORD PTR $T10[ebp+4], eax
  00237	c6 85 9c f9 ff
	ff 00		 mov	 BYTE PTR $T10[ebp+16], 0
  0023e	83 f9 ff	 cmp	 ecx, -1

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00241	75 11		 jne	 SHORT $LN68@Open
  00243	8d 8d 8c f9 ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00249	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
  0024e	8b 85 90 f9 ff
	ff		 mov	 eax, DWORD PTR $T10[ebp+4]
$LN68@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 809  :     hRC = CLSIDFromProgID(

  00254	8d 8d a4 f9 ff
	ff		 lea	 ecx, DWORD PTR _SOClassID$[ebp]
  0025a	51		 push	 ecx
  0025b	50		 push	 eax
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CLSIDFromProgID@8
  00262	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR _hRC$[ebp], eax
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00268	8a 85 9c f9 ff
	ff		 mov	 al, BYTE PTR $T10[ebp+16]
  0026e	3c 63		 cmp	 al, 99			; 00000063H
  00270	75 08		 jne	 SHORT $LN71@Open
  00272	ff b5 8c f9 ff
	ff		 push	 DWORD PTR $T10[ebp]
  00278	eb 0a		 jmp	 SHORT $LN225@Open
$LN71@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  0027a	3c 77		 cmp	 al, 119			; 00000077H
  0027c	75 0c		 jne	 SHORT $LN73@Open
  0027e	ff b5 90 f9 ff
	ff		 push	 DWORD PTR $T10[ebp+4]
$LN225@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 812  :     if ( S_OK != hRC )

  00284	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00289	59		 pop	 ecx
$LN73@Open:
  0028a	83 bd a0 f9 ff
	ff 00		 cmp	 DWORD PTR _hRC$[ebp], 0
  00291	0f 85 98 05 00
	00		 jne	 $LN12@Open

; 813  :     {
; 814  :         DOTRACE( ( _T("-  Failed: Cannot convert ProgID to ClassID (%d/%d)"), *pRC, _nOpenResult ) );
; 815  :         DOTRACEERR( _T("    CLSIDFromProgID error 0x%X\n    %s"), hRC );
; 816  :         return S_OK;
; 817  :     }
; 818  :     DOTRACE( ( _T("    ProgID mapped to ClassID") ) );
; 819  : 
; 820  :     // Make the connection to the Service Object.
; 821  :     //   We create an instance, get the IDispatch pointer, then release the IUnknown pointer.
; 822  :     IUnknown* pUnknown;
; 823  :     hRC = CoCreateInstance(

  00297	8d 85 64 f9 ff
	ff		 lea	 eax, DWORD PTR _pUnknown$[ebp]
  0029d	50		 push	 eax
  0029e	68 00 00 00 00	 push	 OFFSET _IID_IUnknown
  002a3	6a 17		 push	 23			; 00000017H
  002a5	6a 00		 push	 0
  002a7	8d 85 a4 f9 ff
	ff		 lea	 eax, DWORD PTR _SOClassID$[ebp]
  002ad	50		 push	 eax
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  002b4	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR _hRC$[ebp], eax

; 824  :             SOClassID,                  // Class identifier (CLSID) of the object
; 825  :             0,                          // Pointer to whether object is or isn't part of an aggregate
; 826  :             CLSCTX_ALL,                 // Context for running executable code
; 827  :             IID_IUnknown,               // Reference to the identifier of the interface
; 828  :             (void**) &pUnknown);        // Address of output variable that receives the interface pointer requested in riid
; 829  :     if ( S_OK != hRC )

  002ba	85 c0		 test	 eax, eax
  002bc	0f 85 67 05 00
	00		 jne	 $LN220@Open

; 830  :     {
; 831  :         _nOpenResult = OPOS_OR_CREATE;
; 832  :         DOTRACE( ( _T("-  Failed: Cannot create Service Object (%d/%d)"), *pRC, _nOpenResult ) );
; 833  :         DOTRACEERR( _T("    CoCreateInstance error 0x%X\n    %s"), hRC );
; 834  :         return S_OK;
; 835  :     }
; 836  :     DOTRACE( ( _T("    Created Service Object") ) );
; 837  : 
; 838  :     hRC = pUnknown->QueryInterface(

  002c2	8b 85 64 f9 ff
	ff		 mov	 eax, DWORD PTR _pUnknown$[ebp]
  002c8	8d b7 f4 00 00
	00		 lea	 esi, DWORD PTR [edi+244]
  002ce	56		 push	 esi
  002cf	68 00 00 00 00	 push	 OFFSET _IID_IDispatch
  002d4	50		 push	 eax
  002d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d7	89 b5 88 f9 ff
	ff		 mov	 DWORD PTR tv1257[ebp], esi
  002dd	ff 11		 call	 DWORD PTR [ecx]
  002df	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR _hRC$[ebp], eax

; 839  :             IID_IDispatch,              // Identifier of the requested interface
; 840  :             (void**) &_pService );      // Address of output variable that receives the interface pointer requested in iid
; 841  :     pUnknown->Release();                // Done with original pointer.

  002e5	8b 85 64 f9 ff
	ff		 mov	 eax, DWORD PTR _pUnknown$[ebp]
  002eb	50		 push	 eax
  002ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ee	ff 51 08	 call	 DWORD PTR [ecx+8]

; 842  :     if ( S_OK != hRC )

  002f1	83 bd a0 f9 ff
	ff 00		 cmp	 DWORD PTR _hRC$[ebp], 0
  002f8	0f 85 2b 05 00
	00		 jne	 $LN220@Open

; 845  :         DOTRACE( ( _T("-  Failed: Cannot get Service Object's Dispatch pointer (%d/%d)"), *pRC, _nOpenResult ) );
; 846  :         DOTRACEERR( _T("    QueryInterface error 0x%X\n    %s"), hRC );
; 847  :         return S_OK;
; 848  :     }
; 849  :     DOTRACE( ( _T("    Acquired Service Object's dispatch pointer") ) );
; 850  : 
; 851  :     // Get the dispatch IDs for the methods supported by the Service Object.
; 852  :     //   Stop when we can't get one or when all are acquired.
; 853  :     int nMethodCount = 0;

  002fe	33 db		 xor	 ebx, ebx

; 854  :     while ( s_SOMethodNames[nMethodCount] != 0 )

  00300	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?s_SOMethodNames@@3PAPADA, ebx
  00306	0f 84 08 01 00
	00		 je	 $LN221@Open
$LL2@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  0030c	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?s_SOMethodNames@@3PAPADA[ebx*4]

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00313	8d 8d 8c f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$9[ebp]

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00319	83 8d 90 f9 ff
	ff ff		 or	 DWORD PTR _MN$9[ebp+4], -1
  00320	83 8d 94 f9 ff
	ff ff		 or	 DWORD PTR _MN$9[ebp+8], -1
  00327	89 85 8c f9 ff
	ff		 mov	 DWORD PTR _MN$9[ebp], eax
  0032d	c6 85 9c f9 ff
	ff 00		 mov	 BYTE PTR _MN$9[ebp+16], 0

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00334	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 858  :         if ( S_OK !=

  00339	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0033b	8d 97 04 01 00
	00		 lea	 edx, DWORD PTR [edi+260]
  00341	8b 85 90 f9 ff
	ff		 mov	 eax, DWORD PTR _MN$9[ebp+4]
  00347	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  0034a	52		 push	 edx
  0034b	68 00 08 00 00	 push	 2048			; 00000800H
  00350	6a 01		 push	 1
  00352	8d 95 80 f9 ff
	ff		 lea	 edx, DWORD PTR _pMN$3[ebp]
  00358	89 85 80 f9 ff
	ff		 mov	 DWORD PTR _pMN$3[ebp], eax
  0035e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00360	52		 push	 edx
  00361	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00366	51		 push	 ecx
  00367	ff 50 14	 call	 DWORD PTR [eax+20]
  0036a	85 c0		 test	 eax, eax
  0036c	74 51		 je	 SHORT $LN211@Open

; 859  :              _pService->GetIDsOfNames(
; 860  :                 IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nMethodCount] )
; 861  :            )
; 862  :         {
; 863  :             // If failed, do special cases:
; 864  :             //  - If we failed the newer CloseService, then try Close before failing.
; 865  :             if ( nMethodCount == nDICloseService )

  0036e	83 fb 09	 cmp	 ebx, 9
  00371	75 07		 jne	 SHORT $LN17@Open

; 866  :                 pMN = L"Close";

  00373	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@
  00378	eb 16		 jmp	 SHORT $LN22@Open
$LN17@Open:

; 867  :             //  - If we failed the newer COM-friendly name ClaimDevice or ReleaseDevice,
; 868  :             //    then try the original name Claim or Release before failing.
; 869  :             else if ( nMethodCount == nDIClaimDevice )

  0037a	83 fb 07	 cmp	 ebx, 7
  0037d	75 07		 jne	 SHORT $LN19@Open

; 870  :                 pMN = L"Claim";

  0037f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@
  00384	eb 0a		 jmp	 SHORT $LN22@Open
$LN19@Open:

; 871  :             else if ( nMethodCount == nDIReleaseDevice )

  00386	83 fb 0b	 cmp	 ebx, 11			; 0000000bH
  00389	75 67		 jne	 SHORT $LN193@Open

; 872  :                 pMN = L"Release";

  0038b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@
$LN22@Open:

; 873  :             else                        // If not special case,
; 874  :                 break;                  //   stop.
; 875  :             if ( S_OK !=

  00390	8d 97 04 01 00
	00		 lea	 edx, DWORD PTR [edi+260]
  00396	89 85 80 f9 ff
	ff		 mov	 DWORD PTR _pMN$3[ebp], eax
  0039c	8b 06		 mov	 eax, DWORD PTR [esi]
  0039e	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  003a1	52		 push	 edx
  003a2	68 00 08 00 00	 push	 2048			; 00000800H
  003a7	6a 01		 push	 1
  003a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ab	8d 95 80 f9 ff
	ff		 lea	 edx, DWORD PTR _pMN$3[ebp]
  003b1	52		 push	 edx
  003b2	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  003b7	50		 push	 eax
  003b8	ff 51 14	 call	 DWORD PTR [ecx+20]
  003bb	85 c0		 test	 eax, eax
  003bd	75 33		 jne	 SHORT $LN193@Open
$LN211@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  003bf	8a 85 9c f9 ff
	ff		 mov	 al, BYTE PTR _MN$9[ebp+16]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 881  :         nMethodCount++;

  003c5	43		 inc	 ebx
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  003c6	3c 63		 cmp	 al, 99			; 00000063H
  003c8	75 08		 jne	 SHORT $LN101@Open
  003ca	ff b5 8c f9 ff
	ff		 push	 DWORD PTR _MN$9[ebp]
  003d0	eb 0a		 jmp	 SHORT $LN226@Open
$LN101@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  003d2	3c 77		 cmp	 al, 119			; 00000077H
  003d4	75 0c		 jne	 SHORT $LN103@Open
  003d6	ff b5 90 f9 ff
	ff		 push	 DWORD PTR _MN$9[ebp+4]
$LN226@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 854  :     while ( s_SOMethodNames[nMethodCount] != 0 )

  003dc	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003e1	59		 pop	 ecx
$LN103@Open:
  003e2	83 3c 9d 00 00
	00 00 00	 cmp	 DWORD PTR ?s_SOMethodNames@@3PAPADA[ebx*4], 0
  003ea	0f 85 1c ff ff
	ff		 jne	 $LL2@Open
  003f0	eb 22		 jmp	 SHORT $LN221@Open
$LN193@Open:

; 882  :     }
; 883  : 
; 884  :     // When debug mode, repeat above trying to get all methods, for later tracing.
; 885  :     #ifdef _DEBUG
; 886  :     int nAllMethods = nMethodCount;
; 887  :     while ( s_SOMethodNames[nAllMethods] != 0 )
; 888  :     {
; 889  :         _CWNCC MN( s_SOMethodNames[nAllMethods] );  // Init for conversion.
; 890  :         OLECHAR* pMN = MN;                          // Assign pointer, converting to wide if needed.
; 891  :         if ( S_OK !=
; 892  :              _pService->GetIDsOfNames(
; 893  :                 IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nAllMethods] )
; 894  :            )
; 895  :         {
; 896  :             pMN = 0;
; 897  :             // If failed, do special cases:
; 898  :             //  - If we failed the newer CloseService, then try Close before failing.
; 899  :             if ( nAllMethods == nDICloseService )
; 900  :                 pMN = L"Close";
; 901  :             //  - If we failed the newer COM-friendly name ClaimDevice or ReleaseDevice,
; 902  :             //    then try the original name Claim or Release before failing.
; 903  :             else if ( nAllMethods == nDIClaimDevice )
; 904  :                 pMN = L"Claim";
; 905  :             else if ( nAllMethods == nDIReleaseDevice )
; 906  :                 pMN = L"Release";
; 907  :             else                                // If not special case,
; 908  :                 _DispIDs[nAllMethods] = -123;   //   mark.
; 909  :             if ( pMN != 0 && S_OK !=
; 910  :                  _pService->GetIDsOfNames(
; 911  :                     IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nAllMethods] )
; 912  :                )
; 913  :                 _DispIDs[nAllMethods] = -123;   // If special case but still not found, mark.
; 914  :         }
; 915  :         nAllMethods++;
; 916  :     }
; 917  :     #endif
; 918  : 
; 919  :     // The SO must at least support all of the initial release's methods,
; 920  :     //   or we won't continue.
; 921  :     if ( nMethodCount < s_RequiredMethodsPerRelease[0] )

  003f2	8a 85 9c f9 ff
	ff		 mov	 al, BYTE PTR _MN$9[ebp+16]
  003f8	3c 63		 cmp	 al, 99			; 00000063H
  003fa	75 08		 jne	 SHORT $LN87@Open
  003fc	ff b5 8c f9 ff
	ff		 push	 DWORD PTR _MN$9[ebp]
  00402	eb 0a		 jmp	 SHORT $LN227@Open
$LN87@Open:
  00404	3c 77		 cmp	 al, 119			; 00000077H
  00406	75 0c		 jne	 SHORT $LN221@Open
  00408	ff b5 90 f9 ff
	ff		 push	 DWORD PTR _MN$9[ebp+4]
$LN227@Open:
  0040e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00413	59		 pop	 ecx
$LN221@Open:
  00414	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?s_RequiredMethodsPerRelease@@3PAHA
  0041a	7d 19		 jge	 SHORT $LN24@Open

; 922  :     {
; 923  :         _nOpenResult = OPOS_OR_BADIF;

  0041c	8b 8d 6c f9 ff
	ff		 mov	 ecx, DWORD PTR tv1290[ebp]

; 924  :         _pService->Release();

  00422	8b 06		 mov	 eax, DWORD PTR [esi]
  00424	50		 push	 eax
  00425	c7 01 31 01 00
	00		 mov	 DWORD PTR [ecx], 305	; 00000131H
  0042b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042d	ff 51 08	 call	 DWORD PTR [ecx+8]

; 925  :         DOTRACE( ( _T("-  Failed: Doesn't support all of initial release's methods (%d/%d)"), *pRC, _nOpenResult ) );
; 926  :         DOTRACEMETHODS( _DispIDs, s_RequiredMethodsPerRelease[0] );
; 927  :         return S_OK;

  00430	e9 fa 03 00 00	 jmp	 $LN12@Open
$LN24@Open:

; 928  :     }
; 929  : 
; 930  :     // Get our own dispatch pointer.
; 931  :     //   Immediately release it -- saves releasing later,
; 932  :     //   since it is just another reference to us.
; 933  :     IDispatch* pDispatch = 0;
; 934  :     CMVERIFY( S_OK == QueryInterface( IID_IDispatch, (void**) &pDispatch ) );

  00435	8b 07		 mov	 eax, DWORD PTR [edi]
  00437	8d 8d 70 f9 ff
	ff		 lea	 ecx, DWORD PTR _pDispatch$[ebp]
  0043d	83 a5 70 f9 ff
	ff 00		 and	 DWORD PTR _pDispatch$[ebp], 0
  00444	51		 push	 ecx
  00445	68 00 00 00 00	 push	 OFFSET _IID_IDispatch
  0044a	57		 push	 edi
  0044b	ff 10		 call	 DWORD PTR [eax]

; 935  :     if ( pDispatch != 0 )

  0044d	8b 8d 70 f9 ff
	ff		 mov	 ecx, DWORD PTR _pDispatch$[ebp]
  00453	85 c9		 test	 ecx, ecx
  00455	74 06		 je	 SHORT $LN25@Open

; 936  :         pDispatch->Release();

  00457	8b 01		 mov	 eax, DWORD PTR [ecx]
  00459	51		 push	 ecx
  0045a	ff 50 08	 call	 DWORD PTR [eax+8]
$LN25@Open:

; 937  : 
; 938  :     // Now call the Service Object's OpenService method.
; 939  :     OposVariant Vars[3];

  0045d	6a 03		 push	 3
  0045f	5e		 pop	 esi
  00460	8d 85 b4 f9 ff
	ff		 lea	 eax, DWORD PTR _Vars$[ebp]
  00466	8b ce		 mov	 ecx, esi
$LL106@Open:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00468	33 d2		 xor	 edx, edx
  0046a	66 89 10	 mov	 WORD PTR [eax], dx
  0046d	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00470	88 50 f8	 mov	 BYTE PTR [eax-8], dl
  00473	83 e9 01	 sub	 ecx, 1
  00476	75 f0		 jne	 SHORT $LL106@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00478	83 8d 90 f9 ff
	ff ff		 or	 DWORD PTR $T8[ebp+4], -1

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0047f	8d 8d 8c f9 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  00485	83 8d 94 f9 ff
	ff ff		 or	 DWORD PTR $T8[ebp+8], -1
  0048c	c7 85 8c f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp], OFFSET ??_C@_0O@NJPKGFFJ@SoundRecorder@

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00496	88 95 9c f9 ff
	ff		 mov	 BYTE PTR $T8[ebp+16], dl

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0049c	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 940  :     Vars[2].SetString( _CW(OPOS_CLASSKEY_SREC), hRC );

  004a1	8d 85 a0 f9 ff
	ff		 lea	 eax, DWORD PTR _hRC$[ebp]
  004a7	50		 push	 eax
  004a8	ff b5 90 f9 ff
	ff		 push	 DWORD PTR $T8[ebp+4]
  004ae	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR _Vars$[ebp+48]
  004b4	e8 00 00 00 00	 call	 ?SetString@OposVariant@@QAEXPB_WAAJ@Z ; OposVariant::SetString
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  004b9	8a 85 9c f9 ff
	ff		 mov	 al, BYTE PTR $T8[ebp+16]
  004bf	3c 63		 cmp	 al, 99			; 00000063H
  004c1	75 08		 jne	 SHORT $LN117@Open
  004c3	ff b5 8c f9 ff
	ff		 push	 DWORD PTR $T8[ebp]
  004c9	eb 0a		 jmp	 SHORT $LN228@Open
$LN117@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  004cb	3c 77		 cmp	 al, 119			; 00000077H
  004cd	75 0c		 jne	 SHORT $LN119@Open
  004cf	ff b5 90 f9 ff
	ff		 push	 DWORD PTR $T8[ebp+4]
$LN228@Open:

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  004d5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  004da	59		 pop	 ecx
$LN119@Open:
  004db	83 8d 8c f9 ff
	ff ff		 or	 DWORD PTR $T7[ebp], -1

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  004e2	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szPhysicalDeviceName$[ebp]
  004e8	83 8d 98 f9 ff
	ff ff		 or	 DWORD PTR $T7[ebp+12], -1
  004ef	8b c8		 mov	 ecx, eax
  004f1	89 85 90 f9 ff
	ff		 mov	 DWORD PTR $T7[ebp+4], eax
  004f7	c6 85 9c f9 ff
	ff 00		 mov	 BYTE PTR $T7[ebp+16], 0
  004fe	83 f9 ff	 cmp	 ecx, -1

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00501	75 11		 jne	 SHORT $LN124@Open
  00503	8d 8d 8c f9 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00509	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
  0050e	8b 85 90 f9 ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+4]
$LN124@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 941  :     Vars[1].SetString( _CW(szPhysicalDeviceName), hRC );

  00514	8d 8d a0 f9 ff
	ff		 lea	 ecx, DWORD PTR _hRC$[ebp]
  0051a	51		 push	 ecx
  0051b	50		 push	 eax
  0051c	8d 8d cc f9 ff
	ff		 lea	 ecx, DWORD PTR _Vars$[ebp+24]
  00522	e8 00 00 00 00	 call	 ?SetString@OposVariant@@QAEXPB_WAAJ@Z ; OposVariant::SetString
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00527	8a 85 9c f9 ff
	ff		 mov	 al, BYTE PTR $T7[ebp+16]
  0052d	3c 63		 cmp	 al, 99			; 00000063H
  0052f	75 08		 jne	 SHORT $LN127@Open
  00531	ff b5 8c f9 ff
	ff		 push	 DWORD PTR $T7[ebp]
  00537	eb 0a		 jmp	 SHORT $LN229@Open
$LN127@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00539	3c 77		 cmp	 al, 119			; 00000077H
  0053b	75 0c		 jne	 SHORT $LN129@Open
  0053d	ff b5 90 f9 ff
	ff		 push	 DWORD PTR $T7[ebp+4]
$LN229@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 942  :     Vars[0].SetDispatch_Ptr( pDispatch, hRC );

  00543	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00548	59		 pop	 ecx
$LN129@Open:
  00549	8d 85 a0 f9 ff
	ff		 lea	 eax, DWORD PTR _hRC$[ebp]
  0054f	50		 push	 eax
  00550	ff b5 70 f9 ff
	ff		 push	 DWORD PTR _pDispatch$[ebp]
  00556	8d 8d b4 f9 ff
	ff		 lea	 ecx, DWORD PTR _Vars$[ebp]
  0055c	e8 00 00 00 00	 call	 ?SetDispatch_Ptr@OposVariant@@QAEXPAUIDispatch@@AAJ@Z ; OposVariant::SetDispatch_Ptr

; 943  :     if ( FAILED(hRC) )

  00561	83 bd a0 f9 ff
	ff 00		 cmp	 DWORD PTR _hRC$[ebp], 0
  00568	7d 3a		 jge	 SHORT $LN26@Open

; 944  :     {
; 945  :         _pService->Release();

  0056a	8b bd 88 f9 ff
	ff		 mov	 edi, DWORD PTR tv1257[ebp]
  00570	8b 07		 mov	 eax, DWORD PTR [edi]
  00572	50		 push	 eax
  00573	8b 08		 mov	 ecx, DWORD PTR [eax]
  00575	ff 51 08	 call	 DWORD PTR [ecx+8]

; 947  :         return hRC;

  00578	8b 9d a0 f9 ff
	ff		 mov	 ebx, DWORD PTR _hRC$[ebp]
  0057e	8d bd fc f9 ff
	ff		 lea	 edi, DWORD PTR _Vars$[ebp+72]
$LL200@Open:
  00584	83 ef 18	 sub	 edi, 24			; 00000018H
  00587	4e		 dec	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00588	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  0058c	74 0b		 je	 SHORT $LN136@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0058e	57		 push	 edi
  0058f	c6 47 10 00	 mov	 BYTE PTR [edi+16], 0
  00593	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN136@Open:
  00599	85 f6		 test	 esi, esi
  0059b	75 e7		 jne	 SHORT $LL200@Open
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 947  :         return hRC;

  0059d	8b c3		 mov	 eax, ebx
  0059f	e9 8d 02 00 00	 jmp	 $LN223@Open
$LN26@Open:

; 948  :     }
; 949  :     hRC = DoInvoke( DEBUGPARAM("Open-OpenService") S_OK, Vars, 3, nDIOpenService, pRC, false );

  005a4	6a 00		 push	 0
  005a6	ff b5 84 f9 ff
	ff		 push	 DWORD PTR _pRC$GSCopy$1$[ebp]
  005ac	8d 85 b4 f9 ff
	ff		 lea	 eax, DWORD PTR _Vars$[ebp]
  005b2	8b cf		 mov	 ecx, edi
  005b4	6a 05		 push	 5
  005b6	56		 push	 esi
  005b7	50		 push	 eax
  005b8	6a 00		 push	 0
  005ba	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
  005bf	89 85 a0 f9 ff
	ff		 mov	 DWORD PTR _hRC$[ebp], eax

; 950  : 
; 951  :     // If the OpenService fails, then set result code and return.
; 952  :     if ( hRC != S_OK || *pRC != OPOS_SUCCESS )

  005c5	85 c0		 test	 eax, eax
  005c7	0f 85 3b 01 00
	00		 jne	 $LN28@Open
  005cd	8b 8d 84 f9 ff
	ff		 mov	 ecx, DWORD PTR _pRC$GSCopy$1$[ebp]
  005d3	33 d2		 xor	 edx, edx
  005d5	39 11		 cmp	 DWORD PTR [ecx], edx
  005d7	0f 85 2b 01 00
	00		 jne	 $LN28@Open

; 1014 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  005dd	52		 push	 edx
  005de	8d 85 60 f9 ff
	ff		 lea	 eax, DWORD PTR _nSOVersion$[ebp]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h

; 191  :         _Event_bEventsLegal = true;

  005e4	66 c7 87 59 01
	00 00 01 00	 mov	 WORD PTR [edi+345], 1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1014 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  005ed	50		 push	 eax
  005ee	6a 08		 push	 8
  005f0	8b cf		 mov	 ecx, edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h

; 193  :         _bFreezeState = false;

  005f2	88 97 fc 00 00
	00		 mov	 BYTE PTR [edi+252], dl

; 194  :         _Event_bOpen = true;

  005f8	c6 87 58 01 00
	00 01		 mov	 BYTE PTR [edi+344], 1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 994  :     _bOpened = true;

  005ff	c6 87 e0 00 00
	00 01		 mov	 BYTE PTR [edi+224], 1

; 1014 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  00606	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1015 :     _nSOMajor = nSOVersion / 1000000;

  0060b	8b 85 60 f9 ff
	ff		 mov	 eax, DWORD PTR _nSOVersion$[ebp]
  00611	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00616	99		 cdq
  00617	f7 f9		 idiv	 ecx

; 1016 :     _nSOMinor = ( nSOVersion / 1000 ) % 1000;

  00619	c7 85 88 f9 ff
	ff e8 03 00 00	 mov	 DWORD PTR tv1223[ebp], 1000 ; 000003e8H
  00623	8b c8		 mov	 ecx, eax
  00625	8b 85 60 f9 ff
	ff		 mov	 eax, DWORD PTR _nSOVersion$[ebp]
  0062b	99		 cdq
  0062c	f7 bd 88 f9 ff
	ff		 idiv	 DWORD PTR tv1223[ebp]
  00632	89 8f e8 00 00
	00		 mov	 DWORD PTR [edi+232], ecx
  00638	99		 cdq
  00639	f7 bd 88 f9 ff
	ff		 idiv	 DWORD PTR tv1223[ebp]
  0063f	89 97 ec 00 00
	00		 mov	 DWORD PTR [edi+236], edx

; 1017 : 
; 1018 :     //  - If major version is not 1, then bad SO.
; 1019 :     if ( _nSOMajor != 1 )

  00645	83 f9 01	 cmp	 ecx, 1
  00648	74 07		 je	 SHORT $LN32@Open

; 1020 :     {
; 1021 :         _nOpenResult = OPOS_OR_BADVERSION;

  0064a	b8 33 01 00 00	 mov	 eax, 307		; 00000133H

; 1022 :         bBadSO = true;
; 1023 :         DOTRACE( ( _T("-  Failed: Service Object's major version is not 1 (%d/%d)"), OPOS_E_NOSERVICE, _nOpenResult ) );
; 1024 :     }

  0064f	eb 25		 jmp	 SHORT $LN37@Open
$LN32@Open:

; 1025 : 
; 1026 :     //  - If SO doesn't support enough methods, then bad SO.
; 1027 :     else
; 1028 :     {
; 1029 :         long nReqMethodIndex = sizeof(s_RequiredMethodsPerRelease)/sizeof(int) - 1;
; 1030 :         // Shouldn't have SO with release below control's first release, but check anyway.
; 1031 :         if ( _nSOMinor < MinorReleaseInitial )

  00651	33 c9		 xor	 ecx, ecx
  00653	83 fa 10	 cmp	 edx, 16			; 00000010H
  00656	7c 08		 jl	 SHORT $LN36@Open

; 1032 :             nReqMethodIndex = 0;
; 1033 :         // If SO release is below that supported by this control, use its release's methods.
; 1034 :         else if ( nReqMethodIndex > _nSOMinor - MinorReleaseInitial )

  00658	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0065b	85 c0		 test	 eax, eax
  0065d	0f 48 c8	 cmovs	 ecx, eax
$LN36@Open:

; 1035 :             nReqMethodIndex = _nSOMinor - MinorReleaseInitial;
; 1036 :         // Set the maximum method index.
; 1037 :         _nMaxMethod = s_RequiredMethodsPerRelease[ nReqMethodIndex ];

  00660	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?s_RequiredMethodsPerRelease@@3PAHA[ecx*4]
  00667	89 87 00 01 00
	00		 mov	 DWORD PTR [edi+256], eax

; 1038 :         // Ensure that the SO supports the methods that it claims to support.
; 1039 :         if ( nMethodCount < _nMaxMethod )

  0066d	3b d8		 cmp	 ebx, eax
  0066f	7d 4a		 jge	 SHORT $LN38@Open

; 1040 :         {
; 1041 :             _nOpenResult = OPOS_OR_BADIF;

  00671	b8 31 01 00 00	 mov	 eax, 305		; 00000131H
$LN37@Open:

; 1042 :             bBadSO = true;
; 1043 :             DOTRACE( ( _T("-  Failed: Doesn't support all of its release's methods (%d/%d)"), OPOS_E_NOSERVICE, _nOpenResult ) );
; 1044 :             DOTRACEMETHODS( _DispIDs, _nMaxMethod );
; 1045 :         }
; 1046 :     }
; 1047 : 
; 1048 :     // If bad SO, then fail the open.
; 1049 :     if ( bBadSO )
; 1050 :     {
; 1051 :         Close( pRC );

  00676	89 87 e4 00 00
	00		 mov	 DWORD PTR [edi+228], eax
  0067c	8b 07		 mov	 eax, DWORD PTR [edi]
  0067e	8b 9d 84 f9 ff
	ff		 mov	 ebx, DWORD PTR _pRC$GSCopy$1$[ebp]
  00684	53		 push	 ebx
  00685	57		 push	 edi
  00686	ff 90 bc 00 00
	00		 call	 DWORD PTR [eax+188]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0068c	6a 68		 push	 104			; 00000068H
  0068e	58		 pop	 eax
  0068f	89 87 f0 00 00
	00		 mov	 DWORD PTR [edi+240], eax
  00695	8d bd fc f9 ff
	ff		 lea	 edi, DWORD PTR _Vars$[ebp+72]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1052 :         *pRC = SetRC( OPOS_E_NOSERVICE );

  0069b	89 03		 mov	 DWORD PTR [ebx], eax
$LL201@Open:
  0069d	83 ef 18	 sub	 edi, 24			; 00000018H
  006a0	4e		 dec	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  006a1	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  006a5	74 0b		 je	 SHORT $LN171@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  006a7	57		 push	 edi
  006a8	c6 47 10 00	 mov	 BYTE PTR [edi+16], 0
  006ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN171@Open:
  006b2	85 f6		 test	 esi, esi
  006b4	75 e7		 jne	 SHORT $LL201@Open
  006b6	e9 74 01 00 00	 jmp	 $LN12@Open
$LN38@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1058 :     if ( _nCOFreezeEventCount )

  006bb	83 bf f8 00 00
	00 00		 cmp	 DWORD PTR [edi+248], 0
  006c2	74 09		 je	 SHORT $LN39@Open

; 1059 :         SetCOFreezeEvents( TRUE );

  006c4	6a 01		 push	 1
  006c6	8b cf		 mov	 ecx, edi
  006c8	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z ; COPOSSoundRecorder::SetCOFreezeEvents
$LN39@Open:

; 1063 :     *pRC = OPOS_SUCCESS;

  006cd	8b 85 84 f9 ff
	ff		 mov	 eax, DWORD PTR _pRC$GSCopy$1$[ebp]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  006d3	83 8f f0 00 00
	00 ff		 or	 DWORD PTR [edi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1063 :     *pRC = OPOS_SUCCESS;

  006da	83 20 00	 and	 DWORD PTR [eax], 0

; 1064 :     _nOpenResult = OPOS_SUCCESS;

  006dd	83 a7 e4 00 00
	00 00		 and	 DWORD PTR [edi+228], 0
  006e4	8d bd fc f9 ff
	ff		 lea	 edi, DWORD PTR _Vars$[ebp+72]
$LL202@Open:
  006ea	83 ef 18	 sub	 edi, 24			; 00000018H
  006ed	4e		 dec	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  006ee	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  006f2	74 0b		 je	 SHORT $LN182@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  006f4	57		 push	 edi
  006f5	c6 47 10 00	 mov	 BYTE PTR [edi+16], 0
  006f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN182@Open:
  006ff	85 f6		 test	 esi, esi
  00701	75 e7		 jne	 SHORT $LL202@Open
  00703	e9 27 01 00 00	 jmp	 $LN12@Open
$LN28@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 955  :         _nOpenResult = OPOS_OR_FAILEDOPEN;

  00708	8b 8d 6c f9 ff
	ff		 mov	 ecx, DWORD PTR tv1290[ebp]

; 956  :         // If not a COM error, and the SO supports the GetOpenResult method,
; 957  :         //   then call it to get the open result code.
; 958  :         if ( hRC == S_OK )

  0070e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__VariantClear@4
  00714	8b bd 88 f9 ff
	ff		 mov	 edi, DWORD PTR tv1257[ebp]
  0071a	c7 01 32 01 00
	00		 mov	 DWORD PTR [ecx], 306	; 00000132H
  00720	85 c0		 test	 eax, eax
  00722	0f 85 ca 00 00
	00		 jne	 $LN149@Open

; 959  :         {
; 960  :             // Try to get DispID of the method.
; 961  :             OLECHAR* pMN = L"GetOpenResult";
; 962  :             DISPID DispID;
; 963  :             if ( S_OK ==

  00728	8b 07		 mov	 eax, DWORD PTR [edi]
  0072a	8d 95 88 f9 ff
	ff		 lea	 edx, DWORD PTR _DispID$6[ebp]
  00730	52		 push	 edx
  00731	68 00 08 00 00	 push	 2048			; 00000800H
  00736	6a 01		 push	 1
  00738	8d 95 80 f9 ff
	ff		 lea	 edx, DWORD PTR _pMN$2[ebp]
  0073e	c7 85 80 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$2[ebp], OFFSET ??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
  00748	8b 08		 mov	 ecx, DWORD PTR [eax]
  0074a	52		 push	 edx
  0074b	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00750	50		 push	 eax
  00751	ff 51 14	 call	 DWORD PTR [ecx+20]
  00754	85 c0		 test	 eax, eax
  00756	0f 85 96 00 00
	00		 jne	 $LN149@Open
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0075c	33 d2		 xor	 edx, edx
  0075e	66 89 85 48 f9
	ff ff		 mov	 WORD PTR _VarResult$1[ebp], ax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 971  :                 if ( S_OK == _pService->Invoke(

  00765	8b 07		 mov	 eax, DWORD PTR [edi]
  00767	52		 push	 edx
  00768	52		 push	 edx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00769	88 95 58 f9 ff
	ff		 mov	 BYTE PTR _VarResult$1[ebp+16], dl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 970  :                 DISPPARAMS Disp = { NULL, NULL, 0, 0 };

  0076f	89 95 90 f9 ff
	ff		 mov	 DWORD PTR _Disp$12[ebp], edx
  00775	89 95 94 f9 ff
	ff		 mov	 DWORD PTR _Disp$12[ebp+4], edx
  0077b	89 95 98 f9 ff
	ff		 mov	 DWORD PTR _Disp$12[ebp+8], edx
  00781	89 95 9c f9 ff
	ff		 mov	 DWORD PTR _Disp$12[ebp+12], edx

; 971  :                 if ( S_OK == _pService->Invoke(

  00787	8d 95 48 f9 ff
	ff		 lea	 edx, DWORD PTR _VarResult$1[ebp]
  0078d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0078f	52		 push	 edx
  00790	8d 95 90 f9 ff
	ff		 lea	 edx, DWORD PTR _Disp$12[ebp]
  00796	52		 push	 edx
  00797	6a 01		 push	 1
  00799	68 00 04 00 00	 push	 1024			; 00000400H
  0079e	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  007a3	ff b5 88 f9 ff
	ff		 push	 DWORD PTR _DispID$6[ebp]
  007a9	50		 push	 eax
  007aa	ff 51 18	 call	 DWORD PTR [ecx+24]
  007ad	85 c0		 test	 eax, eax
  007af	75 18		 jne	 SHORT $LN31@Open

; 972  :                         DispID, IID_NULL, LOCALE_USER_DEFAULT,
; 973  :                         DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL )
; 974  :                    )
; 975  :                 {
; 976  :                     // If method succeeds, convert (if needed) to long and set open result code.
; 977  :                     HRESULT hRCTmp;
; 978  :                     VarResult.ChangeLONG( &_nOpenResult, hRCTmp );

  007b1	8d 85 84 f9 ff
	ff		 lea	 eax, DWORD PTR _hRCTmp$4[ebp]
  007b7	50		 push	 eax
  007b8	ff b5 6c f9 ff
	ff		 push	 DWORD PTR tv1290[ebp]
  007be	8d 8d 48 f9 ff
	ff		 lea	 ecx, DWORD PTR _VarResult$1[ebp]
  007c4	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::ChangeLONG
$LN31@Open:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  007c9	8d 85 48 f9 ff
	ff		 lea	 eax, DWORD PTR _VarResult$1[ebp]
  007cf	c6 85 58 f9 ff
	ff 00		 mov	 BYTE PTR _VarResult$1[ebp+16], 0
  007d6	50		 push	 eax
  007d7	ff d3		 call	 ebx

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  007d9	80 bd 58 f9 ff
	ff 00		 cmp	 BYTE PTR _VarResult$1[ebp+16], 0
  007e0	74 10		 je	 SHORT $LN149@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  007e2	8d 85 48 f9 ff
	ff		 lea	 eax, DWORD PTR _VarResult$1[ebp]
  007e8	c6 85 58 f9 ff
	ff 00		 mov	 BYTE PTR _VarResult$1[ebp+16], 0
  007ef	50		 push	 eax
  007f0	ff d3		 call	 ebx
$LN149@Open:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 983  :         _pService->Release();

  007f2	8b 07		 mov	 eax, DWORD PTR [edi]
  007f4	50		 push	 eax
  007f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  007f7	ff 51 08	 call	 DWORD PTR [ecx+8]

; 986  :         return hRC;

  007fa	8b 85 a0 f9 ff
	ff		 mov	 eax, DWORD PTR _hRC$[ebp]
  00800	8d bd fc f9 ff
	ff		 lea	 edi, DWORD PTR _Vars$[ebp+72]
  00806	89 85 88 f9 ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
$LL203@Open:
  0080c	83 ef 18	 sub	 edi, 24			; 00000018H
  0080f	4e		 dec	 esi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00810	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  00814	74 07		 je	 SHORT $LN158@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00816	57		 push	 edi
  00817	c6 47 10 00	 mov	 BYTE PTR [edi+16], 0
  0081b	ff d3		 call	 ebx
$LN158@Open:
  0081d	85 f6		 test	 esi, esi
  0081f	75 eb		 jne	 SHORT $LL203@Open
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 986  :         return hRC;

  00821	8b 85 88 f9 ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00827	eb 08		 jmp	 SHORT $LN223@Open
$LN220@Open:

; 843  :     {
; 844  :         _nOpenResult = OPOS_OR_CREATE;

  00829	c7 03 30 01 00
	00		 mov	 DWORD PTR [ebx], 304	; 00000130H
$LN12@Open:

; 799  :     {
; 800  :         DOTRACE( ( _T("-  Failed: Cannot get ProgID from registry (%d/%d)"), *pRC, _nOpenResult ) );
; 801  :         DOTRACEERR( _T("    RegOpenKeyEx error %d\n    %s"), nRegStat );
; 802  :         return S_OK;

  0082f	33 c0		 xor	 eax, eax
$LN223@Open:
  00831	5b		 pop	 ebx
$LN1@Open:

; 1065 :     DOTRACE( ( _T("-  Success (0/0)") ) );
; 1066 :     return S_OK;
; 1067 : }

  00832	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00835	5f		 pop	 edi
  00836	33 cd		 xor	 ecx, ebp
  00838	5e		 pop	 esi
  00839	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0083e	c9		 leave
  0083f	c2 0c 00	 ret	 12			; 0000000cH
?Open@COPOSSoundRecorder@@UAGJPA_WPAJ@Z ENDP		; COPOSSoundRecorder::Open
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?DirectIO@COPOSSoundRecorder@@UAGJJPAJPAPA_W0@Z
_TEXT	SEGMENT
_pRC$GSCopy$1$ = -88					; size = 4
_pString$GSCopy$1$ = -84				; size = 4
_hRC$ = -80						; size = 4
_Vars$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Command$ = 12						; size = 4
_pData$ = 16						; size = 4
_pString$ = 20						; size = 4
_pRC$ = 24						; size = 4
?DirectIO@COPOSSoundRecorder@@UAGJJPAJPAPA_W0@Z PROC	; COPOSSoundRecorder::DirectIO, COMDAT

; 1191 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 14	 mov	 eax, DWORD PTR _pString$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _pData$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0001b	57		 push	 edi
  0001c	89 45 ac	 mov	 DWORD PTR _pString$GSCopy$1$[ebp], eax
  0001f	8b 45 18	 mov	 eax, DWORD PTR _pRC$[ebp]
  00022	6a 03		 push	 3
  00024	5f		 pop	 edi
  00025	89 45 a8	 mov	 DWORD PTR _pRC$GSCopy$1$[ebp], eax
  00028	8b cf		 mov	 ecx, edi

; 1192 :     OposVariant Vars[3];

  0002a	8d 45 b4	 lea	 eax, DWORD PTR _Vars$[ebp]
$LL4@DirectIO:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0002d	33 d2		 xor	 edx, edx
  0002f	66 89 10	 mov	 WORD PTR [eax], dx
  00032	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00035	88 50 f8	 mov	 BYTE PTR [eax-8], dl
  00038	83 e9 01	 sub	 ecx, 1
  0003b	75 f0		 jne	 SHORT $LL4@DirectIO
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1194 :     Vars[2].SetLONG( Command );

  0003d	ff 75 0c	 push	 DWORD PTR _Command$[ebp]
  00040	21 55 b0	 and	 DWORD PTR _hRC$[ebp], edx
  00043	8d 4d e4	 lea	 ecx, DWORD PTR _Vars$[ebp+48]
  00046	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1195 :     Vars[1].SetLONG_Ptr( pData, hRC );

  0004b	8d 45 b0	 lea	 eax, DWORD PTR _hRC$[ebp]
  0004e	50		 push	 eax
  0004f	53		 push	 ebx
  00050	8d 4d cc	 lea	 ecx, DWORD PTR _Vars$[ebp+24]
  00053	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 1196 :     Vars[0].SetBSTR_InOutPtr( pString, hRC );

  00058	8d 45 b0	 lea	 eax, DWORD PTR _hRC$[ebp]
  0005b	50		 push	 eax
  0005c	ff 75 ac	 push	 DWORD PTR _pString$GSCopy$1$[ebp]
  0005f	8d 4d b4	 lea	 ecx, DWORD PTR _Vars$[ebp]
  00062	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 1197 :     return DoInvoke( DEBUGPARAM("DirectIO") hRC, Vars, 3, nDIDirectIO, pRC );

  00067	6a 01		 push	 1
  00069	ff 75 a8	 push	 DWORD PTR _pRC$GSCopy$1$[ebp]
  0006c	8d 45 b4	 lea	 eax, DWORD PTR _Vars$[ebp]
  0006f	8b ce		 mov	 ecx, esi
  00071	6a 0a		 push	 10			; 0000000aH
  00073	57		 push	 edi
  00074	50		 push	 eax
  00075	ff 75 b0	 push	 DWORD PTR _hRC$[ebp]
  00078	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
  0007d	8b d8		 mov	 ebx, eax
  0007f	8d 75 fc	 lea	 esi, DWORD PTR _Vars$[ebp+72]
$LL23@DirectIO:
  00082	83 ee 18	 sub	 esi, 24			; 00000018H
  00085	4f		 dec	 edi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00086	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  0008a	74 0b		 je	 SHORT $LN14@DirectIO

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0008c	56		 push	 esi
  0008d	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN14@DirectIO:
  00097	85 ff		 test	 edi, edi
  00099	75 e7		 jne	 SHORT $LL23@DirectIO
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1198 : }

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	8b c3		 mov	 eax, ebx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	33 cd		 xor	 ecx, ebp
  000a4	5b		 pop	 ebx
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	c9		 leave
  000ab	c2 14 00	 ret	 20			; 00000014H
?DirectIO@COPOSSoundRecorder@@UAGJJPAJPAPA_W0@Z ENDP	; COPOSSoundRecorder::DirectIO
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?Close@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?Close@COPOSSoundRecorder@@UAGJPAJ@Z PROC		; COPOSSoundRecorder::Close, COMDAT

; 1072 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00004	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
  00007	83 8f f0 00 00
	00 ff		 or	 DWORD PTR [edi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1076 :     if ( ! _bOpened )

  0000e	80 bf e0 00 00
	00 00		 cmp	 BYTE PTR [edi+224], 0
  00015	75 0d		 jne	 SHORT $LN2@Close

; 1077 :     {
; 1078 :         *pRC = OPOS_E_CLOSED;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  0001a	c7 00 65 00 00
	00		 mov	 DWORD PTR [eax], 101	; 00000065H

; 1079 :         DOTRACE( ( _T("*Close [Function]  RC=%d"), *pRC ) );
; 1080 :         return S_OK;

  00020	33 c0		 xor	 eax, eax
  00022	eb 45		 jmp	 SHORT $LN1@Close
$LN2@Close:
  00024	53		 push	 ebx
  00025	56		 push	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h

; 230  :         ::SetEvent( _Event_FiringDoneEvent );

  00026	ff b7 5c 01 00
	00		 push	 DWORD PTR [edi+348]
  0002c	33 db		 xor	 ebx, ebx
  0002e	88 9f 59 01 00
	00		 mov	 BYTE PTR [edi+345], bl
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1087 :     HRESULT hRC = DoInvoke( DEBUGPARAM("Close-CloseService") S_OK, NULL, 0, nDICloseService, pRC, false );

  0003a	53		 push	 ebx
  0003b	ff 75 0c	 push	 DWORD PTR _pRC$[ebp]
  0003e	8b cf		 mov	 ecx, edi
  00040	6a 09		 push	 9
  00042	53		 push	 ebx
  00043	53		 push	 ebx
  00044	53		 push	 ebx
  00045	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke

; 1088 : 
; 1089 :     // Release the connection to the Service Object.
; 1090 :     _pService->Release();

  0004a	8b 8f f4 00 00
	00		 mov	 ecx, DWORD PTR [edi+244]
  00050	8b f0		 mov	 esi, eax
  00052	51		 push	 ecx
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	ff 52 08	 call	 DWORD PTR [edx+8]

; 1091 : 
; 1092 :     // Close down events.
; 1093 :     EventClose();

  00058	8b cf		 mov	 ecx, edi
  0005a	e8 00 00 00 00	 call	 ?EventClose@COPOSSoundRecorder@@IAEXXZ ; COPOSSoundRecorder::EventClose

; 1094 : 
; 1095 :     // We are now closed.
; 1096 :     _bOpened = false;
; 1097 : 
; 1098 :     DOTRACE( ( _T("*Close [Function]  RC=%d"), *pRC ) );
; 1099 :     return hRC;

  0005f	8b c6		 mov	 eax, esi
  00061	88 9f e0 00 00
	00		 mov	 BYTE PTR [edi+224], bl
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
$LN1@Close:
  00069	5f		 pop	 edi

; 1100 : }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?Close@COPOSSoundRecorder@@UAGJPAJ@Z ENDP		; COPOSSoundRecorder::Close
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?ClearInput@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ClearInput@COPOSSoundRecorder@@UAGJPAJ@Z PROC		; COPOSSoundRecorder::ClearInput, COMDAT

; 1180 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1181 :     return DoInvoke( DEBUGPARAM("ClearInput") S_OK, NULL, 0, nDIClearInput, pRC );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	6a 01		 push	 1
  0000a	ff 75 0c	 push	 DWORD PTR _pRC$[ebp]
  0000d	6a 08		 push	 8
  0000f	50		 push	 eax
  00010	50		 push	 eax
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke

; 1182 : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?ClearInput@COPOSSoundRecorder@@UAGJPAJ@Z ENDP		; COPOSSoundRecorder::ClearInput
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?ClaimDevice@COPOSSoundRecorder@@UAGJJPAJ@Z
_TEXT	SEGMENT
_Var$ = -24						; size = 24
_this$ = 8						; size = 4
_Timeout$ = 12						; size = 4
_pRC$ = 16						; size = 4
?ClaimDevice@COPOSSoundRecorder@@UAGJJPAJ@Z PROC	; COPOSSoundRecorder::ClaimDevice, COMDAT

; 1107 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00007	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0000a	83 8e f0 00 00
	00 ff		 or	 DWORD PTR [esi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1111 :     if ( ! _bOpened )

  00011	80 be e0 00 00
	00 00		 cmp	 BYTE PTR [esi+224], 0
  00018	75 0d		 jne	 SHORT $LN2@ClaimDevic

; 1112 :     {
; 1113 :         *pRC = OPOS_E_CLOSED;

  0001a	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  0001d	c7 00 65 00 00
	00		 mov	 DWORD PTR [eax], 101	; 00000065H

; 1114 :         DOTRACEV( ( _T("*ClaimDevice [Function] -- Closed") ) );
; 1115 :         return S_OK;

  00023	33 c0		 xor	 eax, eax
  00025	eb 49		 jmp	 SHORT $LN1@ClaimDevic
$LN2@ClaimDevic:
  00027	53		 push	 ebx

; 1123 :     Var.SetLONG( Timeout );

  00028	ff 75 0c	 push	 DWORD PTR _Timeout$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0002b	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1119 :     EventClaim();

  0002d	c6 86 59 01 00
	00 01		 mov	 BYTE PTR [esi+345], 1
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00034	33 db		 xor	 ebx, ebx
  00036	66 89 45 e8	 mov	 WORD PTR _Var$[ebp], ax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1123 :     Var.SetLONG( Timeout );

  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _Var$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0003d	88 5d f8	 mov	 BYTE PTR _Var$[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1123 :     Var.SetLONG( Timeout );

  00040	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1124 :     return DoInvoke( DEBUGPARAM("ClaimDevice") S_OK, &Var, 1, nDIClaimDevice, pRC, false );

  00045	53		 push	 ebx
  00046	ff 75 10	 push	 DWORD PTR _pRC$[ebp]
  00049	8d 45 e8	 lea	 eax, DWORD PTR _Var$[ebp]
  0004c	8b ce		 mov	 ecx, esi
  0004e	6a 07		 push	 7
  00050	6a 01		 push	 1
  00052	50		 push	 eax
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
  00059	8b f0		 mov	 esi, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0005b	38 5d f8	 cmp	 BYTE PTR _Var$[ebp+16], bl
  0005e	74 0d		 je	 SHORT $LN9@ClaimDevic

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00060	8d 45 e8	 lea	 eax, DWORD PTR _Var$[ebp]
  00063	88 5d f8	 mov	 BYTE PTR _Var$[ebp+16], bl
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN9@ClaimDevic:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1124 :     return DoInvoke( DEBUGPARAM("ClaimDevice") S_OK, &Var, 1, nDIClaimDevice, pRC, false );

  0006d	8b c6		 mov	 eax, esi
  0006f	5b		 pop	 ebx
$LN1@ClaimDevic:
  00070	5e		 pop	 esi

; 1125 : }

  00071	c9		 leave
  00072	c2 0c 00	 ret	 12			; 0000000cH
?ClaimDevice@COPOSSoundRecorder@@UAGJJPAJ@Z ENDP	; COPOSSoundRecorder::ClaimDevice
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?CheckHealth@COPOSSoundRecorder@@UAGJJPAJ@Z
_TEXT	SEGMENT
_Var$ = -24						; size = 24
_this$ = 8						; size = 4
_Level$ = 12						; size = 4
_pRC$ = 16						; size = 4
?CheckHealth@COPOSSoundRecorder@@UAGJJPAJ@Z PROC	; COPOSSoundRecorder::CheckHealth, COMDAT

; 1170 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 1172 :     Var.SetLONG( Level );

  00007	ff 75 0c	 push	 DWORD PTR _Level$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000a	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1172 :     Var.SetLONG( Level );

  0000c	8d 4d e8	 lea	 ecx, DWORD PTR _Var$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000f	66 89 45 e8	 mov	 WORD PTR _Var$[ebp], ax
  00013	88 45 f8	 mov	 BYTE PTR _Var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1172 :     Var.SetLONG( Level );

  00016	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1173 :     return DoInvoke( DEBUGPARAM("CheckHealth") S_OK, &Var, 1, nDICheckHealth, pRC );

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8d 45 e8	 lea	 eax, DWORD PTR _Var$[ebp]
  00021	6a 01		 push	 1
  00023	ff 75 10	 push	 DWORD PTR _pRC$[ebp]
  00026	6a 06		 push	 6
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ; COPOSSoundRecorder::DoInvoke
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00032	80 7d f8 00	 cmp	 BYTE PTR _Var$[ebp+16], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1173 :     return DoInvoke( DEBUGPARAM("CheckHealth") S_OK, &Var, 1, nDICheckHealth, pRC );

  00036	8b f0		 mov	 esi, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00038	74 0e		 je	 SHORT $LN6@CheckHealt

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0003a	8d 45 e8	 lea	 eax, DWORD PTR _Var$[ebp]
  0003d	c6 45 f8 00	 mov	 BYTE PTR _Var$[ebp+16], 0
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN6@CheckHealt:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1173 :     return DoInvoke( DEBUGPARAM("CheckHealth") S_OK, &Var, 1, nDICheckHealth, pRC );

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 1174 : }

  0004b	c9		 leave
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?CheckHealth@COPOSSoundRecorder@@UAGJJPAJ@Z ENDP	; COPOSSoundRecorder::CheckHealth
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapUpdateFirmware@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapUpdateFirmware$ = 12				; size = 4
?get_CapUpdateFirmware@COPOSSoundRecorder@@UAGJPAF@Z PROC ; COPOSSoundRecorder::get_CapUpdateFirmware, COMDAT

; 1584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1585 :     return GetOposProp( DEBUGPARAM("CapUpdateFirmware") PIDX_CapUpdateFirmware, pCapUpdateFirmware, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapUpdateFirmware$[ebp]
  0000b	68 f9 01 00 00	 push	 505			; 000001f9H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1586 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapUpdateFirmware@COPOSSoundRecorder@@UAGJPAF@Z ENDP ; COPOSSoundRecorder::get_CapUpdateFirmware
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapCompareFirmwareVersion@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapCompareFirmwareVersion$ = 12			; size = 4
?get_CapCompareFirmwareVersion@COPOSSoundRecorder@@UAGJPAF@Z PROC ; COPOSSoundRecorder::get_CapCompareFirmwareVersion, COMDAT

; 1577 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1578 :     return GetOposProp( DEBUGPARAM("CapCompareFirmwareVersion") PIDX_CapCompareFirmwareVersion, pCapCompareFirmwareVersion, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapCompareFirmwareVersion$[ebp]
  0000b	68 f8 01 00 00	 push	 504			; 000001f8H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1579 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapCompareFirmwareVersion@COPOSSoundRecorder@@UAGJPAF@Z ENDP ; COPOSSoundRecorder::get_CapCompareFirmwareVersion
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapUpdateStatistics@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapUpdateStatistics$ = 12				; size = 4
?get_CapUpdateStatistics@COPOSSoundRecorder@@UAGJPAF@Z PROC ; COPOSSoundRecorder::get_CapUpdateStatistics, COMDAT

; 1570 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1571 :     return GetOposProp( DEBUGPARAM("CapUpdateStatistics") PIDX_CapUpdateStatistics, pCapUpdateStatistics, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapUpdateStatistics$[ebp]
  0000b	68 f7 01 00 00	 push	 503			; 000001f7H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1572 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapUpdateStatistics@COPOSSoundRecorder@@UAGJPAF@Z ENDP ; COPOSSoundRecorder::get_CapUpdateStatistics
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapStatisticsReporting@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapStatisticsReporting$ = 12				; size = 4
?get_CapStatisticsReporting@COPOSSoundRecorder@@UAGJPAF@Z PROC ; COPOSSoundRecorder::get_CapStatisticsReporting, COMDAT

; 1563 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1564 :     return GetOposProp( DEBUGPARAM("CapStatisticsReporting") PIDX_CapStatisticsReporting, pCapStatisticsReporting, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapStatisticsReporting$[ebp]
  0000b	68 f6 01 00 00	 push	 502			; 000001f6H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1565 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapStatisticsReporting@COPOSSoundRecorder@@UAGJPAF@Z ENDP ; COPOSSoundRecorder::get_CapStatisticsReporting
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_DeviceName@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceName$ = 12					; size = 4
?get_DeviceName@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC	; COPOSSoundRecorder::get_DeviceName, COMDAT

; 1556 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1557 :     return GetOposProp( DEBUGPARAM("DeviceName") PIDX_DeviceName, pDeviceName, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pDeviceName$[ebp]
  0000b	68 43 42 0f 00	 push	 1000003			; 000f4243H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1558 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_DeviceName@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP	; COPOSSoundRecorder::get_DeviceName
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_DeviceDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceDescription$ = 12				; size = 4
?get_DeviceDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_DeviceDescription, COMDAT

; 1549 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1550 :     return GetOposProp( DEBUGPARAM("DeviceDescription") PIDX_DeviceDescription, pDeviceDescription, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pDeviceDescription$[ebp]
  0000b	68 42 42 0f 00	 push	 1000002			; 000f4242H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1551 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_DeviceDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_DeviceDescription
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ServiceObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pServiceObjectVersion$ = 12				; size = 4
?get_ServiceObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::get_ServiceObjectVersion, COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1543 :     return GetOposProp( DEBUGPARAM("ServiceObjectVersion") PIDX_ServiceObjectVersion, pServiceObjectVersion, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pServiceObjectVersion$[ebp]
  0000b	6a 08		 push	 8
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1544 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_ServiceObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::get_ServiceObjectVersion
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ServiceObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pServiceObjectDescription$ = 12			; size = 4
?get_ServiceObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_ServiceObjectDescription, COMDAT

; 1535 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1536 :     return GetOposProp( DEBUGPARAM("ServiceObjectDescription") PIDX_ServiceObjectDescription, pServiceObjectDescription, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pServiceObjectDescription$[ebp]
  0000b	68 44 42 0f 00	 push	 1000004			; 000f4244H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1537 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_ServiceObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_ServiceObjectDescription
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ControlObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pControlObjectVersion$ = 12				; size = 4
?get_ControlObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::get_ControlObjectVersion, COMDAT

; 1397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1398 :     *pControlObjectVersion = g_ControlVersion;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pControlObjectVersion$[ebp]
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_ControlVersion@@3JA ; g_ControlVersion
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 1399 :     DOTRACEV( ( _T("*ControlObjectVersion [Get]: %d"), g_ControlVersion ) );
; 1400 :     return S_OK;

  0000d	33 c0		 xor	 eax, eax

; 1401 : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?get_ControlObjectVersion@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::get_ControlObjectVersion
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ControlObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
$T1 = -20						; size = 20
_this$ = 8						; size = 4
_pControlObjectDescription$ = 12			; size = 4
?get_ControlObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_ControlObjectDescription, COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00006	83 4d f0 ff	 or	 DWORD PTR $T1[ebp+4], -1

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0000a	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  0000d	83 4d f4 ff	 or	 DWORD PTR $T1[ebp+8], -1
  00011	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ?g_ControlDescription@@3PADA ; g_ControlDescription

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00018	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp+16], 0

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0001c	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1389 :     *pControlObjectDescription = ::SysAllocString( _CW(g_ControlDescription) );

  00021	ff 75 f0	 push	 DWORD PTR $T1[ebp+4]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocString@4
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _pControlObjectDescription$[ebp]
  0002d	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  0002f	8a 45 fc	 mov	 al, BYTE PTR $T1[ebp+16]
  00032	3c 63		 cmp	 al, 99			; 00000063H
  00034	75 05		 jne	 SHORT $LN9@get_Contro
  00036	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00039	eb 07		 jmp	 SHORT $LN13@get_Contro
$LN9@get_Contro:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  0003b	3c 77		 cmp	 al, 119			; 00000077H
  0003d	75 09		 jne	 SHORT $LN11@get_Contro
  0003f	ff 75 f0	 push	 DWORD PTR $T1[ebp+4]
$LN13@get_Contro:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1391 :     return S_OK;

  00042	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00047	59		 pop	 ecx
$LN11@get_Contro:
  00048	33 c0		 xor	 eax, eax

; 1392 : }

  0004a	c9		 leave
  0004b	c2 08 00	 ret	 8
?get_ControlObjectDescription@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_ControlObjectDescription
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_State@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pState$ = 12						; size = 4
?get_State@COPOSSoundRecorder@@UAGJPAJ@Z PROC		; COPOSSoundRecorder::get_State, COMDAT

; 1373 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1374 :     if ( ! _bOpened )                           // If not open,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	80 b9 e0 00 00
	00 00		 cmp	 BYTE PTR [ecx+224], 0
  0000d	75 0b		 jne	 SHORT $LN2@get_State

; 1375 :     {
; 1376 :         *pState = OPOS_S_CLOSED;                //   then return "closed".

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _pState$[ebp]
  00012	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 1377 :         DOTRACEV( ( _T("*State [Get] -- Closed") ) );
; 1378 :     }

  00018	eb 0c		 jmp	 SHORT $LN3@get_State
$LN2@get_State:

; 1379 :     else
; 1380 :         GetOposProp( DEBUGPARAM("State") PIDX_State, pState ); // Otherwise go to SO.

  0001a	6a 00		 push	 0
  0001c	ff 75 0c	 push	 DWORD PTR _pState$[ebp]
  0001f	6a 09		 push	 9
  00021	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp
$LN3@get_State:

; 1381 : 
; 1382 :     return S_OK;

  00026	33 c0		 xor	 eax, eax

; 1383 : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?get_State@COPOSSoundRecorder@@UAGJPAJ@Z ENDP		; COPOSSoundRecorder::get_State
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ResultCodeExtended@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pResultCodeExtended$ = 12				; size = 4
?get_ResultCodeExtended@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::get_ResultCodeExtended, COMDAT

; 1528 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1529 :     return GetOposProp( DEBUGPARAM("ResultCodeExtended") PIDX_ResultCodeExtended, pResultCodeExtended, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pResultCodeExtended$[ebp]
  0000b	6a 07		 push	 7
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1530 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_ResultCodeExtended@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::get_ResultCodeExtended
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_ResultCode@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pResultCode$ = 12					; size = 4
?get_ResultCode@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_ResultCode, COMDAT

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1354 :     if ( ! _bOpened )                               // If not open,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	80 b9 e0 00 00
	00 00		 cmp	 BYTE PTR [ecx+224], 0
  0000d	75 0b		 jne	 SHORT $LN2@get_Result

; 1355 :     {
; 1356 :         *pResultCode = OPOS_E_CLOSED;               //   then return "closed".

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _pResultCode$[ebp]
  00012	c7 00 65 00 00
	00		 mov	 DWORD PTR [eax], 101	; 00000065H

; 1357 :         DOTRACEV( ( _T("*ResultCode [Get] -- Closed") ) );
; 1358 :     }

  00018	eb 1e		 jmp	 SHORT $LN5@get_Result
$LN2@get_Result:

; 1359 :     else if ( _nCOResultCode != -1 )                // If the control object has to report a status,

  0001a	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  00020	83 fa ff	 cmp	 edx, -1
  00023	74 07		 je	 SHORT $LN4@get_Result

; 1360 :     {
; 1361 :         *pResultCode = _nCOResultCode;              //   then return it.

  00025	8b 45 0c	 mov	 eax, DWORD PTR _pResultCode$[ebp]
  00028	89 10		 mov	 DWORD PTR [eax], edx

; 1362 :         DOTRACEV( ( _T("*ResultCode [Get]: %d -- from CO"), _nCOResultCode ) );
; 1363 :     }

  0002a	eb 0c		 jmp	 SHORT $LN5@get_Result
$LN4@get_Result:

; 1364 :     else
; 1365 :         GetOposProp( DEBUGPARAM("ResultCode") PIDX_ResultCode, pResultCode );// Otherwise go to SO.

  0002c	6a 00		 push	 0
  0002e	ff 75 0c	 push	 DWORD PTR _pResultCode$[ebp]
  00031	6a 06		 push	 6
  00033	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp
$LN5@get_Result:

; 1366 : 
; 1367 :     return S_OK;

  00038	33 c0		 xor	 eax, eax

; 1368 : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?get_ResultCode@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_ResultCode
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_PowerState@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pPowerState$ = 12					; size = 4
?get_PowerState@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_PowerState, COMDAT

; 1521 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1522 :     return GetOposProp( DEBUGPARAM("PowerState") PIDX_PowerState, pPowerState, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pPowerState$[ebp]
  0000b	6a 0e		 push	 14			; 0000000eH
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1523 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_PowerState@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_PowerState
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_PowerNotify@COPOSSoundRecorder@@UAGJJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_PowerNotify$ = 12					; size = 4
?put_PowerNotify@COPOSSoundRecorder@@UAGJJ@Z PROC	; COPOSSoundRecorder::put_PowerNotify, COMDAT

; 1514 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1515 :     return SetOposProp( DEBUGPARAM("PowerNotify") PIDX_PowerNotify, PowerNotify, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _PowerNotify$[ebp]
  0000b	6a 0d		 push	 13			; 0000000dH
  0000d	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1516 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?put_PowerNotify@COPOSSoundRecorder@@UAGJJ@Z ENDP	; COPOSSoundRecorder::put_PowerNotify
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_PowerNotify@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pPowerNotify$ = 12					; size = 4
?get_PowerNotify@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_PowerNotify, COMDAT

; 1507 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1508 :     return GetOposProp( DEBUGPARAM("PowerNotify") PIDX_PowerNotify, pPowerNotify, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pPowerNotify$[ebp]
  0000b	6a 0d		 push	 13			; 0000000dH
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1509 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_PowerNotify@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_PowerNotify
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_FreezeEvents@COPOSSoundRecorder@@UAGJF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_FreezeEvents$ = 12					; size = 2
?put_FreezeEvents@COPOSSoundRecorder@@UAGJF@Z PROC	; COPOSSoundRecorder::put_FreezeEvents, COMDAT

; 1322 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00004	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00007	83 8e f0 00 00
	00 ff		 or	 DWORD PTR [esi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 1326 :     if ( ! _bOpened )

  0000e	80 be e0 00 00
	00 00		 cmp	 BYTE PTR [esi+224], 0
  00015	74 2e		 je	 SHORT $LN4@put_Freeze

; 1327 :     {
; 1328 :         DOTRACEV( ( _T("*FreezeEvents [Set] -- Closed") ) );
; 1329 :         return S_OK;
; 1330 :     }
; 1331 : 
; 1332 :     if ( FreezeEvents )

  00017	66 83 7d 0c 00	 cmp	 WORD PTR _FreezeEvents$[ebp], 0
  0001c	8b ce		 mov	 ecx, esi
  0001e	74 14		 je	 SHORT $LN3@put_Freeze

; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00020	6a 00		 push	 0
  00022	6a 01		 push	 1
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1333 :     {
; 1334 :         // Call down into the Service Object first to set the property value.
; 1335 :         SetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, FreezeEvents ); // First tell the SO the new state.
; 1336 :         _bFreezeState = true;                           // Then update ours.

  0002b	c6 86 fc 00 00
	00 01		 mov	 BYTE PTR [esi+252], 1

; 1337 :     }

  00032	eb 11		 jmp	 SHORT $LN4@put_Freeze
$LN3@put_Freeze:

; 1338 :     else
; 1339 :     {
; 1340 :         // Update our state first, then tell the SO.
; 1341 :         // This avoids a lockup in the event firing object's DoEvent() routine
; 1342 :         //   that would occur if the SO calls an event from its property update method.
; 1343 :         _bFreezeState = false;

  00034	33 c0		 xor	 eax, eax

; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00036	50		 push	 eax
  00037	50		 push	 eax
  00038	6a 04		 push	 4

; 1338 :     else
; 1339 :     {
; 1340 :         // Update our state first, then tell the SO.
; 1341 :         // This avoids a lockup in the event firing object's DoEvent() routine
; 1342 :         //   that would occur if the SO calls an event from its property update method.
; 1343 :         _bFreezeState = false;

  0003a	88 86 fc 00 00
	00		 mov	 BYTE PTR [esi+252], al

; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00040	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp
$LN4@put_Freeze:

; 1344 :         SetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, FreezeEvents );
; 1345 :     }
; 1346 : 
; 1347 :     return S_OK;

  00045	33 c0		 xor	 eax, eax
  00047	5e		 pop	 esi

; 1348 : }

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
?put_FreezeEvents@COPOSSoundRecorder@@UAGJF@Z ENDP	; COPOSSoundRecorder::put_FreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_FreezeEvents@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pFreezeEvents$ = 12					; size = 4
?get_FreezeEvents@COPOSSoundRecorder@@UAGJPAF@Z PROC	; COPOSSoundRecorder::get_FreezeEvents, COMDAT

; 1315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 :     return GetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, pFreezeEvents );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 0c	 push	 DWORD PTR _pFreezeEvents$[ebp]
  0000b	6a 04		 push	 4
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1317 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_FreezeEvents@COPOSSoundRecorder@@UAGJPAF@Z ENDP	; COPOSSoundRecorder::get_FreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_DeviceEnabled@COPOSSoundRecorder@@UAGJF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_DeviceEnabled$ = 12					; size = 2
?put_DeviceEnabled@COPOSSoundRecorder@@UAGJF@Z PROC	; COPOSSoundRecorder::put_DeviceEnabled, COMDAT

; 1500 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	66 39 45 0c	 cmp	 WORD PTR _DeviceEnabled$[ebp], ax
  0000c	6a 10		 push	 16			; 00000010H
  0000e	0f 95 c0	 setne	 al
  00011	50		 push	 eax
  00012	6a 03		 push	 3
  00014	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1501 :     return SetOposProp( DEBUGPARAM("DeviceEnabled") PIDX_DeviceEnabled, DeviceEnabled, 16 /*MinorVersion*/ );
; 1502 : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?put_DeviceEnabled@COPOSSoundRecorder@@UAGJF@Z ENDP	; COPOSSoundRecorder::put_DeviceEnabled
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_DeviceEnabled@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceEnabled$ = 12					; size = 4
?get_DeviceEnabled@COPOSSoundRecorder@@UAGJPAF@Z PROC	; COPOSSoundRecorder::get_DeviceEnabled, COMDAT

; 1493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1494 :     return GetOposProp( DEBUGPARAM("DeviceEnabled") PIDX_DeviceEnabled, pDeviceEnabled, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pDeviceEnabled$[ebp]
  0000b	6a 03		 push	 3
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1495 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_DeviceEnabled@COPOSSoundRecorder@@UAGJPAF@Z ENDP	; COPOSSoundRecorder::get_DeviceEnabled
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_DataEventEnabled@COPOSSoundRecorder@@UAGJF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_DataEventEnabled$ = 12					; size = 2
?put_DataEventEnabled@COPOSSoundRecorder@@UAGJF@Z PROC	; COPOSSoundRecorder::put_DataEventEnabled, COMDAT

; 1486 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	66 39 45 0c	 cmp	 WORD PTR _DataEventEnabled$[ebp], ax
  0000c	6a 10		 push	 16			; 00000010H
  0000e	0f 95 c0	 setne	 al
  00011	50		 push	 eax
  00012	6a 02		 push	 2
  00014	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1487 :     return SetOposProp( DEBUGPARAM("DataEventEnabled") PIDX_DataEventEnabled, DataEventEnabled, 16 /*MinorVersion*/ );
; 1488 : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?put_DataEventEnabled@COPOSSoundRecorder@@UAGJF@Z ENDP	; COPOSSoundRecorder::put_DataEventEnabled
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_DataEventEnabled@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDataEventEnabled$ = 12				; size = 4
?get_DataEventEnabled@COPOSSoundRecorder@@UAGJPAF@Z PROC ; COPOSSoundRecorder::get_DataEventEnabled, COMDAT

; 1479 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1480 :     return GetOposProp( DEBUGPARAM("DataEventEnabled") PIDX_DataEventEnabled, pDataEventEnabled, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pDataEventEnabled$[ebp]
  0000b	6a 02		 push	 2
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1481 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_DataEventEnabled@COPOSSoundRecorder@@UAGJPAF@Z ENDP ; COPOSSoundRecorder::get_DataEventEnabled
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_DataCount@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDataCount$ = 12					; size = 4
?get_DataCount@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_DataCount, COMDAT

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1473 :     return GetOposProp( DEBUGPARAM("DataCount") PIDX_DataCount, pDataCount, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pDataCount$[ebp]
  0000b	6a 0c		 push	 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1474 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_DataCount@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_DataCount
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_Claimed@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pClaimed$ = 12						; size = 4
?get_Claimed@COPOSSoundRecorder@@UAGJPAF@Z PROC		; COPOSSoundRecorder::get_Claimed, COMDAT

; 1465 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1466 :     return GetOposProp( DEBUGPARAM("Claimed") PIDX_Claimed, pClaimed, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pClaimed$[ebp]
  0000b	6a 01		 push	 1
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1467 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_Claimed@COPOSSoundRecorder@@UAGJPAF@Z ENDP		; COPOSSoundRecorder::get_Claimed
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CheckHealthText@COPOSSoundRecorder@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCheckHealthText$ = 12					; size = 4
?get_CheckHealthText@COPOSSoundRecorder@@UAGJPAPA_W@Z PROC ; COPOSSoundRecorder::get_CheckHealthText, COMDAT

; 1458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1459 :     return GetOposProp( DEBUGPARAM("CheckHealthText") PIDX_CheckHealthText, pCheckHealthText, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCheckHealthText$[ebp]
  0000b	68 41 42 0f 00	 push	 1000001			; 000f4241H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ; COPOSSoundRecorder::GetOposProp

; 1460 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CheckHealthText@COPOSSoundRecorder@@UAGJPAPA_W@Z ENDP ; COPOSSoundRecorder::get_CheckHealthText
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_CapPowerReporting@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapPowerReporting$ = 12				; size = 4
?get_CapPowerReporting@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::get_CapPowerReporting, COMDAT

; 1451 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1452 :     return GetOposProp( DEBUGPARAM("CapPowerReporting") PIDX_CapPowerReporting, pCapPowerReporting, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pCapPowerReporting$[ebp]
  0000b	68 f5 01 00 00	 push	 501			; 000001f5H
  00010	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1453 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?get_CapPowerReporting@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::get_CapPowerReporting
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_BinaryConversion@COPOSSoundRecorder@@UAGJJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_BinaryConversion$ = 12					; size = 4
?put_BinaryConversion@COPOSSoundRecorder@@UAGJJ@Z PROC	; COPOSSoundRecorder::put_BinaryConversion, COMDAT

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1444 :     IFDEBUG( _nBinaryConversion = BinaryConversion);
; 1445 :     return SetOposProp( DEBUGPARAM("BinaryConversion") PIDX_BinaryConversion, BinaryConversion, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _BinaryConversion$[ebp]
  0000b	6a 0b		 push	 11			; 0000000bH
  0000d	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1446 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?put_BinaryConversion@COPOSSoundRecorder@@UAGJJ@Z ENDP	; COPOSSoundRecorder::put_BinaryConversion
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_BinaryConversion@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pBinaryConversion$ = 12				; size = 4
?get_BinaryConversion@COPOSSoundRecorder@@UAGJPAJ@Z PROC ; COPOSSoundRecorder::get_BinaryConversion, COMDAT

; 1436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1437 :     return GetOposProp( DEBUGPARAM("BinaryConversion") PIDX_BinaryConversion, pBinaryConversion, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pBinaryConversion$[ebp]
  0000b	6a 0b		 push	 11			; 0000000bH
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 1438 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_BinaryConversion@COPOSSoundRecorder@@UAGJPAJ@Z ENDP ; COPOSSoundRecorder::get_BinaryConversion
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?put_AutoDisable@COPOSSoundRecorder@@UAGJF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_AutoDisable$ = 12					; size = 2
?put_AutoDisable@COPOSSoundRecorder@@UAGJF@Z PROC	; COPOSSoundRecorder::put_AutoDisable, COMDAT

; 1429 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	66 39 45 0c	 cmp	 WORD PTR _AutoDisable$[ebp], ax
  0000c	6a 10		 push	 16			; 00000010H
  0000e	0f 95 c0	 setne	 al
  00011	50		 push	 eax
  00012	6a 0a		 push	 10			; 0000000aH
  00014	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 1430 :     return SetOposProp( DEBUGPARAM("AutoDisable") PIDX_AutoDisable, AutoDisable, 16 /*MinorVersion*/ );
; 1431 : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?put_AutoDisable@COPOSSoundRecorder@@UAGJF@Z ENDP	; COPOSSoundRecorder::put_AutoDisable
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_AutoDisable@COPOSSoundRecorder@@UAGJPAF@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pAutoDisable$ = 12					; size = 4
?get_AutoDisable@COPOSSoundRecorder@@UAGJPAF@Z PROC	; COPOSSoundRecorder::get_AutoDisable, COMDAT

; 1422 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1423 :     return GetOposProp( DEBUGPARAM("AutoDisable") PIDX_AutoDisable, pAutoDisable, 16 /*MinorVersion*/ );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	ff 75 0c	 push	 DWORD PTR _pAutoDisable$[ebp]
  0000b	6a 0a		 push	 10			; 0000000aH
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ; COPOSSoundRecorder::GetOposProp

; 1424 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?get_AutoDisable@COPOSSoundRecorder@@UAGJPAF@Z ENDP	; COPOSSoundRecorder::get_AutoDisable
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?get_OpenResult@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pOpenResult$ = 12					; size = 4
?get_OpenResult@COPOSSoundRecorder@@UAGJPAJ@Z PROC	; COPOSSoundRecorder::get_OpenResult, COMDAT

; 1406 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1407 :     *pOpenResult = _nOpenResult;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _pOpenResult$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 1408 :     DOTRACEV( ( _T("*OpenResult [Get]: %d"), _nOpenResult ) );
; 1409 :     return S_OK;

  00011	33 c0		 xor	 eax, eax

; 1410 : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?get_OpenResult@COPOSSoundRecorder@@UAGJPAJ@Z ENDP	; COPOSSoundRecorder::get_OpenResult
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?SOProcessID@COPOSSoundRecorder@@UAGJPAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pProcessID$ = 12					; size = 4
?SOProcessID@COPOSSoundRecorder@@UAGJPAJ@Z PROC		; COPOSSoundRecorder::SOProcessID, COMDAT

; 1153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1154 :     *pProcessID = GetCurrentProcessId();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _pProcessID$[ebp]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax

; 1155 :     DOTRACEV( ( _T("*SOProcessID: 0x%X"), *pProcessID ) );
; 1156 :     return S_OK;

  0000e	33 c0		 xor	 eax, eax

; 1157 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SOProcessID@COPOSSoundRecorder@@UAGJPAJ@Z ENDP		; COPOSSoundRecorder::SOProcessID
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?FireEventCleanup@COPOSSoundRecorder@@IAEXXZ
_TEXT	SEGMENT
?FireEventCleanup@COPOSSoundRecorder@@IAEXXZ PROC	; COPOSSoundRecorder::FireEventCleanup, COMDAT
; _this$ = ecx

; 631  :         // Clear event in progress flag, set delivered flag, and set completion event.
; 632  :         _Event_bEventInProgress = false;
; 633  :         _Event_bEventDelivered = true;
; 634  :         ::SetEvent( _Event_FiringDoneEvent );

  00000	ff b1 5c 01 00
	00		 push	 DWORD PTR [ecx+348]
  00006	66 c7 81 5a 01
	00 00 00 01	 mov	 WORD PTR [ecx+346], 256	; 00000100H
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 635  :     }

  00015	c3		 ret	 0
?FireEventCleanup@COPOSSoundRecorder@@IAEXXZ ENDP	; COPOSSoundRecorder::FireEventCleanup
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ
_TEXT	SEGMENT
?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ PROC	; COPOSSoundRecorder::FireEventSetup, COMDAT
; _this$ = ecx

; 607  :         // If events are not legal (open/claim not done for exclusive, or open
; 608  :         //   not done for shared device), then return without firing.
; 609  :         if ( ! _Event_bEventsLegal ||
; 610  :         // If events are frozen, then return without firing.
; 611  :              _bFreezeState || _nCOFreezeEventCount != 0 )

  00000	80 b9 59 01 00
	00 00		 cmp	 BYTE PTR [ecx+345], 0
  00007	74 1c		 je	 SHORT $LN3@FireEventS
  00009	80 b9 fc 00 00
	00 00		 cmp	 BYTE PTR [ecx+252], 0
  00010	75 13		 jne	 SHORT $LN3@FireEventS
  00012	83 b9 f8 00 00
	00 00		 cmp	 DWORD PTR [ecx+248], 0
  00019	75 0a		 jne	 SHORT $LN3@FireEventS

; 615  :         }
; 616  : 
; 617  :         // If events are legal and not frozen,
; 618  :         //   set event in progress flag, and return true.
; 619  :         _Event_bEventInProgress = true;

  0001b	c6 81 5a 01 00
	00 01		 mov	 BYTE PTR [ecx+346], 1

; 620  :         return true;

  00022	b0 01		 mov	 al, 1

; 621  :     }

  00024	c3		 ret	 0
$LN3@FireEventS:

; 612  :         {
; 613  :             ::SetEvent( _Event_FiringDoneEvent );

  00025	ff b1 5c 01 00
	00		 push	 DWORD PTR [ecx+348]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 614  :             return false;

  00031	32 c0		 xor	 al, al

; 621  :     }

  00033	c3		 ret	 0
?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ ENDP	; COPOSSoundRecorder::FireEventSetup
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?EventWindowProc@COPOSSoundRecorder@@IAGJIIJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?EventWindowProc@COPOSSoundRecorder@@IAGJIIJ@Z PROC	; COPOSSoundRecorder::EventWindowProc, COMDAT

; 536  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  :         bool bProcessed = true;
; 538  : 
; 539  :         switch ( uMsg )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00006	56		 push	 esi
  00007	2d 64 04 00 00	 sub	 eax, 1124		; 00000464H
  0000c	0f 84 93 00 00
	00		 je	 $LN4@EventWindo
  00012	83 e8 01	 sub	 eax, 1
  00015	74 5d		 je	 SHORT $LN6@EventWindo
  00017	83 e8 01	 sub	 eax, 1
  0001a	74 2b		 je	 SHORT $LN8@EventWindo
  0001c	48		 dec	 eax
  0001d	83 e8 01	 sub	 eax, 1
  00020	74 07		 je	 SHORT $LN10@EventWindo

; 587  :             }
; 588  : 
; 589  :         default:
; 590  :             {
; 591  :                 bProcessed = false;

  00022	33 f6		 xor	 esi, esi
  00024	e9 a4 00 00 00	 jmp	 $LN5@EventWindo
$LN10@EventWindo:

; 575  :             }
; 576  : 
; 577  :         case WMU_STATUS_UPDATE_EVENT:
; 578  :             {
; 579  :                 if ( FireEventSetup() )

  00029	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ ; COPOSSoundRecorder::FireEventSetup
  00033	84 c0		 test	 al, al
  00035	74 69		 je	 SHORT $LN7@EventWindo

; 580  :                 {
; 581  :                     DOTRACEV( ( _T("*EventWindowProc: Firing StatusUpdateEvent") ) );
; 582  :                     CProxy_IOPOSEvents< COPOSSoundRecorder >::Fire_StatusUpdateEvent(

  00037	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  0003a	8d 8e b4 00 00
	00		 lea	 ecx, DWORD PTR [esi+180]
  00040	e8 00 00 00 00	 call	 ?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_StatusUpdateEvent

; 583  :                         (long) wParam );
; 584  :                     FireEventCleanup();
; 585  :                 }
; 586  :                 break;

  00045	eb 52		 jmp	 SHORT $LN15@EventWindo
$LN8@EventWindo:

; 559  :                         (long) wParam, (long*) lParam, _Event_DIO_pString );
; 560  :                     FireEventCleanup();
; 561  :                 }
; 562  :                 break;
; 563  :             }
; 564  : 
; 565  :         case WMU_ERROR_EVENT:
; 566  :             {
; 567  :                 if ( FireEventSetup() )

  00047	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ ; COPOSSoundRecorder::FireEventSetup
  00051	84 c0		 test	 al, al
  00053	74 4b		 je	 SHORT $LN7@EventWindo

; 568  :                 {
; 569  :                     DOTRACEV( ( _T("*EventWindowProc: Firing ErrorEvent") ) );
; 570  :                     CProxy_IOPOSEvents< COPOSSoundRecorder >::Fire_ErrorEvent (

  00055	ff b6 70 01 00
	00		 push	 DWORD PTR [esi+368]
  0005b	8d 8e b4 00 00
	00		 lea	 ecx, DWORD PTR [esi+180]
  00061	ff b6 6c 01 00
	00		 push	 DWORD PTR [esi+364]
  00067	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0006a	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  0006d	e8 00 00 00 00	 call	 ?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJJJPAJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_ErrorEvent

; 571  :                         (long) wParam, (long) lParam, _Event_Err_ErrorLocus, _Event_Err_pErrorResponse );
; 572  :                     FireEventCleanup();
; 573  :                 }
; 574  :                 break;

  00072	eb 25		 jmp	 SHORT $LN15@EventWindo
$LN6@EventWindo:

; 549  :                 }
; 550  :                 break;
; 551  :             }
; 552  : 
; 553  :         case WMU_DIRECT_IO_EVENT:
; 554  :             {
; 555  :                 if ( FireEventSetup() )

  00074	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ ; COPOSSoundRecorder::FireEventSetup
  0007e	84 c0		 test	 al, al
  00080	74 1e		 je	 SHORT $LN7@EventWindo

; 556  :                 {
; 557  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DirectIOEvent") ) );
; 558  :                     CProxy_IOPOSEvents< COPOSSoundRecorder >::Fire_DirectIOEvent(

  00082	ff b6 68 01 00
	00		 push	 DWORD PTR [esi+360]
  00088	8d 8e b4 00 00
	00		 lea	 ecx, DWORD PTR [esi+180]
  0008e	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00091	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00094	e8 00 00 00 00	 call	 ?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJPAJPAPA_W@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DirectIOEvent
$LN15@EventWindo:

; 592  :                 break;
; 593  :             }
; 594  :         }
; 595  : 
; 596  :         return bProcessed;

  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?FireEventCleanup@COPOSSoundRecorder@@IAEXXZ ; COPOSSoundRecorder::FireEventCleanup
$LN7@EventWindo:
  000a0	33 f6		 xor	 esi, esi
  000a2	46		 inc	 esi
  000a3	eb 28		 jmp	 SHORT $LN5@EventWindo
$LN4@EventWindo:
  000a5	57		 push	 edi

; 540  :         {
; 541  :         case WMU_DATA_EVENT:
; 542  :             {
; 543  :                 if ( FireEventSetup() )

  000a6	8b 7d 08	 mov	 edi, DWORD PTR _this$[ebp]
  000a9	33 f6		 xor	 esi, esi
  000ab	8b cf		 mov	 ecx, edi
  000ad	46		 inc	 esi
  000ae	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSSoundRecorder@@IAE_NXZ ; COPOSSoundRecorder::FireEventSetup
  000b3	84 c0		 test	 al, al
  000b5	74 15		 je	 SHORT $LN14@EventWindo

; 544  :                 {
; 545  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DataEvent") ) );
; 546  :                     CProxy_IOPOSEvents< COPOSSoundRecorder >::Fire_DataEvent(

  000b7	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  000ba	8d 8f b4 00 00
	00		 lea	 ecx, DWORD PTR [edi+180]
  000c0	e8 00 00 00 00	 call	 ?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DataEvent

; 547  :                         (long) wParam );
; 548  :                     FireEventCleanup();

  000c5	8b cf		 mov	 ecx, edi
  000c7	e8 00 00 00 00	 call	 ?FireEventCleanup@COPOSSoundRecorder@@IAEXXZ ; COPOSSoundRecorder::FireEventCleanup
$LN14@EventWindo:
  000cc	5f		 pop	 edi
$LN5@EventWindo:

; 592  :                 break;
; 593  :             }
; 594  :         }
; 595  : 
; 596  :         return bProcessed;

  000cd	8b c6		 mov	 eax, esi
  000cf	5e		 pop	 esi

; 597  :     }

  000d0	5d		 pop	 ebp
  000d1	c2 10 00	 ret	 16			; 00000010H
?EventWindowProc@COPOSSoundRecorder@@IAGJIIJ@Z ENDP	; COPOSSoundRecorder::EventWindowProc
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?s_EventWindowProc@COPOSSoundRecorder@@KGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?s_EventWindowProc@COPOSSoundRecorder@@KGJPAUHWND__@@IIJ@Z PROC ; COPOSSoundRecorder::s_EventWindowProc, COMDAT

; 497  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  :         COPOSSoundRecorder* pThis;
; 499  : 
; 500  :         // On window creation, save our window instance into user window space.
; 501  :         if ( uMsg == WM_CREATE )

  00003	83 7d 0c 01	 cmp	 DWORD PTR _uMsg$[ebp], 1
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _lParam$[ebp]
  0000f	75 1f		 jne	 SHORT $LN2@s_EventWin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 67   : 	return( ::SetWindowLongW( hWnd, nIndex, LONG( dwNewLong ) ) );

  00011	ff 37		 push	 DWORD PTR [edi]
  00013	6a 00		 push	 0
  00015	56		 push	 esi
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongW@12
$LN4@s_EventWin:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h

; 517  :         return ::DefWindowProc( hwnd, uMsg, wParam, lParam );

  0001c	57		 push	 edi
  0001d	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00020	ff 75 0c	 push	 DWORD PTR _uMsg$[ebp]
  00023	56		 push	 esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcW@16
$LN1@s_EventWin:

; 518  :     }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
$LN2@s_EventWin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 87   : 	return( ::GetWindowLongW( hWnd, nIndex ) );

  00030	6a 00		 push	 0
  00032	56		 push	 esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongW@8
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h

; 511  :             if ( pThis != 0 &&

  00039	85 c0		 test	 eax, eax
  0003b	74 df		 je	 SHORT $LN4@s_EventWin
  0003d	57		 push	 edi
  0003e	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00041	ff 75 0c	 push	 DWORD PTR _uMsg$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?EventWindowProc@COPOSSoundRecorder@@IAGJIIJ@Z ; COPOSSoundRecorder::EventWindowProc
  0004a	85 c0		 test	 eax, eax
  0004c	74 ce		 je	 SHORT $LN4@s_EventWin

; 512  :                  pThis->EventWindowProc( uMsg, wParam, lParam ) )
; 513  :                     return 0;

  0004e	33 c0		 xor	 eax, eax
  00050	eb d8		 jmp	 SHORT $LN1@s_EventWin
?s_EventWindowProc@COPOSSoundRecorder@@KGJPAUHWND__@@IIJ@Z ENDP ; COPOSSoundRecorder::s_EventWindowProc
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?EventUninit@COPOSSoundRecorder@@IAEXXZ
_TEXT	SEGMENT
?EventUninit@COPOSSoundRecorder@@IAEXXZ PROC		; COPOSSoundRecorder::EventUninit, COMDAT
; _this$ = ecx

; 268  :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 269  :         if ( _Event_hEventWnd != 0 )

  00003	8b 86 64 01 00
	00		 mov	 eax, DWORD PTR [esi+356]
  00009	85 c0		 test	 eax, eax
  0000b	74 07		 je	 SHORT $LN2@EventUnini

; 270  :             CMVERIFY( ::DestroyWindow( _Event_hEventWnd ) != 0 );

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN2@EventUnini:

; 271  : 
; 272  :         // If last instance of this CO being destroyed, then
; 273  :         //   unregister the hidden window class.
; 274  :         if ( s_nInstances == 0 )

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?s_nInstances@COPOSSoundRecorder@@1HA, 0 ; COPOSSoundRecorder::s_nInstances
  0001b	75 11		 jne	 SHORT $LN3@EventUnini

; 275  :             CMVERIFY( ::UnregisterClass( g_WindowName, _Module.GetModuleInstance() ) != 0 );

  0001d	ff 35 04 00 00
	00		 push	 DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
  00023	68 00 00 00 00	 push	 OFFSET ?g_WindowName@@3PA_WA ; g_WindowName
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassW@8
$LN3@EventUnini:

; 276  : 
; 277  :         if ( _Event_FiringDoneEvent != 0 )

  0002e	8b 86 5c 01 00
	00		 mov	 eax, DWORD PTR [esi+348]
  00034	85 c0		 test	 eax, eax
  00036	74 07		 je	 SHORT $LN4@EventUnini

; 278  :             CMVERIFY( ::CloseHandle( _Event_FiringDoneEvent ) != 0 );

  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN4@EventUnini:

; 279  :         if ( _Event_DoEventMutex != 0 )

  0003f	8b 86 60 01 00
	00		 mov	 eax, DWORD PTR [esi+352]
  00045	5e		 pop	 esi
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN5@EventUnini

; 280  :             CMVERIFY( ::CloseHandle( _Event_DoEventMutex ) != 0 );

  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN5@EventUnini:

; 281  :     }

  00051	c3		 ret	 0
?EventUninit@COPOSSoundRecorder@@IAEXXZ ENDP		; COPOSSoundRecorder::EventUninit
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?EventClose@COPOSSoundRecorder@@IAEXXZ
_TEXT	SEGMENT
_msg$ = -28						; size = 28
?EventClose@COPOSSoundRecorder@@IAEXXZ PROC		; COPOSSoundRecorder::EventClose, COMDAT
; _this$ = ecx

; 246  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 247  :         DOTRACEV( ( _T("*EventClose") ) );
; 248  : 
; 249  :         _Event_bOpen = false;

  00009	c6 86 58 01 00
	00 00		 mov	 BYTE PTR [esi+344], 0
$LL2@EventClose:

; 250  :         // Just in case any undelivered event messages are queued for our window, toss them.
; 251  :         MSG msg;
; 252  :         while ( 0 != ::PeekMessage(

  00010	6a 01		 push	 1
  00012	68 ff 7f 00 00	 push	 32767			; 00007fffH
  00017	68 00 04 00 00	 push	 1024			; 00000400H
  0001c	ff b6 64 01 00
	00		 push	 DWORD PTR [esi+356]
  00022	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageW@20
  0002c	85 c0		 test	 eax, eax
  0002e	75 e0		 jne	 SHORT $LL2@EventClose

; 253  :                   &msg,                     // pointer to structure for message
; 254  :                   _Event_hEventWnd,         // handle to window
; 255  :                   WM_USER, 0x7FFF,          // message filtering: retrieve user messages
; 256  :                   PM_REMOVE )               // removal flags
; 257  :               )
; 258  :             ;
; 259  :     }

  00030	5e		 pop	 esi
  00031	c9		 leave
  00032	c3		 ret	 0
?EventClose@COPOSSoundRecorder@@IAEXXZ ENDP		; COPOSSoundRecorder::EventClose
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderEvent.h
;	COMDAT ?EventInit@COPOSSoundRecorder@@IAEJXZ
_TEXT	SEGMENT
_WndClass$1 = -40					; size = 40
?EventInit@COPOSSoundRecorder@@IAEJXZ PROC		; COPOSSoundRecorder::EventInit, COMDAT
; _this$ = ecx

; 106  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 107  :         _Event_bOpen = false;

  0000a	33 db		 xor	 ebx, ebx
  0000c	57		 push	 edi
  0000d	88 9e 58 01 00
	00		 mov	 BYTE PTR [esi+344], bl

; 108  : 
; 109  :         // This function must be called by the thread that creates the OCX.
; 110  :         // Then these functions will ensure that events from the SO are fired
; 111  :         //   on the thread that creates the OCX.
; 112  :         _Event_ControlThreadID = ::GetCurrentThreadId();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  00019	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax

; 113  : 
; 114  :         // Perform some initialization in case of a failure below,
; 115  :         //   so that EventUninit will not fail.
; 116  :         _Event_hEventWnd = 0;
; 117  :         _Event_FiringDoneEvent = 0;
; 118  :         _Event_DoEventMutex = 0;
; 119  : 
; 120  :         // If first instance of this CO being created, then
; 121  :         //   register a class for our hidden window.
; 122  :         if ( s_nInstances == 0 )

  0001f	bf 00 00 00 00	 mov	 edi, OFFSET ?g_WindowName@@3PA_WA ; g_WindowName
  00024	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
  0002a	89 9e 5c 01 00
	00		 mov	 DWORD PTR [esi+348], ebx
  00030	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
  00036	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?s_nInstances@COPOSSoundRecorder@@1HA, ebx ; COPOSSoundRecorder::s_nInstances
  0003c	75 37		 jne	 SHORT $LN12@EventInit

; 123  :         {
; 124  :             WNDCLASS WndClass =
; 125  :             {
; 126  :                 0,                              // style
; 127  :                 s_EventWindowProc,              // lpfnWndProc
; 128  :                 0,                              // cbClsExtra
; 129  :                 sizeof( void* ),                // cbWndExtra
; 130  :                 _Module.GetModuleInstance(),    // hInstance

  0003e	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	89 45 e8	 mov	 DWORD PTR _WndClass$1[ebp+16], eax

; 131  :                 NULL,                           // hIcon
; 132  :                 NULL,                           // hCursor
; 133  :                 NULL,                           // hbrBackground
; 134  :                 NULL,                           // lpszMenuName
; 135  :                 g_WindowName                    // lpszClassName
; 136  :             };
; 137  :             if ( 0 == ::RegisterClass( &WndClass ) )

  00049	8d 45 d8	 lea	 eax, DWORD PTR _WndClass$1[ebp]
  0004c	50		 push	 eax
  0004d	89 5d d8	 mov	 DWORD PTR _WndClass$1[ebp], ebx
  00050	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+4], OFFSET ?s_EventWindowProc@COPOSSoundRecorder@@KGJPAUHWND__@@IIJ@Z ; COPOSSoundRecorder::s_EventWindowProc
  00057	89 5d e0	 mov	 DWORD PTR _WndClass$1[ebp+8], ebx
  0005a	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+12], 4
  00061	0f 11 45 ec	 movups	 XMMWORD PTR _WndClass$1[ebp+20], xmm0
  00065	89 7d fc	 mov	 DWORD PTR _WndClass$1[ebp+36], edi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassW@4
  0006e	33 c9		 xor	 ecx, ecx
  00070	66 3b c8	 cmp	 cx, ax
  00073	74 4d		 je	 SHORT $LN6@EventInit
$LN12@EventInit:

; 138  :             {
; 139  :                 DOTRACEERR( _T("  EventInit: Failed RegisterClass %lu\n    %s"), ::GetLastError() );
; 140  :                 return E_UNEXPECTED;
; 141  :             }
; 142  :         }
; 143  : 
; 144  :         // Create the hidden window for event handling.
; 145  :         _Event_hEventWnd = CreateWindowEx(

  00075	56		 push	 esi
  00076	ff 35 04 00 00
	00		 push	 DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
  0007c	53		 push	 ebx
  0007d	53		 push	 ebx
  0007e	53		 push	 ebx
  0007f	53		 push	 ebx
  00080	53		 push	 ebx
  00081	53		 push	 ebx
  00082	53		 push	 ebx
  00083	57		 push	 edi
  00084	57		 push	 edi
  00085	53		 push	 ebx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExW@48
  0008c	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax

; 146  :             0,                              // extended window style
; 147  :             g_WindowName,                   // pointer to registered class name
; 148  :             g_WindowName,                   // pointer to window name
; 149  :             0,                              // window style
; 150  :             0,                              // horizontal position of window
; 151  :             0,                              // vertical position of window
; 152  :             0,                              // window width
; 153  :             0,                              // window height
; 154  :             NULL,                           // handle to parent or owner window
; 155  :             0,                              // handle to menu, or child-window identifier
; 156  :             _Module.GetModuleInstance(),    // handle to application instance
; 157  :             this );                         // pointer to window-creation data
; 158  :         if ( 0 == _Event_hEventWnd )

  00092	85 c0		 test	 eax, eax
  00094	74 2c		 je	 SHORT $LN6@EventInit

; 159  :         {
; 160  :             DOTRACEERR( _T("  EventInit: Failed CreateWindowEx %lu\n    %s"), ::GetLastError() );
; 161  :             return E_UNEXPECTED;
; 162  :         }
; 163  : 
; 164  :         // Create synchronization objects.
; 165  :         if ( 0 == ( _Event_FiringDoneEvent = CreateEvent(
; 166  :                         0,                  // pointer to security attributes
; 167  :                         TRUE,               // flag for manual-reset event
; 168  :                         FALSE,              // flag for initial state
; 169  :                         0 ) ) ||            // pointer to event-object name

  00096	53		 push	 ebx
  00097	53		 push	 ebx
  00098	6a 01		 push	 1
  0009a	53		 push	 ebx
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16
  000a1	89 86 5c 01 00
	00		 mov	 DWORD PTR [esi+348], eax
  000a7	85 c0		 test	 eax, eax
  000a9	74 17		 je	 SHORT $LN6@EventInit
  000ab	53		 push	 ebx
  000ac	53		 push	 ebx
  000ad	53		 push	 ebx
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexW@12
  000b4	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  000ba	85 c0		 test	 eax, eax
  000bc	74 04		 je	 SHORT $LN6@EventInit

; 177  :         }
; 178  : 
; 179  :         return S_OK;

  000be	33 c0		 xor	 eax, eax
  000c0	eb 05		 jmp	 SHORT $LN1@EventInit
$LN6@EventInit:

; 170  :              0 == ( _Event_DoEventMutex = CreateMutex(
; 171  :                         0,                  // pointer to security attributes
; 172  :                         FALSE,              // flag for initial ownership
; 173  :                         0 ) ) )             // pointer to mutex-object name
; 174  :         {
; 175  :             DOTRACEERR( _T("  EventInit: Failed CreateEvent/Mutex %lu\n    %s"), ::GetLastError() );
; 176  :             return E_UNEXPECTED;

  000c2	b8 ff ff 00 80	 mov	 eax, -2147418113	; 8000ffffH
$LN1@EventInit:
  000c7	5f		 pop	 edi

; 180  :     }

  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	c9		 leave
  000cb	c3		 ret	 0
?EventInit@COPOSSoundRecorder@@IAEJXZ ENDP		; COPOSSoundRecorder::EventInit
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
;	COMDAT ?GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z
_TEXT	SEGMENT
_pnEntries$ = 8						; size = 4
?GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z PROC ; COPOSSoundRecorder::GetConnMap, COMDAT

; 267  : BEGIN_CONNECTION_POINT_MAP(COPOSSoundRecorder)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0000f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSSoundRecorder::GetConnMap'::`2'::$TSS0
  00017	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0001d	7f 17		 jg	 SHORT $LN15@GetConnMap
  0001f	eb 01		 jmp	 SHORT $LN2@GetConnMap
$LN13@GetConnMap:
  00021	5e		 pop	 esi
$LN2@GetConnMap:

; 268  :     CONNECTION_POINT_ENTRY(IID_IPropertyNotifySink)
; 269  :     CONNECTION_POINT_ENTRY(DIID__IOPOSSoundRecorderEvents)
; 270  : END_CONNECTION_POINT_MAP()

  00022	8b 45 08	 mov	 eax, DWORD PTR _pnEntries$[ebp]
  00025	85 c0		 test	 eax, eax
  00027	74 06		 je	 SHORT $LN3@GetConnMap
  00029	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$LN3@GetConnMap:
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET ?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B ; `COPOSSoundRecorder::GetConnMap'::`2'::_entries
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN15@GetConnMap:

; 267  : BEGIN_CONNECTION_POINT_MAP(COPOSSoundRecorder)

  00036	56		 push	 esi
  00037	be 00 00 00 00	 mov	 esi, OFFSET ?$TSS0@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSSoundRecorder::GetConnMap'::`2'::$TSS0
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 __Init_thread_header
  00042	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA, -1 ; `COPOSSoundRecorder::GetConnMap'::`2'::$TSS0
  00049	59		 pop	 ecx
  0004a	75 d5		 jne	 SHORT $LN13@GetConnMap

; 268  :     CONNECTION_POINT_ENTRY(IID_IPropertyNotifySink)
; 269  :     CONNECTION_POINT_ENTRY(DIID__IOPOSSoundRecorderEvents)
; 270  : END_CONNECTION_POINT_MAP()

  0004c	83 0d 08 00 00
	00 ff		 or	 DWORD PTR ?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B+8, -1
  00053	56		 push	 esi
  00054	c7 05 00 00 00
	00 20 00 00 00	 mov	 DWORD PTR ?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B, 32 ; 00000020H
  0005e	c7 05 04 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?_entries@?1??GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B+4, 44 ; 0000002cH
  00068	e8 00 00 00 00	 call	 __Init_thread_footer
  0006d	59		 pop	 ecx
  0006e	eb b1		 jmp	 SHORT $LN13@GetConnMap
?GetConnMap@COPOSSoundRecorder@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z ENDP ; COPOSSoundRecorder::GetConnMap
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?OnDraw@COPOSSoundRecorder@@MAEJAAUATL_DRAWINFO@@@Z
_TEXT	SEGMENT
_bmp$ = -32						; size = 24
_hBitmap$1$ = -8					; size = 4
_hMemDC$1$ = -4						; size = 4
_di$ = 8						; size = 4
?OnDraw@COPOSSoundRecorder@@MAEJAAUATL_DRAWINFO@@@Z PROC ; COPOSSoundRecorder::OnDraw, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx

; 233  :     RECT& rc = *(RECT*)di.prcBounds;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _di$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 234  : 
; 235  :     // Draw our bitmap...
; 236  :     //  - Load bitmap and get info
; 237  :     HBITMAP hBitmap = LoadBitmap(

  0000c	68 c9 00 00 00	 push	 201			; 000000c9H
  00011	ff 35 04 00 00
	00		 push	 DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
  00017	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapW@8
  00020	8b f8		 mov	 edi, eax

; 238  :         _Module.GetModuleInstance(),            // handle of the instance containing the image
; 239  :         MAKEINTRESOURCE(IDB_OPOSSOUNDRECORDER2) ); // bitmap resource name
; 240  :     BITMAP bmp;
; 241  :     GetObject(

  00022	8d 45 e0	 lea	 eax, DWORD PTR _bmp$[ebp]
  00025	50		 push	 eax
  00026	6a 18		 push	 24			; 00000018H
  00028	57		 push	 edi
  00029	89 7d f8	 mov	 DWORD PTR _hBitmap$1$[ebp], edi
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectW@12

; 242  :         hBitmap,                                // handle to graphics object of interest
; 243  :         sizeof(BITMAP),                         // size of buffer for object information
; 244  :         &bmp );                                 // pointer to buffer for object information
; 245  :     //  - Create a compatible memory DC and select bitmap into it
; 246  :     HDC hMemDC = CreateCompatibleDC(

  00032	ff 73 14	 push	 DWORD PTR [ebx+20]
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4

; 247  :         di.hdcDraw );                           // handle to the device context
; 248  :     HBITMAP hOldBitmap =

  0003b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SelectObject@8
  00041	57		 push	 edi
  00042	50		 push	 eax
  00043	89 45 fc	 mov	 DWORD PTR _hMemDC$1$[ebp], eax
  00046	ff d3		 call	 ebx

; 249  :         (HBITMAP) SelectObject(
; 250  :             hMemDC,                             // handle to device context
; 251  :             hBitmap );                          // handle to object
; 252  :     //  - Copy bitmap from memory DC to screen DC
; 253  :     BitBlt(

  00048	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0004b	8b f8		 mov	 edi, eax
  0004d	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  00050	39 4d e8	 cmp	 DWORD PTR _bmp$[ebp+8], ecx
  00053	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00056	0f 4c 4d e8	 cmovl	 ecx, DWORD PTR _bmp$[ebp+8]
  0005a	2b 06		 sub	 eax, DWORD PTR [esi]
  0005c	39 45 e4	 cmp	 DWORD PTR _bmp$[ebp+4], eax
  0005f	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00064	0f 4c 45 e4	 cmovl	 eax, DWORD PTR _bmp$[ebp+4]
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	ff 75 fc	 push	 DWORD PTR _hMemDC$1$[ebp]
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	ff 76 04	 push	 DWORD PTR [esi+4]
  00074	8b 45 08	 mov	 eax, DWORD PTR _di$[ebp]
  00077	ff 36		 push	 DWORD PTR [esi]
  00079	ff 70 14	 push	 DWORD PTR [eax+20]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 254  :       di.hdcDraw,                               // handle to destination device context
; 255  :       rc.left,                                  // x-coordinate of destination rectangle's upper-left corner
; 256  :       rc.top,                                   // y-coordinate of destination rectangle's upper-left corner
; 257  :       min( bmp.bmWidth, rc.right - rc.left ),   // width of destination rectangle
; 258  :       min( bmp.bmHeight, rc.bottom - rc.top ),  // height of destination rectangle
; 259  :       hMemDC,                                   // handle to source device context
; 260  :       0,                                        // x-coordinate of source rectangle's upper-left corner
; 261  :       0,                                        // y-coordinate of source rectangle's upper-left corner
; 262  :       SRCCOPY );                                // raster operation code
; 263  : 
; 264  :     // Cleanup
; 265  :     SelectObject( hMemDC, hOldBitmap );

  00082	8b 75 fc	 mov	 esi, DWORD PTR _hMemDC$1$[ebp]
  00085	57		 push	 edi
  00086	56		 push	 esi
  00087	ff d3		 call	 ebx

; 266  :     DeleteObject( hMemDC );

  00089	56		 push	 esi
  0008a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteObject@4
  00090	ff d6		 call	 esi

; 267  :     DeleteObject( hBitmap );

  00092	ff 75 f8	 push	 DWORD PTR _hBitmap$1$[ebp]
  00095	ff d6		 call	 esi

; 268  : 
; 269  :     return S_OK;

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	33 c0		 xor	 eax, eax
  0009b	5b		 pop	 ebx

; 270  : }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?OnDraw@COPOSSoundRecorder@@MAEJAAUATL_DRAWINFO@@@Z ENDP ; COPOSSoundRecorder::OnDraw
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?FreezeEvents@COPOSSoundRecorder@@MAGJH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bFreeze$ = 12						; size = 4
?FreezeEvents@COPOSSoundRecorder@@MAGJH@Z PROC		; COPOSSoundRecorder::FreezeEvents, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :     // If requesting events to be frozen...
; 205  :     if ( bFreeze )

  00003	83 7d 0c 00	 cmp	 DWORD PTR _bFreeze$[ebp], 0
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0000b	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00011	74 22		 je	 SHORT $LN2@FreezeEven

; 206  :     {
; 207  :         DOTRACEV( ( _T("*FreezeEvents: Freezing %d"), _nCOFreezeEventCount ) );
; 208  :         if ( _nCOFreezeEventCount == 0 &&   // If events are not currently frozen and

  00013	85 c0		 test	 eax, eax
  00015	75 15		 jne	 SHORT $LN4@FreezeEven
  00017	38 46 6c	 cmp	 BYTE PTR [esi+108], al
  0001a	74 10		 je	 SHORT $LN4@FreezeEven

; 209  :              _bOpened )                     //   SO is opened,
; 210  :             SetCOFreezeEvents( TRUE );      //   then freeze events in the SO.

  0001c	6a 01		 push	 1
  0001e	8d 4e 8c	 lea	 ecx, DWORD PTR [esi-116]
  00021	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z ; COPOSSoundRecorder::SetCOFreezeEvents
  00026	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
$LN4@FreezeEven:

; 211  :         _nCOFreezeEventCount++;             // Increment freeze count. Must do after informing SO.

  0002c	40		 inc	 eax
  0002d	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 212  :     }

  00033	eb 21		 jmp	 SHORT $LN5@FreezeEven
$LN2@FreezeEven:

; 213  :     // Else requesting events to be unfrozen...
; 214  :     else
; 215  :     {
; 216  :         _nCOFreezeEventCount--;             // Decrement freeze count. Must do before informing SO.

  00035	83 e8 01	 sub	 eax, 1
  00038	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 217  :         DOTRACEV( ( _T("*FreezeEvents: Unfreezing %d"), _nCOFreezeEventCount ) );
; 218  :         if ( _nCOFreezeEventCount == 0 &&   // If events have become unfrozen and

  0003e	75 16		 jne	 SHORT $LN5@FreezeEven
  00040	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  00044	74 10		 je	 SHORT $LN5@FreezeEven

; 219  :              _bOpened )                     //   SO is opened,
; 220  :             SetCOFreezeEvents( FALSE );     //   then unfreeze events in the SO.

  00046	6a 00		 push	 0
  00048	8d 4e 8c	 lea	 ecx, DWORD PTR [esi-116]
  0004b	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z ; COPOSSoundRecorder::SetCOFreezeEvents
  00050	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
$LN5@FreezeEven:

; 221  :     }
; 222  : 
; 223  :     // Just in case anyone cares ... keep the CComControlBase one in sync.
; 224  :     m_nFreezeEvents = _nCOFreezeEventCount;

  00056	89 46 d0	 mov	 DWORD PTR [esi-48], eax

; 225  :     return S_OK;

  00059	33 c0		 xor	 eax, eax
  0005b	5e		 pop	 esi

; 226  : }

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?FreezeEvents@COPOSSoundRecorder@@MAGJH@Z ENDP		; COPOSSoundRecorder::FreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z
_TEXT	SEGMENT
_Var$1 = -64						; size = 24
_VarResult$2 = -40					; size = 24
_Disp$3 = -16						; size = 16
_bFreeze$ = 8						; size = 2
?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z PROC	; COPOSSoundRecorder::SetCOFreezeEvents, COMDAT
; _this$ = ecx

; 651  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 652  :     // If open...
; 653  :     if ( _bOpened )

  00009	80 be e0 00 00
	00 00		 cmp	 BYTE PTR [esi+224], 0
  00010	0f 84 85 00 00
	00		 je	 $LN20@SetCOFreez
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00016	53		 push	 ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 660  :         Var.SetVARIANT_BOOL( bFreeze );

  00017	ff 75 08	 push	 DWORD PTR _bFreeze$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0001a	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 660  :         Var.SetVARIANT_BOOL( bFreeze );

  0001c	8d 4d c0	 lea	 ecx, DWORD PTR _Var$1[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0001f	33 db		 xor	 ebx, ebx
  00021	66 89 45 c0	 mov	 WORD PTR _Var$1[ebp], ax
  00025	88 5d d0	 mov	 BYTE PTR _Var$1[ebp+16], bl
  00028	66 89 45 d8	 mov	 WORD PTR _VarResult$2[ebp], ax
  0002c	88 5d e8	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 660  :         Var.SetVARIANT_BOOL( bFreeze );

  0002f	e8 00 00 00 00	 call	 ?SetVARIANT_BOOL@OposVariant@@QAEXF@Z ; OposVariant::SetVARIANT_BOOL

; 661  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };
; 662  :         _pService->Invoke(

  00034	53		 push	 ebx
  00035	53		 push	 ebx
  00036	8d 55 d8	 lea	 edx, DWORD PTR _VarResult$2[ebp]
  00039	89 5d f4	 mov	 DWORD PTR _Disp$3[ebp+4], ebx
  0003c	52		 push	 edx
  0003d	8d 55 f0	 lea	 edx, DWORD PTR _Disp$3[ebp]
  00040	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Disp$3[ebp+8], 1
  00047	52		 push	 edx
  00048	6a 01		 push	 1
  0004a	8d 45 c0	 lea	 eax, DWORD PTR _Var$1[ebp]
  0004d	89 5d fc	 mov	 DWORD PTR _Disp$3[ebp+12], ebx
  00050	89 45 f0	 mov	 DWORD PTR _Disp$3[ebp], eax
  00053	8b 86 f4 00 00
	00		 mov	 eax, DWORD PTR [esi+244]
  00059	68 00 04 00 00	 push	 1024			; 00000400H
  0005e	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00063	ff b6 04 01 00
	00		 push	 DWORD PTR [esi+260]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	50		 push	 eax
  0006c	ff 51 18	 call	 DWORD PTR [ecx+24]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0006f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VariantClear@4
  00075	8d 45 d8	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  00078	50		 push	 eax
  00079	88 5d e8	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  0007c	ff d6		 call	 esi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0007e	38 5d e8	 cmp	 BYTE PTR _VarResult$2[ebp+16], bl
  00081	74 09		 je	 SHORT $LN15@SetCOFreez

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00083	8d 45 d8	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  00086	88 5d e8	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  00089	50		 push	 eax
  0008a	ff d6		 call	 esi
$LN15@SetCOFreez:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0008c	38 5d d0	 cmp	 BYTE PTR _Var$1[ebp+16], bl
  0008f	74 09		 je	 SHORT $LN24@SetCOFreez

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00091	8d 45 c0	 lea	 eax, DWORD PTR _Var$1[ebp]
  00094	88 5d d0	 mov	 BYTE PTR _Var$1[ebp+16], bl
  00097	50		 push	 eax
  00098	ff d6		 call	 esi
$LN24@SetCOFreez:
  0009a	5b		 pop	 ebx
$LN20@SetCOFreez:
  0009b	5e		 pop	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 666  : }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?SetCOFreezeEvents@COPOSSoundRecorder@@IAEXF@Z ENDP	; COPOSSoundRecorder::SetCOFreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z
_TEXT	SEGMENT
_VarResult$1 = -40					; size = 24
_Disp$2 = -16						; size = 16
_hRC$ = 8						; size = 4
_pParms$ = 12						; size = 4
_nParms$ = 16						; size = 4
_nDispIDIndex$ = 20					; size = 4
_pRC$ = 24						; size = 4
_bOpenCheck$ = 28					; size = 1
?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z PROC ; COPOSSoundRecorder::DoInvoke, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 568  :     if ( bOpenCheck )

  0000a	8b 7d 14	 mov	 edi, DWORD PTR _nDispIDIndex$[ebp]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0000d	83 8e f0 00 00
	00 ff		 or	 DWORD PTR [esi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 568  :     if ( bOpenCheck )

  00014	80 7d 1c 00	 cmp	 BYTE PTR _bOpenCheck$[ebp], 0
  00018	74 31		 je	 SHORT $LN29@DoInvoke

; 569  :     {
; 570  :         // If not opened, set error code and return....
; 571  :         if ( ! _bOpened )

  0001a	80 be e0 00 00
	00 00		 cmp	 BYTE PTR [esi+224], 0
  00021	75 0b		 jne	 SHORT $LN3@DoInvoke

; 572  :         {
; 573  :             *pRC = OPOS_E_CLOSED;

  00023	8b 45 18	 mov	 eax, DWORD PTR _pRC$[ebp]
  00026	c7 00 65 00 00
	00		 mov	 DWORD PTR [eax], 101	; 00000065H

; 574  :             hRC = S_OK;
; 575  :         }

  0002c	eb 16		 jmp	 SHORT $LN31@DoInvoke
$LN3@DoInvoke:

; 576  :         // If the SO's release level doesn't support this method, then return error.
; 577  :         else if ( nDispIDIndex >= _nMaxMethod )

  0002e	3b be 00 01 00
	00		 cmp	 edi, DWORD PTR [esi+256]
  00034	7c 15		 jl	 SHORT $LN29@DoInvoke

; 579  :             *pRC = SetRC( OPOS_E_NOSERVICE );

  00036	8b 45 18	 mov	 eax, DWORD PTR _pRC$[ebp]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00039	6a 68		 push	 104			; 00000068H
  0003b	59		 pop	 ecx
  0003c	89 8e f0 00 00
	00		 mov	 DWORD PTR [esi+240], ecx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 579  :             *pRC = SetRC( OPOS_E_NOSERVICE );

  00042	89 08		 mov	 DWORD PTR [eax], ecx
$LN31@DoInvoke:

; 645  :     return hRC;

  00044	33 ff		 xor	 edi, edi
  00046	e9 89 00 00 00	 jmp	 $LN25@DoInvoke
$LN29@DoInvoke:
  0004b	53		 push	 ebx

; 588  :         OposDispParms Disp( pParms, nParms );

  0004c	ff 75 10	 push	 DWORD PTR _nParms$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0004f	33 c0		 xor	 eax, eax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 588  :         OposDispParms Disp( pParms, nParms );

  00051	8d 4d f0	 lea	 ecx, DWORD PTR _Disp$2[ebp]
  00054	ff 75 0c	 push	 DWORD PTR _pParms$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00057	33 db		 xor	 ebx, ebx
  00059	66 89 45 d8	 mov	 WORD PTR _VarResult$1[ebp], ax
  0005d	88 5d e8	 mov	 BYTE PTR _VarResult$1[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 588  :         OposDispParms Disp( pParms, nParms );

  00060	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 589  : 
; 590  :         // Invoke the SO method.
; 591  :         hRC = _pService->Invoke(

  00065	8b 86 f4 00 00
	00		 mov	 eax, DWORD PTR [esi+244]
  0006b	8d 55 d8	 lea	 edx, DWORD PTR _VarResult$1[ebp]
  0006e	53		 push	 ebx
  0006f	53		 push	 ebx
  00070	52		 push	 edx
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8d 55 f0	 lea	 edx, DWORD PTR _Disp$2[ebp]
  00076	52		 push	 edx
  00077	6a 01		 push	 1
  00079	68 00 04 00 00	 push	 1024			; 00000400H
  0007e	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00083	ff b4 be 04 01
	00 00		 push	 DWORD PTR [esi+edi*4+260]
  0008a	50		 push	 eax
  0008b	ff 51 18	 call	 DWORD PTR [ecx+24]
  0008e	8b f8		 mov	 edi, eax

; 597  :         *pRC = (hRC == S_OK) ? VarResult.GetLONG() : SetRC( OPOS_E_NOSERVICE );

  00090	85 ff		 test	 edi, edi
  00092	75 0c		 jne	 SHORT $LN8@DoInvoke
  00094	8d 4d d8	 lea	 ecx, DWORD PTR _VarResult$1[ebp]
  00097	e8 00 00 00 00	 call	 ?GetLONG@OposVariant@@QAEJXZ ; OposVariant::GetLONG
  0009c	8b c8		 mov	 ecx, eax
  0009e	eb 09		 jmp	 SHORT $LN9@DoInvoke
$LN8@DoInvoke:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  000a0	6a 68		 push	 104			; 00000068H
  000a2	59		 pop	 ecx
  000a3	89 8e f0 00 00
	00		 mov	 DWORD PTR [esi+240], ecx
$LN9@DoInvoke:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 597  :         *pRC = (hRC == S_OK) ? VarResult.GetLONG() : SetRC( OPOS_E_NOSERVICE );

  000a9	8b 45 18	 mov	 eax, DWORD PTR _pRC$[ebp]
  000ac	89 08		 mov	 DWORD PTR [eax], ecx

; 598  :     }

  000ae	8d 4d f0	 lea	 ecx, DWORD PTR _Disp$2[ebp]
  000b1	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000b6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VariantClear@4
  000bc	8d 45 d8	 lea	 eax, DWORD PTR _VarResult$1[ebp]
  000bf	50		 push	 eax
  000c0	88 5d e8	 mov	 BYTE PTR _VarResult$1[ebp+16], bl
  000c3	ff d6		 call	 esi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000c5	38 5d e8	 cmp	 BYTE PTR _VarResult$1[ebp+16], bl
  000c8	74 09		 je	 SHORT $LN30@DoInvoke

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000ca	8d 45 d8	 lea	 eax, DWORD PTR _VarResult$1[ebp]
  000cd	88 5d e8	 mov	 BYTE PTR _VarResult$1[ebp+16], bl
  000d0	50		 push	 eax
  000d1	ff d6		 call	 esi
$LN30@DoInvoke:
  000d3	5b		 pop	 ebx
$LN25@DoInvoke:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 645  :     return hRC;

  000d4	8b c7		 mov	 eax, edi
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi

; 646  : }

  000d8	c9		 leave
  000d9	c2 18 00	 ret	 24			; 00000018H
?DoInvoke@COPOSSoundRecorder@@IAEJJPAVOposVariant@@IHPAJ_N@Z ENDP ; COPOSSoundRecorder::DoInvoke
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z
_TEXT	SEGMENT
_Vars$1 = -92						; size = 48
_VarResult$2 = -44					; size = 24
_Disp$3 = -20						; size = 16
_hRC$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_sValue$ = 12						; size = 4
_nMinor$ = 16						; size = 4
?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z PROC	; COPOSSoundRecorder::SetOposProp, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 456  : #ifdef _DEBUG
; 457  :     TCHAR szPrefix[100];
; 458  :     _sntprintf( szPrefix, TSIZEOF(szPrefix), _T("+%hs [Set]."), pPropName );
; 459  :     NULTERMINATE(szPrefix);
; 460  :     DOTRACESTRINGV( szPrefix, sValue );
; 461  : #endif
; 462  :     HRESULT hRC = S_OK;

  0000a	33 db		 xor	 ebx, ebx
  0000c	89 5d fc	 mov	 DWORD PTR _hRC$[ebp], ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0000f	83 8e f0 00 00
	00 ff		 or	 DWORD PTR [esi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 467  :     if ( _bOpened && _nSOMinor >= nMinor )

  00016	38 9e e0 00 00
	00		 cmp	 BYTE PTR [esi+224], bl
  0001c	0f 84 d7 00 00
	00		 je	 $LN5@SetOposPro
  00022	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  00028	3b 45 10	 cmp	 eax, DWORD PTR _nMinor$[ebp]
  0002b	0f 8c be 00 00
	00		 jl	 $LN2@SetOposPro

; 468  :     {
; 469  :         // Set up and call the SO's set property number method.
; 470  :         OposVariant Vars[2];

  00031	57		 push	 edi
  00032	6a 02		 push	 2
  00034	5f		 pop	 edi
  00035	8d 45 a4	 lea	 eax, DWORD PTR _Vars$1[ebp]
  00038	8b cf		 mov	 ecx, edi
$LL10@SetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0003a	33 d2		 xor	 edx, edx
  0003c	88 58 10	 mov	 BYTE PTR [eax+16], bl
  0003f	66 89 10	 mov	 WORD PTR [eax], dx
  00042	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00045	83 e9 01	 sub	 ecx, 1
  00048	75 f0		 jne	 SHORT $LL10@SetOposPro
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 472  :         Vars[1].SetLONG( nIndex );

  0004a	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0004d	33 c0		 xor	 eax, eax
  0004f	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 472  :         Vars[1].SetLONG( nIndex );

  00052	8d 4d bc	 lea	 ecx, DWORD PTR _Vars$1[ebp+24]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00055	66 89 45 d4	 mov	 WORD PTR _VarResult$2[ebp], ax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 472  :         Vars[1].SetLONG( nIndex );

  00059	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 473  :         Vars[0].SetBSTR( sValue, hRC );

  0005e	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  00061	50		 push	 eax
  00062	ff 75 0c	 push	 DWORD PTR _sValue$[ebp]
  00065	8d 4d a4	 lea	 ecx, DWORD PTR _Vars$1[ebp]
  00068	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 474  :         OposDispParms Disp( Vars, 2 );

  0006d	57		 push	 edi
  0006e	8d 45 a4	 lea	 eax, DWORD PTR _Vars$1[ebp]
  00071	50		 push	 eax
  00072	8d 4d ec	 lea	 ecx, DWORD PTR _Disp$3[ebp]
  00075	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 475  :         if ( hRC == S_OK )

  0007a	39 5d fc	 cmp	 DWORD PTR _hRC$[ebp], ebx
  0007d	75 2b		 jne	 SHORT $LN4@SetOposPro

; 476  :             hRC = _pService->Invoke(

  0007f	8b 86 f4 00 00
	00		 mov	 eax, DWORD PTR [esi+244]
  00085	8d 55 d4	 lea	 edx, DWORD PTR _VarResult$2[ebp]
  00088	53		 push	 ebx
  00089	53		 push	 ebx
  0008a	52		 push	 edx
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8d 55 ec	 lea	 edx, DWORD PTR _Disp$3[ebp]
  00090	52		 push	 edx
  00091	6a 01		 push	 1
  00093	68 00 04 00 00	 push	 1024			; 00000400H
  00098	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  0009d	ff b6 14 01 00
	00		 push	 DWORD PTR [esi+276]
  000a3	50		 push	 eax
  000a4	ff 51 18	 call	 DWORD PTR [ecx+24]
  000a7	89 45 fc	 mov	 DWORD PTR _hRC$[ebp], eax
$LN4@SetOposPro:

; 479  :     }

  000aa	8d 4d ec	 lea	 ecx, DWORD PTR _Disp$3[ebp]
  000ad	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VariantClear@4
  000b8	8d 45 d4	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000bb	50		 push	 eax
  000bc	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000bf	ff d6		 call	 esi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000c1	38 5d e4	 cmp	 BYTE PTR _VarResult$2[ebp+16], bl
  000c4	74 09		 je	 SHORT $LN24@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c6	8d 45 d4	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000c9	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000cc	50		 push	 eax
  000cd	ff d6		 call	 esi
$LN24@SetOposPro:
  000cf	8d 75 d4	 lea	 esi, DWORD PTR _Vars$1[ebp+48]
$LL44@SetOposPro:
  000d2	83 ee 18	 sub	 esi, 24			; 00000018H
  000d5	4f		 dec	 edi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000d6	38 5e 10	 cmp	 BYTE PTR [esi+16], bl
  000d9	74 0a		 je	 SHORT $LN33@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000db	56		 push	 esi
  000dc	88 5e 10	 mov	 BYTE PTR [esi+16], bl
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN33@SetOposPro:
  000e5	85 ff		 test	 edi, edi
  000e7	75 e9		 jne	 SHORT $LL44@SetOposPro
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 479  :     }

  000e9	8b 5d fc	 mov	 ebx, DWORD PTR _hRC$[ebp]
  000ec	5f		 pop	 edi
  000ed	eb 0a		 jmp	 SHORT $LN5@SetOposPro
$LN2@SetOposPro:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  000ef	c7 86 f0 00 00
	00 68 00 00 00	 mov	 DWORD PTR [esi+240], 104 ; 00000068H
$LN5@SetOposPro:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 503  :     return hRC;

  000f9	5e		 pop	 esi
  000fa	8b c3		 mov	 eax, ebx
  000fc	5b		 pop	 ebx

; 504  : }

  000fd	c9		 leave
  000fe	c2 0c 00	 ret	 12			; 0000000cH
?SetOposProp@COPOSSoundRecorder@@IAEJJPA_WJ@Z ENDP	; COPOSSoundRecorder::SetOposProp
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z
_TEXT	SEGMENT
_Var$1 = -68						; size = 24
_VarResult$2 = -44					; size = 24
_Disp$3 = -20						; size = 16
_hRC$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_psValue$ = 12						; size = 4
_nMinor$ = 16						; size = 4
?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z PROC	; COPOSSoundRecorder::GetOposProp, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 407  :     DOTRACEV( ( _T("+%hs [Get]"), pPropName ) );
; 408  : 
; 409  :     // Initialize return value.
; 410  :     HRESULT hRC = S_OK;

  0000a	33 db		 xor	 ebx, ebx
  0000c	89 5d fc	 mov	 DWORD PTR _hRC$[ebp], ebx

; 411  : 
; 412  :     // If open and SO version support's property...
; 413  :     if ( _bOpened && _nSOMinor >= nMinor )

  0000f	38 9e e0 00 00
	00		 cmp	 BYTE PTR [esi+224], bl
  00015	0f 84 a8 00 00
	00		 je	 $LN2@GetOposPro
  0001b	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  00021	3b 45 10	 cmp	 eax, DWORD PTR _nMinor$[ebp]
  00024	0f 8c 99 00 00
	00		 jl	 $LN2@GetOposPro

; 418  :         Var.SetLONG( nIndex );

  0002a	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0002d	33 c0		 xor	 eax, eax
  0002f	88 5d cc	 mov	 BYTE PTR _Var$1[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 418  :         Var.SetLONG( nIndex );

  00032	8d 4d bc	 lea	 ecx, DWORD PTR _Var$1[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00035	66 89 45 bc	 mov	 WORD PTR _Var$1[ebp], ax
  00039	66 89 45 d4	 mov	 WORD PTR _VarResult$2[ebp], ax
  0003d	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 418  :         Var.SetLONG( nIndex );

  00040	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 419  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };
; 420  :         hRC = _pService->Invoke(

  00045	53		 push	 ebx
  00046	53		 push	 ebx
  00047	8d 55 d4	 lea	 edx, DWORD PTR _VarResult$2[ebp]
  0004a	89 5d f0	 mov	 DWORD PTR _Disp$3[ebp+4], ebx
  0004d	52		 push	 edx
  0004e	8d 55 ec	 lea	 edx, DWORD PTR _Disp$3[ebp]
  00051	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Disp$3[ebp+8], 1
  00058	52		 push	 edx
  00059	6a 01		 push	 1
  0005b	8d 45 bc	 lea	 eax, DWORD PTR _Var$1[ebp]
  0005e	89 5d f8	 mov	 DWORD PTR _Disp$3[ebp+12], ebx
  00061	89 45 ec	 mov	 DWORD PTR _Disp$3[ebp], eax
  00064	8b 86 f4 00 00
	00		 mov	 eax, DWORD PTR [esi+244]
  0006a	68 00 04 00 00	 push	 1024			; 00000400H
  0006f	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00074	ff b6 10 01 00
	00		 push	 DWORD PTR [esi+272]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	50		 push	 eax
  0007d	ff 51 18	 call	 DWORD PTR [ecx+24]
  00080	89 45 fc	 mov	 DWORD PTR _hRC$[ebp], eax

; 421  :                 _DispIDs[nDIGetPropertyString], IID_NULL, LOCALE_USER_DEFAULT,
; 422  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 423  : 
; 424  :         // If succeeds, then return result.
; 425  :         if ( hRC == S_OK )

  00083	85 c0		 test	 eax, eax
  00085	75 0f		 jne	 SHORT $LN4@GetOposPro

; 426  :             VarResult.ChangeBSTR( psValue, hRC );

  00087	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  0008a	50		 push	 eax
  0008b	ff 75 0c	 push	 DWORD PTR _psValue$[ebp]
  0008e	8d 4d d4	 lea	 ecx, DWORD PTR _VarResult$2[ebp]
  00091	e8 00 00 00 00	 call	 ?ChangeBSTR@OposVariant@@QAEXPAPA_WAAJ@Z ; OposVariant::ChangeBSTR
$LN4@GetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00096	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VariantClear@4
  0009c	8d 45 d4	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  0009f	50		 push	 eax
  000a0	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000a3	ff d6		 call	 esi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000a5	38 5d e4	 cmp	 BYTE PTR _VarResult$2[ebp+16], bl
  000a8	74 09		 je	 SHORT $LN17@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000aa	8d 45 d4	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000ad	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000b0	50		 push	 eax
  000b1	ff d6		 call	 esi
$LN17@GetOposPro:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000b3	38 5d cc	 cmp	 BYTE PTR _Var$1[ebp+16], bl
  000b6	74 1b		 je	 SHORT $LN3@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000b8	8d 45 bc	 lea	 eax, DWORD PTR _Var$1[ebp]
  000bb	88 5d cc	 mov	 BYTE PTR _Var$1[ebp+16], bl
  000be	50		 push	 eax
  000bf	ff d6		 call	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 427  :     }

  000c1	eb 10		 jmp	 SHORT $LN3@GetOposPro
$LN2@GetOposPro:

; 428  :     // Else return default string.
; 429  :     else
; 430  :         *psValue = ::SysAllocString( L"[Error]" );

  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocString@4
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _psValue$[ebp]
  000d1	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@GetOposPro:

; 431  : 
; 432  :     // Trace result.
; 433  : #ifdef _DEBUG
; 434  :     LPCTSTR pszFormat = _T("-%hs [Get].");
; 435  :     if ( !_bOpened )
; 436  :         pszFormat = _T("-%hs [Get] -- Closed.");
; 437  :     else if ( _nSOMinor < nMinor )
; 438  :         pszFormat = _T("-%hs [Get] -- Not supported by SO.");
; 439  :     else if ( hRC != 0 )
; 440  :         pszFormat = _T("-%hs [Get] -- COM error: HR = 0x%X");
; 441  : 
; 442  :     TCHAR szPrefix[100];
; 443  :     _sntprintf( szPrefix, TSIZEOF(szPrefix), pszFormat, pPropName, hRC );
; 444  :     NULTERMINATE(szPrefix);
; 445  :     DOTRACESTRINGV( szPrefix, *psValue );
; 446  : #endif
; 447  : 
; 448  :     return hRC;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _hRC$[ebp]
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 449  : }

  000d8	c9		 leave
  000d9	c2 0c 00	 ret	 12			; 0000000cH
?GetOposProp@COPOSSoundRecorder@@IAEJJPAPA_WJ@Z ENDP	; COPOSSoundRecorder::GetOposProp
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?SetOposProp@COPOSSoundRecorder@@IAEJJFJ@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_nValue$ = 12						; size = 2
_nMinor$ = 16						; size = 4
?SetOposProp@COPOSSoundRecorder@@IAEJJFJ@Z PROC		; COPOSSoundRecorder::SetOposProp, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :     // If setting a boolean, then force to use VC++ TRUE or FALSE,
; 396  :     //   since several vendors test specifically against TRUE (1)
; 397  :     //   rather than non-zero.
; 398  :     return SetOposProp( DEBUGPARAM(pPropName)

  00003	ff 75 10	 push	 DWORD PTR _nMinor$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	66 39 45 0c	 cmp	 WORD PTR _nValue$[ebp], ax
  0000c	0f 95 c0	 setne	 al
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
  00013	e8 00 00 00 00	 call	 ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ; COPOSSoundRecorder::SetOposProp

; 399  :         nIndex, static_cast<long>(nValue ? TRUE : FALSE), nMinor );
; 400  : }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?SetOposProp@COPOSSoundRecorder@@IAEJJFJ@Z ENDP		; COPOSSoundRecorder::SetOposProp
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_pnValue$ = 12						; size = 4
_nValue$ = 16						; size = 4
_nMinor$ = 16						; size = 4
?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z PROC	; COPOSSoundRecorder::GetOposProp, COMDAT
; _this$ = ecx

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 382  :     // If getting a boolean, then force return value to proper VARIANT_BOOL value.
; 383  :     long nValue;
; 384  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00003	ff 75 10	 push	 DWORD PTR _nMinor$[ebp]
  00006	8d 45 10	 lea	 eax, DWORD PTR _nValue$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
  0000d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ; COPOSSoundRecorder::GetOposProp

; 385  :         nIndex, &nValue, nMinor );
; 386  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  00012	8b 55 10	 mov	 edx, DWORD PTR _nValue$[ebp]
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _pnValue$[ebp]
  00018	f7 da		 neg	 edx
  0001a	1b d2		 sbb	 edx, edx
  0001c	66 89 11	 mov	 WORD PTR [ecx], dx

; 387  :     return hRC;
; 388  : }

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?GetOposProp@COPOSSoundRecorder@@IAEJJPAFJ@Z ENDP	; COPOSSoundRecorder::GetOposProp
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z
_TEXT	SEGMENT
_Vars$1 = -88						; size = 48
_VarResult$2 = -40					; size = 24
_Disp$3 = -16						; size = 16
_nIndex$ = 8						; size = 4
_nValue$ = 12						; size = 4
_hRC$1$ = 16						; size = 4
_nMinor$ = 16						; size = 4
?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z PROC		; COPOSSoundRecorder::SetOposProp, COMDAT
; _this$ = ecx

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 333  :     DOTRACEV( ( _T("+%hs [Set]: %d (0x%X)"), pPropName, nValue, nValue ) );
; 334  :     HRESULT hRC = S_OK;

  0000a	33 db		 xor	 ebx, ebx
  0000c	8b cb		 mov	 ecx, ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0000e	83 8e f0 00 00
	00 ff		 or	 DWORD PTR [esi+240], -1
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 339  :     if ( _bOpened && _nSOMinor >= nMinor )

  00015	38 8e e0 00 00
	00		 cmp	 BYTE PTR [esi+224], cl
  0001b	0f 84 ce 00 00
	00		 je	 $LN4@SetOposPro
  00021	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  00027	3b 45 10	 cmp	 eax, DWORD PTR _nMinor$[ebp]
  0002a	0f 8c b5 00 00
	00		 jl	 $LN2@SetOposPro

; 340  :     {
; 341  :         // Set up and call the SO's set property number method.
; 342  :         OposVariant Vars[2];

  00030	57		 push	 edi
  00031	6a 02		 push	 2
  00033	5f		 pop	 edi
  00034	8d 45 a8	 lea	 eax, DWORD PTR _Vars$1[ebp]
  00037	8b cf		 mov	 ecx, edi
$LL9@SetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00039	33 d2		 xor	 edx, edx
  0003b	88 58 10	 mov	 BYTE PTR [eax+16], bl
  0003e	66 89 10	 mov	 WORD PTR [eax], dx
  00041	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00044	83 e9 01	 sub	 ecx, 1
  00047	75 f0		 jne	 SHORT $LL9@SetOposPro
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 344  :         Vars[1].SetLONG( nIndex );

  00049	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0004c	33 c0		 xor	 eax, eax
  0004e	88 5d e8	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 344  :         Vars[1].SetLONG( nIndex );

  00051	8d 4d c0	 lea	 ecx, DWORD PTR _Vars$1[ebp+24]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00054	66 89 45 d8	 mov	 WORD PTR _VarResult$2[ebp], ax
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 344  :         Vars[1].SetLONG( nIndex );

  00058	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 345  :         Vars[0].SetLONG( nValue );

  0005d	ff 75 0c	 push	 DWORD PTR _nValue$[ebp]
  00060	8d 4d a8	 lea	 ecx, DWORD PTR _Vars$1[ebp]
  00063	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 346  :         OposDispParms Disp( Vars, 2 );

  00068	57		 push	 edi
  00069	8d 45 a8	 lea	 eax, DWORD PTR _Vars$1[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d f0	 lea	 ecx, DWORD PTR _Disp$3[ebp]
  00070	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 347  :         hRC = _pService->Invoke(

  00075	8b 86 f4 00 00
	00		 mov	 eax, DWORD PTR [esi+244]
  0007b	8d 55 d8	 lea	 edx, DWORD PTR _VarResult$2[ebp]
  0007e	53		 push	 ebx
  0007f	53		 push	 ebx
  00080	52		 push	 edx
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	8d 55 f0	 lea	 edx, DWORD PTR _Disp$3[ebp]
  00086	52		 push	 edx
  00087	6a 01		 push	 1
  00089	68 00 04 00 00	 push	 1024			; 00000400H
  0008e	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00093	ff b6 0c 01 00
	00		 push	 DWORD PTR [esi+268]
  00099	50		 push	 eax
  0009a	ff 51 18	 call	 DWORD PTR [ecx+24]

; 350  :     }

  0009d	8d 4d f0	 lea	 ecx, DWORD PTR _Disp$3[ebp]
  000a0	89 45 10	 mov	 DWORD PTR _hRC$1$[ebp], eax
  000a3	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000a8	8d 45 d8	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000ab	88 5d e8	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000ae	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__VariantClear@4
  000b4	50		 push	 eax
  000b5	ff d3		 call	 ebx

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000b7	80 7d e8 00	 cmp	 BYTE PTR _VarResult$2[ebp+16], 0
  000bb	74 0a		 je	 SHORT $LN23@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000bd	8d 45 d8	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000c0	c6 45 e8 00	 mov	 BYTE PTR _VarResult$2[ebp+16], 0
  000c4	50		 push	 eax
  000c5	ff d3		 call	 ebx
$LN23@SetOposPro:
  000c7	8d 75 d8	 lea	 esi, DWORD PTR _Vars$1[ebp+48]
$LL43@SetOposPro:
  000ca	83 ee 18	 sub	 esi, 24			; 00000018H
  000cd	4f		 dec	 edi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000ce	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  000d2	74 07		 je	 SHORT $LN32@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000d4	56		 push	 esi
  000d5	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  000d9	ff d3		 call	 ebx
$LN32@SetOposPro:
  000db	85 ff		 test	 edi, edi
  000dd	75 eb		 jne	 SHORT $LL43@SetOposPro
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 350  :     }

  000df	8b 4d 10	 mov	 ecx, DWORD PTR _hRC$1$[ebp]
  000e2	5f		 pop	 edi
  000e3	eb 0a		 jmp	 SHORT $LN4@SetOposPro
$LN2@SetOposPro:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  000e5	c7 86 f0 00 00
	00 68 00 00 00	 mov	 DWORD PTR [esi+240], 104 ; 00000068H
$LN4@SetOposPro:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 374  :     return hRC;

  000ef	5e		 pop	 esi
  000f0	8b c1		 mov	 eax, ecx
  000f2	5b		 pop	 ebx

; 375  : }

  000f3	c9		 leave
  000f4	c2 0c 00	 ret	 12			; 0000000cH
?SetOposProp@COPOSSoundRecorder@@IAEJJJJ@Z ENDP		; COPOSSoundRecorder::SetOposProp
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z
_TEXT	SEGMENT
_Var$1 = -68						; size = 24
_VarResult$2 = -44					; size = 24
_Disp$3 = -20						; size = 16
_hRC$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_pnValue$ = 12						; size = 4
_nMinor$ = 16						; size = 4
?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z PROC	; COPOSSoundRecorder::GetOposProp, COMDAT
; _this$ = ecx

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 284  :     DOTRACEV( ( _T("+%hs [Get]"), pPropName ) );
; 285  : 
; 286  :     // Initialize return value.
; 287  :     HRESULT hRC = S_OK;
; 288  :     *pnValue = 0;

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _pnValue$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	33 db		 xor	 ebx, ebx
  00010	89 5d fc	 mov	 DWORD PTR _hRC$[ebp], ebx
  00013	89 1f		 mov	 DWORD PTR [edi], ebx

; 289  : 
; 290  :     // If open and SO version support's property...
; 291  :     if ( _bOpened && _nSOMinor >= nMinor )

  00015	38 9e e0 00 00
	00		 cmp	 BYTE PTR [esi+224], bl
  0001b	0f 84 a4 00 00
	00		 je	 $LN25@GetOposPro
  00021	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  00027	3b 45 10	 cmp	 eax, DWORD PTR _nMinor$[ebp]
  0002a	0f 8c 95 00 00
	00		 jl	 $LN25@GetOposPro

; 296  :         Var.SetLONG( nIndex );

  00030	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00033	33 c0		 xor	 eax, eax
  00035	88 5d cc	 mov	 BYTE PTR _Var$1[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 296  :         Var.SetLONG( nIndex );

  00038	8d 4d bc	 lea	 ecx, DWORD PTR _Var$1[ebp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0003b	66 89 45 bc	 mov	 WORD PTR _Var$1[ebp], ax
  0003f	66 89 45 d4	 mov	 WORD PTR _VarResult$2[ebp], ax
  00043	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 296  :         Var.SetLONG( nIndex );

  00046	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 297  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };

  0004b	33 d2		 xor	 edx, edx
  0004d	89 5d f0	 mov	 DWORD PTR _Disp$3[ebp+4], ebx

; 298  :         hRC = _pService->Invoke(

  00050	52		 push	 edx
  00051	52		 push	 edx
  00052	89 55 f8	 mov	 DWORD PTR _Disp$3[ebp+12], edx
  00055	8d 45 bc	 lea	 eax, DWORD PTR _Var$1[ebp]
  00058	8d 55 d4	 lea	 edx, DWORD PTR _VarResult$2[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR _Disp$3[ebp], eax
  0005e	8b 86 f4 00 00
	00		 mov	 eax, DWORD PTR [esi+244]
  00064	43		 inc	 ebx
  00065	52		 push	 edx
  00066	8d 55 ec	 lea	 edx, DWORD PTR _Disp$3[ebp]
  00069	89 5d f4	 mov	 DWORD PTR _Disp$3[ebp+8], ebx
  0006c	52		 push	 edx
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	53		 push	 ebx
  00070	68 00 04 00 00	 push	 1024			; 00000400H
  00075	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  0007a	ff b6 08 01 00
	00		 push	 DWORD PTR [esi+264]
  00080	50		 push	 eax
  00081	ff 51 18	 call	 DWORD PTR [ecx+24]
  00084	89 45 fc	 mov	 DWORD PTR _hRC$[ebp], eax

; 299  :                 _DispIDs[nDIGetPropertyNumber], IID_NULL, LOCALE_USER_DEFAULT,
; 300  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 301  : 
; 302  :         // If success, then set return result.
; 303  :         if ( hRC == S_OK )

  00087	85 c0		 test	 eax, eax
  00089	75 0d		 jne	 SHORT $LN3@GetOposPro

; 304  :             VarResult.ChangeLONG( pnValue, hRC );

  0008b	8d 45 fc	 lea	 eax, DWORD PTR _hRC$[ebp]
  0008e	50		 push	 eax
  0008f	57		 push	 edi
  00090	8d 4d d4	 lea	 ecx, DWORD PTR _VarResult$2[ebp]
  00093	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::ChangeLONG
$LN3@GetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00098	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VariantClear@4
  0009e	8d 45 d4	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000a1	33 db		 xor	 ebx, ebx
  000a3	50		 push	 eax
  000a4	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000a7	ff d6		 call	 esi

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000a9	38 5d e4	 cmp	 BYTE PTR _VarResult$2[ebp+16], bl
  000ac	74 09		 je	 SHORT $LN16@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000ae	8d 45 d4	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  000b1	88 5d e4	 mov	 BYTE PTR _VarResult$2[ebp+16], bl
  000b4	50		 push	 eax
  000b5	ff d6		 call	 esi
$LN16@GetOposPro:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000b7	38 5d cc	 cmp	 BYTE PTR _Var$1[ebp+16], bl
  000ba	74 09		 je	 SHORT $LN25@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000bc	8d 45 bc	 lea	 eax, DWORD PTR _Var$1[ebp]
  000bf	88 5d cc	 mov	 BYTE PTR _Var$1[ebp+16], bl
  000c2	50		 push	 eax
  000c3	ff d6		 call	 esi
$LN25@GetOposPro:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 325  :     return hRC;

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _hRC$[ebp]
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx

; 326  : }

  000cb	c9		 leave
  000cc	c2 0c 00	 ret	 12			; 0000000cH
?GetOposProp@COPOSSoundRecorder@@IAEJJPAJJ@Z ENDP	; COPOSSoundRecorder::GetOposProp
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ??1COPOSSoundRecorder@@UAE@XZ
_TEXT	SEGMENT
_RC$ = -4						; size = 4
??1COPOSSoundRecorder@@UAE@XZ PROC			; COPOSSoundRecorder::~COPOSSoundRecorder, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 180  :     DOTRACE( ( _T("*Destructing") ) );
; 181  : 
; 182  :     s_nInstances--; // Decrement instance count at start of destructor.

  00004	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?s_nInstances@COPOSSoundRecorder@@1HA ; COPOSSoundRecorder::s_nInstances
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx

; 183  :     long RC;
; 184  :     if ( _bOpened )

  0000d	80 be e0 00 00
	00 00		 cmp	 BYTE PTR [esi+224], 0
  00014	74 0a		 je	 SHORT $LN2@COPOSSound

; 185  :         Close( &RC );

  00016	8d 45 fc	 lea	 eax, DWORD PTR _RC$[ebp]
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?Close@COPOSSoundRecorder@@UAGJPAJ@Z ; COPOSSoundRecorder::Close
$LN2@COPOSSound:

; 186  :     EventUninit();

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?EventUninit@COPOSSoundRecorder@@IAEXXZ ; COPOSSoundRecorder::EventUninit

; 187  : 
; 188  :     DOTRACE( ( _T("") ) );
; 189  :     TRACEEXIT;
; 190  : }

  00027	8d 8e b4 00 00
	00		 lea	 ecx, DWORD PTR [esi+180]
  0002d	e8 00 00 00 00	 call	 ??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>
  00032	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00038	e8 00 00 00 00	 call	 ??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
  0003d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00040	e8 00 00 00 00	 call	 ??1?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ
  00045	5e		 pop	 esi
  00046	c9		 leave
  00047	c3		 ret	 0
??1COPOSSoundRecorder@@UAE@XZ ENDP			; COPOSSoundRecorder::~COPOSSoundRecorder
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ?FinalConstruct@COPOSSoundRecorder@@QAEJXZ
_TEXT	SEGMENT
?FinalConstruct@COPOSSoundRecorder@@QAEJXZ PROC		; COPOSSoundRecorder::FinalConstruct, COMDAT
; _this$ = ecx

; 156  :     TRACEINIT;
; 157  :     DOTRACE( ( _T("") ) );
; 158  :     DOTRACE( ( _T("*Constructing: %hs"), g_ControlDescription ) );
; 159  : 
; 160  :     _bOpened = false;
; 161  :     _nOpenResult = 0;
; 162  :     _nSOMajor = 0;
; 163  :     _nSOMinor = 0;
; 164  :     _nCOResultCode = -1;

  00000	83 89 f0 00 00
	00 ff		 or	 DWORD PTR [ecx+240], -1
  00007	33 c0		 xor	 eax, eax
  00009	88 81 e0 00 00
	00		 mov	 BYTE PTR [ecx+224], al
  0000f	89 81 e4 00 00
	00		 mov	 DWORD PTR [ecx+228], eax
  00015	89 81 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], eax
  0001b	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax

; 165  :     _nCOFreezeEventCount = 0;

  00021	89 81 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], eax

; 166  :     _bFreezeState = false;

  00027	88 81 fc 00 00
	00		 mov	 BYTE PTR [ecx+252], al

; 167  :     IFDEBUG( _nBinaryConversion = OPOS_BC_NONE );
; 168  : 
; 169  :     HRESULT hRC = EventInit();

  0002d	e8 00 00 00 00	 call	 ?EventInit@COPOSSoundRecorder@@IAEJXZ ; COPOSSoundRecorder::EventInit

; 170  : 
; 171  :     s_nInstances++; // Increment instance count at end of FinalConstruct.

  00032	ff 05 00 00 00
	00		 inc	 DWORD PTR ?s_nInstances@COPOSSoundRecorder@@1HA ; COPOSSoundRecorder::s_nInstances

; 172  : 
; 173  :     return hRC;
; 174  : }

  00038	c3		 ret	 0
?FinalConstruct@COPOSSoundRecorder@@QAEJXZ ENDP		; COPOSSoundRecorder::FinalConstruct
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp
;	COMDAT ??0COPOSSoundRecorder@@QAE@XZ
_TEXT	SEGMENT
??0COPOSSoundRecorder@@QAE@XZ PROC			; COPOSSoundRecorder::COPOSSoundRecorder, COMDAT
; _this$ = ecx

; 149  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2430 : 		m_dwRef = 0L;

  00004	33 ff		 xor	 edi, edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 149  : {

  00006	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2430 : 		m_dwRef = 0L;

  00009	89 be dc 00 00
	00		 mov	 DWORD PTR [esi+220], edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 149  : {

  0000f	e8 00 00 00 00	 call	 ??0?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
  00014	8d 8e b4 00 00
	00		 lea	 ecx, DWORD PTR [esi+180]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 3656 : 	IObjectSafetyImpl() : m_dwCurrentSafety(0)

  0001a	89 be a4 00 00
	00		 mov	 DWORD PTR [esi+164], edi
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6146 : 		m_nSize = 0;

  00020	89 be b0 00 00
	00		 mov	 DWORD PTR [esi+176], edi

; 6147 : 		m_ppUnk = NULL;

  00026	89 be ac 00 00
	00		 mov	 DWORD PTR [esi+172], edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderImpl.cpp

; 149  : {

  0002c	e8 00 00 00 00	 call	 ??0?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAE@XZ ; CProxy_IOPOSEvents<COPOSSoundRecorder>::CProxy_IOPOSEvents<COPOSSoundRecorder>

; 150  : }

  00031	5f		 pop	 edi
  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	c3		 ret	 0
??0COPOSSoundRecorder@@QAE@XZ ENDP			; COPOSSoundRecorder::COPOSSoundRecorder
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
;	COMDAT ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z
_TEXT	SEGMENT
_DispParms$ = -16					; size = 16
_rgvarg$ = 8						; size = 4
_DispID$ = 12						; size = 4
_cArgs$ = 12						; size = 4
_FirstDispID$ = 16					; size = 4
_pName$ = 20						; size = 4
_MyDispID$ = 24						; size = 4
?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z PROC ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent, COMDAT
; _this$ = ecx

; 183  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 184  :         IFDEBUG( const OLECHAR* pNameOrig = pName );
; 185  : 
; 186  :         // Declare and initialize the dispatch parameters and dispatch ID.
; 187  :         OposDispParms DispParms( rgvarg, cArgs );

  00009	ff 75 0c	 push	 DWORD PTR _cArgs$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	8d 4d f0	 lea	 ecx, DWORD PTR _DispParms$[ebp]
  00011	ff 75 08	 push	 DWORD PTR _rgvarg$[ebp]
  00014	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 188  :         DISPID DispID = FirstDispID;

  00019	8b 7d 10	 mov	 edi, DWORD PTR _FirstDispID$[ebp]

; 189  :         // If not first connection (not likely for our controls!) or first dispatch ID not yet looked up...
; 190  :         if ( _nCOConnectionIndex != 0 || FirstDispID < 0 )

  0001c	33 db		 xor	 ebx, ebx
  0001e	8b 17		 mov	 edx, DWORD PTR [edi]
  00020	89 55 0c	 mov	 DWORD PTR _DispID$[ebp], edx
  00023	39 5e 20	 cmp	 DWORD PTR [esi+32], ebx
  00026	75 04		 jne	 SHORT $LN3@FireTheEve
  00028	85 d2		 test	 edx, edx
  0002a	79 3a		 jns	 SHORT $LN7@FireTheEve
$LN3@FireTheEve:

; 191  :         {
; 192  :             // Get the dispatch ID of the event we want to call.
; 193  :             //   If not implemented, then assume that client used typelib to use our default DispIDs.
; 194  :             //   If other failure, the can't fire.
; 195  :             HRESULT hRC = _pCPDispatch->GetIDsOfNames( IID_NULL, const_cast<OLECHAR**>(&pName), 1, LOCALE_USER_DEFAULT, &DispID );

  0002c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0002f	8d 55 0c	 lea	 edx, DWORD PTR _DispID$[ebp]
  00032	52		 push	 edx
  00033	68 00 04 00 00	 push	 1024			; 00000400H
  00038	6a 01		 push	 1
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	8d 55 14	 lea	 edx, DWORD PTR _pName$[ebp]
  0003f	52		 push	 edx
  00040	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00045	50		 push	 eax
  00046	ff 51 14	 call	 DWORD PTR [ecx+20]

; 196  :             if ( hRC == E_NOTIMPL )

  00049	3d 01 40 00 80	 cmp	 eax, -2147467263	; 80004001H
  0004e	75 08		 jne	 SHORT $LN4@FireTheEve

; 197  :                 DispID = MyDispID;

  00050	8b 55 18	 mov	 edx, DWORD PTR _MyDispID$[ebp]
  00053	89 55 0c	 mov	 DWORD PTR _DispID$[ebp], edx
  00056	eb 07		 jmp	 SHORT $LN6@FireTheEve
$LN4@FireTheEve:

; 198  :             else if ( hRC != S_OK )

  00058	85 c0		 test	 eax, eax
  0005a	75 27		 jne	 SHORT $LN9@FireTheEve
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _DispID$[ebp]
$LN6@FireTheEve:

; 199  :                 return;
; 200  :             // If first connection, then save in cache for next time.
; 201  :             if ( _nCOConnectionIndex == 0 )

  0005f	39 5e 20	 cmp	 DWORD PTR [esi+32], ebx
  00062	75 02		 jne	 SHORT $LN7@FireTheEve

; 202  :                 FirstDispID = DispID;

  00064	89 17		 mov	 DWORD PTR [edi], edx
$LN7@FireTheEve:

; 203  :         }
; 204  :         // Call the event.
; 205  :         IFDEBUG( _pOposControl->DOTRACEV( ( _T("*FireTheEvent: Delivering %ls; Sink 0x%X; DispID %d"), pNameOrig, pUnkSink, DispID ) ) );
; 206  :         _pCPDispatch->Invoke( DispID, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &DispParms, NULL, NULL, NULL );

  00066	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00069	8d 75 f0	 lea	 esi, DWORD PTR _DispParms$[ebp]
  0006c	53		 push	 ebx
  0006d	53		 push	 ebx
  0006e	53		 push	 ebx
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	56		 push	 esi
  00072	6a 01		 push	 1
  00074	68 00 04 00 00	 push	 1024			; 00000400H
  00079	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  0007e	52		 push	 edx
  0007f	50		 push	 eax
  00080	ff 51 18	 call	 DWORD PTR [ecx+24]
$LN9@FireTheEve:

; 207  :     }

  00083	8d 4d f0	 lea	 ecx, DWORD PTR _DispParms$[ebp]
  00086	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	c9		 leave
  0008f	c2 14 00	 ret	 20			; 00000014H
?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z ENDP ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
;	COMDAT ??0?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAE@XZ PROC ; CProxy_IOPOSEvents<COPOSSoundRecorder>::CProxy_IOPOSEvents<COPOSSoundRecorder>, COMDAT
; _this$ = ecx
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6146 : 		m_nSize = 0;

  00000	83 61 08 00	 and	 DWORD PTR [ecx+8], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 146  :         _DIDData = -1;

  00004	83 c8 ff	 or	 eax, -1
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6147 : 		m_ppUnk = NULL;

  00007	83 61 04 00	 and	 DWORD PTR [ecx+4], 0
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 146  :         _DIDData = -1;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 147  :         _DIDDirectIO = -1;

  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 148  :         _DIDError = -1;

  00011	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 149  :         _DIDOutput = -1;

  00014	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 150  :         _DIDStatus = -1;

  00017	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 151  :         IFDEBUG( _pOposControl = pOposControl );
; 152  :     }

  0001a	8b c1		 mov	 eax, ecx
  0001c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@6B@
  00022	c3		 ret	 0
??0?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAE@XZ ENDP ; CProxy_IOPOSEvents<COPOSSoundRecorder>::CProxy_IOPOSEvents<COPOSSoundRecorder>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
;	COMDAT ?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z
_TEXT	SEGMENT
_var$ = -24						; size = 24
_Data$ = 8						; size = 4
?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z PROC ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_StatusUpdateEvent, COMDAT
; _this$ = ecx

; 123  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000a	33 c0		 xor	 eax, eax
  0000c	66 89 45 e8	 mov	 WORD PTR _var$[ebp], ax
  00010	88 45 f8	 mov	 BYTE PTR _var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 126  :         int nConnections = m_vec.GetSize();

  00013	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 128  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00016	21 46 20	 and	 DWORD PTR [esi+32], eax
  00019	85 db		 test	 ebx, ebx
  0001b	7e 73		 jle	 SHORT $LN26@Fire_Statu
  0001d	33 c9		 xor	 ecx, ecx
  0001f	57		 push	 edi
$LL4@Fire_Statu:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00020	85 c9		 test	 ecx, ecx
  00022	78 48		 js	 SHORT $LN12@Fire_Statu
  00024	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00027	7d 43		 jge	 SHORT $LN12@Fire_Statu

; 6199 : 			return m_ppUnk[nIndex];

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  0002f	85 ff		 test	 edi, edi
  00031	74 34		 je	 SHORT $LN18@Fire_Statu

; 171  :             p->AddRef();

  00033	8b 07		 mov	 eax, DWORD PTR [edi]
  00035	57		 push	 edi
  00036	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 136  :                 var.SetLONG( Data );

  00039	ff 75 08	 push	 DWORD PTR _Data$[ebp]
  0003c	8d 4d e8	 lea	 ecx, DWORD PTR _var$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  0003f	89 7e 24	 mov	 DWORD PTR [esi+36], edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 136  :                 var.SetLONG( Data );

  00042	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 137  :                 FireTheEvent( FEUNKNOWN &var, 1, _DIDStatus, L"StatusUpdateEvent", 5 );

  00047	6a 05		 push	 5
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@
  0004e	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00051	8b ce		 mov	 ecx, esi
  00053	50		 push	 eax
  00054	6a 01		 push	 1
  00056	8d 45 e8	 lea	 eax, DWORD PTR _var$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  0005f	8b 07		 mov	 eax, DWORD PTR [edi]
  00061	57		 push	 edi
  00062	ff 50 08	 call	 DWORD PTR [eax+8]
  00065	eb 09		 jmp	 SHORT $LN2@Fire_Statu
$LN18@Fire_Statu:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 133  :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  00067	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  0006a	eb 04		 jmp	 SHORT $LN2@Fire_Statu
$LN12@Fire_Statu:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  0006c	83 66 24 00	 and	 DWORD PTR [esi+36], 0
$LN2@Fire_Statu:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 128  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00070	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00073	41		 inc	 ecx
  00074	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00077	3b cb		 cmp	 ecx, ebx
  00079	7c a5		 jl	 SHORT $LL4@Fire_Statu
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0007b	80 7d f8 00	 cmp	 BYTE PTR _var$[ebp+16], 0
  0007f	5f		 pop	 edi
  00080	74 0e		 je	 SHORT $LN26@Fire_Statu

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00082	8d 45 e8	 lea	 eax, DWORD PTR _var$[ebp]
  00085	c6 45 f8 00	 mov	 BYTE PTR _var$[ebp+16], 0
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN26@Fire_Statu:
  00090	5e		 pop	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 140  :     }

  00091	5b		 pop	 ebx
  00092	c9		 leave
  00093	c2 04 00	 ret	 4
?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z ENDP ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_StatusUpdateEvent
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
;	COMDAT ?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJJJPAJ@Z
_TEXT	SEGMENT
_hr$1 = -112						; size = 4
_nConnections$1$ = -108					; size = 4
_pErrorResponse$GSCopy$1$ = -104			; size = 4
_vars$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_ResultCode$ = 8					; size = 4
_ResultCodeExtended$ = 12				; size = 4
_ErrorLocus$ = 16					; size = 4
_pErrorResponse$ = 20					; size = 4
?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJJJPAJ@Z PROC ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_ErrorEvent, COMDAT
; _this$ = ecx

; 97   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 14	 mov	 eax, DWORD PTR _pErrorResponse$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	6a 04		 push	 4
  00017	5f		 pop	 edi
  00018	8b f1		 mov	 esi, ecx
  0001a	89 45 98	 mov	 DWORD PTR _pErrorResponse$GSCopy$1$[ebp], eax

; 98   :         T* pT = static_cast<T*>(this);
; 99   :         OposVariant vars[4];

  0001d	8d 45 9c	 lea	 eax, DWORD PTR _vars$[ebp]
  00020	8b cf		 mov	 ecx, edi
$LL10@Fire_Error:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00022	33 d2		 xor	 edx, edx
  00024	66 89 10	 mov	 WORD PTR [eax], dx
  00027	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  0002a	88 50 f8	 mov	 BYTE PTR [eax-8], dl
  0002d	83 e9 01	 sub	 ecx, 1
  00030	75 f0		 jne	 SHORT $LL10@Fire_Error
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 100  :         int nConnections = m_vec.GetSize();

  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 102  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00035	21 56 20	 and	 DWORD PTR [esi+32], edx
  00038	89 45 94	 mov	 DWORD PTR _nConnections$1$[ebp], eax
  0003b	85 c0		 test	 eax, eax
  0003d	0f 8e 82 00 00
	00		 jle	 $LN3@Fire_Error
  00043	53		 push	 ebx
$LL4@Fire_Error:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00044	85 c9		 test	 ecx, ecx
  00046	78 6c		 js	 SHORT $LN16@Fire_Error
  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	7d 67		 jge	 SHORT $LN16@Fire_Error

; 6199 : 			return m_ppUnk[nIndex];

  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  00053	85 db		 test	 ebx, ebx
  00055	74 58		 je	 SHORT $LN22@Fire_Error

; 171  :             p->AddRef();

  00057	8b 03		 mov	 eax, DWORD PTR [ebx]
  00059	53		 push	 ebx
  0005a	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 111  :                 vars[3].SetLONG( ResultCode );

  0005d	ff 75 08	 push	 DWORD PTR _ResultCode$[ebp]
  00060	8d 4d e4	 lea	 ecx, DWORD PTR _vars$[ebp+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  00063	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 111  :                 vars[3].SetLONG( ResultCode );

  00066	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 112  :                 vars[2].SetLONG( ResultCodeExtended );

  0006b	ff 75 0c	 push	 DWORD PTR _ResultCodeExtended$[ebp]
  0006e	8d 4d cc	 lea	 ecx, DWORD PTR _vars$[ebp+48]
  00071	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 113  :                 vars[1].SetLONG( ErrorLocus );

  00076	ff 75 10	 push	 DWORD PTR _ErrorLocus$[ebp]
  00079	8d 4d b4	 lea	 ecx, DWORD PTR _vars$[ebp+24]
  0007c	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 114  :                 vars[0].SetLONG_Ptr( pErrorResponse, hr );

  00081	8d 45 90	 lea	 eax, DWORD PTR _hr$1[ebp]
  00084	50		 push	 eax
  00085	ff 75 98	 push	 DWORD PTR _pErrorResponse$GSCopy$1$[ebp]
  00088	8d 4d 9c	 lea	 ecx, DWORD PTR _vars$[ebp]
  0008b	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 115  :                 FireTheEvent( FEUNKNOWN vars, 4, _DIDError, L"ErrorEvent", 3 );

  00090	6a 03		 push	 3
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@
  00097	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0009a	8b ce		 mov	 ecx, esi
  0009c	50		 push	 eax
  0009d	57		 push	 edi
  0009e	8d 45 9c	 lea	 eax, DWORD PTR _vars$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  000a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a9	53		 push	 ebx
  000aa	ff 50 08	 call	 DWORD PTR [eax+8]
  000ad	eb 09		 jmp	 SHORT $LN2@Fire_Error
$LN22@Fire_Error:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 107  :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000af	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  000b2	eb 04		 jmp	 SHORT $LN2@Fire_Error
$LN16@Fire_Error:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  000b4	83 66 24 00	 and	 DWORD PTR [esi+36], 0
$LN2@Fire_Error:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 102  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  000b8	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000bb	41		 inc	 ecx
  000bc	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  000bf	3b 4d 94	 cmp	 ecx, DWORD PTR _nConnections$1$[ebp]
  000c2	7c 80		 jl	 SHORT $LL4@Fire_Error
  000c4	5b		 pop	 ebx
$LN3@Fire_Error:
  000c5	8d 75 fc	 lea	 esi, DWORD PTR _vars$[ebp+96]
$LL45@Fire_Error:
  000c8	83 ee 18	 sub	 esi, 24			; 00000018H
  000cb	4f		 dec	 edi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000cc	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  000d0	74 0b		 je	 SHORT $LN34@Fire_Error

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000d2	56		 push	 esi
  000d3	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN34@Fire_Error:
  000dd	85 ff		 test	 edi, edi
  000df	75 e7		 jne	 SHORT $LL45@Fire_Error
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 118  :     }

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	5f		 pop	 edi
  000e5	33 cd		 xor	 ecx, ebp
  000e7	5e		 pop	 esi
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	c9		 leave
  000ee	c2 10 00	 ret	 16			; 00000010H
?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJJJPAJ@Z ENDP ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_ErrorEvent
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
;	COMDAT ?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJPAJPAPA_W@Z
_TEXT	SEGMENT
_nConnections$1$ = -92					; size = 4
_pString$GSCopy$1$ = -88				; size = 4
_hr$1 = -84						; size = 4
_pData$GSCopy$1$ = -80					; size = 4
_vars$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_EventNumber$ = 8					; size = 4
_pData$ = 12						; size = 4
_pString$ = 16						; size = 4
?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJPAJPAPA_W@Z PROC ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DirectIOEvent, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	89 45 b0	 mov	 DWORD PTR _pData$GSCopy$1$[ebp], eax
  00018	8b f1		 mov	 esi, ecx
  0001a	8b 45 10	 mov	 eax, DWORD PTR _pString$[ebp]
  0001d	6a 03		 push	 3
  0001f	5f		 pop	 edi
  00020	89 45 a8	 mov	 DWORD PTR _pString$GSCopy$1$[ebp], eax
  00023	8b cf		 mov	 ecx, edi

; 73   :         T* pT = static_cast<T*>(this);
; 74   :         OposVariant vars[3];

  00025	8d 45 b4	 lea	 eax, DWORD PTR _vars$[ebp]
$LL10@Fire_Direc:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00028	33 d2		 xor	 edx, edx
  0002a	66 89 10	 mov	 WORD PTR [eax], dx
  0002d	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00030	88 50 f8	 mov	 BYTE PTR [eax-8], dl
  00033	83 e9 01	 sub	 ecx, 1
  00036	75 f0		 jne	 SHORT $LL10@Fire_Direc
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 75   :         int nConnections = m_vec.GetSize();

  00038	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 77   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  0003b	21 56 20	 and	 DWORD PTR [esi+32], edx
  0003e	89 45 a4	 mov	 DWORD PTR _nConnections$1$[ebp], eax
  00041	85 c0		 test	 eax, eax
  00043	7e 7b		 jle	 SHORT $LN3@Fire_Direc
  00045	53		 push	 ebx
$LL4@Fire_Direc:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00046	85 c9		 test	 ecx, ecx
  00048	78 65		 js	 SHORT $LN16@Fire_Direc
  0004a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004d	7d 60		 jge	 SHORT $LN16@Fire_Direc

; 6199 : 			return m_ppUnk[nIndex];

  0004f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00052	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  00055	85 db		 test	 ebx, ebx
  00057	74 51		 je	 SHORT $LN22@Fire_Direc

; 171  :             p->AddRef();

  00059	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005b	53		 push	 ebx
  0005c	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 86   :                 vars[2].SetLONG( EventNumber );

  0005f	ff 75 08	 push	 DWORD PTR _EventNumber$[ebp]
  00062	8d 4d e4	 lea	 ecx, DWORD PTR _vars$[ebp+48]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  00065	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 86   :                 vars[2].SetLONG( EventNumber );

  00068	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 87   :                 vars[1].SetLONG_Ptr( pData, hr );

  0006d	8d 45 ac	 lea	 eax, DWORD PTR _hr$1[ebp]
  00070	50		 push	 eax
  00071	ff 75 b0	 push	 DWORD PTR _pData$GSCopy$1$[ebp]
  00074	8d 4d cc	 lea	 ecx, DWORD PTR _vars$[ebp+24]
  00077	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 88   :                 vars[0].SetBSTR_InOutPtr( pString, hr );

  0007c	8d 45 ac	 lea	 eax, DWORD PTR _hr$1[ebp]
  0007f	50		 push	 eax
  00080	ff 75 a8	 push	 DWORD PTR _pString$GSCopy$1$[ebp]
  00083	8d 4d b4	 lea	 ecx, DWORD PTR _vars$[ebp]
  00086	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 89   :                 FireTheEvent( FEUNKNOWN vars, 3, _DIDDirectIO, L"DirectIOEvent", 2 );

  0008b	6a 02		 push	 2
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@
  00092	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00095	8b ce		 mov	 ecx, esi
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8d 45 b4	 lea	 eax, DWORD PTR _vars$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  000a2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a4	53		 push	 ebx
  000a5	ff 50 08	 call	 DWORD PTR [eax+8]
  000a8	eb 09		 jmp	 SHORT $LN2@Fire_Direc
$LN22@Fire_Direc:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 82   :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000aa	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  000ad	eb 04		 jmp	 SHORT $LN2@Fire_Direc
$LN16@Fire_Direc:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  000af	83 66 24 00	 and	 DWORD PTR [esi+36], 0
$LN2@Fire_Direc:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 77   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  000b3	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000b6	41		 inc	 ecx
  000b7	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  000ba	3b 4d a4	 cmp	 ecx, DWORD PTR _nConnections$1$[ebp]
  000bd	7c 87		 jl	 SHORT $LL4@Fire_Direc
  000bf	5b		 pop	 ebx
$LN3@Fire_Direc:
  000c0	8d 75 fc	 lea	 esi, DWORD PTR _vars$[ebp+72]
$LL45@Fire_Direc:
  000c3	83 ee 18	 sub	 esi, 24			; 00000018H
  000c6	4f		 dec	 edi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000c7	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  000cb	74 0b		 je	 SHORT $LN34@Fire_Direc

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000cd	56		 push	 esi
  000ce	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN34@Fire_Direc:
  000d8	85 ff		 test	 edi, edi
  000da	75 e7		 jne	 SHORT $LL45@Fire_Direc
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 92   :     }

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000df	5f		 pop	 edi
  000e0	33 cd		 xor	 ecx, ebp
  000e2	5e		 pop	 esi
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	c9		 leave
  000e9	c2 0c 00	 ret	 12			; 0000000cH
?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJPAJPAPA_W@Z ENDP ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DirectIOEvent
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h
;	COMDAT ?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z
_TEXT	SEGMENT
_var$ = -24						; size = 24
_Status$ = 8						; size = 4
?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z PROC ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DataEvent, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0000a	33 c0		 xor	 eax, eax
  0000c	66 89 45 e8	 mov	 WORD PTR _var$[ebp], ax
  00010	88 45 f8	 mov	 BYTE PTR _var$[ebp+16], al
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 53   :         int nConnections = m_vec.GetSize();

  00013	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]

; 55   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00016	21 46 20	 and	 DWORD PTR [esi+32], eax
  00019	85 db		 test	 ebx, ebx
  0001b	7e 73		 jle	 SHORT $LN26@Fire_DataE
  0001d	33 c9		 xor	 ecx, ecx
  0001f	57		 push	 edi
$LL4@Fire_DataE:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00020	85 c9		 test	 ecx, ecx
  00022	78 48		 js	 SHORT $LN12@Fire_DataE
  00024	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00027	7d 43		 jge	 SHORT $LN12@Fire_DataE

; 6199 : 			return m_ppUnk[nIndex];

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  0002f	85 ff		 test	 edi, edi
  00031	74 34		 je	 SHORT $LN18@Fire_DataE

; 171  :             p->AddRef();

  00033	8b 07		 mov	 eax, DWORD PTR [edi]
  00035	57		 push	 edi
  00036	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 63   :                 var.SetLONG( Status );

  00039	ff 75 08	 push	 DWORD PTR _Status$[ebp]
  0003c	8d 4d e8	 lea	 ecx, DWORD PTR _var$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  0003f	89 7e 24	 mov	 DWORD PTR [esi+36], edi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 63   :                 var.SetLONG( Status );

  00042	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 64   :                 FireTheEvent( FEUNKNOWN &var, 1, _DIDData, L"DataEvent", 1 );

  00047	6a 01		 push	 1
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@
  0004e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00051	8b ce		 mov	 ecx, esi
  00053	50		 push	 eax
  00054	6a 01		 push	 1
  00056	8d 45 e8	 lea	 eax, DWORD PTR _var$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@IAEXPAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSSoundRecorder>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  0005f	8b 07		 mov	 eax, DWORD PTR [edi]
  00061	57		 push	 edi
  00062	ff 50 08	 call	 DWORD PTR [eax+8]
  00065	eb 09		 jmp	 SHORT $LN2@Fire_DataE
$LN18@Fire_DataE:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 60   :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  00067	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  0006a	eb 04		 jmp	 SHORT $LN2@Fire_DataE
$LN12@Fire_DataE:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  0006c	83 66 24 00	 and	 DWORD PTR [esi+36], 0
$LN2@Fire_DataE:
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 55   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00070	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00073	41		 inc	 ecx
  00074	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00077	3b cb		 cmp	 ecx, ebx
  00079	7c a5		 jl	 SHORT $LL4@Fire_DataE
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0007b	80 7d f8 00	 cmp	 BYTE PTR _var$[ebp+16], 0
  0007f	5f		 pop	 edi
  00080	74 0e		 je	 SHORT $LN26@Fire_DataE

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00082	8d 45 e8	 lea	 eax, DWORD PTR _var$[ebp]
  00085	c6 45 f8 00	 mov	 BYTE PTR _var$[ebp+16], 0
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN26@Fire_DataE:
  00090	5e		 pop	 esi
; File C:\Develop\OPOS-CCO\zSoundRecorder\SoundRecorderCP.h

; 67   :     }

  00091	5b		 pop	 ebx
  00092	c9		 leave
  00093	c2 04 00	 ret	 4
?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSSoundRecorder@@@@QAEXJ@Z ENDP ; CProxy_IOPOSEvents<COPOSSoundRecorder>::Fire_DataEvent
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?EnumConnections@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
_TEXT	SEGMENT
_pcd$1$ = -8						; size = 4
_pend$1$ = -4						; size = 4
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?EnumConnections@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::EnumConnections, COMDAT

; 6412 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	57		 push	 edi

; 6413 : 	if (ppEnum == NULL)

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _ppEnum$[ebp]
  00009	85 ff		 test	 edi, edi
  0000b	75 07		 jne	 SHORT $LN5@EnumConnec

; 6414 : 		return E_POINTER;

  0000d	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00012	eb 5b		 jmp	 SHORT $LN1@EnumConnec
$LN5@EnumConnec:

; 6415 : 	*ppEnum = NULL;

  00014	83 27 00	 and	 DWORD PTR [edi], 0
  00017	53		 push	 ebx
  00018	56		 push	 esi

; 6416 : 	CComObject<CComEnumConnections>* pEnum = NULL;
; 6417 : 	pEnum = _ATL_NEW CComObject<CComEnumConnections>;

  00019	bb 00 00 00 00	 mov	 ebx, OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0001e	53		 push	 ebx
  0001f	6a 1c		 push	 28			; 0000001cH
  00021	e8 00 00 00 00	 call	 ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx
  00028	85 c0		 test	 eax, eax
  0002a	74 3c		 je	 SHORT $LN31@EnumConnec
  0002c	6a 00		 push	 0
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
  00035	8b f0		 mov	 esi, eax

; 6418 : 	if (pEnum == NULL)

  00037	85 f6		 test	 esi, esi
  00039	74 2d		 je	 SHORT $LN31@EnumConnec

; 6420 : 	T* pT = static_cast<T*>(this);
; 6421 : 	pT->Lock();
; 6422 : 	CONNECTDATA* pcd = NULL;
; 6423 : 	pcd = _ATL_NEW CONNECTDATA[m_vec.end()-m_vec.begin()];

  0003b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	33 c9		 xor	 ecx, ecx
  00040	53		 push	 ebx
  00041	6a 08		 push	 8
  00043	5a		 pop	 edx
  00044	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00047	f7 e2		 mul	 edx
  00049	0f 90 c1	 seto	 cl
  0004c	f7 d9		 neg	 ecx
  0004e	0b c8		 or	 ecx, eax
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00056	89 45 f8	 mov	 DWORD PTR _pcd$1$[ebp], eax
  00059	59		 pop	 ecx
  0005a	59		 pop	 ecx

; 6424 : 	if (pcd == NULL)

  0005b	85 c0		 test	 eax, eax
  0005d	75 15		 jne	 SHORT $LN7@EnumConnec

; 6425 : 	{
; 6426 : 		delete pEnum;

  0005f	8b 06		 mov	 eax, DWORD PTR [esi]
  00061	8b ce		 mov	 ecx, esi
  00063	6a 01		 push	 1
  00065	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN31@EnumConnec:

; 6419 : 		return E_OUTOFMEMORY;

  00068	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
$LN32@EnumConnec:
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
$LN1@EnumConnec:
  0006f	5f		 pop	 edi

; 6449 : }

  00070	c9		 leave
  00071	c2 08 00	 ret	 8
$LN7@EnumConnec:

; 6427 : 		pT->Unlock();
; 6428 : 		return E_OUTOFMEMORY;
; 6429 : 	}
; 6430 : 	CONNECTDATA* pend = pcd;

  00074	8b d0		 mov	 edx, eax

; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	89 55 fc	 mov	 DWORD PTR _pend$1$[ebp], edx
  0007c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]

; 6192 : 		return &m_ppUnk[m_nSize];

  0007f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  00082	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 6192 : 		return &m_ppUnk[m_nSize];

  00084	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]

; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  00087	3b d8		 cmp	 ebx, eax
  00089	73 3a		 jae	 SHORT $LN3@EnumConnec
  0008b	8b f9		 mov	 edi, ecx
$LL4@EnumConnec:

; 6433 : 	{
; 6434 : 		if (*pp != NULL)

  0008d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0008f	85 c9		 test	 ecx, ecx
  00091	74 20		 je	 SHORT $LN2@EnumConnec

; 6435 : 		{
; 6436 : 			(*pp)->AddRef();

  00093	8b 01		 mov	 eax, DWORD PTR [ecx]
  00095	51		 push	 ecx
  00096	ff 50 04	 call	 DWORD PTR [eax+4]

; 6437 : 			pend->pUnk = *pp;

  00099	8b 4d fc	 mov	 ecx, DWORD PTR _pend$1$[ebp]
  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]

; 6438 : 			pend->dwCookie = m_vec.GetCookie(pp);

  0009e	53		 push	 ebx
  0009f	57		 push	 edi
  000a0	89 01		 mov	 DWORD PTR [ecx], eax
  000a2	e8 00 00 00 00	 call	 ?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::GetCookie
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _pend$1$[ebp]
  000aa	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 6439 : 			pend++;

  000ad	83 c2 08	 add	 edx, 8
  000b0	89 55 fc	 mov	 DWORD PTR _pend$1$[ebp], edx
$LN2@EnumConnec:

; 6192 : 		return &m_ppUnk[m_nSize];

  000b3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  000b6	83 c3 04	 add	 ebx, 4

; 6192 : 		return &m_ppUnk[m_nSize];

  000b9	8b 07		 mov	 eax, DWORD PTR [edi]
  000bb	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  000be	3b d8		 cmp	 ebx, eax
  000c0	72 cb		 jb	 SHORT $LL4@EnumConnec
  000c2	8b 7d 0c	 mov	 edi, DWORD PTR _ppEnum$[ebp]
$LN3@EnumConnec:

; 6440 : 		}
; 6441 : 	}
; 6442 : 	// don't copy the data, but transfer ownership to it
; 6443 : 	pEnum->Init(pcd, pend, NULL, AtlFlagTakeOwnership);

  000c5	6a 02		 push	 2
  000c7	6a 00		 push	 0
  000c9	52		 push	 edx
  000ca	ff 75 f8	 push	 DWORD PTR _pcd$1$[ebp]
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  000d4	57		 push	 edi
  000d5	68 00 00 00 00	 push	 OFFSET __GUID_b196b287_bab4_101a_b69c_00aa00341d07
  000da	68 00 00 00 00	 push	 OFFSET ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  000df	56		 push	 esi
  000e0	e8 00 00 00 00	 call	 ?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ; ATL::AtlInternalQueryInterface

; 6444 : 	pT->Unlock();
; 6445 : 	HRESULT hRes = pEnum->_InternalQueryInterface(__uuidof(IEnumConnections), (void**)ppEnum);

  000e5	8b f8		 mov	 edi, eax

; 6446 : 	if (FAILED(hRes))

  000e7	85 ff		 test	 edi, edi
  000e9	79 09		 jns	 SHORT $LN17@EnumConnec

; 6447 : 		delete pEnum;

  000eb	8b 16		 mov	 edx, DWORD PTR [esi]
  000ed	8b ce		 mov	 ecx, esi
  000ef	6a 01		 push	 1
  000f1	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN17@EnumConnec:

; 6448 : 	return hRes;

  000f4	8b c7		 mov	 eax, edi
  000f6	e9 72 ff ff ff	 jmp	 $LN32@EnumConnec
?EnumConnections@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::EnumConnections
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Unadvise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwCookie$ = 12						; size = 4
?Unadvise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::Unadvise, COMDAT

; 6397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6398 : 	T* pT = static_cast<T*>(this);
; 6399 : 	pT->Lock();
; 6400 : 	IUnknown* p = m_vec.GetUnknown(dwCookie);

  00004	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _dwCookie$[ebp]
  0000b	83 c6 04	 add	 esi, 4
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z ; ATL::CComDynamicUnkArray::GetUnknown

; 6401 : 	HRESULT hRes = m_vec.Remove(dwCookie) ? S_OK : CONNECT_E_NOCONNECTION;

  00014	ff 75 0c	 push	 DWORD PTR _dwCookie$[ebp]
  00017	8b ce		 mov	 ecx, esi
  00019	8b f8		 mov	 edi, eax
  0001b	e8 00 00 00 00	 call	 ?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z ; ATL::CComDynamicUnkArray::Remove
  00020	33 c9		 xor	 ecx, ecx
  00022	be 00 02 04 80	 mov	 esi, -2147220992	; 80040200H
  00027	85 c0		 test	 eax, eax
  00029	0f 45 f1	 cmovne	 esi, ecx

; 6402 : 	pT->Unlock();
; 6403 : 	if (hRes == S_OK && p != NULL)

  0002c	74 0a		 je	 SHORT $LN2@Unadvise
  0002e	85 ff		 test	 edi, edi
  00030	74 06		 je	 SHORT $LN2@Unadvise

; 6404 : 		p->Release();

  00032	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00034	57		 push	 edi
  00035	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN2@Unadvise:

; 6405 : 	return hRes;

  00038	5f		 pop	 edi
  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi

; 6406 : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?Unadvise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::Unadvise
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Advise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z
_TEXT	SEGMENT
_p$ = -24						; size = 4
_iid$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pUnkSink$ = 12						; size = 4
_pdwCookie$ = 16					; size = 4
?Advise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::Advise, COMDAT

; 6368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6369 : 	T* pT = static_cast<T*>(this);
; 6370 : 	IUnknown* p = NULL;

  00010	83 65 e8 00	 and	 DWORD PTR _p$[ebp], 0
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  00018	56		 push	 esi
  00019	8b 75 0c	 mov	 esi, DWORD PTR _pUnkSink$[ebp]
  0001c	57		 push	 edi
  0001d	8b 7d 10	 mov	 edi, DWORD PTR _pdwCookie$[ebp]

; 6371 : 	HRESULT hRes = S_OK;
; 6372 : 	if (pdwCookie != NULL)

  00020	85 ff		 test	 edi, edi
  00022	74 03		 je	 SHORT $LN13@Advise

; 6373 : 		*pdwCookie = 0;

  00024	83 27 00	 and	 DWORD PTR [edi], 0
$LN13@Advise:

; 6374 : 	if (pUnkSink == NULL || pdwCookie == NULL)

  00027	85 f6		 test	 esi, esi
  00029	74 5f		 je	 SHORT $LN4@Advise
  0002b	85 ff		 test	 edi, edi
  0002d	74 5b		 je	 SHORT $LN4@Advise

; 6376 : 	IID iid;
; 6377 : 	GetConnectionInterface(&iid);

  0002f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00031	8d 4d ec	 lea	 ecx, DWORD PTR _iid$[ebp]
  00034	51		 push	 ecx
  00035	53		 push	 ebx
  00036	ff 50 0c	 call	 DWORD PTR [eax+12]

; 6378 : 	hRes = pUnkSink->QueryInterface(iid, (void**)&p);

  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8d 4d e8	 lea	 ecx, DWORD PTR _p$[ebp]
  0003e	51		 push	 ecx
  0003f	8d 4d ec	 lea	 ecx, DWORD PTR _iid$[ebp]
  00042	51		 push	 ecx
  00043	56		 push	 esi
  00044	ff 10		 call	 DWORD PTR [eax]
  00046	8b f0		 mov	 esi, eax

; 6379 : 	if (SUCCEEDED(hRes))

  00048	85 f6		 test	 esi, esi
  0004a	78 2a		 js	 SHORT $LN5@Advise

; 6380 : 	{
; 6381 : 		pT->Lock();
; 6382 : 		*pdwCookie = m_vec.Add(p);

  0004c	ff 75 e8	 push	 DWORD PTR _p$[ebp]
  0004f	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00052	e8 00 00 00 00	 call	 ?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::Add

; 6383 : 		hRes = (*pdwCookie != NULL) ? S_OK : CONNECT_E_ADVISELIMIT;

  00057	33 c9		 xor	 ecx, ecx
  00059	89 07		 mov	 DWORD PTR [edi], eax
  0005b	85 c0		 test	 eax, eax
  0005d	be 01 02 04 80	 mov	 esi, -2147220991	; 80040201H
  00062	0f 45 f1	 cmovne	 esi, ecx

; 6384 : 		pT->Unlock();
; 6385 : 		if (hRes != S_OK)

  00065	75 09		 jne	 SHORT $LN8@Advise

; 6386 : 			p->Release();

  00067	8b 45 e8	 mov	 eax, DWORD PTR _p$[ebp]
  0006a	50		 push	 eax
  0006b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006d	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN8@Advise:

; 6390 : 	if (FAILED(hRes))

  00070	85 f6		 test	 esi, esi
  00072	79 12		 jns	 SHORT $LN9@Advise
  00074	eb 0d		 jmp	 SHORT $LN14@Advise
$LN5@Advise:

; 6387 : 	}
; 6388 : 	else if (hRes == E_NOINTERFACE)

  00076	81 fe 02 40 00
	80		 cmp	 esi, -2147467262	; 80004002H
  0007c	75 05		 jne	 SHORT $LN14@Advise

; 6389 : 		hRes = CONNECT_E_CANNOTCONNECT;

  0007e	be 02 02 04 80	 mov	 esi, -2147220990	; 80040202H
$LN14@Advise:

; 6391 : 		*pdwCookie = 0;

  00083	83 27 00	 and	 DWORD PTR [edi], 0
$LN9@Advise:

; 6392 : 	return hRes;

  00086	8b c6		 mov	 eax, esi
  00088	eb 05		 jmp	 SHORT $LN1@Advise
$LN4@Advise:

; 6375 : 		return E_POINTER;

  0008a	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
$LN1@Advise:

; 6393 : }

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	33 cd		 xor	 ecx, ebp
  00096	5b		 pop	 ebx
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	c9		 leave
  0009d	c2 0c 00	 ret	 12			; 0000000cH
?Advise@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::Advise
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ppCPC$ = 12						; size = 4
?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer, COMDAT

; 6338 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6339 : 		T* pT = static_cast<T*>(this);
; 6340 : 		// No need to check ppCPC for NULL since QI will do that for us
; 6341 : 		return pT->QueryInterface(__uuidof(IConnectionPointContainer), (void**)ppCPC);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _ppCPC$[ebp]
  00009	68 00 00 00 00	 push	 OFFSET __GUID_b196b284_bab4_101a_b69c_00aa00341d07
  0000e	8d 81 4c ff ff
	ff		 lea	 eax, DWORD PTR [ecx-180]
  00014	f7 d9		 neg	 ecx
  00016	1b c9		 sbb	 ecx, ecx
  00018	23 c8		 and	 ecx, eax
  0001a	51		 push	 ecx
  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	ff 10		 call	 DWORD PTR [eax]

; 6342 : 	}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_piid2$ = 12						; size = 4
?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface, COMDAT

; 6330 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 6331 : 		if (piid2 == NULL)

  00004	8b 7d 0c	 mov	 edi, DWORD PTR _piid2$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	75 07		 jne	 SHORT $LN2@GetConnect

; 6332 : 			return E_POINTER;

  0000b	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00010	eb 0d		 jmp	 SHORT $LN1@GetConnect
$LN2@GetConnect:
  00012	56		 push	 esi

; 6333 : 		*piid2 = *piid;

  00013	be 00 00 00 00	 mov	 esi, OFFSET _DIID__IOPOSSoundRecorderEvents

; 6334 : 		return S_OK;

  00018	33 c0		 xor	 eax, eax
  0001a	a5		 movsd
  0001b	a5		 movsd
  0001c	a5		 movsd
  0001d	a5		 movsd
  0001e	5e		 pop	 esi
$LN1@GetConnect:
  0001f	5f		 pop	 edi

; 6335 : 	}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppvObject$ = 16					; size = 4
?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface, COMDAT

; 6308 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6309 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6310 : 		ATLASSERT(ppvObject != NULL);
; 6311 : #endif
; 6312 : 		if (ppvObject == NULL)

  00004	8b 75 10	 mov	 esi, DWORD PTR _ppvObject$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 07		 jne	 SHORT $LN2@LocCPQuery

; 6313 : 			return E_POINTER;

  0000b	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00010	eb 36		 jmp	 SHORT $LN4@LocCPQuery
$LN2@LocCPQuery:

; 6314 : 		*ppvObject = NULL;

  00012	83 26 00	 and	 DWORD PTR [esi], 0

; 6315 : 
; 6316 : 		if (InlineIsEqualGUID(riid, __uuidof(IConnectionPoint)) || InlineIsEqualUnknown(riid))

  00015	68 00 00 00 00	 push	 OFFSET __GUID_b196b286_bab4_101a_b69c_00aa00341d07
  0001a	ff 75 0c	 push	 DWORD PTR _riid$[ebp]
  0001d	e8 00 00 00 00	 call	 _InlineIsEqualGUID
  00022	59		 pop	 ecx
  00023	59		 pop	 ecx
  00024	85 c0		 test	 eax, eax
  00026	75 13		 jne	 SHORT $LN5@LocCPQuery
  00028	ff 75 0c	 push	 DWORD PTR _riid$[ebp]
  0002b	e8 00 00 00 00	 call	 ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z ; ATL::InlineIsEqualUnknown
  00030	85 c0		 test	 eax, eax
  00032	75 07		 jne	 SHORT $LN5@LocCPQuery

; 6324 : 		}
; 6325 : 		else
; 6326 : 			return E_NOINTERFACE;

  00034	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  00039	eb 0d		 jmp	 SHORT $LN4@LocCPQuery
$LN5@LocCPQuery:

; 6317 : 		{
; 6318 : 			*ppvObject = this;

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx

; 6319 : 			this->AddRef();

  00040	51		 push	 ecx
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	ff 50 04	 call	 DWORD PTR [eax+4]

; 6320 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 6321 : 			_AtlDebugInterfacesModule.AddThunk((IUnknown**)ppvObject, _T("IConnectionPointImpl"), riid);
; 6322 : #endif // _ATL_DEBUG_INTERFACES
; 6323 : 			return S_OK;

  00046	33 c0		 xor	 eax, eax
$LN4@LocCPQuery:
  00048	5e		 pop	 esi

; 6327 : 	}

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx

; 6354 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 6355 : 	IUnknown** pp = m_vec.begin();

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 6192 : 		return &m_ppUnk[m_nSize];

  00007	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0000a	8d 04 96	 lea	 eax, DWORD PTR [esi+edx*4]

; 6356 : 	while (pp < m_vec.end())

  0000d	3b f0		 cmp	 esi, eax
  0000f	73 1e		 jae	 SHORT $LN3@IConnectio
$LL2@IConnectio:

; 6357 : 	{
; 6358 : 		if (*pp != NULL)

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN4@IConnectio

; 6359 : 			(*pp)->Release();

  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	51		 push	 ecx
  0001a	ff 50 08	 call	 DWORD PTR [eax+8]
$LN4@IConnectio:

; 6192 : 		return &m_ppUnk[m_nSize];

  0001d	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 6360 : 		pp++;

  00020	83 c6 04	 add	 esi, 4

; 6192 : 		return &m_ppUnk[m_nSize];

  00023	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00026	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]

; 6356 : 	while (pp < m_vec.end())

  00029	3b f0		 cmp	 esi, eax
  0002b	72 e4		 jb	 SHORT $LL2@IConnectio
  0002d	8b f1		 mov	 esi, ecx
$LN3@IConnectio:

; 6152 : 		if (m_nSize > 0)

  0002f	85 d2		 test	 edx, edx
  00031	7e 07		 jle	 SHORT $LN9@IConnectio

; 6153 : 			free(m_ppUnk);

  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _free
  00039	59		 pop	 ecx
$LN9@IConnectio:
  0003a	5f		 pop	 edi

; 6361 : 	}
; 6362 : }

  0003b	5e		 pop	 esi
  0003c	c3		 ret	 0
??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?DIID__IOPOSSoundRecorderEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&DIID__IOPOSSoundRecorderEvents,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx

; 6354 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 6355 : 	IUnknown** pp = m_vec.begin();

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 6192 : 		return &m_ppUnk[m_nSize];

  00007	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0000a	8d 04 96	 lea	 eax, DWORD PTR [esi+edx*4]

; 6356 : 	while (pp < m_vec.end())

  0000d	3b f0		 cmp	 esi, eax
  0000f	73 1e		 jae	 SHORT $LN3@IConnectio
$LL2@IConnectio:

; 6357 : 	{
; 6358 : 		if (*pp != NULL)

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN4@IConnectio

; 6359 : 			(*pp)->Release();

  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	51		 push	 ecx
  0001a	ff 50 08	 call	 DWORD PTR [eax+8]
$LN4@IConnectio:

; 6192 : 		return &m_ppUnk[m_nSize];

  0001d	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 6360 : 		pp++;

  00020	83 c6 04	 add	 esi, 4

; 6192 : 		return &m_ppUnk[m_nSize];

  00023	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00026	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]

; 6356 : 	while (pp < m_vec.end())

  00029	3b f0		 cmp	 esi, eax
  0002b	72 e4		 jb	 SHORT $LL2@IConnectio
  0002d	8b f1		 mov	 esi, ecx
$LN3@IConnectio:

; 6152 : 		if (m_nSize > 0)

  0002f	85 d2		 test	 edx, edx
  00031	7e 07		 jle	 SHORT $LN9@IConnectio

; 6153 : 			free(m_ppUnk);

  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _free
  00039	59		 pop	 ecx
$LN9@IConnectio:
  0003a	5f		 pop	 edi

; 6361 : 	}
; 6362 : }

  0003b	5e		 pop	 esi
  0003c	c3		 ret	 0
??1?$IConnectionPointImpl@VCOPOSSoundRecorder@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSSoundRecorder,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
;	COMDAT ??1?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
??1?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ PROC ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::~CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >, COMDAT
; _this$ = ecx

; 250  : 		if (pThunk)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00007	74 08		 je	 SHORT $LN12@CComContro

; 251  : 		{
; 252  : #ifdef USE_ATL_THUNK2
; 253  : 			AtlThunk_FreeData(pThunk);

  00009	ff 76 5c	 push	 DWORD PTR [esi+92]
  0000c	e8 00 00 00 00	 call	 _AtlThunk_FreeData@4
$LN12@CComContro:
  00011	8b ce		 mov	 ecx, esi
  00013	5e		 pop	 esi
  00014	e9 00 00 00 00	 jmp	 ??1CComControlBase@ATL@@UAE@XZ ; ATL::CComControlBase::~CComControlBase
??1?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ ENDP ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::~CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??0?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ PROC ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >, COMDAT
; _this$ = ecx

; 1592 : 	CComControl() : CComControlBase(this->m_hWnd) {}

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 4c	 lea	 esi, DWORD PTR [edi+76]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z ; ATL::CComControlBase::CComControlBase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 794  : 		m_hWnd(hWnd)

  0000d	33 c0		 xor	 eax, eax
  0000f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h

; 241  : 		pThunk = NULL;

  00011	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 3222 : 	CWindowImplRoot() : m_pCurrentMsg(NULL), m_dwState(0)

  00014	89 47 60	 mov	 DWORD PTR [edi+96], eax
  00017	89 47 64	 mov	 DWORD PTR [edi+100], eax

; 3438 : 	CWindowImplBaseT() : m_pfnSuperWindowProc(::DefWindowProc)

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__DefWindowProcW@16
  0001f	89 47 68	 mov	 DWORD PTR [edi+104], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 1592 : 	CComControl() : CComControlBase(this->m_hWnd) {}

  00022	8b c7		 mov	 eax, edi
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
??0?$CComControl@VCOPOSSoundRecorder@@V?$CWindowImpl@VCOPOSSoundRecorder@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSSoundRecorder,ATL::CWindowImpl<COPOSSoundRecorder,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??1OposVariant@@QAE@XZ
_TEXT	SEGMENT
??1OposVariant@@QAE@XZ PROC				; OposVariant::~OposVariant, COMDAT
; _this$ = ecx

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00000	80 79 10 00	 cmp	 BYTE PTR [ecx+16], 0
  00004	74 0b		 je	 SHORT $LN2@OposVarian

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00006	51		 push	 ecx
  00007	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
$LN2@OposVarian:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00011	c3		 ret	 0
??1OposVariant@@QAE@XZ ENDP				; OposVariant::~OposVariant
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??0OposVariant@@QAE@XZ
_TEXT	SEGMENT
??0OposVariant@@QAE@XZ PROC				; OposVariant::OposVariant, COMDAT
; _this$ = ecx

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00000	33 c0		 xor	 eax, eax
  00002	66 89 01	 mov	 WORD PTR [ecx], ax
  00005	88 41 10	 mov	 BYTE PTR [ecx+16], al
  00008	8b c1		 mov	 eax, ecx
  0000a	c3		 ret	 0
??0OposVariant@@QAE@XZ ENDP				; OposVariant::OposVariant
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??1CComControlBase@ATL@@UAE@XZ
_TEXT	SEGMENT
??1CComControlBase@ATL@@UAE@XZ PROC			; ATL::CComControlBase::~CComControlBase, COMDAT
; _this$ = ecx

; 209  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 210  : 		if (m_hWndCD != NULL)

  00003	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 08		 je	 SHORT $LN2@CComContro

; 211  : 			::DestroyWindow(m_hWndCD);

  0000b	ff 30		 push	 DWORD PTR [eax]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN2@CComContro:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  00013	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00016	85 c9		 test	 ecx, ecx
  00018	74 06		 je	 SHORT $LN9@CComContro

; 184  :             p->Release();

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	51		 push	 ecx
  0001d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN9@CComContro:

; 183  :         if (p)

  00020	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00023	85 c9		 test	 ecx, ecx
  00025	74 06		 je	 SHORT $LN14@CComContro

; 184  :             p->Release();

  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	51		 push	 ecx
  0002a	ff 50 08	 call	 DWORD PTR [eax+8]
$LN14@CComContro:

; 183  :         if (p)

  0002d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00030	85 c9		 test	 ecx, ecx
  00032	74 06		 je	 SHORT $LN19@CComContro

; 184  :             p->Release();

  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	51		 push	 ecx
  00037	ff 50 08	 call	 DWORD PTR [eax+8]
$LN19@CComContro:

; 183  :         if (p)

  0003a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0003d	85 c9		 test	 ecx, ecx
  0003f	74 06		 je	 SHORT $LN24@CComContro

; 184  :             p->Release();

  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	51		 push	 ecx
  00044	ff 50 08	 call	 DWORD PTR [eax+8]
$LN24@CComContro:

; 183  :         if (p)

  00047	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 06		 je	 SHORT $LN29@CComContro

; 184  :             p->Release();

  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	51		 push	 ecx
  00051	ff 50 08	 call	 DWORD PTR [eax+8]
$LN29@CComContro:

; 183  :         if (p)

  00054	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00057	5e		 pop	 esi
  00058	85 c9		 test	 ecx, ecx
  0005a	74 06		 je	 SHORT $LN34@CComContro

; 184  :             p->Release();

  0005c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005e	51		 push	 ecx
  0005f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN34@CComContro:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 213  : 	}

  00062	c3		 ret	 0
??1CComControlBase@ATL@@UAE@XZ ENDP			; ATL::CComControlBase::~CComControlBase
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z PROC	; ATL::CComControlBase::CComControlBase, COMDAT
; _this$ = ecx

; 184  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 	CComControlBase(_Inout_ HWND& h) : m_hWndCD(h)

  00003	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]

; 184  : 	{

  00006	8b d1		 mov	 edx, ecx
  00008	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 165  :         p = NULL;

  00009	33 f6		 xor	 esi, esi
  0000b	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0000e	89 72 08	 mov	 DWORD PTR [edx+8], esi
  00011	89 72 0c	 mov	 DWORD PTR [edx+12], esi
  00014	89 72 10	 mov	 DWORD PTR [edx+16], esi
  00017	89 72 14	 mov	 DWORD PTR [edx+20], esi
  0001a	89 72 18	 mov	 DWORD PTR [edx+24], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 206  : 		m_bDrawGetDataInHimetric = 0;

  0001d	81 62 44 00 c0
	ff ff		 and	 DWORD PTR [edx+68], -16384 ; ffffc000H
  00024	89 42 3c	 mov	 DWORD PTR [edx+60], eax
  00027	b8 d8 13 00 00	 mov	 eax, 5080		; 000013d8H
  0002c	8b c8		 mov	 ecx, eax
  0002e	89 42 24	 mov	 DWORD PTR [edx+36], eax
  00031	89 42 28	 mov	 DWORD PTR [edx+40], eax
  00034	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 207  : 	}

  00037	8b c2		 mov	 eax, edx
  00039	89 72 2c	 mov	 DWORD PTR [edx+44], esi
  0003c	89 72 34	 mov	 DWORD PTR [edx+52], esi
  0003f	89 72 30	 mov	 DWORD PTR [edx+48], esi
  00042	89 72 38	 mov	 DWORD PTR [edx+56], esi
  00045	89 72 40	 mov	 DWORD PTR [edx+64], esi
  00048	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z ENDP	; ATL::CComControlBase::CComControlBase
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ PROC	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h

; 250  : 		if (pThunk)

  00000	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00004	74 08		 je	 SHORT $LN6@CWindowImp

; 251  : 		{
; 252  : #ifdef USE_ATL_THUNK2
; 253  : 			AtlThunk_FreeData(pThunk);

  00006	ff 71 14	 push	 DWORD PTR [ecx+20]
  00009	e8 00 00 00 00	 call	 _AtlThunk_FreeData@4
$LN6@CWindowImp:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 3235 : 	}

  0000e	c3		 ret	 0
??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ ENDP	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z PROC ; ATL::CComDynamicUnkArray::GetAt, COMDAT
; _this$ = ecx

; 6196 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6197 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);
; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 0c		 js	 SHORT $LN2@GetAt
  0000a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0000d	7d 07		 jge	 SHORT $LN2@GetAt

; 6199 : 			return m_ppUnk[nIndex];

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00014	eb 02		 jmp	 SHORT $LN3@GetAt
$LN2@GetAt:

; 6200 : 		else
; 6201 : 			return NULL;

  00016	33 c0		 xor	 eax, eax
$LN3@GetAt:

; 6202 : 
; 6203 : 	}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ENDP ; ATL::CComDynamicUnkArray::GetAt
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwCookie$ = 12						; size = 4
?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z PROC ; ATL::CComDynamicUnkArray::GetUnknown, COMDAT

; 6177 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6178 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6179 : 		ATLASSERT(dwCookie != 0 && dwCookie <= (DWORD)m_nSize);
; 6180 : #endif
; 6181 : 		if (dwCookie != 0 && dwCookie <= (DWORD)m_nSize)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 11		 je	 SHORT $LN2@GetUnknown
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00010	77 09		 ja	 SHORT $LN2@GetUnknown

; 6182 : 			return GetAt(dwCookie-1); // cookie minus one is an index into the array

  00012	48		 dec	 eax
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
  00019	eb 02		 jmp	 SHORT $LN3@GetUnknown
$LN2@GetUnknown:

; 6183 : 		else
; 6184 : 			return NULL;

  0001b	33 c0		 xor	 eax, eax
$LN3@GetUnknown:

; 6185 : 	}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z ENDP ; ATL::CComDynamicUnkArray::GetUnknown
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ppFind$ = 12						; size = 4
?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z PROC ; ATL::CComDynamicUnkArray::GetCookie, COMDAT

; 6160 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6161 : 		ATLASSERT(ppFind && *ppFind);
; 6162 : 		if (ppFind && *ppFind)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _ppFind$[ebp]
  00006	56		 push	 esi
  00007	85 c0		 test	 eax, eax
  00009	74 22		 je	 SHORT $LN3@GetCookie
  0000b	8b 30		 mov	 esi, DWORD PTR [eax]
  0000d	85 f6		 test	 esi, esi
  0000f	74 1c		 je	 SHORT $LN3@GetCookie

; 6163 : 		{
; 6164 : 			IUnknown** ppUnk = NULL;
; 6165 : 			DWORD dwCookie = 1;
; 6166 : 			// find IUnknown* in array
; 6167 : 			for (ppUnk = begin(); ppUnk < end(); ppUnk++)

  00011	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00014	33 d2		 xor	 edx, edx
  00016	42		 inc	 edx
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]

; 6192 : 		return &m_ppUnk[m_nSize];

  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0001f	eb 08		 jmp	 SHORT $LN15@GetCookie
$LL4@GetCookie:

; 6168 : 			{
; 6169 : 				if (*ppUnk == *ppFind)

  00021	39 31		 cmp	 DWORD PTR [ecx], esi
  00023	74 0f		 je	 SHORT $LN11@GetCookie

; 6171 : 				dwCookie++;

  00025	42		 inc	 edx
  00026	83 c1 04	 add	 ecx, 4
$LN15@GetCookie:

; 6163 : 		{
; 6164 : 			IUnknown** ppUnk = NULL;
; 6165 : 			DWORD dwCookie = 1;
; 6166 : 			// find IUnknown* in array
; 6167 : 			for (ppUnk = begin(); ppUnk < end(); ppUnk++)

  00029	3b c8		 cmp	 ecx, eax
  0002b	72 f4		 jb	 SHORT $LL4@GetCookie
$LN3@GetCookie:

; 6172 : 			}
; 6173 : 		}
; 6174 : 		return 0;

  0002d	33 c0		 xor	 eax, eax
$LN1@GetCookie:
  0002f	5e		 pop	 esi

; 6175 : 	}

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN11@GetCookie:

; 6170 : 					return dwCookie; // cookie minus one is an index into the array

  00034	8b c2		 mov	 eax, edx
  00036	eb f7		 jmp	 SHORT $LN1@GetCookie
?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z ENDP ; ATL::CComDynamicUnkArray::GetCookie
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z
_TEXT	SEGMENT
_dwCookie$ = 8						; size = 4
?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z PROC		; ATL::CComDynamicUnkArray::Remove, COMDAT
; _this$ = ecx

; 6267 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6268 : 	DWORD idx = dwCookie -1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  00006	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 6269 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6270 : 	ATLASSERT(idx < dwCookie && idx < (DWORD)m_nSize);
; 6271 : #endif
; 6272 : 	if (idx < dwCookie && idx < (DWORD)m_nSize)

  00009	3b d0		 cmp	 edx, eax
  0000b	73 16		 jae	 SHORT $LN2@Remove
  0000d	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00010	73 11		 jae	 SHORT $LN2@Remove

; 6273 : 	{
; 6274 : 		// cookie minus one is index into array
; 6275 : 		if (m_ppUnk[idx] == NULL)

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	83 3c 90 00	 cmp	 DWORD PTR [eax+edx*4], 0
  00018	74 09		 je	 SHORT $LN2@Remove

; 6276 : 			return FALSE;
; 6277 : 		m_ppUnk[idx] = NULL;

  0001a	83 24 90 00	 and	 DWORD PTR [eax+edx*4], 0

; 6278 : 		return TRUE;

  0001e	33 c0		 xor	 eax, eax
  00020	40		 inc	 eax
  00021	eb 02		 jmp	 SHORT $LN3@Remove
$LN2@Remove:

; 6279 : 	}
; 6280 : 	else
; 6281 : 		return FALSE;

  00023	33 c0		 xor	 eax, eax
$LN3@Remove:

; 6282 : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z ENDP		; ATL::CComDynamicUnkArray::Remove
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z
_TEXT	SEGMENT
_nAlloc$ = -4						; size = 4
_pUnk$ = 8						; size = 4
?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z PROC	; ATL::CComDynamicUnkArray::Add, COMDAT
; _this$ = ecx

; 6223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 6224 : 	IUnknown** pp = NULL;
; 6225 : 	if (m_nSize == 0)

  00009	6a 04		 push	 4
  0000b	5b		 pop	 ebx
  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	85 c0		 test	 eax, eax
  00011	75 24		 jne	 SHORT $LN17@Add

; 6226 : 	{
; 6227 : 		// Create array with _DEFAULT_VECTORLENGTH number of items.
; 6228 : 		ATLTRY(pp = (IUnknown**)calloc(sizeof(IUnknown*),_DEFAULT_VECTORLENGTH));

  00013	53		 push	 ebx
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 _calloc
  0001a	8b d0		 mov	 edx, eax
  0001c	59		 pop	 ecx
  0001d	59		 pop	 ecx

; 6229 : 		if (pp == NULL)

  0001e	85 d2		 test	 edx, edx
  00020	0f 84 87 00 00
	00		 je	 $LN19@Add

; 6230 : 			return 0;
; 6231 : 		memset(pp, 0, sizeof(IUnknown*)*_DEFAULT_VECTORLENGTH);

  00026	33 c0		 xor	 eax, eax

; 6232 : 		m_ppUnk = pp;

  00028	89 16		 mov	 DWORD PTR [esi], edx
  0002a	8b fa		 mov	 edi, edx

; 6233 : 		m_nSize = _DEFAULT_VECTORLENGTH;

  0002c	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002f	ab		 stosd
  00030	ab		 stosd
  00031	ab		 stosd
  00032	ab		 stosd
  00033	8b c3		 mov	 eax, ebx
  00035	eb 02		 jmp	 SHORT $LN5@Add
$LN17@Add:
  00037	8b 16		 mov	 edx, DWORD PTR [esi]
$LN5@Add:

; 6234 : 	}
; 6235 : 	// Walk array and use empty slots if any.
; 6236 : 	DWORD dwCookie = 1;

  00039	33 ff		 xor	 edi, edi

; 6192 : 		return &m_ppUnk[m_nSize];

  0003b	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 6234 : 	}
; 6235 : 	// Walk array and use empty slots if any.
; 6236 : 	DWORD dwCookie = 1;

  0003e	47		 inc	 edi

; 6192 : 		return &m_ppUnk[m_nSize];

  0003f	eb 0b		 jmp	 SHORT $LN20@Add
$LL4@Add:

; 6238 : 	{
; 6239 : 		if (*pp == NULL)

  00041	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00044	74 5e		 je	 SHORT $LN14@Add

; 6192 : 		return &m_ppUnk[m_nSize];

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 6243 : 		}
; 6244 : 		dwCookie++;

  00049	47		 inc	 edi
  0004a	03 d3		 add	 edx, ebx
$LN20@Add:

; 6237 : 	for (pp = begin(); pp < end(); pp++)

  0004c	3b d1		 cmp	 edx, ecx
  0004e	72 f1		 jb	 SHORT $LL4@Add

; 6245 : 	}
; 6246 : 	// No empty slots so resize array.
; 6247 : 	// # of new slots is double of current size.
; 6248 : 	int nAlloc = 0;

  00050	83 65 fc 00	 and	 DWORD PTR _nAlloc$[ebp], 0

; 6249 : 	HRESULT hr = AtlMultiply(&nAlloc, m_nSize, 2);

  00054	6a 02		 push	 2
  00056	50		 push	 eax
  00057	8d 45 fc	 lea	 eax, DWORD PTR _nAlloc$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$AtlMultiply@H@ATL@@YAJPAHHH@Z ; ATL::AtlMultiply<int>
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6250 : 	if (FAILED(hr))

  00063	85 c0		 test	 eax, eax
  00065	78 46		 js	 SHORT $LN19@Add

; 6251 : 	{
; 6252 : 		return 0;
; 6253 : 	}
; 6254 : 
; 6255 : 	pp = (IUnknown**)_recalloc(m_ppUnk, sizeof(IUnknown*),nAlloc);

  00067	8b 7d fc	 mov	 edi, DWORD PTR _nAlloc$[ebp]
  0006a	57		 push	 edi
  0006b	53		 push	 ebx
  0006c	ff 36		 push	 DWORD PTR [esi]
  0006e	e8 00 00 00 00	 call	 __recalloc
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6256 : 	if (pp == NULL)

  00076	85 c0		 test	 eax, eax
  00078	74 33		 je	 SHORT $LN19@Add

; 6258 : 	m_ppUnk = pp;
; 6259 : 	memset(&m_ppUnk[m_nSize], 0, sizeof(IUnknown*)*m_nSize);

  0007a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0007d	c1 e1 02	 shl	 ecx, 2
  00080	51		 push	 ecx
  00081	89 06		 mov	 DWORD PTR [esi], eax
  00083	03 c1		 add	 eax, ecx
  00085	6a 00		 push	 0
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memset

; 6260 : 	m_ppUnk[m_nSize] = pUnk;

  0008d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00095	8b 45 08	 mov	 eax, DWORD PTR _pUnk$[ebp]
  00098	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 6261 : 	dwCookie = m_nSize+1;

  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	40		 inc	 eax

; 6262 : 	m_nSize = nAlloc;

  0009f	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 6263 : 	return dwCookie; // cookie minus one is index into array

  000a2	eb 0b		 jmp	 SHORT $LN1@Add
$LN14@Add:

; 6240 : 		{
; 6241 : 			*pp = pUnk;

  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _pUnk$[ebp]

; 6242 : 			return dwCookie; // cookie minus one is index into array

  000a7	8b c7		 mov	 eax, edi
  000a9	89 0a		 mov	 DWORD PTR [edx], ecx
  000ab	eb 02		 jmp	 SHORT $LN1@Add
$LN19@Add:

; 6257 : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$LN1@Add:
  000af	5f		 pop	 edi

; 6264 : }

  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	c9		 leave
  000b3	c2 04 00	 ret	 4
?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z ENDP	; ATL::CComDynamicUnkArray::Add
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z PROC ; ATL::_Copy<tagCONNECTDATA>::copy, COMDAT

; 5422 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  00003	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 21		 je	 SHORT $LN11@copy
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 1a		 je	 SHORT $LN11@copy

; 5424 : 		*p1 = *p2;

  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00016	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 5425 : 		if (p1->pUnk)

  00019	8b c8		 mov	 ecx, eax
  0001b	89 02		 mov	 DWORD PTR [edx], eax
  0001d	85 c9		 test	 ecx, ecx
  0001f	74 06		 je	 SHORT $LN9@copy

; 5426 : 		{
; 5427 : 			p1->pUnk->AddRef();

  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	51		 push	 ecx
  00024	ff 50 04	 call	 DWORD PTR [eax+4]
$LN9@copy:

; 5428 : 		}
; 5429 : 		return S_OK;

  00027	33 c0		 xor	 eax, eax

; 5430 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN11@copy:

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  0002b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00030	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN13@copy:
  00035	cc		 int	 3
?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ENDP ; ATL::_Copy<tagCONNECTDATA>::copy
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f6 45 08 02	 test	 BYTE PTR ___flags$[ebp], 2
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	74 40		 je	 SHORT $LN2@vector
  0000d	53		 push	 ebx
  0000e	57		 push	 edi
  0000f	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  00012	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00014	6b c3 0c	 imul	 eax, ebx, 12
  00017	03 c6		 add	 eax, esi
  00019	85 db		 test	 ebx, ebx
  0001b	74 15		 je	 SHORT $LN19@vector
  0001d	8b f8		 mov	 edi, eax
$LL7@vector:
  0001f	8d 7f f4	 lea	 edi, DWORD PTR [edi-12]

; 1674 :     ::SysFreeString(m_str);

  00022	ff 37		 push	 DWORD PTR [edi]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  0002a	83 eb 01	 sub	 ebx, 1
  0002d	75 f0		 jne	 SHORT $LL7@vector
  0002f	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
$LN19@vector:
  00032	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00036	74 0f		 je	 SHORT $LN3@vector
  00038	6b 0f 0c	 imul	 ecx, DWORD PTR [edi], 12
  0003b	83 c1 04	 add	 ecx, 4
  0003e	51		 push	 ecx
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx
$LN3@vector:
  00047	8b c7		 mov	 eax, edi
  00049	5f		 pop	 edi
  0004a	5b		 pop	 ebx
  0004b	eb 1a		 jmp	 SHORT $LN1@vector
$LN2@vector:
  0004d	ff 36		 push	 DWORD PTR [esi]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0a		 je	 SHORT $LN4@vector
  0005b	6a 0c		 push	 12			; 0000000cH
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	59		 pop	 ecx
  00064	59		 pop	 ecx
$LN4@vector:
  00065	8b c6		 mov	 eax, esi
$LN1@vector:
  00067	5e		 pop	 esi
  00068	c9		 leave
  00069	c2 04 00	 ret	 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx

; 1674 :     ::SysFreeString(m_str);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00008	c3		 ret	 0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??__F_AtlWinModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlWinModule'', COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2957 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

  00000	ff 35 04 00 00
	00		 push	 DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
  00006	68 00 00 00 00	 push	 OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  0000b	e8 00 00 00 00	 call	 ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 311  : 	RemoveAll();

  00010	b9 20 00 00 00	 mov	 ecx, OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+32
  00015	e9 00 00 00 00	 jmp	 ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
??__F_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlWinModule''
text$yd	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlWinModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlWinModule'', COMDAT

; 2972 : __declspec(selectany) CAtlWinModule _AtlWinModule;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  00005	e8 00 00 00 00	 call	 ??0CAtlWinModule@ATL@@QAE@XZ ; ATL::CAtlWinModule::CAtlWinModule
  0000a	68 00 00 00 00	 push	 OFFSET ??__F_AtlWinModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlWinModule''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlWinModule''
text$di	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2937 : 	CAtlWinModule()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00003	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2937 : 	CAtlWinModule()

  00005	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00006	6a 06		 push	 6
  00008	59		 pop	 ecx
  00009	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0000c	f3 ab		 rep stosd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

  0000e	33 ff		 xor	 edi, edi
  00010	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00013	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00016	89 7e 28	 mov	 DWORD PTR [esi+40], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2940 : 		HRESULT hr = AtlWinModuleInit(this);

  00019	56		 push	 esi
  0001a	c7 06 2c 00 00
	00		 mov	 DWORD PTR [esi], 44	; 0000002cH
  00020	e8 00 00 00 00	 call	 ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit

; 2941 : 		if (FAILED(hr))

  00025	85 c0		 test	 eax, eax
  00027	79 09		 jns	 SHORT $LN2@CAtlWinMod

; 2942 : 		{
; 2943 : 			ATLASSERT(0);
; 2944 : 			CAtlBaseModule::m_bInitFailed = true;

  00029	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2945 : 			cbSize = 0;

  00030	89 3e		 mov	 DWORD PTR [esi], edi
$LN2@CAtlWinMod:

; 2946 : 			return;
; 2947 : 		}
; 2948 : 	}

  00032	5f		 pop	 edi
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c3		 ret	 0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__F_AtlComModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlComModule'', COMDAT

; 2608 : 		Term();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  00005	e9 00 00 00 00	 jmp	 ?Term@CAtlComModule@ATL@@QAEXXZ ; ATL::CAtlComModule::Term
??__F_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlComModule''
text$yd	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlComModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlComModule'', COMDAT

; 2716 : __declspec(selectany) CAtlComModule _AtlComModule;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  00005	e8 00 00 00 00	 call	 ??0CAtlComModule@ATL@@QAE@XZ ; ATL::CAtlComModule::CAtlComModule
  0000a	68 00 00 00 00	 push	 OFFSET ??__F_AtlComModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlComModule''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlComModule''
text$di	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlComModule@ATL@@QAEXXZ
_TEXT	SEGMENT
?Term@CAtlComModule@ATL@@QAEXXZ PROC			; ATL::CAtlComModule::Term, COMDAT
; _this$ = ecx

; 2613 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2614 : 		if (cbSize == 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 40		 je	 SHORT $LN1@Term

; 2615 : 			return;
; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00008	57		 push	 edi
  00009	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000c	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  0000f	73 29		 jae	 SHORT $LN3@Term
  00011	53		 push	 ebx
$LL4@Term:

; 2618 : 		{
; 2619 : 			if (*ppEntry != NULL)

  00012	8b 07		 mov	 eax, DWORD PTR [edi]
  00014	85 c0		 test	 eax, eax
  00016	74 19		 je	 SHORT $LN2@Term

; 2620 : 			{
; 2621 : 				_ATL_OBJMAP_CACHE* pCache = (**ppEntry).pCache;

  00018	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 2622 : 
; 2623 : 				if (pCache->pCF != NULL)

  0001b	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001e	74 11		 je	 SHORT $LN2@Term

; 2624 : 				{
; 2625 : 					// Decode factory pointer if it's not null
; 2626 : 					IUnknown *factory = reinterpret_cast<IUnknown*>(::DecodePointer(pCache->pCF));

  00020	ff 33		 push	 DWORD PTR [ebx]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DecodePointer@4

; 2627 : 					_Analysis_assume_(factory != nullptr);
; 2628 : 					factory->Release();

  00028	50		 push	 eax
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	ff 51 08	 call	 DWORD PTR [ecx+8]

; 2629 : 					pCache->pCF = NULL;

  0002e	83 23 00	 and	 DWORD PTR [ebx], 0
$LN2@Term:

; 2615 : 			return;
; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00031	83 c7 04	 add	 edi, 4
  00034	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  00037	72 d9		 jb	 SHORT $LL4@Term
  00039	5b		 pop	 ebx
$LN3@Term:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  0003a	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0003d	50		 push	 eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2637 : 		cbSize = 0;

  00044	83 26 00	 and	 DWORD PTR [esi], 0
  00047	5f		 pop	 edi
$LN1@Term:

; 2638 : 	}

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
?Term@CAtlComModule@ATL@@QAEXXZ ENDP			; ATL::CAtlComModule::Term
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::CAtlComModule, COMDAT
; _this$ = ecx

; 2586 : 	CAtlComModule() throw()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00003	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2586 : 	CAtlComModule() throw()

  00005	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00006	6a 06		 push	 6
  00008	59		 pop	 ecx
  00009	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
  0000c	f3 ab		 rep stosd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2588 : 		cbSize = 0;

  0000e	21 06		 and	 DWORD PTR [esi], eax

; 2589 : 
; 2590 : 		m_hInstTypeLib = reinterpret_cast<HINSTANCE>(&__ImageBase);
; 2591 : 
; 2592 : 		m_ppAutoObjMapFirst = &__pobjMapEntryFirst + 1;
; 2593 : 		m_ppAutoObjMapLast = &__pobjMapEntryLast;
; 2594 : 
; 2595 : 		if (FAILED(m_csObjMap.Init()))

  00010	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ___ImageBase
  0001a	c7 46 08 04 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ___pobjMapEntryFirst+4
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], OFFSET ___pobjMapEntryLast
  00028	e8 00 00 00 00	 call	 ?Init@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Init
  0002d	85 c0		 test	 eax, eax
  0002f	79 09		 jns	 SHORT $LN2@CAtlComMod

; 2596 : 		{
; 2597 : 			ATLTRACE(atlTraceCOM, 0, _T("ERROR : Unable to initialize critical section in CAtlComModule\n"));
; 2598 : 			ATLASSERT(0);
; 2599 : 			CAtlBaseModule::m_bInitFailed = true;

  00031	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2600 : 			return;

  00038	eb 06		 jmp	 SHORT $LN1@CAtlComMod
$LN2@CAtlComMod:

; 2601 : 		}
; 2602 : 		// Set cbSize on success.
; 2603 : 		cbSize = sizeof(_ATL_COM_MODULE);

  0003a	c7 06 28 00 00
	00		 mov	 DWORD PTR [esi], 40	; 00000028H
$LN1@CAtlComMod:

; 2604 : 	}

  00040	5f		 pop	 edi
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
??0CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::CAtlComModule
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z PROC		; ATL::InlineIsEqualUnknown, COMDAT

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 667  :    return (

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	75 18		 jne	 SHORT $LN4@InlineIsEq
  0000c	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  0000f	75 13		 jne	 SHORT $LN4@InlineIsEq
  00011	81 79 08 c0 00
	00 00		 cmp	 DWORD PTR [ecx+8], 192	; 000000c0H
  00018	75 0a		 jne	 SHORT $LN4@InlineIsEq
  0001a	81 79 0c 00 00
	00 46		 cmp	 DWORD PTR [ecx+12], 1174405120 ; 46000000H
  00021	75 01		 jne	 SHORT $LN4@InlineIsEq
  00023	40		 inc	 eax
$LN4@InlineIsEq:

; 668  : 	  ((PLONG) &rguid1)[0] == 0 &&
; 669  : 	  ((PLONG) &rguid1)[1] == 0 &&
; 670  : #ifdef _ATL_BYTESWAP
; 671  : 	  ((PLONG) &rguid1)[2] == 0xC0000000 &&
; 672  : 	  ((PLONG) &rguid1)[3] == 0x00000046);
; 673  : #else
; 674  : 	  ((PLONG) &rguid1)[2] == 0x000000C0 &&
; 675  : 	  ((PLONG) &rguid1)[3] == 0x46000000);
; 676  : #endif
; 677  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z ENDP		; ATL::InlineIsEqualUnknown
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_pWinModule$ = 8					; size = 4
_hInst$ = 12						; size = 4
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z PROC ; ATL::AtlWinModuleTerm, COMDAT

; 7652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _pWinModule$[ebp]

; 7653 : 	if (pWinModule == NULL)

  00007	85 f6		 test	 esi, esi
  00009	74 4e		 je	 SHORT $LN16@AtlWinModu

; 7654 : 		return E_INVALIDARG;
; 7655 : 	if (pWinModule->cbSize == 0)

  0000b	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000e	75 04		 jne	 SHORT $LN6@AtlWinModu

; 7656 : 		return S_OK;

  00010	33 c0		 xor	 eax, eax
  00012	eb 4a		 jmp	 SHORT $LN1@AtlWinModu
$LN6@AtlWinModu:

; 7657 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  00014	83 3e 2c	 cmp	 DWORD PTR [esi], 44	; 0000002cH
  00017	75 40		 jne	 SHORT $LN16@AtlWinModu

; 7659 : 
; 7660 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

  00019	53		 push	 ebx
  0001a	57		 push	 edi
  0001b	33 ff		 xor	 edi, edi
  0001d	39 7e 24	 cmp	 DWORD PTR [esi+36], edi
  00020	7e 1c		 jle	 SHORT $LN14@AtlWinModu
$LL4@AtlWinModu:

; 7661 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00022	57		 push	 edi
  00023	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00026	e8 00 00 00 00	 call	 ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
  0002b	ff 75 0c	 push	 DWORD PTR _hInst$[ebp]
  0002e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassW@8
  00038	47		 inc	 edi
  00039	3b 7e 24	 cmp	 edi, DWORD PTR [esi+36]
  0003c	7c e4		 jl	 SHORT $LL4@AtlWinModu
$LN14@AtlWinModu:

; 7662 : 	pWinModule->m_rgWindowClassAtoms.RemoveAll();

  0003e	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00041	e8 00 00 00 00	 call	 ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  00046	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 7664 : 	pWinModule->cbSize = 0;

  00050	83 26 00	 and	 DWORD PTR [esi], 0

; 7665 : 	return S_OK;

  00053	33 c0		 xor	 eax, eax
  00055	5f		 pop	 edi
  00056	5b		 pop	 ebx
  00057	eb 05		 jmp	 SHORT $LN1@AtlWinModu
$LN16@AtlWinModu:

; 7658 : 		return E_INVALIDARG;

  00059	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN1@AtlWinModu:
  0005e	5e		 pop	 esi

; 7666 : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z
_TEXT	SEGMENT
_pWinModule$ = 8					; size = 4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z PROC ; ATL::AtlWinModuleInit, COMDAT

; 8396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8397 : 	if (pWinModule == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN6@AtlWinModu

; 8398 : 		return E_INVALIDARG;
; 8399 : 
; 8400 : 	// check only in the DLL
; 8401 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  0000a	83 39 2c	 cmp	 DWORD PTR [ecx], 44	; 0000002cH
  0000d	75 0e		 jne	 SHORT $LN6@AtlWinModu

; 8403 : 
; 8404 : 	pWinModule->m_pCreateWndList = NULL;

  0000f	83 61 1c 00	 and	 DWORD PTR [ecx+28], 0

; 8405 : 
; 8406 : 	HRESULT hr = pWinModule->m_csWindowCreate.Init();

  00013	83 c1 04	 add	 ecx, 4
  00016	e8 00 00 00 00	 call	 ?Init@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Init

; 8407 : 	if (FAILED(hr))
; 8408 : 	{
; 8409 : 		ATLTRACE(atlTraceWindowing, 0, _T("ERROR : Unable to initialize critical section in AtlWinModuleInit\n"));
; 8410 : 		ATLASSERT(0);
; 8411 : 	}
; 8412 : 	return hr;

  0001b	eb 05		 jmp	 SHORT $LN1@AtlWinModu
$LN6@AtlWinModu:

; 8402 : 		return E_INVALIDARG;

  0001d	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN1@AtlWinModu:

; 8413 : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ENDP ; ATL::AtlWinModuleInit
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv284 = 8						; size = 4
_pThis$ = 8						; size = 4
_pEntries$ = 12						; size = 4
_iid$ = 16						; size = 4
_ppvObject$ = 20					; size = 4
?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z PROC ; ATL::AtlInternalQueryInterface, COMDAT

; 8265 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 8266 : 	ATLASSERT(pThis != NULL);
; 8267 : 	ATLASSERT(pEntries!= NULL);
; 8268 : 
; 8269 : 	if(pThis == NULL || pEntries == NULL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pThis$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	85 db		 test	 ebx, ebx
  0000b	0f 84 86 00 00
	00		 je	 $LN6@AtlInterna
  00011	8b 75 0c	 mov	 esi, DWORD PTR _pEntries$[ebp]
  00014	85 f6		 test	 esi, esi
  00016	74 7f		 je	 SHORT $LN6@AtlInterna

; 8271 : 
; 8272 : 	// First entry in the com map should be a simple map entry
; 8273 : 	ATLASSERT(pEntries->pFunc == _ATL_SIMPLEMAPENTRY);
; 8274 : 
; 8275 : 	if (ppvObject == NULL)

  00018	8b 7d 14	 mov	 edi, DWORD PTR _ppvObject$[ebp]
  0001b	85 ff		 test	 edi, edi
  0001d	75 07		 jne	 SHORT $LN7@AtlInterna

; 8276 : 		return E_POINTER;

  0001f	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00024	eb 76		 jmp	 SHORT $LN1@AtlInterna
$LN7@AtlInterna:

; 8277 : 
; 8278 : 	if (InlineIsEqualUnknown(iid)) // use first interface

  00026	ff 75 10	 push	 DWORD PTR _iid$[ebp]
  00029	e8 00 00 00 00	 call	 ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z ; ATL::InlineIsEqualUnknown
  0002e	85 c0		 test	 eax, eax
  00030	74 11		 je	 SHORT $LN8@AtlInterna

; 8279 : 	{
; 8280 : 		IUnknown* pUnk = (IUnknown*)((INT_PTR)pThis+pEntries->dw);

  00032	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
$LN26@AtlInterna:

; 8322 : }

  00035	03 f3		 add	 esi, ebx
  00037	56		 push	 esi
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	ff 50 04	 call	 DWORD PTR [eax+4]
  0003d	89 37		 mov	 DWORD PTR [edi], esi
$LN19@AtlInterna:
  0003f	33 c0		 xor	 eax, eax
  00041	eb 59		 jmp	 SHORT $LN1@AtlInterna
$LN8@AtlInterna:

; 8289 : 	{
; 8290 : 		if (pEntries->pFunc == NULL)

  00043	83 c6 08	 add	 esi, 8
  00046	eb 3b		 jmp	 SHORT $LN25@AtlInterna
$LL4@AtlInterna:

; 8293 : 			break;
; 8294 : 		}
; 8295 : 
; 8296 : 		BOOL bBlind = (pEntries->piid == NULL);

  00048	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  0004b	89 45 08	 mov	 DWORD PTR tv284[ebp], eax

; 8297 : 		if (bBlind || InlineIsEqualGUID(*(pEntries->piid), iid))

  0004e	85 c0		 test	 eax, eax
  00050	74 0f		 je	 SHORT $LN23@AtlInterna
  00052	ff 75 10	 push	 DWORD PTR _iid$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _InlineIsEqualGUID
  0005b	59		 pop	 ecx
  0005c	59		 pop	 ecx
  0005d	85 c0		 test	 eax, eax
  0005f	74 1f		 je	 SHORT $LN2@AtlInterna
$LN23@AtlInterna:

; 8298 : 		{
; 8299 : 			if (pEntries->pFunc == _ATL_SIMPLEMAPENTRY) //offset

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	83 f8 01	 cmp	 eax, 1
  00066	74 2a		 je	 SHORT $LN18@AtlInterna

; 8306 : 			}
; 8307 : 
; 8308 : 			// Actual function call
; 8309 : 
; 8310 : 			hRes = pEntries->pFunc(pThis,

  00068	ff 76 fc	 push	 DWORD PTR [esi-4]
  0006b	57		 push	 edi
  0006c	ff 75 10	 push	 DWORD PTR _iid$[ebp]
  0006f	53		 push	 ebx
  00070	ff d0		 call	 eax

; 8311 : 				iid, ppvObject, pEntries->dw);
; 8312 : 			if (hRes == S_OK)

  00072	85 c0		 test	 eax, eax
  00074	74 c9		 je	 SHORT $LN19@AtlInterna

; 8313 : 				return S_OK;
; 8314 : 			if (!bBlind && FAILED(hRes))

  00076	83 7d 08 00	 cmp	 DWORD PTR tv284[ebp], 0
  0007a	74 04		 je	 SHORT $LN2@AtlInterna
  0007c	85 c0		 test	 eax, eax
  0007e	78 0d		 js	 SHORT $LN20@AtlInterna
$LN2@AtlInterna:

; 8281 : 		pUnk->AddRef();
; 8282 : 		*ppvObject = pUnk;
; 8283 : 		return S_OK;
; 8284 : 	}
; 8285 : 
; 8286 : 	HRESULT hRes;
; 8287 : 
; 8288 : 	for (;; pEntries++)

  00080	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN25@AtlInterna:

; 8289 : 	{
; 8290 : 		if (pEntries->pFunc == NULL)

  00083	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00086	75 c0		 jne	 SHORT $LL4@AtlInterna

; 8291 : 		{
; 8292 : 			hRes = E_NOINTERFACE;

  00088	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
$LN20@AtlInterna:

; 8315 : 				break;
; 8316 : 		}
; 8317 : 	}
; 8318 : 
; 8319 : 	*ppvObject = NULL;

  0008d	83 27 00	 and	 DWORD PTR [edi], 0

; 8320 : 
; 8321 : 	return hRes;

  00090	eb 0a		 jmp	 SHORT $LN1@AtlInterna
$LN18@AtlInterna:

; 8300 : 			{
; 8301 : 				ATLASSERT(!bBlind);
; 8302 : 				IUnknown* pUnk = (IUnknown*)((INT_PTR)pThis+pEntries->dw);

  00092	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]

; 8303 : 				pUnk->AddRef();
; 8304 : 				*ppvObject = pUnk;
; 8305 : 				return S_OK;

  00095	eb 9e		 jmp	 SHORT $LN26@AtlInterna
$LN6@AtlInterna:

; 8270 : 		return E_INVALIDARG;

  00097	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
$LN1@AtlInterna:
  0009c	5f		 pop	 edi

; 8322 : }

  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	5d		 pop	 ebp
  000a0	c2 10 00	 ret	 16			; 00000010H
?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ENDP ; ATL::AtlInternalQueryInterface
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 236  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 237  : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);
; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 0e		 js	 SHORT $LN3@operator
  0000a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0000d	7d 09		 jge	 SHORT $LN3@operator

; 241  : 		}
; 242  : 		return m_aT[nIndex];

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]

; 243  : 	}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@operator:

; 239  : 		{
; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

  00018	6a 01		 push	 1
  0001a	68 8c 00 00 c0	 push	 -1073741684		; c000008cH
  0001f	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
$LN5@operator:
  00024	cc		 int	 3
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		if(m_aT != NULL)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0b		 je	 SHORT $LN5@RemoveAll

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 _free

; 221  : 			m_aT = NULL;

  0000f	83 26 00	 and	 DWORD PTR [esi], 0
  00012	59		 pop	 ecx
$LN5@RemoveAll:

; 222  : 		}
; 223  : 		m_nSize = 0;

  00013	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 224  : 		m_nAllocSize = 0;

  00017	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  0001b	5e		 pop	 esi

; 225  :     }

  0001c	c3		 ret	 0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z PROC ; ATL::CComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx

; 328  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 329  :         if(this->p!=lp)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lp$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 07		 mov	 eax, DWORD PTR [edi]
  0000c	3b c6		 cmp	 eax, esi
  0000e	74 1e		 je	 SHORT $LN14@operator

; 169  :         p = lp;

  00010	8b d0		 mov	 edx, eax

; 170  :         if (p != NULL)

  00012	85 f6		 test	 esi, esi
  00014	74 08		 je	 SHORT $LN7@operator

; 171  :             p->AddRef();

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	56		 push	 esi
  00019	ff 50 04	 call	 DWORD PTR [eax+4]
  0001c	8b 17		 mov	 edx, DWORD PTR [edi]
$LN7@operator:

; 177  :         other.p = pTemp;

  0001e	89 37		 mov	 DWORD PTR [edi], esi
  00020	8b c6		 mov	 eax, esi

; 183  :         if (p)

  00022	85 d2		 test	 edx, edx
  00024	74 08		 je	 SHORT $LN14@operator

; 184  :             p->Release();

  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	52		 push	 edx
  00029	ff 50 08	 call	 DWORD PTR [eax+8]
  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
$LN14@operator:

; 330  :         {
; 331  :             CComPtr(lp).Swap(*this);
; 332  :         }
; 333  :         return *this;

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 334  :     }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z ENDP ; ATL::CComPtr<IUnknown>::operator=
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
;	COMDAT ?Init@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
?Init@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Init, COMDAT
; _this$ = ecx

; 143  : 	{

  00000	56		 push	 esi

; 144  : 		HRESULT hRes = S_OK;

  00001	33 f6		 xor	 esi, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00003	56		 push	 esi
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionEx@12
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 145  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

  0000c	85 c0		 test	 eax, eax
  0000e	75 14		 jne	 SHORT $LN2@Init

; 146  : 		{
; 147  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h

; 29051: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00016	0f b7 f0	 movzx	 esi, ax
  00019	81 ce 00 00 07
	80		 or	 esi, -2147024896	; 80070000H
  0001f	85 c0		 test	 eax, eax
  00021	0f 4e f0	 cmovle	 esi, eax
$LN2@Init:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 150  : 		return hRes;

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi

; 151  : 	}

  00027	c3		 ret	 0
?Init@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Init
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
_lpCriticalSection$ = 8					; size = 4
_dwSpinCount$ = 12					; size = 4
_Flags$ = 16						; size = 4
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00003	ff 75 10	 push	 DWORD PTR _Flags$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwSpinCount$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _lpCriticalSection$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionEx@12

; 731  : #else
; 732  : 	UNREFERENCED_PARAMETER(Flags);
; 733  : 
; 734  : 	// ...otherwise fall back to using InitializeCriticalSectionAndSpinCount.
; 735  : 	return ::InitializeCriticalSectionAndSpinCount(lpCriticalSection, dwSpinCount);
; 736  : #endif
; 737  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
_dwExceptionCode$ = 8					; size = 4
_dwExceptionFlags$ = 12					; size = 4
?_AtlRaiseException@ATL@@YAXKK@Z PROC			; ATL::_AtlRaiseException, COMDAT

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 0c	 push	 DWORD PTR _dwExceptionFlags$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _dwExceptionCode$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RaiseException@16

; 32   : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@H@ATL@@YAJPAHHH@Z
_TEXT	SEGMENT
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@H@ATL@@YAJPAHHH@Z PROC			; ATL::AtlMultiply<int>, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	__int64 i64Result=static_cast<__int64>(iLeft) * static_cast<__int64>(iRight);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  00006	f7 6d 10	 imul	 DWORD PTR _iRight$[ebp]
  00009	8b c8		 mov	 ecx, eax

; 122  : 	if(i64Result>INT_MAX || i64Result < INT_MIN)

  0000b	85 d2		 test	 edx, edx
  0000d	7f 22		 jg	 SHORT $LN3@AtlMultipl
  0000f	7c 08		 jl	 SHORT $LN7@AtlMultipl
  00011	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00017	77 18		 ja	 SHORT $LN3@AtlMultipl
$LN7@AtlMultipl:
  00019	83 fa ff	 cmp	 edx, -1
  0001c	7c 13		 jl	 SHORT $LN3@AtlMultipl
  0001e	7f 08		 jg	 SHORT $LN8@AtlMultipl
  00020	81 f9 00 00 00
	80		 cmp	 ecx, -2147483648	; 80000000H
  00026	72 09		 jb	 SHORT $LN3@AtlMultipl
$LN8@AtlMultipl:

; 125  : 	}
; 126  : 	*piResult=static_cast<int>(i64Result);

  00028	8b 45 08	 mov	 eax, DWORD PTR _piResult$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 127  : 	return S_OK;

  0002d	33 c0		 xor	 eax, eax

; 128  : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN3@AtlMultipl:

; 123  : 	{
; 124  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  00031	b8 16 02 07 80	 mov	 eax, -2147024362	; 80070216H

; 128  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$AtlMultiply@H@ATL@@YAJPAHHH@Z ENDP			; ATL::AtlMultiply<int>
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 97   : 	ATLASSERT( false );
; 98   : 	DWORD dwExceptionCode;
; 99   : 	switch(hr)
; 100  : 	{
; 101  : 	case E_OUTOFMEMORY:
; 102  : 		dwExceptionCode = STATUS_NO_MEMORY;
; 103  : 		break;
; 104  : 	default:
; 105  : 		dwExceptionCode = EXCEPTION_ILLEGAL_INSTRUCTION;
; 106  : 	}
; 107  : 	_AtlRaiseException((DWORD)dwExceptionCode);

  00003	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  0000a	b8 1d 00 00 c0	 mov	 eax, -1073741795	; c000001dH
  0000f	6a 01		 push	 1
  00011	8d 48 fa	 lea	 ecx, DWORD PTR [eax-6]
  00014	0f 44 c1	 cmove	 eax, ecx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
$LN7@AtlThrowIm:
  0001d	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogsp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\guiddef.h
;	COMDAT _InlineIsEqualGUID
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_InlineIsEqualGUID PROC					; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 152  :    return (

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _rguid2$[ebp]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000d	75 1d		 jne	 SHORT $LN3@InlineIsEq
  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00012	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00015	75 15		 jne	 SHORT $LN3@InlineIsEq
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0001d	75 0d		 jne	 SHORT $LN3@InlineIsEq
  0001f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00022	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00025	75 05		 jne	 SHORT $LN3@InlineIsEq
  00027	33 c0		 xor	 eax, eax
  00029	40		 inc	 eax

; 153  :       ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
; 154  :       ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
; 155  :       ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
; 156  :       ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
; 157  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN3@InlineIsEq:

; 152  :    return (

  0002c	33 c0		 xor	 eax, eax

; 153  :       ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
; 154  :       ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
; 155  :       ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
; 156  :       ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
; 157  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_InlineIsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ??_I@YGXPAXIIP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIIP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR ___s$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  0000a	0f af c6	 imul	 eax, esi
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
  00011	03 f8		 add	 edi, eax
  00013	85 f6		 test	 esi, esi
  00015	74 0d		 je	 SHORT $LN6@vector
$LL2@vector:
  00017	2b 7d 0c	 sub	 edi, DWORD PTR ___s$[ebp]
  0001a	8b cf		 mov	 ecx, edi
  0001c	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001f	83 ee 01	 sub	 esi, 1
  00022	75 f3		 jne	 SHORT $LL2@vector
$LN6@vector:
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
??_I@YGXPAXIIP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 12		 je	 SHORT $LN6@vector
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  0000f	8b cf		 mov	 ecx, edi
  00011	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00014	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00017	83 ee 01	 sub	 esi, 1
  0001a	75 f3		 jne	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
$LN6@vector:
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
