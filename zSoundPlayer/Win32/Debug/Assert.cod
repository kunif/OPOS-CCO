; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Develop\OPOS-CCO\Common\Assert.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG93019 DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, '!', 00H, 0aH, 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, 0aH, 00H, 'L', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'u', 00H, 0aH, 00H, 'E', 00H, 'x', 00H, 'p'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ':', 00H, ' ', 00H, '<', 00H, '%', 00H, 's', 00H, '>'
	DB	00H, 0aH, 00H, 0aH, 00H, 'P', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 'A', 00H, 'b', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, ',', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	't', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 'g', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'u', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG93020 DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'O', 00H, 'P', 00H
	DB	'O', 00H, 'S', 00H, ' ', 00H, 'C', 00H, 'C', 00H, 'O', 00H, 00H
	DB	00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_c_l
PUBLIC	__vswprintf_l
PUBLIC	___vswprintf_l
PUBLIC	__swprintf
PUBLIC	?_assert@@YAXPB_W0I@Z				; _assert
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp__DebugBreak@0:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__TerminateProcess@8:PROC
EXTRN	__imp__GetActiveWindow@0:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	___stdio_common_vswprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\Assert.cpp
_TEXT	SEGMENT
_nCode$ = -2016						; size = 4
_buffer$ = -2008					; size = 2000
__$ArrayPad$ = -4					; size = 4
_expr$ = 8						; size = 4
_filename$ = 12						; size = 4
_lineno$ = 16						; size = 4
?_assert@@YAXPB_W0I@Z PROC				; _assert

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 07 00
	00		 sub	 esp, 2016		; 000007e0H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 20 f8 ff
	ff		 lea	 edi, DWORD PTR [ebp-2016]
  00011	b9 f8 01 00 00	 mov	 ecx, 504		; 000001f8H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 49   :     TCHAR buffer[1000]; // Hope this doesn't overflow...
; 50   :     _stprintf( buffer,

  00027	8b 45 08	 mov	 eax, DWORD PTR _expr$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _lineno$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00032	52		 push	 edx
  00033	68 00 00 00 00	 push	 OFFSET $SG93019
  00038	8d 85 28 f8 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 __swprintf
  00044	83 c4 14	 add	 esp, 20			; 00000014H

; 51   :         _T("Assertion Failed!\n")
; 52   :         _T("File: %s\n")
; 53   :         _T("Line: %u\n")
; 54   :         _T("Expression: <%s>\n\n")
; 55   :         _T("Press Abort to end program, Retry to debug, Ignore to continue"),
; 56   :         filename, lineno, expr );
; 57   : 
; 58   :     int nCode = MessageBox( GetActiveWindow(), buffer,

  00047	8b f4		 mov	 esi, esp
  00049	68 12 00 01 00	 push	 65554			; 00010012H
  0004e	68 00 00 00 00	 push	 OFFSET $SG93020
  00053	8d 8d 28 f8 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00059	51		 push	 ecx
  0005a	8b fc		 mov	 edi, esp
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetActiveWindow@0
  00062	3b fc		 cmp	 edi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 85 20 f8 ff
	ff		 mov	 DWORD PTR _nCode$[ebp], eax

; 59   :         _T("Assertion within OPOS CCO"),
; 60   :         MB_ABORTRETRYIGNORE | MB_ICONHAND | MB_SETFOREGROUND );
; 61   : 
; 62   :     /* Retry: call the debugger */
; 63   :     if ( nCode == IDRETRY )

  0007d	83 bd 20 f8 ff
	ff 04		 cmp	 DWORD PTR _nCode$[ebp], 4
  00084	75 11		 jne	 SHORT $LN5@assert

; 64   :     {
; 65   :         DebugBreak();

  00086	8b f4		 mov	 esi, esp
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugBreak@0
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 66   :         return;

  00095	eb 42		 jmp	 SHORT $LN1@assert
$LN5@assert:

; 67   :     }
; 68   : 
; 69   :     /* Ignore: continue execution */
; 70   :     if ( nCode == IDIGNORE )

  00097	83 bd 20 f8 ff
	ff 05		 cmp	 DWORD PTR _nCode$[ebp], 5
  0009e	75 02		 jne	 SHORT $LN6@assert

; 71   :         return;

  000a0	eb 37		 jmp	 SHORT $LN1@assert
$LN6@assert:

; 72   : 
; 73   :     /* Abort: abort the program */
; 74   :     TerminateProcess( GetCurrentProcess(), 1 );

  000a2	8b f4		 mov	 esi, esp
  000a4	6a 01		 push	 1
  000a6	8b fc		 mov	 edi, esp
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  000ae	3b fc		 cmp	 edi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TerminateProcess@8
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@assert:

; 75   : 
; 76   : #pragma warning(disable: 4702)              // unreachable code
; 77   : 
; 78   :     for (;; )                               // Just in case...
; 79   :         Sleep(100000);

  000c3	8b f4		 mov	 esi, esp
  000c5	68 a0 86 01 00	 push	 100000			; 000186a0H
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	eb ea		 jmp	 SHORT $LN4@assert
$LN1@assert:

; 80   : }

  000d9	52		 push	 edx
  000da	8b cd		 mov	 ecx, ebp
  000dc	50		 push	 eax
  000dd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@assert
  000e3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e8	58		 pop	 eax
  000e9	5a		 pop	 edx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 e0 07 00
	00		 add	 esp, 2016		; 000007e0H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN10@assert:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN9@assert
$LN9@assert:
  00110	28 f8 ff ff	 DD	 -2008			; fffff828H
  00114	d0 07 00 00	 DD	 2000			; 000007d0H
  00118	00 00 00 00	 DD	 $LN8@assert
$LN8@assert:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?_assert@@YAXPB_W0I@Z ENDP				; _assert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __swprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__swprintf PROC						; COMDAT

; 1445 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1446 :         int _Result;
; 1447 :         va_list _ArgList;
; 1448 :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1449 :         _Result = __vswprintf_l(_Buffer, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___vswprintf_l
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1450 :         __crt_va_end(_ArgList);

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1451 :         return _Result;

  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1452 :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
__swprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT ___vswprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
___vswprintf_l PROC					; COMDAT

; 1208 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1209 :         return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	6a ff		 push	 -1
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vswprintf_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1210 :     }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
___vswprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_l PROC					; COMDAT

; 1192 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1193 :         return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

  00003	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 __vswprintf_c_l
  0001c	83 c4 14	 add	 esp, 20			; 00000014H

; 1194 :     }

  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__vswprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_c_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_c_l PROC					; COMDAT

; 1155 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1156 :         int const _Result = __stdio_common_vswprintf(

  00014	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00030	52		 push	 edx
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00039	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003c	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1157 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1158 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1159 : 
; 1160 :         return _Result < 0 ? -1 : _Result;

  0003f	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00043	7d 09		 jge	 SHORT $LN3@vswprintf_
  00045	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  0004c	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  00051	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  00054	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1161 :     }

  00057	83 c4 08	 add	 esp, 8
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
__vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
