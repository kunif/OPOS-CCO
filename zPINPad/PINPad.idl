/****************************************************************************
**
** PINPad.idl -- IDL source for PINPad.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (PINPad.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91131-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPINPad 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPINPad_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SOData")] HRESULT SOData( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.3
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(15), helpstring("property DataCount")]
        HRESULT DataCount( [out, retval] long* pDataCount );
        [propget, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [out, retval] VARIANT_BOOL* pDataEventEnabled );
        [propput, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [in] VARIANT_BOOL DataEventEnabled );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(50), helpstring("property AccountNumber")]
        HRESULT AccountNumber( [out, retval] BSTR* pAccountNumber );
        [propput, id(50), helpstring("property AccountNumber")]
        HRESULT AccountNumber( [in] BSTR AccountNumber );
        [propget, id(51), helpstring("property AdditionalSecurityInformation")]
        HRESULT AdditionalSecurityInformation( [out, retval] BSTR* pAdditionalSecurityInformation );
        [propget, id(52), helpstring("property Amount")]
        HRESULT Amount( [out, retval] CURRENCY* pAmount );
        [propput, id(52), helpstring("property Amount")]
        HRESULT Amount( [in] CURRENCY Amount );
        [propget, id(53), helpstring("property AvailableLanguagesList")]
        HRESULT AvailableLanguagesList( [out, retval] BSTR* pAvailableLanguagesList );
        [propget, id(54), helpstring("property AvailablePromptsList")]
        HRESULT AvailablePromptsList( [out, retval] BSTR* pAvailablePromptsList );
        [propget, id(55), helpstring("property CapDisplay")]
        HRESULT CapDisplay( [out, retval] long* pCapDisplay );
        [propget, id(56), helpstring("property CapKeyboard")]
        HRESULT CapKeyboard( [out, retval] VARIANT_BOOL* pCapKeyboard );
        [propget, id(57), helpstring("property CapLanguage")]
        HRESULT CapLanguage( [out, retval] long* pCapLanguage );
        [propget, id(58), helpstring("property CapMACCalculation")]
        HRESULT CapMACCalculation( [out, retval] VARIANT_BOOL* pCapMACCalculation );
        [propget, id(59), helpstring("property CapTone")]
        HRESULT CapTone( [out, retval] VARIANT_BOOL* pCapTone );
        [propget, id(60), helpstring("property EncryptedPIN")]
        HRESULT EncryptedPIN( [out, retval] BSTR* pEncryptedPIN );
        [propget, id(61), helpstring("property MaximumPINLength")]
        HRESULT MaximumPINLength( [out, retval] long* pMaximumPINLength );
        [propput, id(61), helpstring("property MaximumPINLength")]
        HRESULT MaximumPINLength( [in] long MaximumPINLength );
        [propget, id(62), helpstring("property MerchantID")]
        HRESULT MerchantID( [out, retval] BSTR* pMerchantID );
        [propput, id(62), helpstring("property MerchantID")]
        HRESULT MerchantID( [in] BSTR MerchantID );
        [propget, id(63), helpstring("property MinimumPINLength")]
        HRESULT MinimumPINLength( [out, retval] long* pMinimumPINLength );
        [propput, id(63), helpstring("property MinimumPINLength")]
        HRESULT MinimumPINLength( [in] long MinimumPINLength );
        [propget, id(64), helpstring("property PINEntryEnabled")]
        HRESULT PINEntryEnabled( [out, retval] VARIANT_BOOL* pPINEntryEnabled );
        [propget, id(65), helpstring("property Prompt")]
        HRESULT Prompt( [out, retval] long* pPrompt );
        [propput, id(65), helpstring("property Prompt")]
        HRESULT Prompt( [in] long Prompt );
        [propget, id(66), helpstring("property PromptLanguage")]
        HRESULT PromptLanguage( [out, retval] long* pPromptLanguage );
        [propput, id(66), helpstring("property PromptLanguage")]
        HRESULT PromptLanguage( [in] long PromptLanguage );
        [propget, id(67), helpstring("property TerminalID")]
        HRESULT TerminalID( [out, retval] BSTR* pTerminalID );
        [propput, id(67), helpstring("property TerminalID")]
        HRESULT TerminalID( [in] BSTR TerminalID );
        [propget, id(68), helpstring("property Track1Data")]
        HRESULT Track1Data( [out, retval] BSTR* pTrack1Data );
        [propput, id(68), helpstring("property Track1Data")]
        HRESULT Track1Data( [in] BSTR Track1Data );
        [propget, id(69), helpstring("property Track2Data")]
        HRESULT Track2Data( [out, retval] BSTR* pTrack2Data );
        [propput, id(69), helpstring("property Track2Data")]
        HRESULT Track2Data( [in] BSTR Track2Data );
        [propget, id(70), helpstring("property Track3Data")]
        HRESULT Track3Data( [out, retval] BSTR* pTrack3Data );
        [propput, id(70), helpstring("property Track3Data")]
        HRESULT Track3Data( [in] BSTR Track3Data );
        [propget, id(71), helpstring("property TransactionType")]
        HRESULT TransactionType( [out, retval] long* pTransactionType );
        [propput, id(71), helpstring("property TransactionType")]
        HRESULT TransactionType( [in] long TransactionType );
        [id(80), helpstring("method BeginEFTTransaction")]
        HRESULT BeginEFTTransaction( 
            [in] BSTR PINPadSystem, 
            [in] long TransactionHost, 
            [out, retval] long* pRC );
        [id(81), helpstring("method ComputeMAC")]
        HRESULT ComputeMAC( 
            [in] BSTR InMsg, 
            [out] BSTR* pOutMsg, 
            [out, retval] long* pRC );
        [id(82), helpstring("method EnablePINEntry")]
        HRESULT EnablePINEntry( 
            [out, retval] long* pRC );
        [id(83), helpstring("method EndEFTTransaction")]
        HRESULT EndEFTTransaction( 
            [in] long CompletionCode, 
            [out, retval] long* pRC );
        [id(84), helpstring("method UpdateKey")]
        HRESULT UpdateKey( 
            [in] long KeyNum, 
            [in] BSTR Key, 
            [out, retval] long* pRC );
        [id(85), helpstring("method VerifyMAC")]
        HRESULT VerifyMAC( 
            [in] BSTR Message, 
            [out, retval] long* pRC );
    // Release 1.4
    // Release 1.5
        [propget, id(72), helpstring("property Track4Data")]
        HRESULT Track4Data( [out, retval] BSTR* pTrack4Data );
        [propput, id(72), helpstring("property Track4Data")]
        HRESULT Track4Data( [in] BSTR Track4Data );
    // Release 1.6
    // Release 1.7
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB92131-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPINPad 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPINPad_1_8 : IOPOSPINPad_1_5
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Previous Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB93131-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPINPad 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPINPad_1_9 : IOPOSPINPad_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
    };

//
//========== Current Interface: 1.10 ==========
//

    [
        object,
        uuid(CCB94131-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPINPad 1.10 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPINPad_1_10 : IOPOSPINPad_1_9
    {
    // Release 1.10
        [id(48), helpstring("method ClearInputProperties")]
        HRESULT ClearInputProperties( 
            [out, retval] long* pRC );
    // Release 1.11
    // Release 1.12
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSPINPad Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB95131-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSPINPad Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSPINPad : IOPOSPINPad_1_10
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90130-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS PINPad Control 1.15.000 [Public, by CRM/MCS]")
]
library OposPINPad_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90133-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSPINPadEvents Interface")
    ]
    dispinterface _IOPOSPINPadEvents
    {
        properties:
        methods:
        [id(1), helpstring("method DataEvent")]
            void DataEvent( [in] long Status );
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90132-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS PINPad Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSPINPad
    {
        [default] interface IOPOSPINPad;
        interface IOPOSPINPad_1_10;
        interface IOPOSPINPad_1_9;
        interface IOPOSPINPad_1_8;
        interface IOPOSPINPad_1_5;
        [default, source] dispinterface _IOPOSPINPadEvents;
    };
};

// End PINPad.idl
