; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?WM_ATLGETHOST@ATL@@3IA				; ATL::WM_ATLGETHOST
PUBLIC	?WM_ATLGETCONTROL@ATL@@3IA			; ATL::WM_ATLGETCONTROL
PUBLIC	?g_WindowName@@3PA_WA				; g_WindowName
PUBLIC	?g_ControlDescription@@3PADA			; g_ControlDescription
PUBLIC	LIBID_ATLLib
PUBLIC	__pobjMapEntryFirst
PUBLIC	__pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPEAUHINSTANCE__@@@ZEA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZEA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?s_nInstances@COPOSDeviceMonitor@@1HA		; COPOSDeviceMonitor::s_nInstances
PUBLIC	?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA		; ATL::_pAtlModule
PUBLIC	?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B ; `COPOSDeviceMonitor::GetConnMap'::`2'::_entries
PUBLIC	?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
PUBLIC	?_pModule@ATL@@3PEAVCComModule@1@EA		; ATL::_pModule
PUBLIC	?g_ControlVersion@@3JA				; g_ControlVersion
PUBLIC	??_C@_0P@MMNMMLGK@COFreezeEvents@		; `string'
PUBLIC	??_C@_0BC@OGCGGIMP@GetPropertyNumber@		; `string'
PUBLIC	??_C@_0BC@MDCNODNB@SetPropertyNumber@		; `string'
PUBLIC	??_C@_0BC@CFCCMIMD@GetPropertyString@		; `string'
PUBLIC	??_C@_0BC@CJEDNN@SetPropertyString@		; `string'
PUBLIC	??_C@_0M@LNPKKKDA@OpenService@			; `string'
PUBLIC	??_C@_0M@PCMCHHMH@CheckHealth@			; `string'
PUBLIC	??_C@_0M@JGMIDNEK@ClaimDevice@			; `string'
PUBLIC	??_C@_0L@BNEIFEJC@ClearInput@			; `string'
PUBLIC	??_C@_0N@DDFIIBMP@CloseService@			; `string'
PUBLIC	??_C@_08EEIHICPC@DirectIO@			; `string'
PUBLIC	??_C@_0O@BCPMENMJ@ReleaseDevice@		; `string'
PUBLIC	??_C@_0BA@GFABKEEE@ResetStatistics@		; `string'
PUBLIC	??_C@_0BD@DPALHJGC@RetrieveStatistics@		; `string'
PUBLIC	??_C@_0BB@KOHIKNFC@UpdateStatistics@		; `string'
PUBLIC	??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@	; `string'
PUBLIC	??_C@_0P@FBPDPIPA@UpdateFirmware@		; `string'
PUBLIC	??_C@_0BF@CMAPCJGM@ClearInputProperties@	; `string'
PUBLIC	??_C@_0BE@NEMFCMIH@AddMonitoringDevice@		; `string'
PUBLIC	??_C@_0BG@JOGJDLPM@ClearMonitoringDevice@	; `string'
PUBLIC	??_C@_0BH@FJFNDOHE@DeleteMonitoringDevice@	; `string'
PUBLIC	??_C@_0P@NALLAHBD@GetDeviceValue@		; `string'
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PEAUIAtlAutoThreadModule@1@EA ; ATL::_pAtlAutoThreadModule
PUBLIC	??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@ ; `string'
PUBLIC	??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@ ; `string'
PUBLIC	??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@ ; `string'
PUBLIC	??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@ ; `string'
PUBLIC	??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@ ; `string'
PUBLIC	??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@ ; `string'
PUBLIC	??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@ ; `string'
PUBLIC	??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ ; `string'
PUBLIC	??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@ ; `string'
PUBLIC	?chDirSep@ATL@@3_WB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3_WB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3_WB			; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3_WB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3_WB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QEB_WEB			; ATL::szStringVal
PUBLIC	??_C@_13HADIAKP@?$AAS@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QEB_WEB			; ATL::multiszStringVal
PUBLIC	??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@ ; `string'
PUBLIC	??_C@_13LHMFKAAD@?$AAM@				; `string'
PUBLIC	?szDwordVal@ATL@@3QEB_WEB			; ATL::szDwordVal
PUBLIC	??_C@_13MKMNOPIJ@?$AAD@				; `string'
PUBLIC	?szBinaryVal@ATL@@3QEB_WEB			; ATL::szBinaryVal
PUBLIC	??_C@_13OPKGLAFF@?$AAB@				; `string'
PUBLIC	?szValToken@ATL@@3QEB_WEB			; ATL::szValToken
PUBLIC	??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@		; `string'
PUBLIC	?szForceRemove@ATL@@3QEB_WEB			; ATL::szForceRemove
PUBLIC	??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; `string'
PUBLIC	?szNoRemove@ATL@@3QEB_WEB			; ATL::szNoRemove
PUBLIC	??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; `string'
PUBLIC	?szDelete@ATL@@3QEB_WEB				; ATL::szDelete
PUBLIC	??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@ ; `string'
PUBLIC	??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@ ; `string'
PUBLIC	??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@ ; `string'
PUBLIC	??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@ ; `string'
PUBLIC	CLSID_Registrar
PUBLIC	IID_IRegistrar
PUBLIC	IID_IDocHostUIHandlerDispatch
PUBLIC	IID_IAxWinHostWindow
PUBLIC	IID_IAxWinHostWindowLic
PUBLIC	IID_IAxWinAmbientDispatch
PUBLIC	IID_IAxWinAmbientDispatchEx
PUBLIC	IID_IInternalConnection
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
EXTRN	_Init_thread_epoch:DWORD
EXTRN	__ImageBase:ZWORD
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
;	COMDAT ?WM_ATLGETHOST@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETHOST@ATL@@3IA DD 01H DUP (?)			; ATL::WM_ATLGETHOST
_BSS	ENDS
;	COMDAT ?WM_ATLGETCONTROL@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETCONTROL@ATL@@3IA DD 01H DUP (?)		; ATL::WM_ATLGETCONTROL
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPEAUHINSTANCE__@@@ZEA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPEAUHINSTANCE__@@@ZEA DQ 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZEA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZEA DQ 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
_BSS	SEGMENT
?s_nInstances@COPOSDeviceMonitor@@1HA DD 01H DUP (?)	; COPOSDeviceMonitor::s_nInstances
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA
_BSS	SEGMENT
?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA DQ 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B
_BSS	SEGMENT
?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B DQ 03H DUP (?) ; `COPOSDeviceMonitor::GetConnMap'::`2'::_entries
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA DD 01H DUP (?) ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PEAVCComModule@1@EA
_BSS	SEGMENT
?_pModule@ATL@@3PEAVCComModule@1@EA DQ 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PEAUIAtlAutoThreadModule@1@EA
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PEAUIAtlAutoThreadModule@1@EA DQ 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT IID_IInternalConnection
CONST	SEGMENT
IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT IID_IAxWinAmbientDispatch
CONST	SEGMENT
IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT IID_IAxWinHostWindowLic
CONST	SEGMENT
IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT IID_IAxWinHostWindow
CONST	SEGMENT
IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT IID_IRegistrar
CONST	SEGMENT
IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT CLSID_Registrar
CONST	SEGMENT
CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@
CONST	SEGMENT
??_C@_1BM@FHAEDBFK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAI?$AAS?$AAA?$AAP?$AAI@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'I', 00H, 'S', 00H, 'A', 00H, 'P', 00H, 'I', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@
CONST	SEGMENT
??_C@_1BK@OPAPOCAL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAy?$AAn?$AAc@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@
CONST	SEGMENT
??_C@_1CC@DMMBNCFG@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@
CONST	SEGMENT
??_C@_1BK@DMHCKHHD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAU?$AAt?$AAi?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'U', 00H, 't', 00H, 'i', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@
CONST	SEGMENT
??_C@_1BI@OKDLCIEM@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAM?$AAa?$AAp@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@
CONST	SEGMENT
??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ DB 'D', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 't', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QEB_WEB
CONST	SEGMENT
?szDelete@ATL@@3QEB_WEB DQ FLAT:??_C@_1O@JDLOHAN@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@
CONST	SEGMENT
??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ DB 'N', 00H, 'o'
	DB	00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QEB_WEB
CONST	SEGMENT
?szNoRemove@ATL@@3QEB_WEB DQ FLAT:??_C@_1BC@GCKHIPE@?$AAN?$AAo?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@
CONST	SEGMENT
??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ DB 'F'
	DB	00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QEB_WEB
CONST	SEGMENT
?szForceRemove@ATL@@3QEB_WEB DQ FLAT:??_C@_1BI@JFAIJMHL@?$AAF?$AAo?$AAr?$AAc?$AAe?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@ DB 'V', 00H, 'a', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QEB_WEB
CONST	SEGMENT
?szValToken@ATL@@3QEB_WEB DQ FLAT:??_C@_17LLMMEOJD@?$AAV?$AAa?$AAl@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_13OPKGLAFF@?$AAB@
CONST	SEGMENT
??_C@_13OPKGLAFF@?$AAB@ DB 'B', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QEB_WEB
CONST	SEGMENT
?szBinaryVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13OPKGLAFF@?$AAB@ ; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ??_C@_13MKMNOPIJ@?$AAD@
CONST	SEGMENT
??_C@_13MKMNOPIJ@?$AAD@ DB 'D', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QEB_WEB
CONST	SEGMENT
?szDwordVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13MKMNOPIJ@?$AAD@ ; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_13LHMFKAAD@?$AAM@
CONST	SEGMENT
??_C@_13LHMFKAAD@?$AAM@ DB 'M', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@
CONST	SEGMENT
??_C@_1CA@PBPHANCD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'i'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QEB_WEB
CONST	SEGMENT
?multiszStringVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13LHMFKAAD@?$AAM@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_13HADIAKP@?$AAS@
CONST	SEGMENT
??_C@_13HADIAKP@?$AAS@ DB 'S', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QEB_WEB
CONST	SEGMENT
?szStringVal@ATL@@3QEB_WEB DQ FLAT:??_C@_13HADIAKP@?$AAS@ ; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3_WB
CONST	SEGMENT
?chEquals@ATL@@3_WB DW 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3_WB
CONST	SEGMENT
?chQuote@ATL@@3_WB DW 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3_WB
CONST	SEGMENT
?chLeftBracket@ATL@@3_WB DW 07bH			; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3_WB
CONST	SEGMENT
?chRightBracket@ATL@@3_WB DW 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3_WB
CONST	SEGMENT
?chDirSep@ATL@@3_WB DW 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@
CONST	SEGMENT
??_C@_1BM@GIKLHLFD@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAa?$AAc?$AAh?$AAe@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@
CONST	SEGMENT
??_C@_1BK@NCJHOFCL@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
CONST	SEGMENT
??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@
CONST	SEGMENT
??_C@_1CG@KFEEMCDH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@
CONST	SEGMENT
??_C@_1CA@DMHPIODO@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAN?$AAo?$AAt?$AAI?$AAm?$AAp?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'I', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BO@EFPHNHHN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAn?$AAa?$AAp?$AAi?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@
CONST	SEGMENT
??_C@_1CG@MNMMIOOI@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAP?$AAr?$AAo?$AAv?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'D', 00H, 'B', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'v'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@
CONST	SEGMENT
??_C@_1CC@JNJJDOOH@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAD?$AAB?$AAC?$AAl?$AAi?$AAe?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'D', 00H, 'B', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1CA@OMOMONMN@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAH?$AAo?$AAs?$AAt?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@
CONST	SEGMENT
??_C@_1CC@IMNJGBED@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o'
	DB	00H, 'l', 00H, 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@
CONST	SEGMENT
??_C@_1CE@NAJDPMNB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@
CONST	SEGMENT
??_C@_1CC@BNHGJFNK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1CE@NIAEAIDK@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@
CONST	SEGMENT
??_C@_1BG@FPLJJEMF@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAQ?$AAI@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'Q', 00H, 'I', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@
CONST	SEGMENT
??_C@_1BI@MAFGHOEE@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAC?$AAO?$AAM@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@
CONST	SEGMENT
??_C@_1CA@ONGMEOAB@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NALLAHBD@GetDeviceValue@
CONST	SEGMENT
??_C@_0P@NALLAHBD@GetDeviceValue@ DB 'GetDeviceValue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FJFNDOHE@DeleteMonitoringDevice@
CONST	SEGMENT
??_C@_0BH@FJFNDOHE@DeleteMonitoringDevice@ DB 'DeleteMonitoringDevice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JOGJDLPM@ClearMonitoringDevice@
CONST	SEGMENT
??_C@_0BG@JOGJDLPM@ClearMonitoringDevice@ DB 'ClearMonitoringDevice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NEMFCMIH@AddMonitoringDevice@
CONST	SEGMENT
??_C@_0BE@NEMFCMIH@AddMonitoringDevice@ DB 'AddMonitoringDevice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CMAPCJGM@ClearInputProperties@
CONST	SEGMENT
??_C@_0BF@CMAPCJGM@ClearInputProperties@ DB 'ClearInputProperties', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FBPDPIPA@UpdateFirmware@
CONST	SEGMENT
??_C@_0P@FBPDPIPA@UpdateFirmware@ DB 'UpdateFirmware', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@
CONST	SEGMENT
??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@ DB 'CompareFirmwareVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KOHIKNFC@UpdateStatistics@
CONST	SEGMENT
??_C@_0BB@KOHIKNFC@UpdateStatistics@ DB 'UpdateStatistics', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DPALHJGC@RetrieveStatistics@
CONST	SEGMENT
??_C@_0BD@DPALHJGC@RetrieveStatistics@ DB 'RetrieveStatistics', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFABKEEE@ResetStatistics@
CONST	SEGMENT
??_C@_0BA@GFABKEEE@ResetStatistics@ DB 'ResetStatistics', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCPMENMJ@ReleaseDevice@
CONST	SEGMENT
??_C@_0O@BCPMENMJ@ReleaseDevice@ DB 'ReleaseDevice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEIHICPC@DirectIO@
CONST	SEGMENT
??_C@_08EEIHICPC@DirectIO@ DB 'DirectIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DDFIIBMP@CloseService@
CONST	SEGMENT
??_C@_0N@DDFIIBMP@CloseService@ DB 'CloseService', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNEIFEJC@ClearInput@
CONST	SEGMENT
??_C@_0L@BNEIFEJC@ClearInput@ DB 'ClearInput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGMIDNEK@ClaimDevice@
CONST	SEGMENT
??_C@_0M@JGMIDNEK@ClaimDevice@ DB 'ClaimDevice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCMCHHMH@CheckHealth@
CONST	SEGMENT
??_C@_0M@PCMCHHMH@CheckHealth@ DB 'CheckHealth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNPKKKDA@OpenService@
CONST	SEGMENT
??_C@_0M@LNPKKKDA@OpenService@ DB 'OpenService', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJEDNN@SetPropertyString@
CONST	SEGMENT
??_C@_0BC@CJEDNN@SetPropertyString@ DB 'SetPropertyString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFCCMIMD@GetPropertyString@
CONST	SEGMENT
??_C@_0BC@CFCCMIMD@GetPropertyString@ DB 'GetPropertyString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MDCNODNB@SetPropertyNumber@
CONST	SEGMENT
??_C@_0BC@MDCNODNB@SetPropertyNumber@ DB 'SetPropertyNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGCGGIMP@GetPropertyNumber@
CONST	SEGMENT
??_C@_0BC@OGCGGIMP@GetPropertyNumber@ DB 'GetPropertyNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MMNMMLGK@COFreezeEvents@
CONST	SEGMENT
??_C@_0P@MMNMMLGK@COFreezeEvents@ DB 'COFreezeEvents', 00H ; `string'
CONST	ENDS
;	COMDAT __pobjMapEntryLast
ATL$__z	SEGMENT
__pobjMapEntryLast DQ 0000000000000000H
ATL$__z	ENDS
;	COMDAT __pobjMapEntryFirst
ATL$__a	SEGMENT
__pobjMapEntryFirst DQ 0000000000000000H
ATL$__a	ENDS
;	COMDAT LIBID_ATLLib
CONST	SEGMENT
LIBID_ATLLib DD	044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
_DATA	SEGMENT
?g_WindowName@@3PA_WA DB 'H', 00H, 'W', 00H, '_', 00H, 'O', 00H, 'P', 00H
	DB	'O', 00H, 'S', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H			; g_WindowName
	ORG $+6
?g_ControlDescription@@3PADA DB 'OPOS DeviceMonitor Control 1.16.000 [Pub'
	DB	'lic, by KF]', 00H				; g_ControlDescription
?g_ControlVersion@@3JA DD 0f80c0H			; g_ControlVersion
_DATA	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YAXPEAX_K1P6AX0@Z@Z			; `vector destructor iterator'
PUBLIC	?AtlThrowImpl@ATL@@YAXJ@Z			; ATL::AtlThrowImpl
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z ; ATL::AtlInternalQueryInterface
PUBLIC	?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	??0CAtlComModule@ATL@@QEAA@XZ			; ATL::CAtlComModule::CAtlComModule
PUBLIC	?Term@CAtlComModule@ATL@@QEAAXXZ		; ATL::CAtlComModule::Term
PUBLIC	??0CAtlWinModule@ATL@@QEAA@XZ			; ATL::CAtlWinModule::CAtlWinModule
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::Add
PUBLIC	??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ ; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
PUBLIC	??1CComControlBase@ATL@@UEAA@XZ			; ATL::CComControlBase::~CComControlBase
PUBLIC	??0OposVariant@@QEAA@XZ				; OposVariant::OposVariant
PUBLIC	??1OposVariant@@QEAA@XZ				; OposVariant::~OposVariant
PUBLIC	??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
PUBLIC	??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
PUBLIC	?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface
PUBLIC	?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAU_GUID@@@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface
PUBLIC	?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIConnectionPointContainer@@@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer
PUBLIC	?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise
PUBLIC	?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise
PUBLIC	?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::EnumConnections
PUBLIC	?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent
PUBLIC	?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent
PUBLIC	?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent
PUBLIC	?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent
PUBLIC	?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
PUBLIC	??0COPOSDeviceMonitor@@QEAA@XZ			; COPOSDeviceMonitor::COPOSDeviceMonitor
PUBLIC	?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ	; COPOSDeviceMonitor::FinalConstruct
PUBLIC	??1COPOSDeviceMonitor@@UEAA@XZ			; COPOSDeviceMonitor::~COPOSDeviceMonitor
PUBLIC	?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z	; COPOSDeviceMonitor::GetOposProp
PUBLIC	?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z	; COPOSDeviceMonitor::SetOposProp
PUBLIC	?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z	; COPOSDeviceMonitor::GetOposProp
PUBLIC	?SetOposProp@COPOSDeviceMonitor@@IEAAJJFJ@Z	; COPOSDeviceMonitor::SetOposProp
PUBLIC	?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
PUBLIC	?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z	; COPOSDeviceMonitor::SetOposProp
PUBLIC	?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
PUBLIC	?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z	; COPOSDeviceMonitor::SetCOFreezeEvents
PUBLIC	?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z	; COPOSDeviceMonitor::FreezeEvents
PUBLIC	?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z ; COPOSDeviceMonitor::OnDraw
PUBLIC	?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z ; COPOSDeviceMonitor::GetConnMap
PUBLIC	?EventInit@COPOSDeviceMonitor@@IEAAJXZ		; COPOSDeviceMonitor::EventInit
PUBLIC	?EventUninit@COPOSDeviceMonitor@@IEAAXXZ	; COPOSDeviceMonitor::EventUninit
PUBLIC	?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z ; COPOSDeviceMonitor::s_EventWindowProc
PUBLIC	?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z ; COPOSDeviceMonitor::EventWindowProc
PUBLIC	?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::SOProcessID
PUBLIC	?get_OpenResult@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::get_OpenResult
PUBLIC	?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_AutoDisable
PUBLIC	?put_AutoDisable@COPOSDeviceMonitor@@UEAAJF@Z	; COPOSDeviceMonitor::put_AutoDisable
PUBLIC	?get_BinaryConversion@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::get_BinaryConversion
PUBLIC	?put_BinaryConversion@COPOSDeviceMonitor@@UEAAJJ@Z ; COPOSDeviceMonitor::put_BinaryConversion
PUBLIC	?get_CapPowerReporting@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::get_CapPowerReporting
PUBLIC	?get_CheckHealthText@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_CheckHealthText
PUBLIC	?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z	; COPOSDeviceMonitor::get_Claimed
PUBLIC	?get_DataCount@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::get_DataCount
PUBLIC	?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_DataEventEnabled
PUBLIC	?put_DataEventEnabled@COPOSDeviceMonitor@@UEAAJF@Z ; COPOSDeviceMonitor::put_DataEventEnabled
PUBLIC	?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_DeviceEnabled
PUBLIC	?put_DeviceEnabled@COPOSDeviceMonitor@@UEAAJF@Z	; COPOSDeviceMonitor::put_DeviceEnabled
PUBLIC	?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_FreezeEvents
PUBLIC	?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z	; COPOSDeviceMonitor::put_FreezeEvents
PUBLIC	?get_PowerNotify@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::get_PowerNotify
PUBLIC	?put_PowerNotify@COPOSDeviceMonitor@@UEAAJJ@Z	; COPOSDeviceMonitor::put_PowerNotify
PUBLIC	?get_PowerState@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::get_PowerState
PUBLIC	?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::get_ResultCode
PUBLIC	?get_ResultCodeExtended@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::get_ResultCodeExtended
PUBLIC	?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::get_State
PUBLIC	?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_ControlObjectDescription
PUBLIC	?get_ControlObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::get_ControlObjectVersion
PUBLIC	?get_ServiceObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_ServiceObjectDescription
PUBLIC	?get_ServiceObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::get_ServiceObjectVersion
PUBLIC	?get_DeviceDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_DeviceDescription
PUBLIC	?get_DeviceName@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_DeviceName
PUBLIC	?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_CapStatisticsReporting
PUBLIC	?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_CapUpdateStatistics
PUBLIC	?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_CapCompareFirmwareVersion
PUBLIC	?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z ; COPOSDeviceMonitor::get_CapUpdateFirmware
PUBLIC	?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z	; COPOSDeviceMonitor::CheckHealth
PUBLIC	?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z	; COPOSDeviceMonitor::ClaimDevice
PUBLIC	?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::ClearInput
PUBLIC	?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z		; COPOSDeviceMonitor::Close
PUBLIC	?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z ; COPOSDeviceMonitor::DirectIO
PUBLIC	?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z	; COPOSDeviceMonitor::Open
PUBLIC	?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z	; COPOSDeviceMonitor::ReleaseDevice
PUBLIC	?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ; COPOSDeviceMonitor::ResetStatistics
PUBLIC	?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z ; COPOSDeviceMonitor::RetrieveStatistics
PUBLIC	?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ; COPOSDeviceMonitor::UpdateStatistics
PUBLIC	?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z ; COPOSDeviceMonitor::CompareFirmwareVersion
PUBLIC	?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ; COPOSDeviceMonitor::UpdateFirmware
PUBLIC	?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::ClearInputProperties
PUBLIC	?get_DeviceData@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_DeviceData
PUBLIC	?get_DeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_DeviceList
PUBLIC	?get_MonitoringDeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ; COPOSDeviceMonitor::get_MonitoringDeviceList
PUBLIC	?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z ; COPOSDeviceMonitor::AddMonitoringDevice
PUBLIC	?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::ClearMonitoringDevice
PUBLIC	?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ; COPOSDeviceMonitor::DeleteMonitoringDevice
PUBLIC	?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z ; COPOSDeviceMonitor::GetDeviceValue
PUBLIC	??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
PUBLIC	?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next
PUBLIC	?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJK@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip
PUBLIC	?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJXZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset
PUBLIC	?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone
PUBLIC	?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
PUBLIC	??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
PUBLIC	?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef
PUBLIC	?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release
PUBLIC	?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface
PUBLIC	?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
PUBLIC	??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor'
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	?_AtlComModule@ATL@@3VCAtlComModule@1@A		; ATL::_AtlComModule
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	_GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	_GUID_b196b287_bab4_101a_b69c_00aa00341d07
PUBLIC	?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap
PUBLIC	??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@ ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::`vftable'
PUBLIC	??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@ ; `string'
PUBLIC	??_C@_0DA@HGCACNPB@SOFTWARE?2OLEforRetail?2ServiceOP@ ; `string'
PUBLIC	??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@	; `string'
PUBLIC	??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@	; `string'
PUBLIC	??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_0O@HKCCFACK@DeviceMonitor@		; `string'
PUBLIC	??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ ; `string'
PUBLIC	??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	_GUID_b196b286_bab4_101a_b69c_00aa00341d07
PUBLIC	??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vftable'
PUBLIC	?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SAPEBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
EXTRN	_purecall:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPEAX_K@Z:PROC				; operator delete[]
EXTRN	atexit:PROC
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	calloc:PROC
EXTRN	free:PROC
EXTRN	_recalloc:PROC
EXTRN	??2@YAPEAX_KAEBUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??_U@YAPEAX_KAEBUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__imp_DecodePointer:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_RaiseException:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_InitializeCriticalSectionEx:PROC
EXTRN	__imp_DeleteCriticalSection:PROC
EXTRN	__imp_SetEvent:PROC
EXTRN	__imp_CreateMutexW:PROC
EXTRN	__imp_CreateEventW:PROC
EXTRN	__imp_GetCurrentProcessId:PROC
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_BitBlt:PROC
EXTRN	__imp_CreateCompatibleDC:PROC
EXTRN	__imp_DeleteObject:PROC
EXTRN	__imp_SelectObject:PROC
EXTRN	__imp_GetObjectW:PROC
EXTRN	__imp_PeekMessageW:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_UnregisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_DestroyWindow:PROC
EXTRN	__imp_GetWindowLongPtrW:PROC
EXTRN	__imp_SetWindowLongPtrW:PROC
EXTRN	__imp_LoadBitmapW:PROC
EXTRN	__imp_RegCloseKey:PROC
EXTRN	__imp_RegOpenKeyExW:PROC
EXTRN	__imp_RegQueryValueExW:PROC
EXTRN	__imp_CoCreateInstance:PROC
EXTRN	__imp_CLSIDFromProgID:PROC
EXTRN	__imp_SysAllocString:PROC
EXTRN	__imp_SysFreeString:PROC
EXTRN	__imp_SysStringLen:PROC
EXTRN	__imp_VariantClear:PROC
EXTRN	AtlThunk_FreeData:PROC
EXTRN	?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z:PROC	; OposVariant::SetVARIANT_BOOL
EXTRN	?GetLONG@OposVariant@@QEAAJXZ:PROC		; OposVariant::GetLONG
EXTRN	?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z:PROC	; OposVariant::ChangeLONG
EXTRN	?SetLONG@OposVariant@@QEAAXJ@Z:PROC		; OposVariant::SetLONG
EXTRN	?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z:PROC	; OposVariant::SetLONG_Ptr
EXTRN	?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z:PROC ; OposVariant::ChangeBSTR
EXTRN	?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z:PROC	; OposVariant::SetBSTR
EXTRN	?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z:PROC ; OposVariant::SetBSTR_InOutPtr
EXTRN	?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z:PROC	; OposVariant::SetString
EXTRN	?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z:PROC ; OposVariant::SetDispatch_Ptr
EXTRN	??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z:PROC ; OposDispParms::OposDispParms
EXTRN	??1OposDispParms@@QEAA@XZ:PROC			; OposDispParms::~OposDispParms
EXTRN	?cw_strcpy@@YAHPEA_WPEBD@Z:PROC			; cw_strcpy
EXTRN	?DupWide@_CW@@AEAAXXZ:PROC			; _CW::DupWide
EXTRN	??_E?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z:PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vector deleting destructor'
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memset:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	IID_IUnknown:BYTE
EXTRN	GUID_NULL:BYTE
EXTRN	IID_IDispatch:BYTE
EXTRN	DIID__IOPOSDeviceMonitorEvents:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ?_AtlComModule@ATL@@3VCAtlComModule@1@A
_BSS	SEGMENT
?_AtlComModule@ATL@@3VCAtlComModule@1@A DB 048H DUP (?)	; ATL::_AtlComModule
_BSS	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 048H DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
;	COMDAT ?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB
_BSS	SEGMENT
?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB DQ 01H DUP (?) ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN12
	DD	imagerel $LN12+72
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_I@YAXPEAX_K1P6AX0@Z@Z DD imagerel $LN12
	DD	imagerel $LN12+79
	DD	imagerel $unwind$??_I@YAXPEAX_K1P6AX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtlThrowImpl@ATL@@YAXJ@Z DD imagerel $LN8
	DD	imagerel $LN8+36
	DD	imagerel $unwind$?AtlThrowImpl@ATL@@YAXJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Init@CComCriticalSection@ATL@@QEAAJXZ DD imagerel $LN9
	DD	imagerel $LN9+51
	DD	imagerel $unwind$?Init@CComCriticalSection@ATL@@QEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Term@CComCriticalSection@ATL@@QEAAJXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?Term@CComCriticalSection@ATL@@QEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIDispatch@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIDispatch@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIDispatch@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIDispatch@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$CComPtrBase@UIUnknown@@@ATL@@IEAA@PEAUIUnknown@@@Z DD imagerel $LN5
	DD	imagerel $LN5+35
	DD	imagerel $unwind$??0?$CComPtrBase@UIUnknown@@@ATL@@IEAA@PEAUIUnknown@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIUnknown@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIUnknown@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$CComPtr@UIUnknown@@@ATL@@QEAA@PEAUIUnknown@@@Z DD imagerel $LN8
	DD	imagerel $LN8+35
	DD	imagerel $unwind$??0?$CComPtr@UIUnknown@@@ATL@@QEAA@PEAUIUnknown@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$CComPtr@UIUnknown@@@ATL@@QEAA@AEBV01@@Z DD imagerel $LN8
	DD	imagerel $LN8+35
	DD	imagerel $unwind$??0?$CComPtr@UIUnknown@@@ATL@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$CComPtr@UIUnknown@@@ATL@@QEAAPEAUIUnknown@@PEAU2@@Z DD imagerel $LN18
	DD	imagerel $LN18+75
	DD	imagerel $unwind$??4?$CComPtr@UIUnknown@@@ATL@@QEAAPEAUIUnknown@@PEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIUnknown@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIUnknown@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+40
	DD	imagerel $unwind$??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAXXZ DD imagerel $LN12
	DD	imagerel $LN12+40
	DD	imagerel $unwind$?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAAEAGH@Z DD imagerel $LN7
	DD	imagerel $LN7+44
	DD	imagerel $unwind$??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_ATL_WIN_MODULE70@ATL@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+42
	DD	imagerel $unwind$??1_ATL_WIN_MODULE70@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z DD imagerel $LN36
	DD	imagerel $LN36+264
	DD	imagerel $unwind$?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtlWinModuleInit@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@@Z DD imagerel $LN15
	DD	imagerel $LN15+76
	DD	imagerel $unwind$?AtlWinModuleInit@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z DD imagerel $LN35
	DD	imagerel $LN35+176
	DD	imagerel $unwind$?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CAtlComModule@ATL@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+127
	DD	imagerel $unwind$??0CAtlComModule@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Term@CAtlComModule@ATL@@QEAAXXZ DD imagerel $LN16
	DD	imagerel $LN16+111
	DD	imagerel $unwind$?Term@CAtlComModule@ATL@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_AtlComModule@ATL@@YAXXZ DD imagerel ??__E_AtlComModule@ATL@@YAXXZ
	DD	imagerel ??__E_AtlComModule@ATL@@YAXXZ+32
	DD	imagerel $unwind$??__E_AtlComModule@ATL@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CAtlWinModule@ATL@@QEAA@XZ DD imagerel $LN24
	DD	imagerel $LN24+107
	DD	imagerel $unwind$??0CAtlWinModule@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CAtlWinModule@ATL@@QEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+54
	DD	imagerel $unwind$??1CAtlWinModule@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_AtlWinModule@ATL@@YAXXZ DD imagerel ??__E_AtlWinModule@ATL@@YAXXZ
	DD	imagerel ??__E_AtlWinModule@ATL@@YAXXZ+32
	DD	imagerel $unwind$??__E_AtlWinModule@ATL@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__F_AtlWinModule@ATL@@YAXXZ DD imagerel ??__F_AtlWinModule@ATL@@YAXXZ
	DD	imagerel ??__F_AtlWinModule@ATL@@YAXXZ+67
	DD	imagerel $unwind$??__F_AtlWinModule@ATL@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CDynamicStdCallThunk2@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+22
	DD	imagerel $unwind$??1CDynamicStdCallThunk2@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ModuleLockHelper@ATL@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$??0ModuleLockHelper@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z DD imagerel $LN25
	DD	imagerel $LN25+164
	DD	imagerel $unwind$??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPEAUtagCONNECTDATA@@PEBU3@@Z DD imagerel $LN15
	DD	imagerel $LN15+53
	DD	imagerel $unwind$?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPEAUtagCONNECTDATA@@PEBU3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPEAUtagCONNECTDATA@@@Z DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPEAUtagCONNECTDATA@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CComDynamicUnkArray@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1CComDynamicUnkArray@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z DD imagerel $LN28
	DD	imagerel $LN28+235
	DD	imagerel $unwind$?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CWndProcThunk@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1CWndProcThunk@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+23
	DD	imagerel $unwind$??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+23
	DD	imagerel $unwind$??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIOleClientSite@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIOleClientSite@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIOleClientSite@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIOleClientSite@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIAdviseSink@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIAdviseSink@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIAdviseSink@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIAdviseSink@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CComControlBase@ATL@@UEAA@XZ DD imagerel $LN38
	DD	imagerel $LN38+123
	DD	imagerel $unwind$??1CComControlBase@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+23
	DD	imagerel $unwind$??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+23
	DD	imagerel $unwind$??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1OposVariant@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+25
	DD	imagerel $unwind$??1OposVariant@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1OposVariantResult@@QEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+44
	DD	imagerel $unwind$??1OposVariantResult@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+23
	DD	imagerel $unwind$??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UEAA@XZ DD imagerel $LN16
	DD	imagerel $LN16+39
	DD	imagerel $unwind$??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+92
	DD	imagerel $unwind$??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ DD imagerel $LN17
	DD	imagerel $LN17+92
	DD	imagerel $unwind$??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z DD imagerel $LN17
	DD	imagerel $LN17+112
	DD	imagerel $unwind$?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z DD imagerel $LN16
	DD	imagerel $LN16+188
	DD	imagerel $unwind$?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z DD imagerel $LN23
	DD	imagerel $LN23+103
	DD	imagerel $unwind$?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z DD imagerel $LN109
	DD	imagerel $LN109+428
	DD	imagerel $unwind$?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z DD imagerel $LN37
	DD	imagerel $LN37+236
	DD	imagerel $unwind$?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z DD imagerel $LN55
	DD	imagerel $LN55+351
	DD	imagerel $unwind$?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z DD imagerel $LN55
	DD	imagerel $LN55+371
	DD	imagerel $unwind$?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z DD imagerel $LN37
	DD	imagerel $LN37+236
	DD	imagerel $unwind$?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z DD imagerel $LN12
	DD	imagerel $LN12+234
	DD	imagerel $unwind$?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1COPOSDeviceMonitor@@UEAA@XZ DD imagerel $LN23
	DD	imagerel $LN23+97
	DD	imagerel $unwind$??1COPOSDeviceMonitor@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z DD imagerel $LN28
	DD	imagerel $LN28+283
	DD	imagerel $unwind$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z DD imagerel $LN50
	DD	imagerel $LN50+350
	DD	imagerel $unwind$?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z DD imagerel $LN4
	DD	imagerel $LN4+37
	DD	imagerel $unwind$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z DD imagerel $LN28
	DD	imagerel $LN28+298
	DD	imagerel $unwind$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z DD imagerel $LN51
	DD	imagerel $LN51+343
	DD	imagerel $unwind$?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z DD imagerel $LN33
	DD	imagerel $LN33+308
	DD	imagerel $unwind$?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z DD imagerel $LN26
	DD	imagerel $LN26+227
	DD	imagerel $unwind$?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z DD imagerel $LN8
	DD	imagerel $LN8+113
	DD	imagerel $unwind$?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z DD imagerel $LN10
	DD	imagerel $LN10+235
	DD	imagerel $unwind$?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z DD imagerel $LN15
	DD	imagerel $LN15+133
	DD	imagerel $unwind$?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EventInit@COPOSDeviceMonitor@@IEAAJXZ DD imagerel $LN14
	DD	imagerel $LN14+327
	DD	imagerel $unwind$?EventInit@COPOSDeviceMonitor@@IEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EventClose@COPOSDeviceMonitor@@IEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+64
	DD	imagerel $unwind$?EventClose@COPOSDeviceMonitor@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EventUninit@COPOSDeviceMonitor@@IEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+98
	DD	imagerel $unwind$?EventUninit@COPOSDeviceMonitor@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN7
	DD	imagerel $LN7+123
	DD	imagerel $unwind$?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z DD imagerel $LN47
	DD	imagerel $LN47+375
	DD	imagerel $unwind$?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FireEventSetup@COPOSDeviceMonitor@@IEAA_NXZ DD imagerel $LN6
	DD	imagerel $LN6+61
	DD	imagerel $unwind$?FireEventSetup@COPOSDeviceMonitor@@IEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN4
	DD	imagerel $LN4+25
	DD	imagerel $unwind$?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+46
	DD	imagerel $unwind$?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z DD imagerel $LN13
	DD	imagerel $LN13+78
	DD	imagerel $unwind$?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN8
	DD	imagerel $LN8+58
	DD	imagerel $unwind$?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN6
	DD	imagerel $LN6+43
	DD	imagerel $unwind$?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z DD imagerel $LN16
	DD	imagerel $LN16+100
	DD	imagerel $unwind$?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+50
	DD	imagerel $unwind$?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+50
	DD	imagerel $unwind$?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+50
	DD	imagerel $unwind$?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z DD imagerel $LN6
	DD	imagerel $LN6+50
	DD	imagerel $unwind$?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z DD imagerel $LN12
	DD	imagerel $LN12+121
	DD	imagerel $unwind$?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z DD imagerel $LN15
	DD	imagerel $LN15+159
	DD	imagerel $unwind$?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN16
	DD	imagerel $LN16+182
	DD	imagerel $unwind$?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z DD imagerel $LN30
	DD	imagerel $LN30+251
	DD	imagerel $unwind$?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD imagerel $LN236
	DD	imagerel $LN236+2181
	DD	imagerel $unwind$?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN9
	DD	imagerel $LN9+107
	DD	imagerel $unwind$?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD imagerel $LN12
	DD	imagerel $LN12+133
	DD	imagerel $unwind$?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z DD imagerel $LN12
	DD	imagerel $LN12+133
	DD	imagerel $unwind$?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD imagerel $LN12
	DD	imagerel $LN12+133
	DD	imagerel $unwind$?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z DD imagerel $LN30
	DD	imagerel $LN30+219
	DD	imagerel $unwind$?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD imagerel $LN12
	DD	imagerel $LN12+133
	DD	imagerel $unwind$?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z DD imagerel $LN30
	DD	imagerel $LN30+258
	DD	imagerel $unwind$?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD imagerel $LN12
	DD	imagerel $LN12+133
	DD	imagerel $unwind$?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z DD imagerel $LN30
	DD	imagerel $LN30+219
	DD	imagerel $unwind$?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B_CW@@QEAAPEB_WXZ DD imagerel $LN5
	DD	imagerel $LN5+34
	DD	imagerel $unwind$??B_CW@@QEAAPEB_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_CW@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+34
	DD	imagerel $unwind$??1_CW@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B_CWNCC@@QEAAPEA_WXZ DD imagerel $LN7
	DD	imagerel $LN7+34
	DD	imagerel $unwind$??B_CWNCC@@QEAAPEA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_CWNCC@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+34
	DD	imagerel $unwind$??1_CWNCC@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ DD imagerel ??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ
	DD	imagerel ??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ+23
	DD	imagerel $unwind$??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+91
	DD	imagerel $unwind$??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z DD imagerel $LN46
	DD	imagerel $LN46+210
	DD	imagerel $unwind$?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z DD imagerel $LN40
	DD	imagerel $LN40+297
	DD	imagerel $unwind$?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z DD imagerel $LN62
	DD	imagerel $LN62+292
	DD	imagerel $unwind$?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QEAA@PEAX@Z DD imagerel $LN17
	DD	imagerel $LN17+65
	DD	imagerel $unwind$??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QEAA@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+52
	DD	imagerel $unwind$??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ DD imagerel $LN16
	DD	imagerel $LN16+81
	DD	imagerel $unwind$?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z DD imagerel $LN29
	DD	imagerel $LN29+142
	DD	imagerel $unwind$?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z DD imagerel $LN10
	DD	imagerel $LN10+85
	DD	imagerel $unwind$??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlComModule$initializer$@ATL@@3P6AXXZEA DQ FLAT:??__E_AtlComModule@ATL@@YAXXZ ; ATL::_AtlComModule$initializer$
CRT$XCU	ENDS
;	COMDAT ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SAPEBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT
?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SAPEBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B DQ FLAT:_GUID_b196b287_bab4_101a_b69c_00aa00341d07 ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
	DQ	0000000000000000H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
CONST	ENDS
;	COMDAT ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
CONST	SEGMENT
??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@ DQ FLAT:?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vftable'
	DQ	FLAT:?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ
	DQ	FLAT:?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ
	DQ	FLAT:?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z
	DQ	FLAT:?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJK@Z
	DQ	FLAT:?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJXZ
	DQ	FLAT:?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z
	DQ	FLAT:??_E?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT _GUID_b196b286_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
_GUID_b196b286_bab4_101a_b69c_00aa00341d07 DD 0b196b286H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I', 00H
	DB	'O', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'E'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 'E', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@
CONST	SEGMENT
??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@ DB 'S'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'u', 00H, 's', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
CONST	SEGMENT
??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ DB 'G'
	DB	00H, 'e', 00H, 't', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HKCCFACK@DeviceMonitor@
CONST	SEGMENT
??_C@_0O@HKCCFACK@DeviceMonitor@ DB 'DeviceMonitor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@
CONST	SEGMENT
??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@ DB 'R', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@
CONST	SEGMENT
??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@ DB 'C', 00H, 'l', 00H, 'a', 00H
	DB	'i', 00H, 'm', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@
CONST	SEGMENT
??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@ DB 'C', 00H, 'l', 00H, 'o', 00H
	DB	's', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HGCACNPB@SOFTWARE?2OLEforRetail?2ServiceOP@
CONST	SEGMENT
??_C@_0DA@HGCACNPB@SOFTWARE?2OLEforRetail?2ServiceOP@ DB 'SOFTWARE\OLEfor'
	DB	'Retail\ServiceOPOS\DeviceMonitor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@
CONST	SEGMENT
??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@ DB '[', 00H, 'E'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?s_RequiredMethodsPerRelease@@3PAHA DD 016H		; s_RequiredMethodsPerRelease
	ORG $+4
?s_SOMethodNames@@3PAPEADA DQ FLAT:??_C@_0P@MMNMMLGK@COFreezeEvents@ ; s_SOMethodNames
	DQ	FLAT:??_C@_0BC@OGCGGIMP@GetPropertyNumber@
	DQ	FLAT:??_C@_0BC@MDCNODNB@SetPropertyNumber@
	DQ	FLAT:??_C@_0BC@CFCCMIMD@GetPropertyString@
	DQ	FLAT:??_C@_0BC@CJEDNN@SetPropertyString@
	DQ	FLAT:??_C@_0M@LNPKKKDA@OpenService@
	DQ	FLAT:??_C@_0M@PCMCHHMH@CheckHealth@
	DQ	FLAT:??_C@_0M@JGMIDNEK@ClaimDevice@
	DQ	FLAT:??_C@_0L@BNEIFEJC@ClearInput@
	DQ	FLAT:??_C@_0N@DDFIIBMP@CloseService@
	DQ	FLAT:??_C@_08EEIHICPC@DirectIO@
	DQ	FLAT:??_C@_0O@BCPMENMJ@ReleaseDevice@
	DQ	FLAT:??_C@_0BA@GFABKEEE@ResetStatistics@
	DQ	FLAT:??_C@_0BD@DPALHJGC@RetrieveStatistics@
	DQ	FLAT:??_C@_0BB@KOHIKNFC@UpdateStatistics@
	DQ	FLAT:??_C@_0BH@PBKBNMGB@CompareFirmwareVersion@
	DQ	FLAT:??_C@_0P@FBPDPIPA@UpdateFirmware@
	DQ	FLAT:??_C@_0BF@CMAPCJGM@ClearInputProperties@
	DQ	FLAT:??_C@_0BE@NEMFCMIH@AddMonitoringDevice@
	DQ	FLAT:??_C@_0BG@JOGJDLPM@ClearMonitoringDevice@
	DQ	FLAT:??_C@_0BH@FJFNDOHE@DeleteMonitoringDevice@
	DQ	FLAT:??_C@_0P@NALLAHBD@GetDeviceValue@
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@
CONST	SEGMENT
??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@ DQ FLAT:?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::`vftable'
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAU_GUID@@@Z
	DQ	FLAT:?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIConnectionPointContainer@@@Z
	DQ	FLAT:?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z
	DQ	FLAT:?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z
	DQ	FLAT:?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z
CONST	ENDS
;	COMDAT _GUID_b196b287_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
_GUID_b196b287_bab4_101a_b69c_00aa00341d07 DD 0b196b287H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT _GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
_GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QEAA@PEAX@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z DD 0a1601H
	DD	0e5416H
	DD	0c3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_CWNCC@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B_CWNCC@@QEAAPEA_WXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_CW@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B_CW@@QEAAPEB_WXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z DD 0b1c01H
	DD	017741cH
	DD	016641cH
	DD	015541cH
	DD	014341cH
	DD	012011cH
	DD	0e015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z DD 092519H
	DD	0200117H
	DD	0e009f00bH
	DD	07005c007H
	DD	030036004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z DD 0b1c01H
	DD	017741cH
	DD	016641cH
	DD	015541cH
	DD	014341cH
	DD	012011cH
	DD	0e015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z DD 0b3019H
	DD	0f7341fH
	DD	0ec011fH
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0750H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z DD 082219H
	DD	0190110H
	DD	0e007f009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 040a01H
	DD	010340aH
	DD	07006d20aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z DD 060f01H
	DD	0f640fH
	DD	0e340fH
	DD	0700bb20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z DD 061001H
	DD	0f6410H
	DD	0e3410H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FireEventSetup@COPOSDeviceMonitor@@IEAA_NXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EventUninit@COPOSDeviceMonitor@@IEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EventClose@COPOSDeviceMonitor@@IEAAXXZ DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EventInit@COPOSDeviceMonitor@@IEAAJXZ DD 071201H
	DD	0196412H
	DD	0183412H
	DD	0160112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z DD 0a1901H
	DD	0137419H
	DD	0126419H
	DD	0115419H
	DD	0103419H
	DD	0e015d219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z DD 071701H
	DD	0197417H
	DD	0183417H
	DD	0160117H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z DD 091b01H
	DD	016741bH
	DD	015641bH
	DD	014341bH
	DD	012011bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z DD 0b1f01H
	DD	021741fH
	DD	020641fH
	DD	01f341fH
	DD	01a011fH
	DD	0e012f014H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z DD 091b01H
	DD	01b741bH
	DD	01a641bH
	DD	019341bH
	DD	016011bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z DD 0d2301H
	DD	021c423H
	DD	0207423H
	DD	01f6423H
	DD	01e3423H
	DD	01a0123H
	DD	0e016f018H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z DD 091b01H
	DD	01b741bH
	DD	01a641bH
	DD	019341bH
	DD	016011bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1COPOSDeviceMonitor@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z DD 061001H
	DD	0127410H
	DD	0113410H
	DD	0e00cd210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z DD 0a1901H
	DD	0f7419H
	DD	0e6419H
	DD	0d5419H
	DD	0c3419H
	DD	0e0159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z DD 0a2619H
	DD	01b0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z DD 0a2619H
	DD	0170114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z DD 0a1901H
	DD	0f7419H
	DD	0e6419H
	DD	0d5419H
	DD	0c3419H
	DD	0e0159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z DD 041719H
	DD	070047208H
	DD	030026003H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1OposVariantResult@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1OposVariant@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CComControlBase@ATL@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIAdviseSink@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIAdviseSink@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIOleClientSite@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIOleClientSite@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CWndProcThunk@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CComDynamicUnkArray@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPEAUtagCONNECTDATA@@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPEAUtagCONNECTDATA@@PEBU3@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z DD 0a1901H
	DD	097419H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	0e0153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ModuleLockHelper@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CDynamicStdCallThunk2@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__F_AtlWinModule@ATL@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_AtlWinModule@ATL@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CAtlWinModule@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CAtlWinModule@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_AtlComModule@ATL@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Term@CAtlComModule@ATL@@QEAAXXZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CAtlComModule@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtlWinModuleInit@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z DD 0a1901H
	DD	09e419H
	DD	087419H
	DD	076419H
	DD	063419H
	DD	0f0153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_ATL_WIN_MODULE70@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAAEAGH@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIUnknown@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$CComPtr@UIUnknown@@@ATL@@QEAAPEAUIUnknown@@PEAU2@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$CComPtr@UIUnknown@@@ATL@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$CComPtr@UIUnknown@@@ATL@@QEAA@PEAUIUnknown@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIUnknown@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$CComPtrBase@UIUnknown@@@ATL@@IEAA@PEAUIUnknown@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtr@UIDispatch@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$CComPtrBase@UIDispatch@@@ATL@@QEAA@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Term@CComCriticalSection@ATL@@QEAAJXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Init@CComCriticalSection@ATL@@QEAAJXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AtlThrowImpl@ATL@@YAXJ@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_I@YAXPEAX_K1P6AX0@Z@Z DD 081901H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 081901H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	070153219H
xdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlWinModule$initializer$@ATL@@3P6AXXZEA DQ FLAT:??__E_AtlWinModule@ATL@@YAXXZ ; ATL::_AtlWinModule$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??pConnMap$initializer$@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ ; ??pConnMap$initializer$@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor', COMDAT
$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2919 : 		this->m_dwRef = -(LONG_MAX/2);

  0000a	c7 41 30 01 00
	00 c0		 mov	 DWORD PTR [rcx+48], -1073741823 ; ffffffffc0000001H
  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax
  0001b	48 8b f9	 mov	 rdi, rcx

; 2920 : 		this->FinalRelease();
; 2921 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 2922 : 		_AtlDebugInterfacesModule.DeleteNonAddRefThunk(_GetRawUnknown());
; 2923 : #endif
; 2924 : 		_pAtlModule->Unlock();

  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA ; ATL::_pAtlModule
  00025	8b da		 mov	 ebx, edx
  00027	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0002a	ff 50 10	 call	 QWORD PTR [rax+16]
  0002d	48 8b cf	 mov	 rcx, rdi
  00030	e8 00 00 00 00	 call	 ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
  00035	f6 c3 01	 test	 bl, 1
  00038	74 0d		 je	 SHORT $LN2@scalar
  0003a	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003f	48 8b cf	 mov	 rcx, rdi
  00042	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004c	48 8b c7	 mov	 rax, rdi
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAPEAXI@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z
_TEXT	SEGMENT
pp$ = 48
?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance, COMDAT

; 2963 : {

$LN29:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f9	 mov	 rdi, rcx

; 2964 : 	ATLASSERT(pp != NULL);
; 2965 : 	if (pp == NULL)

  00012	48 85 c9	 test	 rcx, rcx
  00015	75 07		 jne	 SHORT $LN2@CreateInst

; 2966 : 		return E_POINTER;

  00017	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H
  0001c	eb 60		 jmp	 SHORT $LN1@CreateInst
$LN2@CreateInst:

; 2967 : 	*pp = NULL;

  0001e	48 83 21 00	 and	 QWORD PTR [rcx], 0

; 2968 : 
; 2969 : 	HRESULT hRes = E_OUTOFMEMORY;
; 2970 : 	CComObject<Base>* p = NULL;
; 2971 : 	ATLTRY(p = _ATL_NEW CComObject<Base>())

  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00029	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0002e	be 0e 00 07 80	 mov	 esi, -2147024882	; ffffffff8007000eH
  00033	e8 00 00 00 00	 call	 ??2@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new
  00038	48 8b d8	 mov	 rbx, rax
  0003b	48 85 c0	 test	 rax, rax
  0003e	74 37		 je	 SHORT $LN8@CreateInst
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 165  :         p = NULL;

  00040	48 83 60 08 00	 and	 QWORD PTR [rax+8], 0
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5501 : 		m_begin = m_end = m_iter = NULL;

  00045	48 83 60 20 00	 and	 QWORD PTR [rax+32], 0
  0004a	48 83 60 18 00	 and	 QWORD PTR [rax+24], 0
  0004f	48 83 60 10 00	 and	 QWORD PTR [rax+16], 0

; 5502 : 		m_dwFlags = 0;

  00054	83 60 28 00	 and	 DWORD PTR [rax+40], 0

; 2430 : 		m_dwRef = 0L;

  00058	83 60 30 00	 and	 DWORD PTR [rax+48], 0

; 2912 : 	{

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
  00063	48 89 03	 mov	 QWORD PTR [rbx], rax

; 2913 : 		_pAtlModule->Lock();

  00066	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA ; ATL::_pAtlModule
  0006d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00070	ff 50 08	 call	 QWORD PTR [rax+8]

; 2972 : 	if (p != NULL)
; 2973 : 	{
; 2974 : 		p->SetVoid(NULL);
; 2975 : 		p->InternalFinalConstructAddRef();
; 2976 : 		hRes = p->_AtlInitialConstruct();
; 2977 : 		if (SUCCEEDED(hRes))
; 2978 : 			hRes = p->FinalConstruct();
; 2979 : 		if (SUCCEEDED(hRes))
; 2980 : 			hRes = p->_AtlFinalConstruct();
; 2981 : 		p->InternalFinalConstructRelease();
; 2982 : 		if (hRes != S_OK)

  00073	33 f6		 xor	 esi, esi
  00075	eb 02		 jmp	 SHORT $LN6@CreateInst
$LN8@CreateInst:

; 2968 : 
; 2969 : 	HRESULT hRes = E_OUTOFMEMORY;
; 2970 : 	CComObject<Base>* p = NULL;
; 2971 : 	ATLTRY(p = _ATL_NEW CComObject<Base>())

  00077	33 db		 xor	 ebx, ebx
$LN6@CreateInst:

; 2983 : 		{
; 2984 : 			delete p;
; 2985 : 			p = NULL;
; 2986 : 		}
; 2987 : 	}
; 2988 : 	*pp = p;

  00079	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 2989 : 	return hRes;

  0007c	8b c6		 mov	 eax, esi
$LN1@CreateInst:

; 2990 : }

  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00088	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z
_TEXT	SEGMENT
this$ = 8
iid$ = 16
ppvObject$ = 24
?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface, COMDAT

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  00000	4d 8b c8	 mov	 r9, r8
  00003	4c 8b c2	 mov	 r8, rdx
  00006	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SAPEBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  0000d	e9 00 00 00 00	 jmp	 ?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z ; ATL::AtlInternalQueryInterface
?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ
_TEXT	SEGMENT
this$ = 48
?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release, COMDAT

; 2933 : 	{

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 444  : 		return --(*p);

  0000a	83 69 30 01	 sub	 DWORD PTR [rcx+48], 1
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2933 : 	{

  0000e	48 8b d9	 mov	 rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 444  : 		return --(*p);

  00011	8b 79 30	 mov	 edi, DWORD PTR [rcx+48]
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2935 : 		if (l == 0)

  00014	75 2e		 jne	 SHORT $LN2@Release

; 2891 : 		_pAtlModule->Lock();

  00016	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA ; ATL::_pAtlModule
  0001d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00020	ff 50 08	 call	 QWORD PTR [rax+8]

; 2936 : 		{
; 2937 : 			// Lock the module to avoid DLL unload when destruction of member variables take a long time
; 2938 : 			ModuleLockHelper lock;
; 2939 : 			delete this;

  00023	48 85 db	 test	 rbx, rbx
  00026	74 0f		 je	 SHORT $LN4@Release
  00028	4c 8b 03	 mov	 r8, QWORD PTR [rbx]
  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	48 8b cb	 mov	 rcx, rbx
  00033	41 ff 50 38	 call	 QWORD PTR [r8+56]
$LN4@Release:

; 2898 : 		_pAtlModule->Unlock();

  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA ; ATL::_pAtlModule
  0003e	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00041	ff 52 10	 call	 QWORD PTR [rdx+16]
$LN2@Release:

; 2940 : 		}
; 2941 : 		return l;
; 2942 : 	}

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	8b c7		 mov	 eax, edi
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ
_TEXT	SEGMENT
this$ = 8
?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef, COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 440  : 		return ++(*p);

  00000	8b 41 30	 mov	 eax, DWORD PTR [rcx+48]
  00003	ff c0		 inc	 eax
  00005	89 41 30	 mov	 DWORD PTR [rcx+48], eax
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2931 : 	}

  00008	c3		 ret	 0
?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAAKXZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >, COMDAT

; 2918 : 	{

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2919 : 		this->m_dwRef = -(LONG_MAX/2);

  00006	c7 41 30 01 00
	00 c0		 mov	 DWORD PTR [rcx+48], -1073741823 ; ffffffffc0000001H
  0000d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	48 8b d9	 mov	 rbx, rcx

; 2920 : 		this->FinalRelease();
; 2921 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 2922 : 		_AtlDebugInterfacesModule.DeleteNonAddRefThunk(_GetRawUnknown());
; 2923 : #endif
; 2924 : 		_pAtlModule->Unlock();

  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA ; ATL::_pAtlModule
  00021	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00024	ff 50 10	 call	 QWORD PTR [rax+16]
  00027	48 8b cb	 mov	 rcx, rbx

; 2925 : 	}

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx

; 2920 : 		this->FinalRelease();
; 2921 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 2922 : 		_AtlDebugInterfacesModule.DeleteNonAddRefThunk(_GetRawUnknown());
; 2923 : #endif
; 2924 : 		_pAtlModule->Unlock();

  0002f	e9 00 00 00 00	 jmp	 ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UEAA@XZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z
_TEXT	SEGMENT
this$ = 64
begin$ = 72
end$ = 80
pUnk$ = 88
flags$ = 96
?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init, COMDAT

; 5627 : {

$LN62:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 5628 : 	if (flags == AtlFlagCopy)

  00018	44 8b 7c 24 60	 mov	 r15d, DWORD PTR flags$[rsp]
  0001d	4d 8b f1	 mov	 r14, r9
  00020	49 8b e8	 mov	 rbp, r8
  00023	48 8b f2	 mov	 rsi, rdx
  00026	48 8b d9	 mov	 rbx, rcx
  00029	49 8b f8	 mov	 rdi, r8
  0002c	41 83 ff 03	 cmp	 r15d, 3
  00030	0f 85 8a 00 00
	00		 jne	 $LN10@Init

; 5629 : 	{
; 5630 : 		ATLASSUME(m_begin == NULL); //Init called twice?
; 5631 : 		ATLTRY(m_begin = _ATL_NEW T[end-begin])

  00036	48 2b fa	 sub	 rdi, rdx
  00039	41 8d 47 0d	 lea	 eax, QWORD PTR [r15+13]
  0003d	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00044	48 c1 ff 04	 sar	 rdi, 4
  00048	48 f7 e7	 mul	 rdi
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00052	48 0f 40 c1	 cmovo	 rax, rcx
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  0005e	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 5632 : 		m_iter = m_begin;

  00062	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 5633 : 		if (m_begin == NULL)

  00066	48 85 c0	 test	 rax, rax
  00069	75 0a		 jne	 SHORT $LN12@Init

; 5634 : 			return E_OUTOFMEMORY;

  0006b	b8 0e 00 07 80	 mov	 eax, -2147024882	; ffffffff8007000eH
  00070	e9 8b 00 00 00	 jmp	 $LN1@Init
$LN12@Init:

; 5635 : 		for (T* i=begin; i != end; i++)

  00075	48 3b f5	 cmp	 rsi, rbp
  00078	74 3d		 je	 SHORT $LN58@Init
$LL7@Init:

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  0007a	48 85 c0	 test	 rax, rax
  0007d	0f 84 96 00 00
	00		 je	 $LN48@Init
  00083	48 85 f6	 test	 rsi, rsi
  00086	0f 84 8d 00 00
	00		 je	 $LN48@Init

; 5424 : 		*p1 = *p2;

  0008c	0f 10 06	 movups	 xmm0, XMMWORD PTR [rsi]
  0008f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 5425 : 		if (p1->pUnk)

  00093	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00096	48 85 c9	 test	 rcx, rcx
  00099	74 06		 je	 SHORT $LN23@Init

; 5426 : 		{
; 5427 : 			p1->pUnk->AddRef();

  0009b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0009e	ff 50 08	 call	 QWORD PTR [rax+8]
$LN23@Init:

; 5640 : 			{
; 5641 : 				T* p = m_begin;
; 5642 : 				while (p < m_iter)
; 5643 : 					Copy::destroy(p++);
; 5644 : 				delete [] m_begin;
; 5645 : 				m_begin = m_end = m_iter = NULL;
; 5646 : 				return hr;
; 5647 : 			}
; 5648 : 			m_iter++;

  000a1	48 83 43 20 10	 add	 QWORD PTR [rbx+32], 16
  000a6	48 83 c6 10	 add	 rsi, 16
  000aa	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  000ae	48 3b f5	 cmp	 rsi, rbp
  000b1	75 c7		 jne	 SHORT $LL7@Init

; 5636 : 		{
; 5637 : 			Copy::init(m_iter);
; 5638 : 			HRESULT hr = Copy::copy(m_iter, i);
; 5639 : 			if (FAILED(hr))

  000b3	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
$LN58@Init:

; 5649 : 		}
; 5650 : 		m_end = m_begin + (end-begin);

  000b7	48 c1 e7 04	 shl	 rdi, 4
  000bb	48 03 f8	 add	 rdi, rax

; 5651 : 	}

  000be	eb 04		 jmp	 SHORT $LN11@Init
$LN10@Init:

; 5652 : 	else
; 5653 : 	{
; 5654 : 		m_begin = begin;

  000c0	48 89 71 10	 mov	 QWORD PTR [rcx+16], rsi
$LN11@Init:

; 5655 : 		m_end = end;
; 5656 : 	}
; 5657 : 	m_spUnk = pUnk;

  000c4	48 89 7b 18	 mov	 QWORD PTR [rbx+24], rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 329  :         if(this->p!=lp)

  000c8	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  000cc	49 3b ce	 cmp	 rcx, r14
  000cf	74 21		 je	 SHORT $LN44@Init

; 170  :         if (p != NULL)

  000d1	4d 85 f6	 test	 r14, r14
  000d4	74 0d		 je	 SHORT $LN37@Init

; 171  :             p->AddRef();

  000d6	49 8b 06	 mov	 rax, QWORD PTR [r14]
  000d9	49 8b ce	 mov	 rcx, r14
  000dc	ff 50 08	 call	 QWORD PTR [rax+8]
  000df	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
$LN37@Init:

; 177  :         other.p = pTemp;

  000e3	4c 89 73 08	 mov	 QWORD PTR [rbx+8], r14

; 183  :         if (p)

  000e7	48 85 c9	 test	 rcx, rcx
  000ea	74 06		 je	 SHORT $LN44@Init

; 184  :             p->Release();

  000ec	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000ef	ff 50 10	 call	 QWORD PTR [rax+16]
$LN44@Init:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5658 : 	m_iter = m_begin;

  000f2	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000f6	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 5659 : 	m_dwFlags = flags;
; 5660 : 	return S_OK;

  000fa	33 c0		 xor	 eax, eax
  000fc	44 89 7b 28	 mov	 DWORD PTR [rbx+40], r15d
$LN1@Init:

; 5661 : }

  00100	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00105	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  0010a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0010f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00113	41 5f		 pop	 r15
  00115	41 5e		 pop	 r14
  00117	5f		 pop	 rdi
  00118	c3		 ret	 0
$LN48@Init:

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  00119	b9 05 40 00 80	 mov	 ecx, -2147467259	; ffffffff80004005H
  0011e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YAXJ@Z ; ATL::AtlThrowImpl
  00123	cc		 int	 3
$LN59@Init:
?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z
_TEXT	SEGMENT
this$ = 96
$T1 = 104
$T2 = 104
$T3 = 104
p$4 = 104
ppEnum$ = 104
?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone, COMDAT

; 5596 : {

$LN40:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00016	83 64 24 68 00	 and	 DWORD PTR $T1[rsp], 0
  0001b	4c 8b e2	 mov	 r12, rdx
  0001e	4c 8b f1	 mov	 r14, rcx

; 5597 : 	typedef CComObject<CComEnum<Base, piid, T, Copy> > _class;
; 5598 : 	HRESULT hRes = E_POINTER;

  00021	be 03 40 00 80	 mov	 esi, -2147467261	; ffffffff80004003H

; 5599 : 	if (ppEnum != NULL)

  00026	48 85 d2	 test	 rdx, rdx
  00029	0f 84 e1 00 00
	00		 je	 $LN9@Clone

; 5600 : 	{
; 5601 : 		*ppEnum = NULL;

  0002f	48 83 22 00	 and	 QWORD PTR [rdx], 0

; 5602 : 		_class* p;
; 5603 : 		hRes = _class::CreateInstance(&p);

  00033	48 8d 4c 24 68	 lea	 rcx, QWORD PTR p$4[rsp]
  00038	e8 00 00 00 00	 call	 ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SAJPEAPEAV12@@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
  0003d	8b f0		 mov	 esi, eax

; 5604 : 		if (SUCCEEDED(hRes))

  0003f	85 c0		 test	 eax, eax
  00041	0f 88 c9 00 00
	00		 js	 $LN9@Clone

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  00047	41 f6 46 28 02	 test	 BYTE PTR [r14+40], 2
  0004c	74 1b		 je	 SHORT $LN7@Clone
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  0004e	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00051	49 8b ce	 mov	 rcx, r14
  00054	49 8b fe	 mov	 rdi, r14
  00057	ff 50 08	 call	 QWORD PTR [rax+8]
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  0005a	48 8b 5c 24 68	 mov	 rbx, QWORD PTR $T2[rsp]
  0005f	49 8b f6	 mov	 rsi, r14
  00062	bd 01 00 00 00	 mov	 ebp, 1
  00067	eb 1f		 jmp	 SHORT $LN8@Clone
$LN7@Clone:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 169  :         p = lp;

  00069	49 8b 76 08	 mov	 rsi, QWORD PTR [r14+8]
  0006d	48 8b de	 mov	 rbx, rsi
  00070	48 85 f6	 test	 rsi, rsi

; 170  :         if (p != NULL)

  00073	74 09		 je	 SHORT $LN21@Clone

; 171  :             p->AddRef();

  00075	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	ff 50 08	 call	 QWORD PTR [rax+8]
$LN21@Clone:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  0007e	48 8b 7c 24 68	 mov	 rdi, QWORD PTR $T3[rsp]
  00083	bd 02 00 00 00	 mov	 ebp, 2
$LN8@Clone:
  00088	4c 8b 7c 24 68	 mov	 r15, QWORD PTR p$4[rsp]
  0008d	4c 8b ce	 mov	 r9, rsi
  00090	4d 8b 46 18	 mov	 r8, QWORD PTR [r14+24]
  00094	49 8b cf	 mov	 rcx, r15
  00097	49 8b 56 10	 mov	 rdx, QWORD PTR [r14+16]
  0009b	83 64 24 20 00	 and	 DWORD PTR [rsp+32], 0
  000a0	e8 00 00 00 00	 call	 ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QEAAJPEAUtagCONNECTDATA@@0PEAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
  000a5	8b f0		 mov	 esi, eax
  000a7	40 f6 c5 02	 test	 bpl, 2
  000ab	74 11		 je	 SHORT $LN26@Clone
  000ad	83 e5 fd	 and	 ebp, -3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  000b0	48 85 db	 test	 rbx, rbx
  000b3	74 09		 je	 SHORT $LN26@Clone

; 184  :             p->Release();

  000b5	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	ff 50 10	 call	 QWORD PTR [rax+16]
$LN26@Clone:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  000be	40 f6 c5 01	 test	 bpl, 1
  000c2	74 0e		 je	 SHORT $LN31@Clone
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  000c4	48 85 ff	 test	 rdi, rdi
  000c7	74 09		 je	 SHORT $LN31@Clone

; 184  :             p->Release();

  000c9	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000cc	48 8b cf	 mov	 rcx, rdi
  000cf	ff 50 10	 call	 QWORD PTR [rax+16]
$LN31@Clone:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5608 : 			if (SUCCEEDED(hRes))

  000d2	85 f6		 test	 esi, esi
  000d4	78 27		 js	 SHORT $LN37@Clone

; 5609 : 			{
; 5610 : 				p->m_iter = m_iter;

  000d6	49 8b 46 20	 mov	 rax, QWORD PTR [r14+32]

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_GUID_b196b287_bab4_101a_b69c_00aa00341d07
  000e1	4d 8b cc	 mov	 r9, r12

; 5609 : 			{
; 5610 : 				p->m_iter = m_iter;

  000e4	49 89 47 20	 mov	 QWORD PTR [r15+32], rax

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SAPEBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  000ef	49 8b cf	 mov	 rcx, r15
  000f2	e8 00 00 00 00	 call	 ?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z ; ATL::AtlInternalQueryInterface
  000f7	8b f0		 mov	 esi, eax

; 5611 : 				hRes = p->_InternalQueryInterface(*piid, (void**)ppEnum);
; 5612 : 			}
; 5613 : 			if (FAILED(hRes))

  000f9	85 c0		 test	 eax, eax
  000fb	79 13		 jns	 SHORT $LN9@Clone
$LN37@Clone:

; 5614 : 				delete p;

  000fd	4d 85 ff	 test	 r15, r15
  00100	74 0e		 je	 SHORT $LN9@Clone
  00102	49 8b 07	 mov	 rax, QWORD PTR [r15]
  00105	ba 01 00 00 00	 mov	 edx, 1
  0010a	49 8b cf	 mov	 rcx, r15
  0010d	ff 50 38	 call	 QWORD PTR [rax+56]
$LN9@Clone:

; 5615 : 		}
; 5616 : 	}
; 5617 : 
; 5618 : 	return hRes;
; 5619 : }

  00110	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00115	8b c6		 mov	 eax, esi
  00117	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0011c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00120	41 5f		 pop	 r15
  00122	41 5e		 pop	 r14
  00124	41 5c		 pop	 r12
  00126	5f		 pop	 rdi
  00127	5e		 pop	 rsi
  00128	c3		 ret	 0
?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJXZ
_TEXT	SEGMENT
this$ = 8
?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJXZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset, COMDAT

; 5513 : 		m_iter = m_begin;

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 5514 : 		return S_OK;

  00008	33 c0		 xor	 eax, eax

; 5515 : 	}

  0000a	c3		 ret	 0
?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJXZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJK@Z
_TEXT	SEGMENT
this$ = 8
celt$ = 16
?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJK@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip, COMDAT

; 5587 : 	ULONG nRem = ULONG(m_end - m_iter);

  00000	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]

; 5588 : 	ULONG nSkip = (celt > nRem) ? nRem : celt;

  00004	44 8b c2	 mov	 r8d, edx
  00007	48 2b 41 20	 sub	 rax, QWORD PTR [rcx+32]
  0000b	48 c1 f8 04	 sar	 rax, 4
  0000f	3b d0		 cmp	 edx, eax
  00011	44 0f 47 c0	 cmova	 r8d, eax

; 5589 : 	m_iter += nSkip;

  00015	41 8b c0	 mov	 eax, r8d
  00018	48 c1 e0 04	 shl	 rax, 4
  0001c	48 01 41 20	 add	 QWORD PTR [rcx+32], rax

; 5590 : 	return (celt == nSkip) ? S_OK : S_FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	41 3b d0	 cmp	 edx, r8d
  00025	0f 95 c0	 setne	 al

; 5591 : }

  00028	c3		 ret	 0
?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJK@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z
_TEXT	SEGMENT
this$ = 48
celt$ = 56
rgelt$ = 64
pceltFetched$ = 72
?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next, COMDAT

; 5552 : {

$LN46:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f0	 mov	 rsi, r8
  00017	48 8b f9	 mov	 rdi, rcx

; 5553 : 	if (pceltFetched != NULL)

  0001a	4d 85 c9	 test	 r9, r9
  0001d	74 04		 je	 SHORT $LN6@Next

; 5554 : 		*pceltFetched = 0;

  0001f	41 83 21 00	 and	 DWORD PTR [r9], 0
$LN6@Next:

; 5555 : 	if (rgelt == NULL || (celt > 1 && pceltFetched == NULL))

  00023	4d 85 c0	 test	 r8, r8
  00026	0f 84 81 00 00
	00		 je	 $LN8@Next
  0002c	83 fa 01	 cmp	 edx, 1
  0002f	76 05		 jbe	 SHORT $LN7@Next
  00031	4d 85 c9	 test	 r9, r9
  00034	74 77		 je	 SHORT $LN8@Next
$LN7@Next:

; 5557 : 	if (m_begin == NULL || m_end == NULL || m_iter == NULL)

  00036	48 83 79 10 00	 cmp	 QWORD PTR [rcx+16], 0
  0003b	74 69		 je	 SHORT $LN10@Next
  0003d	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00041	48 85 db	 test	 rbx, rbx
  00044	74 60		 je	 SHORT $LN10@Next
  00046	48 83 79 20 00	 cmp	 QWORD PTR [rcx+32], 0
  0004b	74 59		 je	 SHORT $LN10@Next

; 5559 : 	ULONG nRem = (ULONG)(m_end - m_iter);

  0004d	48 2b 59 20	 sub	 rbx, QWORD PTR [rcx+32]

; 5560 : 	HRESULT hRes = S_OK;
; 5561 : 	if (nRem < celt)
; 5562 : 		hRes = S_FALSE;
; 5563 : 	ULONG nMin = celt < nRem ? celt : nRem ;

  00051	33 ed		 xor	 ebp, ebp
  00053	48 c1 fb 04	 sar	 rbx, 4
  00057	3b da		 cmp	 ebx, edx
  00059	40 0f 92 c5	 setb	 bpl
  0005d	0f 47 da	 cmova	 ebx, edx

; 5564 : 	if (pceltFetched != NULL)

  00060	4d 85 c9	 test	 r9, r9
  00063	74 03		 je	 SHORT $LN12@Next

; 5565 : 		*pceltFetched = nMin;

  00065	41 89 19	 mov	 DWORD PTR [r9], ebx
$LN12@Next:

; 5566 : 	T* pelt = rgelt;
; 5567 : 	while(nMin--)

  00068	85 db		 test	 ebx, ebx
  0006a	74 36		 je	 SHORT $LN35@Next
  0006c	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
$LL2@Next:
  00070	ff cb		 dec	 ebx

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  00072	48 85 f6	 test	 rsi, rsi
  00075	74 50		 je	 SHORT $LN34@Next
  00077	48 85 c0	 test	 rax, rax
  0007a	74 4b		 je	 SHORT $LN34@Next

; 5424 : 		*p1 = *p2;

  0007c	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0007f	f3 0f 7f 06	 movdqu	 XMMWORD PTR [rsi], xmm0

; 5425 : 		if (p1->pUnk)

  00083	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00086	48 85 c9	 test	 rcx, rcx
  00089	74 06		 je	 SHORT $LN24@Next

; 5426 : 		{
; 5427 : 			p1->pUnk->AddRef();

  0008b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0008e	ff 50 08	 call	 QWORD PTR [rax+8]
$LN24@Next:

; 5568 : 	{
; 5569 : 		HRESULT hr = Copy::copy(pelt, m_iter);
; 5570 : 		if (FAILED(hr))
; 5571 : 		{
; 5572 : 			while (rgelt < pelt)
; 5573 : 				Copy::destroy(rgelt++);
; 5574 : 			if (pceltFetched != NULL)
; 5575 : 				*pceltFetched = 0;
; 5576 : 			return hr;
; 5577 : 		}
; 5578 : 		pelt++;
; 5579 : 		m_iter++;

  00091	48 83 47 20 10	 add	 QWORD PTR [rdi+32], 16
  00096	48 83 c6 10	 add	 rsi, 16
  0009a	48 8b 47 20	 mov	 rax, QWORD PTR [rdi+32]
  0009e	85 db		 test	 ebx, ebx
  000a0	75 ce		 jne	 SHORT $LL2@Next
$LN35@Next:

; 5580 : 	}
; 5581 : 	return hRes;

  000a2	8b c5		 mov	 eax, ebp
  000a4	eb 0c		 jmp	 SHORT $LN1@Next
$LN10@Next:

; 5558 : 		return E_FAIL;

  000a6	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  000ab	eb 05		 jmp	 SHORT $LN1@Next
$LN8@Next:

; 5556 : 		return E_POINTER;

  000ad	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H
$LN1@Next:

; 5582 : }

  000b2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b7	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000bc	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c5	5f		 pop	 rdi
  000c6	c3		 ret	 0
$LN34@Next:

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  000c7	b9 05 40 00 80	 mov	 ecx, -2147467259	; ffffffff80004005H
  000cc	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YAXJ@Z ; ATL::AtlThrowImpl
  000d1	cc		 int	 3
$LN44@Next:
?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAAJKPEAUtagCONNECTDATA@@PEAK@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >, COMDAT

; 5538 : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 5539 : 	if (m_dwFlags & BitOwn)

  0000a	f6 41 28 02	 test	 BYTE PTR [rcx+40], 2
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	74 2e		 je	 SHORT $LN5@CComEnumIm

; 5540 : 	{
; 5541 : 		for (T* p = m_begin; p != m_end; p++)

  00013	48 8b 59 10	 mov	 rbx, QWORD PTR [rcx+16]
  00017	48 3b 59 18	 cmp	 rbx, QWORD PTR [rcx+24]
  0001b	74 1c		 je	 SHORT $LN3@CComEnumIm
$LL4@CComEnumIm:

; 5436 : 		if (p->pUnk)

  0001d	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00020	48 85 c9	 test	 rcx, rcx
  00023	74 06		 je	 SHORT $LN2@CComEnumIm

; 5437 : 		{
; 5438 : 			p->pUnk->Release();

  00025	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00028	ff 50 10	 call	 QWORD PTR [rax+16]
$LN2@CComEnumIm:

; 5540 : 	{
; 5541 : 		for (T* p = m_begin; p != m_end; p++)

  0002b	48 83 c3 10	 add	 rbx, 16
  0002f	48 3b 5f 18	 cmp	 rbx, QWORD PTR [rdi+24]
  00033	75 e8		 jne	 SHORT $LL4@CComEnumIm
  00035	48 8b 5f 10	 mov	 rbx, QWORD PTR [rdi+16]
$LN3@CComEnumIm:

; 5542 : 			Copy::destroy(p);
; 5543 : 		delete [] m_begin;

  00039	48 8b cb	 mov	 rcx, rbx
  0003c	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN5@CComEnumIm:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  00041	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00045	48 85 c9	 test	 rcx, rcx
  00048	74 06		 je	 SHORT $LN13@CComEnumIm

; 184  :             p->Release();

  0004a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0004d	ff 50 10	 call	 QWORD PTR [rax+16]
$LN13@CComEnumIm:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5545 : }

  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UEAA@XZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ
text$di	SEGMENT
??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ PROC ; `dynamic initializer for 'ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap'', COMDAT

; 6573 : __declspec(selectany) const ATL::_ATL_CONNMAP_ENTRY* IConnectionPointContainerImpl<T>::pConnMap = T::GetConnMap(NULL);

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	33 c9		 xor	 ecx, ecx
  00006	e8 00 00 00 00	 call	 ?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z ; COPOSDeviceMonitor::GetConnMap
  0000b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB, rax ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap
  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PEBU_ATL_CONNMAP_ENTRY@2@EB@@YAXXZ ENDP ; `dynamic initializer for 'ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z
_TEXT	SEGMENT
hRC$ = 64
Vars$ = 80
this$ = 160
DeviceID$ = 168
pValue$ = 176
pRC$ = 184
?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z PROC ; COPOSDeviceMonitor::GetDeviceValue, COMDAT

; 1320 : {

$LN30:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 1321 :     OposVariant Vars[2];

  0001c	bf 02 00 00 00	 mov	 edi, 2
  00021	48 8d 40 b8	 lea	 rax, QWORD PTR [rax-72]
  00025	44 8b d7	 mov	 r10d, edi
  00028	49 8b d9	 mov	 rbx, r9
  0002b	49 8b f0	 mov	 rsi, r8
  0002e	48 8b e9	 mov	 rbp, rcx
  00031	45 33 f6	 xor	 r14d, r14d
$LL4@GetDeviceV:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00034	66 44 89 30	 mov	 WORD PTR [rax], r14w
  00038	44 88 70 18	 mov	 BYTE PTR [rax+24], r14b
  0003c	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  00040	49 83 ea 01	 sub	 r10, 1
  00044	75 ee		 jne	 SHORT $LL4@GetDeviceV
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1323 :     Vars[1].SetBSTR( DeviceID, hRC );

  00046	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  0004b	44 89 74 24 40	 mov	 DWORD PTR hRC$[rsp], r14d
  00050	48 8d 4c 24 70	 lea	 rcx, QWORD PTR Vars$[rsp+32]
  00055	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1324 :     Vars[0].SetLONG_Ptr( pValue, hRC );

  0005a	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  0005f	48 8b d6	 mov	 rdx, rsi
  00062	48 8d 4c 24 50	 lea	 rcx, QWORD PTR Vars$[rsp]
  00067	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::SetLONG_Ptr

; 1325 :     return DoInvoke( DEBUGPARAM("GetDeviceValue") hRC, Vars, 2, nDIGetDeviceValue, pRC );

  0006c	8b 54 24 40	 mov	 edx, DWORD PTR hRC$[rsp]
  00070	4c 8d 44 24 50	 lea	 r8, QWORD PTR Vars$[rsp]
  00075	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  0007a	44 8b cf	 mov	 r9d, edi
  0007d	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00082	48 8b cd	 mov	 rcx, rbp
  00085	c7 44 24 20 15
	00 00 00	 mov	 DWORD PTR [rsp+32], 21
  0008d	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00092	8b f0		 mov	 esi, eax
  00094	48 8d 9c 24 90
	00 00 00	 lea	 rbx, QWORD PTR Vars$[rsp+64]
$LL23@GetDeviceV:
  0009c	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  000a0	48 ff cf	 dec	 rdi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000a3	44 38 73 18	 cmp	 BYTE PTR [rbx+24], r14b
  000a7	74 0d		 je	 SHORT $LN14@GetDeviceV

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	44 88 73 18	 mov	 BYTE PTR [rbx+24], r14b
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN14@GetDeviceV:
  000b6	48 85 ff	 test	 rdi, rdi
  000b9	75 e1		 jne	 SHORT $LL23@GetDeviceV
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1326 : }

  000bb	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  000c3	8b c6		 mov	 eax, esi
  000c5	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000c9	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  000cd	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  000d1	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  000d5	49 8b e3	 mov	 rsp, r11
  000d8	41 5e		 pop	 r14
  000da	c3		 ret	 0
?GetDeviceValue@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z ENDP ; COPOSDeviceMonitor::GetDeviceValue
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
DeviceID$ = 120
pRC$ = 128
hRC$ = 136
?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z PROC ; COPOSDeviceMonitor::DeleteMonitoringDevice, COMDAT

; 1307 : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00010	33 f6		 xor	 esi, esi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1307 : {

  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00018	66 89 70 d8	 mov	 WORD PTR [rax-40], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1310 :     Var.SetBSTR( DeviceID, hRC );

  0001c	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00020	40 88 70 f0	 mov	 BYTE PTR [rax-16], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1310 :     Var.SetBSTR( DeviceID, hRC );

  00024	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00028	89 70 20	 mov	 DWORD PTR [rax+32], esi
  0002b	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1311 :     return DoInvoke( DEBUGPARAM("DeleteMonitoringDevice") hRC, &Var, 1, nDIDeleteMonitoringDevice, pRC );

  00030	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR hRC$[rsp]
  00037	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  0003b	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  00045	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	c7 44 24 20 14
	00 00 00	 mov	 DWORD PTR [rsp+32], 20
  00055	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0005a	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0005c	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  00061	74 10		 je	 SHORT $LN6@DeleteMoni

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00063	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  00068	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN6@DeleteMoni:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1312 : }

  00073	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00078	8b c3		 mov	 eax, ebx
  0007a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0007f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
?DeleteMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ENDP ; COPOSDeviceMonitor::DeleteMonitoringDevice
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 80
pRC$ = 88
?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::ClearMonitoringDevice, COMDAT

; 1298 : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1299 :     return DoInvoke( DEBUGPARAM("ClearMonitoringDevice") S_OK, NULL, 0, nDIClearMonitoringDevice, pRC );

  00004	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00009	45 33 c9	 xor	 r9d, r9d
  0000c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00011	45 33 c0	 xor	 r8d, r8d
  00014	33 d2		 xor	 edx, edx
  00016	c7 44 24 20 13
	00 00 00	 mov	 DWORD PTR [rsp+32], 19
  0001e	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1300 : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	c3		 ret	 0
?ClearMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::ClearMonitoringDevice
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z
_TEXT	SEGMENT
hRC$ = 64
Vars$ = 80
__$ArrayPad$ = 240
this$ = 320
DeviceID$ = 328
MonitoringMode$ = 336
Boundary$ = 344
SubBoundary$ = 352
IntervalTime$ = 360
pRC$ = 368
?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z PROC ; COPOSDeviceMonitor::AddMonitoringDevice, COMDAT

; 1283 : {

$LN30:
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 56		 push	 r14
  00009	41 57		 push	 r15
  0000b	48 8d 6c 24 f1	 lea	 rbp, QWORD PTR [rsp-15]
  00010	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 45 ff	 mov	 QWORD PTR __$ArrayPad$[rbp-241], rax
  00025	4c 8b 7d 7f	 mov	 r15, QWORD PTR pRC$[rbp-241]

; 1284 :     OposVariant Vars[5];

  00029	48 8d 44 24 50	 lea	 rax, QWORD PTR Vars$[rsp]
  0002e	bf 05 00 00 00	 mov	 edi, 5
  00033	48 8b d9	 mov	 rbx, rcx
  00036	8b cf		 mov	 ecx, edi
  00038	45 8b f1	 mov	 r14d, r9d
  0003b	41 8b f0	 mov	 esi, r8d
  0003e	45 33 e4	 xor	 r12d, r12d
$LL4@AddMonitor:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00041	66 44 89 20	 mov	 WORD PTR [rax], r12w
  00045	44 88 60 18	 mov	 BYTE PTR [rax+24], r12b
  00049	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  0004d	48 83 e9 01	 sub	 rcx, 1
  00051	75 ee		 jne	 SHORT $LL4@AddMonitor
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1286 :     Vars[4].SetBSTR( DeviceID, hRC );

  00053	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  00058	44 89 64 24 40	 mov	 DWORD PTR hRC$[rsp], r12d
  0005d	48 8d 4d df	 lea	 rcx, QWORD PTR Vars$[rbp-113]
  00061	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1287 :     Vars[3].SetLONG( MonitoringMode );

  00066	8b d6		 mov	 edx, esi
  00068	48 8d 4d bf	 lea	 rcx, QWORD PTR Vars$[rbp-145]
  0006c	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1288 :     Vars[2].SetLONG( Boundary );

  00071	41 8b d6	 mov	 edx, r14d
  00074	48 8d 4d 9f	 lea	 rcx, QWORD PTR Vars$[rbp-177]
  00078	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1289 :     Vars[1].SetLONG( SubBoundary );

  0007d	8b 55 6f	 mov	 edx, DWORD PTR SubBoundary$[rbp-241]
  00080	48 8d 4c 24 70	 lea	 rcx, QWORD PTR Vars$[rsp+32]
  00085	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1290 :     Vars[0].SetLONG( IntervalTime );

  0008a	8b 55 77	 mov	 edx, DWORD PTR IntervalTime$[rbp-241]
  0008d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR Vars$[rsp]
  00092	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1291 :     return DoInvoke( DEBUGPARAM("AddMonitoringDevice") hRC, Vars, 5, nDIAddMonitoringDevice, pRC );

  00097	8b 54 24 40	 mov	 edx, DWORD PTR hRC$[rsp]
  0009b	4c 8d 44 24 50	 lea	 r8, QWORD PTR Vars$[rsp]
  000a0	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  000a5	44 8b cf	 mov	 r9d, edi
  000a8	4c 89 7c 24 28	 mov	 QWORD PTR [rsp+40], r15
  000ad	48 8b cb	 mov	 rcx, rbx
  000b0	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR [rsp+32], 18
  000b8	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  000bd	8b f0		 mov	 esi, eax
  000bf	48 8d 5d ff	 lea	 rbx, QWORD PTR Vars$[rbp-81]
$LL23@AddMonitor:
  000c3	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  000c7	48 ff cf	 dec	 rdi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000ca	44 38 63 18	 cmp	 BYTE PTR [rbx+24], r12b
  000ce	74 0d		 je	 SHORT $LN14@AddMonitor

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	44 88 63 18	 mov	 BYTE PTR [rbx+24], r12b
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN14@AddMonitor:
  000dd	48 85 ff	 test	 rdi, rdi
  000e0	75 e1		 jne	 SHORT $LL23@AddMonitor
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1291 :     return DoInvoke( DEBUGPARAM("AddMonitoringDevice") hRC, Vars, 5, nDIAddMonitoringDevice, pRC );

  000e2	8b c6		 mov	 eax, esi

; 1292 : }

  000e4	48 8b 4d ff	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-241]
  000e8	48 33 cc	 xor	 rcx, rsp
  000eb	e8 00 00 00 00	 call	 __security_check_cookie
  000f0	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  000f7	41 5f		 pop	 r15
  000f9	41 5e		 pop	 r14
  000fb	41 5c		 pop	 r12
  000fd	5f		 pop	 rdi
  000fe	5e		 pop	 rsi
  000ff	5b		 pop	 rbx
  00100	5d		 pop	 rbp
  00101	c3		 ret	 0
?AddMonitoringDevice@COPOSDeviceMonitor@@UEAAJPEA_WJJJJPEAJ@Z ENDP ; COPOSDeviceMonitor::AddMonitoringDevice
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_MonitoringDeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pMonitoringDeviceList$ = 16
?get_MonitoringDeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_MonitoringDeviceList, COMDAT

; 1640 :     return GetOposProp( DEBUGPARAM("MonitoringDeviceList") PIDXDmon_MonitoringDeviceList, pMonitoringDeviceList, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba cb d2 0f 00	 mov	 edx, 1037003		; 000fd2cbH
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_MonitoringDeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_MonitoringDeviceList
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pDeviceList$ = 16
?get_DeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_DeviceList, COMDAT

; 1633 :     return GetOposProp( DEBUGPARAM("DeviceList") PIDXDmon_DeviceList, pDeviceList, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba ca d2 0f 00	 mov	 edx, 1037002		; 000fd2caH
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_DeviceList@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_DeviceList
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DeviceData@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pDeviceData$ = 16
?get_DeviceData@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_DeviceData, COMDAT

; 1626 :     return GetOposProp( DEBUGPARAM("DeviceData") PIDXDmon_DeviceData, pDeviceData, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba c9 d2 0f 00	 mov	 edx, 1037001		; 000fd2c9H
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_DeviceData@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_DeviceData
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 80
pRC$ = 88
?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::ClearInputProperties, COMDAT

; 1270 : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1271 :     return DoInvoke( DEBUGPARAM("ClearInputProperties") S_OK, NULL, 0, nDIClearInputProperties, pRC );

  00004	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00009	45 33 c9	 xor	 r9d, r9d
  0000c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00011	45 33 c0	 xor	 r8d, r8d
  00014	33 d2		 xor	 edx, edx
  00016	c7 44 24 20 11
	00 00 00	 mov	 DWORD PTR [rsp+32], 17
  0001e	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1272 : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	c3		 ret	 0
?ClearInputProperties@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::ClearInputProperties
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
FirmwareFileName$ = 120
pRC$ = 128
hRC$ = 136
?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z PROC ; COPOSDeviceMonitor::UpdateFirmware, COMDAT

; 1259 : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00010	33 f6		 xor	 esi, esi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1259 : {

  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00018	66 89 70 d8	 mov	 WORD PTR [rax-40], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1262 :     Var.SetBSTR( FirmwareFileName, hRC );

  0001c	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00020	40 88 70 f0	 mov	 BYTE PTR [rax-16], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1262 :     Var.SetBSTR( FirmwareFileName, hRC );

  00024	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00028	89 70 20	 mov	 DWORD PTR [rax+32], esi
  0002b	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1263 :     return DoInvoke( DEBUGPARAM("UpdateFirmware") hRC, &Var, 1, nDIUpdateFirmware, pRC );

  00030	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR hRC$[rsp]
  00037	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  0003b	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  00045	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00055	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0005a	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0005c	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  00061	74 10		 je	 SHORT $LN6@UpdateFirm

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00063	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  00068	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN6@UpdateFirm:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1264 : }

  00073	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00078	8b c3		 mov	 eax, ebx
  0007a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0007f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
?UpdateFirmware@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ENDP ; COPOSDeviceMonitor::UpdateFirmware
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z
_TEXT	SEGMENT
hRC$ = 64
Vars$ = 80
this$ = 160
FirmwareFileName$ = 168
pResult$ = 176
pRC$ = 184
?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z PROC ; COPOSDeviceMonitor::CompareFirmwareVersion, COMDAT

; 1246 : {

$LN30:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 1247 :     OposVariant Vars[2];

  0001c	bf 02 00 00 00	 mov	 edi, 2
  00021	48 8d 40 b8	 lea	 rax, QWORD PTR [rax-72]
  00025	44 8b d7	 mov	 r10d, edi
  00028	49 8b d9	 mov	 rbx, r9
  0002b	49 8b f0	 mov	 rsi, r8
  0002e	48 8b e9	 mov	 rbp, rcx
  00031	45 33 f6	 xor	 r14d, r14d
$LL4@CompareFir:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00034	66 44 89 30	 mov	 WORD PTR [rax], r14w
  00038	44 88 70 18	 mov	 BYTE PTR [rax+24], r14b
  0003c	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  00040	49 83 ea 01	 sub	 r10, 1
  00044	75 ee		 jne	 SHORT $LL4@CompareFir
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1249 :     Vars[1].SetBSTR( FirmwareFileName, hRC );

  00046	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  0004b	44 89 74 24 40	 mov	 DWORD PTR hRC$[rsp], r14d
  00050	48 8d 4c 24 70	 lea	 rcx, QWORD PTR Vars$[rsp+32]
  00055	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1250 :     Vars[0].SetLONG_Ptr( pResult, hRC );

  0005a	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  0005f	48 8b d6	 mov	 rdx, rsi
  00062	48 8d 4c 24 50	 lea	 rcx, QWORD PTR Vars$[rsp]
  00067	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::SetLONG_Ptr

; 1251 :     return DoInvoke( DEBUGPARAM("CompareFirmwareVersion") hRC, Vars, 2, nDICompareFirmwareVersion, pRC );

  0006c	8b 54 24 40	 mov	 edx, DWORD PTR hRC$[rsp]
  00070	4c 8d 44 24 50	 lea	 r8, QWORD PTR Vars$[rsp]
  00075	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  0007a	44 8b cf	 mov	 r9d, edi
  0007d	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00082	48 8b cd	 mov	 rcx, rbp
  00085	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR [rsp+32], 15
  0008d	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00092	8b f0		 mov	 esi, eax
  00094	48 8d 9c 24 90
	00 00 00	 lea	 rbx, QWORD PTR Vars$[rsp+64]
$LL23@CompareFir:
  0009c	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  000a0	48 ff cf	 dec	 rdi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000a3	44 38 73 18	 cmp	 BYTE PTR [rbx+24], r14b
  000a7	74 0d		 je	 SHORT $LN14@CompareFir

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	44 88 73 18	 mov	 BYTE PTR [rbx+24], r14b
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN14@CompareFir:
  000b6	48 85 ff	 test	 rdi, rdi
  000b9	75 e1		 jne	 SHORT $LL23@CompareFir
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1252 : }

  000bb	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  000c3	8b c6		 mov	 eax, esi
  000c5	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000c9	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  000cd	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  000d1	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  000d5	49 8b e3	 mov	 rsp, r11
  000d8	41 5e		 pop	 r14
  000da	c3		 ret	 0
?CompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ1@Z ENDP ; COPOSDeviceMonitor::CompareFirmwareVersion
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
StatisticsBuffer$ = 120
pRC$ = 128
hRC$ = 136
?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z PROC ; COPOSDeviceMonitor::UpdateStatistics, COMDAT

; 1233 : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00010	33 f6		 xor	 esi, esi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1233 : {

  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00018	66 89 70 d8	 mov	 WORD PTR [rax-40], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1236 :     Var.SetBSTR( StatisticsBuffer, hRC );

  0001c	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00020	40 88 70 f0	 mov	 BYTE PTR [rax-16], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1236 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00024	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00028	89 70 20	 mov	 DWORD PTR [rax+32], esi
  0002b	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1237 :     return DoInvoke( DEBUGPARAM("UpdateStatistics") hRC, &Var, 1, nDIUpdateStatistics, pRC );

  00030	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR hRC$[rsp]
  00037	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  0003b	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  00045	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	c7 44 24 20 0e
	00 00 00	 mov	 DWORD PTR [rsp+32], 14
  00055	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0005a	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0005c	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  00061	74 10		 je	 SHORT $LN6@UpdateStat

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00063	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  00068	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN6@UpdateStat:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1238 : }

  00073	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00078	8b c3		 mov	 eax, ebx
  0007a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0007f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
?UpdateStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ENDP ; COPOSDeviceMonitor::UpdateStatistics
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
pStatisticsBuffer$ = 120
pRC$ = 128
hRC$ = 136
?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z PROC ; COPOSDeviceMonitor::RetrieveStatistics, COMDAT

; 1221 : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00010	33 f6		 xor	 esi, esi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1221 : {

  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00018	66 89 70 d8	 mov	 WORD PTR [rax-40], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1224 :     Var.SetBSTR_InOutPtr( pStatisticsBuffer, hRC );

  0001c	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00020	40 88 70 f0	 mov	 BYTE PTR [rax-16], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1224 :     Var.SetBSTR_InOutPtr( pStatisticsBuffer, hRC );

  00024	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00028	89 70 20	 mov	 DWORD PTR [rax+32], esi
  0002b	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 1225 :     return DoInvoke( DEBUGPARAM("RetrieveStatistics") hRC, &Var, 1, nDIRetrieveStatistics, pRC );

  00030	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR hRC$[rsp]
  00037	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  0003b	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  00045	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	c7 44 24 20 0d
	00 00 00	 mov	 DWORD PTR [rsp+32], 13
  00055	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0005a	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0005c	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  00061	74 10		 je	 SHORT $LN6@RetrieveSt

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00063	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  00068	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN6@RetrieveSt:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1226 : }

  00073	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00078	8b c3		 mov	 eax, ebx
  0007a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0007f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
?RetrieveStatistics@COPOSDeviceMonitor@@UEAAJPEAPEA_WPEAJ@Z ENDP ; COPOSDeviceMonitor::RetrieveStatistics
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
StatisticsBuffer$ = 120
pRC$ = 128
hRC$ = 136
?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z PROC ; COPOSDeviceMonitor::ResetStatistics, COMDAT

; 1209 : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00010	33 f6		 xor	 esi, esi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1209 : {

  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00018	66 89 70 d8	 mov	 WORD PTR [rax-40], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1212 :     Var.SetBSTR( StatisticsBuffer, hRC );

  0001c	4c 8d 40 20	 lea	 r8, QWORD PTR [rax+32]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00020	40 88 70 f0	 mov	 BYTE PTR [rax-16], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1212 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00024	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
  00028	89 70 20	 mov	 DWORD PTR [rax+32], esi
  0002b	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 1213 :     return DoInvoke( DEBUGPARAM("ResetStatistics") hRC, &Var, 1, nDIResetStatistics, pRC );

  00030	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR hRC$[rsp]
  00037	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  0003b	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  00045	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004a	48 8b cf	 mov	 rcx, rdi
  0004d	c7 44 24 20 0c
	00 00 00	 mov	 DWORD PTR [rsp+32], 12
  00055	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0005a	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  0005c	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  00061	74 10		 je	 SHORT $LN6@ResetStati

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00063	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  00068	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN6@ResetStati:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1214 : }

  00073	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00078	8b c3		 mov	 eax, ebx
  0007a	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0007f	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
?ResetStatistics@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ENDP ; COPOSDeviceMonitor::ResetStatistics
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 80
pRC$ = 88
?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::ReleaseDevice, COMDAT

; 1134 : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0000a	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1134 : {

  00011	48 8b fa	 mov	 rdi, rdx

; 1135 :     SetRC();
; 1136 : 
; 1137 :     // If not opened, set return code.
; 1138 :     if ( ! _bOpened )

  00014	80 b9 80 01 00
	00 00		 cmp	 BYTE PTR [rcx+384], 0
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	75 0a		 jne	 SHORT $LN2@ReleaseDev

; 1139 :     {
; 1140 :         *pRC = OPOS_E_CLOSED;

  00020	c7 02 65 00 00
	00		 mov	 DWORD PTR [rdx], 101	; 00000065H

; 1141 :         DOTRACEV( ( _T("*ReleaseDevice [Function] -- Closed") ) );
; 1142 :         return S_OK;

  00026	33 c0		 xor	 eax, eax
  00028	eb 36		 jmp	 SHORT $LN1@ReleaseDev
$LN2@ReleaseDev:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h

; 227  :         _Event_bEventsLegal = false;

  0002a	c6 81 09 02 00
	00 00		 mov	 BYTE PTR [rcx+521], 0

; 228  :         //  - In case an OPOS event is being fired, set Win32 event to cause
; 229  :         //    "DoEvent" to break out of its wait.
; 230  :         ::SetEvent( _Event_FiringDoneEvent );

  00031	48 8b 89 10 02
	00 00		 mov	 rcx, QWORD PTR [rcx+528]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1149 :     return DoInvoke( DEBUGPARAM("ReleaseDevice") S_OK, NULL, 0, nDIReleaseDevice, pRC, false );

  0003e	c6 44 24 30 00	 mov	 BYTE PTR [rsp+48], 0
  00043	45 33 c9	 xor	 r9d, r9d
  00046	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	33 d2		 xor	 edx, edx
  00050	c7 44 24 20 0b
	00 00 00	 mov	 DWORD PTR [rsp+32], 11
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
$LN1@ReleaseDev:

; 1150 : }

  00060	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00065	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
?ReleaseDevice@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::ReleaseDevice
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z
_TEXT	SEGMENT
hRC$ = 80
Disp$1 = 88
$T2 = 88
$T3 = 88
MN$4 = 88
$T5 = 88
$T6 = 88
dwSize$ = 120
dwType$ = 124
nSOVersion$ = 128
hRCTmp$7 = 136
pMN$8 = 136
DispID$9 = 144
hBaseKey$ = 152
pDispatch$ = 160
hServiceKey$ = 168
pUnknown$ = 176
VarResult$10 = 184
pMN$11 = 216
SOClassID$ = 224
Vars$ = 240
szPhysicalDeviceName$ = 336
sSOProgID$ = 848
szBaseKey$ = 1360
__$ArrayPad$ = 1872
this$ = 1952
DeviceName$ = 1960
pRC$ = 1968
?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z PROC		; COPOSDeviceMonitor::Open, COMDAT

; 686  : {

$LN236:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 8d ac 24 a0
	f9 ff ff	 lea	 rbp, QWORD PTR [rsp-1632]
  00018	48 81 ec 60 07
	00 00		 sub	 rsp, 1888		; 00000760H
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c4	 xor	 rax, rsp
  00029	48 89 85 50 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax

; 687  :     HRESULT hRC;
; 688  :     LONG nError;
; 689  : 
; 690  :     DOTRACE( ( _T("*Open [Function]: DeviceName <%ls>"), DeviceName ) );
; 691  : 
; 692  :     // If already open, return error.
; 693  :     if ( _bOpened )

  00030	45 33 ed	 xor	 r13d, r13d
  00033	4d 8b e0	 mov	 r12, r8
  00036	48 8b da	 mov	 rbx, rdx
  00039	48 8b f9	 mov	 rdi, rcx
  0003c	44 38 a9 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], r13b
  00043	74 1c		 je	 SHORT $LN4@Open
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00045	41 8d 45 6a	 lea	 eax, QWORD PTR [r13+106]
  00049	89 81 90 01 00
	00		 mov	 DWORD PTR [rcx+400], eax
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 695  :         *pRC = SetRC( OPOS_E_ILLEGAL );

  0004f	41 89 00	 mov	 DWORD PTR [r8], eax

; 696  :         _nOpenResult = OPOS_OR_ALREADYOPEN;

  00052	c7 81 84 01 00
	00 2d 01 00 00	 mov	 DWORD PTR [rcx+388], 301 ; 0000012dH

; 697  :         DOTRACE( ( _T("-  Failed: CCO already open (%d/%d)"), *pRC, _nOpenResult ) );
; 698  :         return S_OK;

  0005c	e9 f8 07 00 00	 jmp	 $LN12@Open
$LN4@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00061	b8 6d 00 00 00	 mov	 eax, 109		; 0000006dH
  00066	89 81 90 01 00
	00		 mov	 DWORD PTR [rcx+400], eax
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 702  :     *pRC = SetRC( OPOS_E_NOEXIST );

  0006c	41 89 00	 mov	 DWORD PTR [r8], eax

; 703  :     _nOpenResult = OPOS_OR_REGBADNAME;

  0006f	c7 81 84 01 00
	00 2e 01 00 00	 mov	 DWORD PTR [rcx+388], 302 ; 0000012eH

; 704  : 
; 705  :     // Check the DeviceName length...
; 706  :     UINT nDeviceNameLen = ::SysStringLen( DeviceName );

  00079	48 8b cb	 mov	 rcx, rbx
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysStringLen

; 707  : 
; 708  :     //  - Ensure that the DeviceName is not an empty string.
; 709  :     if ( nDeviceNameLen == 0 )

  00082	ff c8		 dec	 eax
  00084	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  00089	0f 87 ca 07 00
	00		 ja	 $LN12@Open

; 710  :     {
; 711  :         DOTRACE( ( _T("-  Failed: Empty device name (%d/%d)"), *pRC, _nOpenResult ) );
; 712  :         return S_OK;
; 713  :     }
; 714  : 
; 715  :     //  - Ensure that the DeviceName is not unreasonably long.
; 716  :     //     Otherwise it may overrun this line below: wcscpy( szPhysicalDeviceName, DeviceName )
; 717  :     if ( nDeviceNameLen >= MAX_REGBUFFER_SIZE )
; 718  :     {
; 719  :         DOTRACE( ( _T("-  Failed: Device name too big (%d/%d)"), *pRC, _nOpenResult ) );
; 720  :         return S_OK;
; 721  :     }
; 722  : 
; 723  :     // Form and open the base key.
; 724  :     TCHAR szBaseKey[ MAX_REGBUFFER_SIZE ];
; 725  :     HKEY hBaseKey;
; 726  :     cw_strcpy( szBaseKey, OPOS_ROOTKEY "\\" OPOS_CLASSKEY_DMON );

  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@HGCACNPB@SOFTWARE?2OLEforRetail?2ServiceOP@
  00096	48 8d 8d 50 04
	00 00		 lea	 rcx, QWORD PTR szBaseKey$[rbp-256]
  0009d	e8 00 00 00 00	 call	 ?cw_strcpy@@YAHPEA_WPEBD@Z ; cw_strcpy

; 727  :     nError = RegOpenKeyEx(

  000a2	48 8d 45 98	 lea	 rax, QWORD PTR hBaseKey$[rbp-256]
  000a6	41 bf 19 00 02
	00		 mov	 r15d, 131097		; 00020019H
  000ac	45 8b cf	 mov	 r9d, r15d
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	45 33 c0	 xor	 r8d, r8d
  000b7	48 8d 95 50 04
	00 00		 lea	 rdx, QWORD PTR szBaseKey$[rbp-256]
  000be	48 c7 c1 02 00
	00 80		 mov	 rcx, -2147483646	; ffffffff80000002H
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegOpenKeyExW

; 728  :             HKEY_LOCAL_MACHINE,         // Handle to open key
; 729  :             szBaseKey,                  // Address of name of subkey to open
; 730  :             0,                          // Reserved
; 731  :             KEY_READ,                   // Security access mask
; 732  :             &hBaseKey );                // Address of handle to open key
; 733  :     if ( ERROR_SUCCESS != nError )

  000cb	85 c0		 test	 eax, eax
  000cd	0f 85 86 07 00
	00		 jne	 $LN12@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  000d3	48 83 c8 ff	 or	 rax, -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 747  :     DWORD dwSize = sizeof( szPhysicalDeviceName );

  000d7	c7 44 24 78 00
	02 00 00	 mov	 DWORD PTR dwSize$[rsp], 512 ; 00000200H
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  000df	48 89 44 24 58	 mov	 QWORD PTR $T6[rsp], rax

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  000e4	48 8b d3	 mov	 rdx, rbx
  000e7	48 89 5c 24 60	 mov	 QWORD PTR $T6[rsp+8], rbx
  000ec	89 44 24 6c	 mov	 DWORD PTR $T6[rsp+20], eax
  000f0	44 88 6c 24 70	 mov	 BYTE PTR $T6[rsp+24], r13b
  000f5	48 3b d8	 cmp	 rbx, rax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  000f8	75 0f		 jne	 SHORT $LN56@Open
  000fa	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T6[rsp]
  000ff	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
  00104	48 8b 54 24 60	 mov	 rdx, QWORD PTR $T6[rsp+8]
$LN56@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 755  :             &dwSize ) ||                // Address of data buffer size

  00109	48 8b 4d 98	 mov	 rcx, QWORD PTR hBaseKey$[rbp-256]
  0010d	48 8d 44 24 78	 lea	 rax, QWORD PTR dwSize$[rsp]
  00112	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00117	4c 8d 4c 24 7c	 lea	 r9, QWORD PTR dwType$[rsp]
  0011c	48 8d 45 50	 lea	 rax, QWORD PTR szPhysicalDeviceName$[rbp-256]
  00120	45 33 c0	 xor	 r8d, r8d
  00123	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExW
  0012e	41 be 01 00 00
	00		 mov	 r14d, 1
  00134	85 c0		 test	 eax, eax
  00136	75 0a		 jne	 SHORT $LN41@Open
  00138	41 8a f5	 mov	 sil, r13b
  0013b	44 39 74 24 7c	 cmp	 DWORD PTR dwType$[rsp], r14d
  00140	74 03		 je	 SHORT $LN42@Open
$LN41@Open:
  00142	41 8a f6	 mov	 sil, r14b
$LN42@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00145	8a 44 24 70	 mov	 al, BYTE PTR $T6[rsp+24]
  00149	3c 63		 cmp	 al, 99			; 00000063H
  0014b	75 07		 jne	 SHORT $LN59@Open
  0014d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR $T6[rsp]
  00152	eb 09		 jmp	 SHORT $LN226@Open
$LN59@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00154	3c 77		 cmp	 al, 119			; 00000077H
  00156	75 0a		 jne	 SHORT $LN61@Open
  00158	48 8b 4c 24 60	 mov	 rcx, QWORD PTR $T6[rsp+8]
$LN226@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 755  :             &dwSize ) ||                // Address of data buffer size

  0015d	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN61@Open:
  00162	40 84 f6	 test	 sil, sil
  00165	74 19		 je	 SHORT $LN8@Open

; 756  :          dwType != REG_SZ
; 757  :        )
; 758  :     {
; 759  :         wcscpy( szPhysicalDeviceName, DeviceName );

  00167	48 8d 4d 50	 lea	 rcx, QWORD PTR szPhysicalDeviceName$[rbp-256]
  0016b	48 2b cb	 sub	 rcx, rbx
$LL43@Open:
  0016e	0f b7 03	 movzx	 eax, WORD PTR [rbx]
  00171	66 89 04 19	 mov	 WORD PTR [rcx+rbx], ax
  00175	48 8d 5b 02	 lea	 rbx, QWORD PTR [rbx+2]
  00179	66 85 c0	 test	 ax, ax
  0017c	75 f0		 jne	 SHORT $LL43@Open

; 760  :         DOTRACE( ( _T("    DeviceName is not a LogicalName; treating as PhysicalName") ) );
; 761  :     }

  0017e	eb 08		 jmp	 SHORT $LN9@Open
$LN8@Open:

; 762  :     else
; 763  :     {
; 764  :         NULTERMINATE(szPhysicalDeviceName);

  00180	66 44 89 ad 4e
	02 00 00	 mov	 WORD PTR szPhysicalDeviceName$[rbp+254], r13w
$LN9@Open:

; 765  :         DOTRACE( ( _T("    DeviceName is a LogicalName; converted to PhysicalName <%s>"), szPhysicalDeviceName ) );
; 766  :     }
; 767  : 
; 768  :     // Open the physical registry entry. Close the base key.
; 769  :     //   If fails, then return error.
; 770  :     HKEY hServiceKey;
; 771  :     LONG nRegStat = RegOpenKeyEx(

  00188	48 8b 4d 98	 mov	 rcx, QWORD PTR hBaseKey$[rbp-256]
  0018c	48 8d 45 a8	 lea	 rax, QWORD PTR hServiceKey$[rbp-256]
  00190	45 8b cf	 mov	 r9d, r15d
  00193	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00198	45 33 c0	 xor	 r8d, r8d
  0019b	48 8d 55 50	 lea	 rdx, QWORD PTR szPhysicalDeviceName$[rbp-256]
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegOpenKeyExW

; 772  :             hBaseKey,                   // handle to open key
; 773  :             szPhysicalDeviceName,       // address of name of subkey to open
; 774  :             0,                          // reserved
; 775  :             KEY_READ,                   // security access mask
; 776  :             &hServiceKey );             // address of handle to open key
; 777  :     RegCloseKey( hBaseKey );

  001a5	48 8b 4d 98	 mov	 rcx, QWORD PTR hBaseKey$[rbp-256]
  001a9	8b d8		 mov	 ebx, eax
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey

; 778  :     if ( ERROR_SUCCESS != nRegStat )

  001b1	85 db		 test	 ebx, ebx
  001b3	0f 85 a0 06 00
	00		 jne	 $LN12@Open

; 789  : 
; 790  :     // Now get the Service Object's ProgID, which is the default value's data for the device's key.
; 791  :     //   If fails, then return error.
; 792  :     TCHAR sSOProgID[ MAX_REGBUFFER_SIZE ];
; 793  :     dwSize = sizeof( sSOProgID );
; 794  :     nRegStat = RegQueryValueEx(

  001b9	48 8b 4d a8	 mov	 rcx, QWORD PTR hServiceKey$[rbp-256]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  001bd	8d 43 68	 lea	 eax, QWORD PTR [rbx+104]
  001c0	89 87 90 01 00
	00		 mov	 DWORD PTR [rdi+400], eax
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 788  :     _nOpenResult = OPOS_OR_REGPROGID;

  001c6	4c 8d bf 84 01
	00 00		 lea	 r15, QWORD PTR [rdi+388]
  001cd	41 89 04 24	 mov	 DWORD PTR [r12], eax

; 789  : 
; 790  :     // Now get the Service Object's ProgID, which is the default value's data for the device's key.
; 791  :     //   If fails, then return error.
; 792  :     TCHAR sSOProgID[ MAX_REGBUFFER_SIZE ];
; 793  :     dwSize = sizeof( sSOProgID );
; 794  :     nRegStat = RegQueryValueEx(

  001d1	4c 8d 4c 24 7c	 lea	 r9, QWORD PTR dwType$[rsp]
  001d6	48 8d 44 24 78	 lea	 rax, QWORD PTR dwSize$[rsp]
  001db	41 c7 07 2f 01
	00 00		 mov	 DWORD PTR [r15], 303	; 0000012fH
  001e2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001e7	45 33 c0	 xor	 r8d, r8d
  001ea	48 8d 85 50 02
	00 00		 lea	 rax, QWORD PTR sSOProgID$[rbp-256]
  001f1	c7 44 24 78 00
	02 00 00	 mov	 DWORD PTR dwSize$[rsp], 512 ; 00000200H
  001f9	33 d2		 xor	 edx, edx
  001fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00200	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegQueryValueExW

; 795  :             hServiceKey,                // Handle to key to query
; 796  :             0,                          // Address of name of value to query
; 797  :             0,                          // Reserved
; 798  :             &dwType,                    // Address of buffer for value type
; 799  :             (LPBYTE) sSOProgID,         // Address of data buffer
; 800  :             &dwSize );                  // Address of data buffer size
; 801  :     RegCloseKey( hServiceKey );

  00206	48 8b 4d a8	 mov	 rcx, QWORD PTR hServiceKey$[rbp-256]
  0020a	8b d8		 mov	 ebx, eax
  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegCloseKey

; 802  :     if ( ERROR_SUCCESS != nRegStat || dwType != REG_SZ )

  00212	85 db		 test	 ebx, ebx
  00214	0f 85 3f 06 00
	00		 jne	 $LN12@Open
  0021a	44 39 74 24 7c	 cmp	 DWORD PTR dwType$[rsp], r14d
  0021f	0f 85 34 06 00
	00		 jne	 $LN12@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  00225	48 83 ca ff	 or	 rdx, -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 808  :     NULTERMINATE(sSOProgID);

  00229	66 44 89 ad 4e
	04 00 00	 mov	 WORD PTR sSOProgID$[rbp+254], r13w
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  00231	48 8d 85 50 02
	00 00		 lea	 rax, QWORD PTR sSOProgID$[rbp-256]
  00238	48 89 54 24 58	 mov	 QWORD PTR $T5[rsp], rdx

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  0023d	89 54 24 6c	 mov	 DWORD PTR $T5[rsp+20], edx
  00241	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR sSOProgID$[rbp-256]
  00248	48 89 4c 24 60	 mov	 QWORD PTR $T5[rsp+8], rcx
  0024d	44 88 6c 24 70	 mov	 BYTE PTR $T5[rsp+24], r13b
  00252	48 3b c2	 cmp	 rax, rdx

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00255	75 0f		 jne	 SHORT $LN68@Open
  00257	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  0025c	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
  00261	48 8b 4c 24 60	 mov	 rcx, QWORD PTR $T5[rsp+8]
$LN68@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 813  :     hRC = CLSIDFromProgID(

  00266	48 8d 55 e0	 lea	 rdx, QWORD PTR SOClassID$[rbp-256]
  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CLSIDFromProgID
  00270	89 44 24 50	 mov	 DWORD PTR hRC$[rsp], eax
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00274	8a 44 24 70	 mov	 al, BYTE PTR $T5[rsp+24]
  00278	3c 63		 cmp	 al, 99			; 00000063H
  0027a	75 07		 jne	 SHORT $LN71@Open
  0027c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR $T5[rsp]
  00281	eb 09		 jmp	 SHORT $LN227@Open
$LN71@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00283	3c 77		 cmp	 al, 119			; 00000077H
  00285	75 0a		 jne	 SHORT $LN73@Open
  00287	48 8b 4c 24 60	 mov	 rcx, QWORD PTR $T5[rsp+8]
$LN227@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 816  :     if ( S_OK != hRC )

  0028c	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN73@Open:
  00291	44 39 6c 24 50	 cmp	 DWORD PTR hRC$[rsp], r13d
  00296	0f 85 bd 05 00
	00		 jne	 $LN12@Open

; 817  :     {
; 818  :         DOTRACE( ( _T("-  Failed: Cannot convert ProgID to ClassID (%d/%d)"), *pRC, _nOpenResult ) );
; 819  :         DOTRACEERR( _T("    CLSIDFromProgID error 0x%X\n    %s"), hRC );
; 820  :         return S_OK;
; 821  :     }
; 822  :     DOTRACE( ( _T("    ProgID mapped to ClassID") ) );
; 823  : 
; 824  :     // Make the connection to the Service Object.
; 825  :     //   We create an instance, get the IDispatch pointer, then release the IUnknown pointer.
; 826  :     IUnknown* pUnknown;
; 827  :     hRC = CoCreateInstance(

  0029c	33 d2		 xor	 edx, edx
  0029e	48 8d 45 b0	 lea	 rax, QWORD PTR pUnknown$[rbp-256]
  002a2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:IID_IUnknown
  002a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ae	48 8d 4d e0	 lea	 rcx, QWORD PTR SOClassID$[rbp-256]
  002b2	44 8d 42 17	 lea	 r8d, QWORD PTR [rdx+23]
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoCreateInstance
  002bc	89 44 24 50	 mov	 DWORD PTR hRC$[rsp], eax

; 828  :             SOClassID,                  // Class identifier (CLSID) of the object
; 829  :             0,                          // Pointer to whether object is or isn't part of an aggregate
; 830  :             CLSCTX_ALL,                 // Context for running executable code
; 831  :             IID_IUnknown,               // Reference to the identifier of the interface
; 832  :             (void**) &pUnknown);        // Address of output variable that receives the interface pointer requested in riid
; 833  :     if ( S_OK != hRC )

  002c0	85 c0		 test	 eax, eax
  002c2	0f 85 8a 05 00
	00		 jne	 $LN220@Open

; 834  :     {
; 835  :         _nOpenResult = OPOS_OR_CREATE;
; 836  :         DOTRACE( ( _T("-  Failed: Cannot create Service Object (%d/%d)"), *pRC, _nOpenResult ) );
; 837  :         DOTRACEERR( _T("    CoCreateInstance error 0x%X\n    %s"), hRC );
; 838  :         return S_OK;
; 839  :     }
; 840  :     DOTRACE( ( _T("    Created Service Object") ) );
; 841  : 
; 842  :     hRC = pUnknown->QueryInterface(

  002c8	48 8b 4d b0	 mov	 rcx, QWORD PTR pUnknown$[rbp-256]
  002cc	48 8d b7 98 01
	00 00		 lea	 rsi, QWORD PTR [rdi+408]
  002d3	4c 8b c6	 mov	 r8, rsi
  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:IID_IDispatch
  002dd	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  002e0	ff 10		 call	 QWORD PTR [rax]

; 843  :             IID_IDispatch,              // Identifier of the requested interface
; 844  :             (void**) &_pService );      // Address of output variable that receives the interface pointer requested in iid
; 845  :     pUnknown->Release();                // Done with original pointer.

  002e2	48 8b 4d b0	 mov	 rcx, QWORD PTR pUnknown$[rbp-256]
  002e6	89 44 24 50	 mov	 DWORD PTR hRC$[rsp], eax
  002ea	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  002ed	ff 50 10	 call	 QWORD PTR [rax+16]

; 846  :     if ( S_OK != hRC )

  002f0	44 39 6c 24 50	 cmp	 DWORD PTR hRC$[rsp], r13d
  002f5	0f 85 57 05 00
	00		 jne	 $LN220@Open

; 858  :     while ( s_SOMethodNames[nMethodCount] != 0 )

  002fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?s_SOMethodNames@@3PAPEADA
  00302	45 8b f5	 mov	 r14d, r13d
  00305	48 85 c0	 test	 rax, rax
  00308	0f 84 3b 01 00
	00		 je	 $LN221@Open
  0030e	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:?s_SOMethodNames@@3PAPEADA
$LL2@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  00315	48 89 44 24 58	 mov	 QWORD PTR MN$4[rsp], rax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0031a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR MN$4[rsp]

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  0031f	48 83 c8 ff	 or	 rax, -1
  00323	44 88 6c 24 70	 mov	 BYTE PTR MN$4[rsp+24], r13b
  00328	48 89 44 24 60	 mov	 QWORD PTR MN$4[rsp+8], rax
  0032d	89 44 24 68	 mov	 DWORD PTR MN$4[rsp+16], eax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00331	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 861  :         OLECHAR* pMN = MN;                          // Assign pointer, converting to wide if needed.

  00336	48 8b 44 24 60	 mov	 rax, QWORD PTR MN$4[rsp+8]

; 862  :         if ( S_OK !=

  0033b	4c 8d 45 88	 lea	 r8, QWORD PTR pMN$8[rbp-256]
  0033f	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:GUID_NULL
  00349	48 89 45 88	 mov	 QWORD PTR pMN$8[rbp-256], rax
  0034d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00353	49 63 c6	 movsxd	 rax, r14d
  00356	48 83 c0 6b	 add	 rax, 107		; 0000006bH
  0035a	4c 8d 2c 87	 lea	 r13, QWORD PTR [rdi+rax*4]
  0035e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00361	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  00366	c7 44 24 20 00
	08 00 00	 mov	 DWORD PTR [rsp+32], 2048 ; 00000800H
  0036e	ff 50 28	 call	 QWORD PTR [rax+40]
  00371	85 c0		 test	 eax, eax
  00373	74 70		 je	 SHORT $LN224@Open

; 863  :              _pService->GetIDsOfNames(
; 864  :                 IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nMethodCount] )
; 865  :            )
; 866  :         {
; 867  :             // If failed, do special cases:
; 868  :             //  - If we failed the newer CloseService, then try Close before failing.
; 869  :             if ( nMethodCount == nDICloseService )

  00375	41 83 fe 09	 cmp	 r14d, 9
  00379	75 09		 jne	 SHORT $LN17@Open

; 870  :                 pMN = L"Close";

  0037b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1M@IAIJHCCH@?$AAC?$AAl?$AAo?$AAs?$AAe@
  00382	eb 20		 jmp	 SHORT $LN22@Open
$LN17@Open:

; 871  :             //  - If we failed the newer COM-friendly name ClaimDevice or ReleaseDevice,
; 872  :             //    then try the original name Claim or Release before failing.
; 873  :             else if ( nMethodCount == nDIClaimDevice )

  00384	41 83 fe 07	 cmp	 r14d, 7
  00388	75 09		 jne	 SHORT $LN19@Open

; 874  :                 pMN = L"Claim";

  0038a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1M@PCPKGJAH@?$AAC?$AAl?$AAa?$AAi?$AAm@
  00391	eb 11		 jmp	 SHORT $LN22@Open
$LN19@Open:

; 875  :             else if ( nMethodCount == nDIReleaseDevice )

  00393	41 83 fe 0b	 cmp	 r14d, 11
  00397	0f 85 8c 00 00
	00		 jne	 $LN21@Open

; 876  :                 pMN = L"Release";

  0039d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1BA@NDFKIOCP@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe@
$LN22@Open:

; 877  :             else                        // If not special case,
; 878  :                 break;                  //   stop.
; 879  :             if ( S_OK !=

  003a4	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  003a7	4c 8d 45 88	 lea	 r8, QWORD PTR pMN$8[rbp-256]
  003ab	48 89 45 88	 mov	 QWORD PTR pMN$8[rbp-256], rax
  003af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:GUID_NULL
  003b6	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  003bb	41 b9 01 00 00
	00		 mov	 r9d, 1
  003c1	c7 44 24 20 00
	08 00 00	 mov	 DWORD PTR [rsp+32], 2048 ; 00000800H
  003c9	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  003cc	ff 50 28	 call	 QWORD PTR [rax+40]
  003cf	45 33 ed	 xor	 r13d, r13d
  003d2	85 c0		 test	 eax, eax
  003d4	74 12		 je	 SHORT $LN211@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  003d6	8a 44 24 70	 mov	 al, BYTE PTR MN$4[rsp+24]
  003da	3c 63		 cmp	 al, 99			; 00000063H
  003dc	75 3b		 jne	 SHORT $LN94@Open
  003de	48 8b 4c 24 58	 mov	 rcx, QWORD PTR MN$4[rsp]
  003e3	eb 3d		 jmp	 SHORT $LN229@Open
$LN224@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 862  :         if ( S_OK !=

  003e5	45 33 ed	 xor	 r13d, r13d
$LN211@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  003e8	8a 44 24 70	 mov	 al, BYTE PTR MN$4[rsp+24]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 885  :         nMethodCount++;

  003ec	41 ff c6	 inc	 r14d
  003ef	48 83 c3 08	 add	 rbx, 8
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  003f3	3c 63		 cmp	 al, 99			; 00000063H
  003f5	75 07		 jne	 SHORT $LN101@Open
  003f7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR MN$4[rsp]
  003fc	eb 09		 jmp	 SHORT $LN228@Open
$LN101@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  003fe	3c 77		 cmp	 al, 119			; 00000077H
  00400	75 0a		 jne	 SHORT $LN103@Open
  00402	48 8b 4c 24 60	 mov	 rcx, QWORD PTR MN$4[rsp+8]
$LN228@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 858  :     while ( s_SOMethodNames[nMethodCount] != 0 )

  00407	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN103@Open:
  0040c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0040f	48 85 c0	 test	 rax, rax
  00412	74 35		 je	 SHORT $LN221@Open
  00414	e9 fc fe ff ff	 jmp	 $LL2@Open
$LN94@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00419	3c 77		 cmp	 al, 119			; 00000077H
  0041b	75 2c		 jne	 SHORT $LN221@Open
  0041d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR MN$4[rsp+8]
$LN229@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 925  :     if ( nMethodCount < s_RequiredMethodsPerRelease[0] )

  00422	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  00427	eb 20		 jmp	 SHORT $LN221@Open
$LN21@Open:
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00429	8a 44 24 70	 mov	 al, BYTE PTR MN$4[rsp+24]
  0042d	3c 63		 cmp	 al, 99			; 00000063H
  0042f	75 07		 jne	 SHORT $LN87@Open
  00431	48 8b 4c 24 58	 mov	 rcx, QWORD PTR MN$4[rsp]
  00436	eb 09		 jmp	 SHORT $LN233@Open
$LN87@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00438	3c 77		 cmp	 al, 119			; 00000077H
  0043a	75 0a		 jne	 SHORT $LN223@Open
  0043c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR MN$4[rsp+8]
$LN233@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 925  :     if ( nMethodCount < s_RequiredMethodsPerRelease[0] )

  00441	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN223@Open:
  00446	45 33 ed	 xor	 r13d, r13d
$LN221@Open:
  00449	44 3b 35 00 00
	00 00		 cmp	 r14d, DWORD PTR ?s_RequiredMethodsPerRelease@@3PAHA
  00450	7d 16		 jge	 SHORT $LN24@Open

; 926  :     {
; 927  :         _nOpenResult = OPOS_OR_BADIF;
; 928  :         _pService->Release();

  00452	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00455	b8 31 01 00 00	 mov	 eax, 305		; 00000131H
  0045a	41 89 07	 mov	 DWORD PTR [r15], eax
  0045d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00460	ff 50 10	 call	 QWORD PTR [rax+16]

; 929  :         DOTRACE( ( _T("-  Failed: Doesn't support all of initial release's methods (%d/%d)"), *pRC, _nOpenResult ) );
; 930  :         DOTRACEMETHODS( _DispIDs, s_RequiredMethodsPerRelease[0] );
; 931  :         return S_OK;

  00463	e9 f1 03 00 00	 jmp	 $LN12@Open
$LN24@Open:

; 932  :     }
; 933  : 
; 934  :     // Get our own dispatch pointer.
; 935  :     //   Immediately release it -- saves releasing later,
; 936  :     //   since it is just another reference to us.
; 937  :     IDispatch* pDispatch = 0;
; 938  :     CMVERIFY( S_OK == QueryInterface( IID_IDispatch, (void**) &pDispatch ) );

  00468	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0046b	4c 8d 45 a0	 lea	 r8, QWORD PTR pDispatch$[rbp-256]
  0046f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:IID_IDispatch
  00476	4c 89 6d a0	 mov	 QWORD PTR pDispatch$[rbp-256], r13
  0047a	48 8b cf	 mov	 rcx, rdi
  0047d	ff 10		 call	 QWORD PTR [rax]

; 939  :     if ( pDispatch != 0 )

  0047f	48 8b 4d a0	 mov	 rcx, QWORD PTR pDispatch$[rbp-256]
  00483	48 85 c9	 test	 rcx, rcx
  00486	74 06		 je	 SHORT $LN25@Open

; 940  :         pDispatch->Release();

  00488	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0048b	ff 50 10	 call	 QWORD PTR [rax+16]
$LN25@Open:

; 941  : 
; 942  :     // Now call the Service Object's OpenService method.
; 943  :     OposVariant Vars[3];

  0048e	bb 03 00 00 00	 mov	 ebx, 3
  00493	48 8d 45 f0	 lea	 rax, QWORD PTR Vars$[rbp-256]
  00497	8b cb		 mov	 ecx, ebx
$LL106@Open:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00499	66 44 89 28	 mov	 WORD PTR [rax], r13w
  0049d	44 88 68 18	 mov	 BYTE PTR [rax+24], r13b
  004a1	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  004a5	48 83 e9 01	 sub	 rcx, 1
  004a9	75 ee		 jne	 SHORT $LL106@Open
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  004ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@HKCCFACK@DeviceMonitor@

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  004b2	44 88 6c 24 70	 mov	 BYTE PTR $T3[rsp+24], r13b
  004b7	48 89 44 24 58	 mov	 QWORD PTR $T3[rsp], rax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  004bc	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T3[rsp]

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  004c1	48 83 c8 ff	 or	 rax, -1
  004c5	48 89 44 24 60	 mov	 QWORD PTR $T3[rsp+8], rax
  004ca	89 44 24 68	 mov	 DWORD PTR $T3[rsp+16], eax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  004ce	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 944  :     Vars[2].SetString( _CW(OPOS_CLASSKEY_DMON), hRC );

  004d3	48 8b 54 24 60	 mov	 rdx, QWORD PTR $T3[rsp+8]
  004d8	4c 8d 44 24 50	 lea	 r8, QWORD PTR hRC$[rsp]
  004dd	48 8d 4d 30	 lea	 rcx, QWORD PTR Vars$[rbp-192]
  004e1	e8 00 00 00 00	 call	 ?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z ; OposVariant::SetString
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  004e6	8a 44 24 70	 mov	 al, BYTE PTR $T3[rsp+24]
  004ea	3c 63		 cmp	 al, 99			; 00000063H
  004ec	75 07		 jne	 SHORT $LN117@Open
  004ee	48 8b 4c 24 58	 mov	 rcx, QWORD PTR $T3[rsp]
  004f3	eb 09		 jmp	 SHORT $LN230@Open
$LN117@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  004f5	3c 77		 cmp	 al, 119			; 00000077H
  004f7	75 0a		 jne	 SHORT $LN119@Open
  004f9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR $T3[rsp+8]
$LN230@Open:

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  004fe	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN119@Open:
  00503	48 83 c9 ff	 or	 rcx, -1
  00507	44 88 6c 24 70	 mov	 BYTE PTR $T2[rsp+24], r13b
  0050c	48 8d 45 50	 lea	 rax, QWORD PTR szPhysicalDeviceName$[rbp-256]
  00510	48 89 4c 24 58	 mov	 QWORD PTR $T2[rsp], rcx

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  00515	89 4c 24 6c	 mov	 DWORD PTR $T2[rsp+20], ecx
  00519	48 8d 55 50	 lea	 rdx, QWORD PTR szPhysicalDeviceName$[rbp-256]
  0051d	48 89 54 24 60	 mov	 QWORD PTR $T2[rsp+8], rdx
  00522	48 3b c1	 cmp	 rax, rcx

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00525	75 0f		 jne	 SHORT $LN124@Open
  00527	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T2[rsp]
  0052c	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
  00531	48 8b 54 24 60	 mov	 rdx, QWORD PTR $T2[rsp+8]
$LN124@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 945  :     Vars[1].SetString( _CW(szPhysicalDeviceName), hRC );

  00536	4c 8d 44 24 50	 lea	 r8, QWORD PTR hRC$[rsp]
  0053b	48 8d 4d 10	 lea	 rcx, QWORD PTR Vars$[rbp-224]
  0053f	e8 00 00 00 00	 call	 ?SetString@OposVariant@@QEAAXPEB_WAEAJ@Z ; OposVariant::SetString
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00544	8a 44 24 70	 mov	 al, BYTE PTR $T2[rsp+24]
  00548	3c 63		 cmp	 al, 99			; 00000063H
  0054a	75 07		 jne	 SHORT $LN127@Open
  0054c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR $T2[rsp]
  00551	eb 09		 jmp	 SHORT $LN231@Open
$LN127@Open:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00553	3c 77		 cmp	 al, 119			; 00000077H
  00555	75 0a		 jne	 SHORT $LN129@Open
  00557	48 8b 4c 24 60	 mov	 rcx, QWORD PTR $T2[rsp+8]
$LN231@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 946  :     Vars[0].SetDispatch_Ptr( pDispatch, hRC );

  0055c	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN129@Open:
  00561	48 8b 55 a0	 mov	 rdx, QWORD PTR pDispatch$[rbp-256]
  00565	4c 8d 44 24 50	 lea	 r8, QWORD PTR hRC$[rsp]
  0056a	48 8d 4d f0	 lea	 rcx, QWORD PTR Vars$[rbp-256]
  0056e	e8 00 00 00 00	 call	 ?SetDispatch_Ptr@OposVariant@@QEAAXPEAUIDispatch@@AEAJ@Z ; OposVariant::SetDispatch_Ptr

; 947  :     if ( FAILED(hRC) )

  00573	44 39 6c 24 50	 cmp	 DWORD PTR hRC$[rsp], r13d
  00578	7d 37		 jge	 SHORT $LN26@Open

; 948  :     {
; 949  :         _pService->Release();

  0057a	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0057d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00580	ff 50 10	 call	 QWORD PTR [rax+16]

; 950  :         DOTRACEERR( _T("-  Failed: Setup for OpenService call 0x%X\n    %s"), hRC );
; 951  :         return hRC;

  00583	8b 74 24 50	 mov	 esi, DWORD PTR hRC$[rsp]
  00587	48 8d 7d 50	 lea	 rdi, QWORD PTR Vars$[rbp-160]
$LL200@Open:
  0058b	48 83 ef 20	 sub	 rdi, 32			; 00000020H
  0058f	48 ff cb	 dec	 rbx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00592	44 38 6f 18	 cmp	 BYTE PTR [rdi+24], r13b
  00596	74 0d		 je	 SHORT $LN136@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00598	48 8b cf	 mov	 rcx, rdi
  0059b	44 88 6f 18	 mov	 BYTE PTR [rdi+24], r13b
  0059f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN136@Open:
  005a5	48 85 db	 test	 rbx, rbx
  005a8	75 e1		 jne	 SHORT $LL200@Open
$LN232@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1071 : }

  005aa	8b c6		 mov	 eax, esi
  005ac	e9 aa 02 00 00	 jmp	 $LN1@Open
$LN26@Open:

; 952  :     }
; 953  :     hRC = DoInvoke( DEBUGPARAM("Open-OpenService") S_OK, Vars, 3, nDIOpenService, pRC, false );

  005b1	44 88 6c 24 30	 mov	 BYTE PTR [rsp+48], r13b
  005b6	4c 8d 45 f0	 lea	 r8, QWORD PTR Vars$[rbp-256]
  005ba	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  005bf	44 8b cb	 mov	 r9d, ebx
  005c2	33 d2		 xor	 edx, edx
  005c4	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  005cc	48 8b cf	 mov	 rcx, rdi
  005cf	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  005d4	89 44 24 50	 mov	 DWORD PTR hRC$[rsp], eax

; 954  : 
; 955  :     // If the OpenService fails, then set result code and return.
; 956  :     if ( hRC != S_OK || *pRC != OPOS_SUCCESS )

  005d8	85 c0		 test	 eax, eax
  005da	0f 85 63 01 00
	00		 jne	 $LN28@Open
  005e0	45 39 2c 24	 cmp	 DWORD PTR [r12], r13d
  005e4	0f 85 59 01 00
	00		 jne	 $LN28@Open
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h

; 191  :         _Event_bEventsLegal = true;

  005ea	8d 70 01	 lea	 esi, QWORD PTR [rax+1]

; 192  :         _Event_bEventInProgress = false;
; 193  :         _bFreezeState = false;

  005ed	44 88 af a4 01
	00 00		 mov	 BYTE PTR [rdi+420], r13b
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1018 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  005f4	45 33 c9	 xor	 r9d, r9d
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h

; 191  :         _Event_bEventsLegal = true;

  005f7	66 89 b7 09 02
	00 00		 mov	 WORD PTR [rdi+521], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1018 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  005fe	4c 8d 45 80	 lea	 r8, QWORD PTR nSOVersion$[rbp-256]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h

; 194  :         _Event_bOpen = true;

  00602	40 88 b7 08 02
	00 00		 mov	 BYTE PTR [rdi+520], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1018 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  00609	8d 50 08	 lea	 edx, QWORD PTR [rax+8]
  0060c	40 88 b7 80 01
	00 00		 mov	 BYTE PTR [rdi+384], sil
  00613	48 8b cf	 mov	 rcx, rdi
  00616	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1019 :     _nSOMajor = nSOVersion / 1000000;
; 1020 :     _nSOMinor = ( nSOVersion / 1000 ) % 1000;

  0061b	41 ba d3 4d 62
	10		 mov	 r10d, 274877907		; 10624dd3H
  00621	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  00626	f7 6d 80	 imul	 DWORD PTR nSOVersion$[rbp-256]
  00629	44 8b c2	 mov	 r8d, edx
  0062c	41 c1 f8 12	 sar	 r8d, 18
  00630	41 8b c0	 mov	 eax, r8d
  00633	c1 e8 1f	 shr	 eax, 31
  00636	44 03 c0	 add	 r8d, eax
  00639	41 8b c2	 mov	 eax, r10d
  0063c	f7 6d 80	 imul	 DWORD PTR nSOVersion$[rbp-256]
  0063f	41 8b c2	 mov	 eax, r10d
  00642	44 89 87 88 01
	00 00		 mov	 DWORD PTR [rdi+392], r8d
  00649	44 8b ca	 mov	 r9d, edx
  0064c	41 c1 f9 06	 sar	 r9d, 6
  00650	41 8b c9	 mov	 ecx, r9d
  00653	c1 e9 1f	 shr	 ecx, 31
  00656	44 03 c9	 add	 r9d, ecx
  00659	41 f7 e9	 imul	 r9d
  0065c	c1 fa 06	 sar	 edx, 6
  0065f	8b c2		 mov	 eax, edx
  00661	c1 e8 1f	 shr	 eax, 31
  00664	03 d0		 add	 edx, eax
  00666	69 c2 e8 03 00
	00		 imul	 eax, edx, 1000		; 000003e8H
  0066c	44 2b c8	 sub	 r9d, eax
  0066f	44 89 8f 8c 01
	00 00		 mov	 DWORD PTR [rdi+396], r9d

; 1021 : 
; 1022 :     //  - If major version is not 1, then bad SO.
; 1023 :     if ( _nSOMajor != 1 )

  00676	44 3b c6	 cmp	 r8d, esi
  00679	74 07		 je	 SHORT $LN32@Open

; 1024 :     {
; 1025 :         _nOpenResult = OPOS_OR_BADVERSION;

  0067b	b8 33 01 00 00	 mov	 eax, 307		; 00000133H

; 1026 :         bBadSO = true;
; 1027 :         DOTRACE( ( _T("-  Failed: Service Object's major version is not 1 (%d/%d)"), OPOS_E_NOSERVICE, _nOpenResult ) );
; 1028 :     }

  00680	eb 2f		 jmp	 SHORT $LN37@Open
$LN32@Open:

; 1029 : 
; 1030 :     //  - If SO doesn't support enough methods, then bad SO.
; 1031 :     else
; 1032 :     {
; 1033 :         long nReqMethodIndex = sizeof(s_RequiredMethodsPerRelease)/sizeof(int) - 1;
; 1034 :         // Shouldn't have SO with release below control's first release, but check anyway.
; 1035 :         if ( _nSOMinor < MinorReleaseInitial )

  00682	41 8b cd	 mov	 ecx, r13d
  00685	41 83 f9 10	 cmp	 r9d, 16
  00689	7c 09		 jl	 SHORT $LN36@Open

; 1036 :             nReqMethodIndex = 0;
; 1037 :         // If SO release is below that supported by this control, use its release's methods.
; 1038 :         else if ( nReqMethodIndex > _nSOMinor - MinorReleaseInitial )

  0068b	41 8d 41 f0	 lea	 eax, DWORD PTR [r9-16]
  0068f	85 c0		 test	 eax, eax
  00691	0f 48 c8	 cmovs	 ecx, eax
$LN36@Open:

; 1039 :             nReqMethodIndex = _nSOMinor - MinorReleaseInitial;
; 1040 :         // Set the maximum method index.
; 1041 :         _nMaxMethod = s_RequiredMethodsPerRelease[ nReqMethodIndex ];

  00694	48 63 c1	 movsxd	 rax, ecx
  00697	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?s_RequiredMethodsPerRelease@@3PAHA
  0069e	8b 0c 81	 mov	 ecx, DWORD PTR [rcx+rax*4]
  006a1	89 8f a8 01 00
	00		 mov	 DWORD PTR [rdi+424], ecx

; 1042 :         // Ensure that the SO supports the methods that it claims to support.
; 1043 :         if ( nMethodCount < _nMaxMethod )

  006a7	44 3b f1	 cmp	 r14d, ecx
  006aa	7d 4e		 jge	 SHORT $LN38@Open

; 1044 :         {
; 1045 :             _nOpenResult = OPOS_OR_BADIF;

  006ac	b8 31 01 00 00	 mov	 eax, 305		; 00000131H
$LN37@Open:

; 1046 :             bBadSO = true;
; 1047 :             DOTRACE( ( _T("-  Failed: Doesn't support all of its release's methods (%d/%d)"), OPOS_E_NOSERVICE, _nOpenResult ) );
; 1048 :             DOTRACEMETHODS( _DispIDs, _nMaxMethod );
; 1049 :         }
; 1050 :     }
; 1051 : 
; 1052 :     // If bad SO, then fail the open.
; 1053 :     if ( bBadSO )
; 1054 :     {
; 1055 :         Close( pRC );

  006b1	41 89 07	 mov	 DWORD PTR [r15], eax
  006b4	49 8b d4	 mov	 rdx, r12
  006b7	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  006ba	48 8b cf	 mov	 rcx, rdi
  006bd	ff 90 78 01 00
	00		 call	 QWORD PTR [rax+376]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  006c3	b8 68 00 00 00	 mov	 eax, 104		; 00000068H
  006c8	89 87 90 01 00
	00		 mov	 DWORD PTR [rdi+400], eax
  006ce	48 8d 7d 50	 lea	 rdi, QWORD PTR Vars$[rbp-160]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1056 :         *pRC = SetRC( OPOS_E_NOSERVICE );

  006d2	41 89 04 24	 mov	 DWORD PTR [r12], eax
$LL201@Open:
  006d6	48 83 ef 20	 sub	 rdi, 32			; 00000020H
  006da	48 2b de	 sub	 rbx, rsi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  006dd	44 38 6f 18	 cmp	 BYTE PTR [rdi+24], r13b
  006e1	74 0d		 je	 SHORT $LN171@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  006e3	48 8b cf	 mov	 rcx, rdi
  006e6	44 88 6f 18	 mov	 BYTE PTR [rdi+24], r13b
  006ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN171@Open:
  006f0	48 85 db	 test	 rbx, rbx
  006f3	75 e1		 jne	 SHORT $LL201@Open
  006f5	e9 5f 01 00 00	 jmp	 $LN12@Open
$LN38@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1062 :     if ( _nCOFreezeEventCount )

  006fa	44 39 af a0 01
	00 00		 cmp	 DWORD PTR [rdi+416], r13d
  00701	74 0a		 je	 SHORT $LN39@Open

; 1063 :         SetCOFreezeEvents( TRUE );

  00703	8b d6		 mov	 edx, esi
  00705	48 8b cf	 mov	 rcx, rdi
  00708	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z ; COPOSDeviceMonitor::SetCOFreezeEvents
$LN39@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0070d	83 8f 90 01 00
	00 ff		 or	 DWORD PTR [rdi+400], -1
  00714	48 8d 7d 50	 lea	 rdi, QWORD PTR Vars$[rbp-160]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1067 :     *pRC = OPOS_SUCCESS;

  00718	45 89 2c 24	 mov	 DWORD PTR [r12], r13d

; 1068 :     _nOpenResult = OPOS_SUCCESS;

  0071c	45 89 2f	 mov	 DWORD PTR [r15], r13d
$LL202@Open:
  0071f	48 83 ef 20	 sub	 rdi, 32			; 00000020H
  00723	48 2b de	 sub	 rbx, rsi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00726	44 38 6f 18	 cmp	 BYTE PTR [rdi+24], r13b
  0072a	74 0d		 je	 SHORT $LN182@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0072c	48 8b cf	 mov	 rcx, rdi
  0072f	44 88 6f 18	 mov	 BYTE PTR [rdi+24], r13b
  00733	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN182@Open:
  00739	48 85 db	 test	 rbx, rbx
  0073c	75 e1		 jne	 SHORT $LL202@Open
  0073e	e9 16 01 00 00	 jmp	 $LN12@Open
$LN28@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 959  :         _nOpenResult = OPOS_OR_FAILEDOPEN;

  00743	41 c7 07 32 01
	00 00		 mov	 DWORD PTR [r15], 306	; 00000132H

; 960  :         // If not a COM error, and the SO supports the GetOpenResult method,
; 961  :         //   then call it to get the open result code.
; 962  :         if ( hRC == S_OK )

  0074a	41 be 01 00 00
	00		 mov	 r14d, 1
  00750	85 c0		 test	 eax, eax
  00752	0f 85 c5 00 00
	00		 jne	 $LN149@Open

; 963  :         {
; 964  :             // Try to get DispID of the method.
; 965  :             OLECHAR* pMN = L"GetOpenResult";
; 966  :             DISPID DispID;
; 967  :             if ( S_OK ==

  00758	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0075b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1BM@IJMNMBPK@?$AAG?$AAe?$AAt?$AAO?$AAp?$AAe?$AAn?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
  00762	48 89 45 d8	 mov	 QWORD PTR pMN$11[rbp-256], rax
  00766	48 8d 55 90	 lea	 rdx, QWORD PTR DispID$9[rbp-256]
  0076a	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0076f	4c 8d 45 d8	 lea	 r8, QWORD PTR pMN$11[rbp-256]
  00773	45 8b ce	 mov	 r9d, r14d
  00776	c7 44 24 20 00
	08 00 00	 mov	 DWORD PTR [rsp+32], 2048 ; 00000800H
  0077e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00781	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:GUID_NULL
  00788	ff 50 28	 call	 QWORD PTR [rax+40]
  0078b	85 c0		 test	 eax, eax
  0078d	0f 85 8a 00 00
	00		 jne	 $LN149@Open

; 975  :                 if ( S_OK == _pService->Invoke(

  00793	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00796	48 8d 55 b8	 lea	 rdx, QWORD PTR VarResult$10[rbp-256]
  0079a	48 83 64 24 68
	00		 and	 QWORD PTR Disp$1[rsp+16], 0
  007a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  007a7	4c 89 6c 24 40	 mov	 QWORD PTR [rsp+64], r13
  007ac	0f 57 c0	 xorps	 xmm0, xmm0
  007af	4c 89 6c 24 38	 mov	 QWORD PTR [rsp+56], r13
  007b4	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  007ba	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  007bf	48 8d 54 24 58	 lea	 rdx, QWORD PTR Disp$1[rsp]
  007c4	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  007c9	8b 55 90	 mov	 edx, DWORD PTR DispID$9[rbp-256]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  007cc	66 44 89 6d b8	 mov	 WORD PTR VarResult$10[rbp-256], r13w
  007d1	44 88 6d d0	 mov	 BYTE PTR VarResult$10[rbp-232], r13b
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 974  :                 DISPPARAMS Disp = { NULL, NULL, 0, 0 };

  007d5	f3 0f 7f 44 24
	58		 movdqu	 XMMWORD PTR Disp$1[rsp], xmm0

; 975  :                 if ( S_OK == _pService->Invoke(

  007db	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  007de	66 44 89 74 24
	20		 mov	 WORD PTR [rsp+32], r14w
  007e4	ff 50 30	 call	 QWORD PTR [rax+48]
  007e7	85 c0		 test	 eax, eax
  007e9	75 10		 jne	 SHORT $LN31@Open

; 976  :                         DispID, IID_NULL, LOCALE_USER_DEFAULT,
; 977  :                         DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL )
; 978  :                    )
; 979  :                 {
; 980  :                     // If method succeeds, convert (if needed) to long and set open result code.
; 981  :                     HRESULT hRCTmp;
; 982  :                     VarResult.ChangeLONG( &_nOpenResult, hRCTmp );

  007eb	4c 8d 45 88	 lea	 r8, QWORD PTR hRCTmp$7[rbp-256]
  007ef	49 8b d7	 mov	 rdx, r15
  007f2	48 8d 4d b8	 lea	 rcx, QWORD PTR VarResult$10[rbp-256]
  007f6	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::ChangeLONG
$LN31@Open:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  007fb	48 8d 4d b8	 lea	 rcx, QWORD PTR VarResult$10[rbp-256]
  007ff	44 88 6d d0	 mov	 BYTE PTR VarResult$10[rbp-232], r13b
  00803	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00809	44 38 6d d0	 cmp	 BYTE PTR VarResult$10[rbp-232], r13b
  0080d	74 0e		 je	 SHORT $LN149@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0080f	48 8d 4d b8	 lea	 rcx, QWORD PTR VarResult$10[rbp-256]
  00813	44 88 6d d0	 mov	 BYTE PTR VarResult$10[rbp-232], r13b
  00817	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN149@Open:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 987  :         _pService->Release();

  0081d	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00820	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00823	ff 50 10	 call	 QWORD PTR [rax+16]

; 990  :         return hRC;

  00826	8b 74 24 50	 mov	 esi, DWORD PTR hRC$[rsp]
  0082a	48 8d 7d 50	 lea	 rdi, QWORD PTR Vars$[rbp-160]
$LL203@Open:
  0082e	48 83 ef 20	 sub	 rdi, 32			; 00000020H
  00832	49 2b de	 sub	 rbx, r14
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00835	44 38 6f 18	 cmp	 BYTE PTR [rdi+24], r13b
  00839	74 0d		 je	 SHORT $LN158@Open

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0083b	48 8b cf	 mov	 rcx, rdi
  0083e	44 88 6f 18	 mov	 BYTE PTR [rdi+24], r13b
  00842	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN158@Open:
  00848	48 85 db	 test	 rbx, rbx
  0084b	75 e1		 jne	 SHORT $LL203@Open
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 990  :         return hRC;

  0084d	e9 58 fd ff ff	 jmp	 $LN232@Open
$LN220@Open:

; 847  :     {
; 848  :         _nOpenResult = OPOS_OR_CREATE;

  00852	41 c7 07 30 01
	00 00		 mov	 DWORD PTR [r15], 304	; 00000130H
$LN12@Open:

; 1071 : }

  00859	33 c0		 xor	 eax, eax
$LN1@Open:
  0085b	48 8b 8d 50 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  00862	48 33 cc	 xor	 rcx, rsp
  00865	e8 00 00 00 00	 call	 __security_check_cookie
  0086a	48 8b 9c 24 b8
	07 00 00	 mov	 rbx, QWORD PTR [rsp+1976]
  00872	48 81 c4 60 07
	00 00		 add	 rsp, 1888		; 00000760H
  00879	41 5f		 pop	 r15
  0087b	41 5e		 pop	 r14
  0087d	41 5d		 pop	 r13
  0087f	41 5c		 pop	 r12
  00881	5f		 pop	 rdi
  00882	5e		 pop	 rsi
  00883	5d		 pop	 rbp
  00884	c3		 ret	 0
?Open@COPOSDeviceMonitor@@UEAAJPEA_WPEAJ@Z ENDP		; COPOSDeviceMonitor::Open
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z
_TEXT	SEGMENT
hRC$ = 64
Vars$ = 80
__$ArrayPad$ = 176
this$ = 256
Command$ = 264
pData$ = 272
pString$ = 280
pRC$ = 288
?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z PROC ; COPOSDeviceMonitor::DirectIO, COMDAT

; 1195 : {

$LN30:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00022	4c 8b b4 24 20
	01 00 00	 mov	 r14, QWORD PTR pRC$[rsp]

; 1196 :     OposVariant Vars[3];

  0002a	48 8d 44 24 50	 lea	 rax, QWORD PTR Vars$[rsp]
  0002f	bf 03 00 00 00	 mov	 edi, 3
  00034	48 8b d9	 mov	 rbx, rcx
  00037	8b cf		 mov	 ecx, edi
  00039	49 8b e9	 mov	 rbp, r9
  0003c	49 8b f0	 mov	 rsi, r8
  0003f	45 33 ff	 xor	 r15d, r15d
$LL4@DirectIO:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00042	66 44 89 38	 mov	 WORD PTR [rax], r15w
  00046	44 88 78 18	 mov	 BYTE PTR [rax+24], r15b
  0004a	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  0004e	48 83 e9 01	 sub	 rcx, 1
  00052	75 ee		 jne	 SHORT $LL4@DirectIO
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1198 :     Vars[2].SetLONG( Command );

  00054	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR Vars$[rsp+64]
  0005c	44 89 7c 24 40	 mov	 DWORD PTR hRC$[rsp], r15d
  00061	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1199 :     Vars[1].SetLONG_Ptr( pData, hRC );

  00066	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  0006b	48 8b d6	 mov	 rdx, rsi
  0006e	48 8d 4c 24 70	 lea	 rcx, QWORD PTR Vars$[rsp+32]
  00073	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::SetLONG_Ptr

; 1200 :     Vars[0].SetBSTR_InOutPtr( pString, hRC );

  00078	4c 8d 44 24 40	 lea	 r8, QWORD PTR hRC$[rsp]
  0007d	48 8b d5	 mov	 rdx, rbp
  00080	48 8d 4c 24 50	 lea	 rcx, QWORD PTR Vars$[rsp]
  00085	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 1201 :     return DoInvoke( DEBUGPARAM("DirectIO") hRC, Vars, 3, nDIDirectIO, pRC );

  0008a	8b 54 24 40	 mov	 edx, DWORD PTR hRC$[rsp]
  0008e	4c 8d 44 24 50	 lea	 r8, QWORD PTR Vars$[rsp]
  00093	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00098	44 8b cf	 mov	 r9d, edi
  0009b	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  000a0	48 8b cb	 mov	 rcx, rbx
  000a3	c7 44 24 20 0a
	00 00 00	 mov	 DWORD PTR [rsp+32], 10
  000ab	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  000b0	8b f0		 mov	 esi, eax
  000b2	48 8d 9c 24 b0
	00 00 00	 lea	 rbx, QWORD PTR Vars$[rsp+96]
$LL23@DirectIO:
  000ba	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  000be	48 ff cf	 dec	 rdi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000c1	44 38 7b 18	 cmp	 BYTE PTR [rbx+24], r15b
  000c5	74 0d		 je	 SHORT $LN14@DirectIO

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	44 88 7b 18	 mov	 BYTE PTR [rbx+24], r15b
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN14@DirectIO:
  000d4	48 85 ff	 test	 rdi, rdi
  000d7	75 e1		 jne	 SHORT $LL23@DirectIO
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1201 :     return DoInvoke( DEBUGPARAM("DirectIO") hRC, Vars, 3, nDIDirectIO, pRC );

  000d9	8b c6		 mov	 eax, esi

; 1202 : }

  000db	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e3	48 33 cc	 xor	 rcx, rsp
  000e6	e8 00 00 00 00	 call	 __security_check_cookie
  000eb	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f2	41 5f		 pop	 r15
  000f4	41 5e		 pop	 r14
  000f6	5f		 pop	 rdi
  000f7	5e		 pop	 rsi
  000f8	5d		 pop	 rbp
  000f9	5b		 pop	 rbx
  000fa	c3		 ret	 0
?DirectIO@COPOSDeviceMonitor@@UEAAJJPEAJPEAPEA_W0@Z ENDP ; COPOSDeviceMonitor::DirectIO
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
msg$1 = 64
this$ = 128
pRC$ = 136
?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC		; COPOSDeviceMonitor::Close, COMDAT

; 1076 : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0000a	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1076 : {

  00011	48 8b fa	 mov	 rdi, rdx

; 1077 :     SetRC();
; 1078 : 
; 1079 :     // If not opened, set return code.
; 1080 :     if ( ! _bOpened )

  00014	80 b9 80 01 00
	00 00		 cmp	 BYTE PTR [rcx+384], 0
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	75 0a		 jne	 SHORT $LN2@Close

; 1081 :     {
; 1082 :         *pRC = OPOS_E_CLOSED;

  00020	c7 02 65 00 00
	00		 mov	 DWORD PTR [rdx], 101	; 00000065H

; 1083 :         DOTRACE( ( _T("*Close [Function]  RC=%d"), *pRC ) );
; 1084 :         return S_OK;

  00026	33 c0		 xor	 eax, eax
  00028	eb 7e		 jmp	 SHORT $LN1@Close
$LN2@Close:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h

; 227  :         _Event_bEventsLegal = false;

  0002a	c6 81 09 02 00
	00 00		 mov	 BYTE PTR [rcx+521], 0

; 228  :         //  - In case an OPOS event is being fired, set Win32 event to cause
; 229  :         //    "DoEvent" to break out of its wait.
; 230  :         ::SetEvent( _Event_FiringDoneEvent );

  00031	48 8b 89 10 02
	00 00		 mov	 rcx, QWORD PTR [rcx+528]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1091 :     HRESULT hRC = DoInvoke( DEBUGPARAM("Close-CloseService") S_OK, NULL, 0, nDICloseService, pRC, false );

  0003e	c6 44 24 30 00	 mov	 BYTE PTR [rsp+48], 0
  00043	45 33 c9	 xor	 r9d, r9d
  00046	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	33 d2		 xor	 edx, edx
  00050	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  00058	48 8b cb	 mov	 rcx, rbx
  0005b	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1092 : 
; 1093 :     // Release the connection to the Service Object.
; 1094 :     _pService->Release();

  00060	48 8b 8b 98 01
	00 00		 mov	 rcx, QWORD PTR [rbx+408]
  00067	8b f8		 mov	 edi, eax
  00069	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0006c	ff 52 10	 call	 QWORD PTR [rdx+16]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h

; 249  :         _Event_bOpen = false;

  0006f	c6 83 08 02 00
	00 00		 mov	 BYTE PTR [rbx+520], 0
$LL9@Close:

; 250  :         // Just in case any undelivered event messages are queued for our window, toss them.
; 251  :         MSG msg;
; 252  :         while ( 0 != ::PeekMessage(

  00076	48 8b 93 20 02
	00 00		 mov	 rdx, QWORD PTR [rbx+544]
  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR msg$1[rsp]
  00082	41 b9 ff 7f 00
	00		 mov	 r9d, 32767		; 00007fffH
  00088	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00090	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageW
  0009c	85 c0		 test	 eax, eax
  0009e	75 d6		 jne	 SHORT $LL9@Close
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1103 :     return hRC;

  000a0	88 83 80 01 00
	00		 mov	 BYTE PTR [rbx+384], al
  000a6	8b c7		 mov	 eax, edi
$LN1@Close:

; 1104 : }

  000a8	48 8b 9c 24 80
	00 00 00	 mov	 rbx, QWORD PTR [rsp+128]
  000b0	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP		; COPOSDeviceMonitor::Close
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 80
pRC$ = 88
?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::ClearInput, COMDAT

; 1184 : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1185 :     return DoInvoke( DEBUGPARAM("ClearInput") S_OK, NULL, 0, nDIClearInput, pRC );

  00004	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  00009	45 33 c9	 xor	 r9d, r9d
  0000c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00011	45 33 c0	 xor	 r8d, r8d
  00014	33 d2		 xor	 edx, edx
  00016	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  0001e	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1186 : }

  00023	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00027	c3		 ret	 0
?ClearInput@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::ClearInput
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
Timeout$ = 120
pRC$ = 128
?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z PROC	; COPOSDeviceMonitor::ClaimDevice, COMDAT

; 1111 : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0000f	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1115 :     if ( ! _bOpened )

  00016	33 f6		 xor	 esi, esi
  00018	49 8b f8	 mov	 rdi, r8
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	40 38 b1 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], sil
  00025	75 0b		 jne	 SHORT $LN2@ClaimDevic

; 1116 :     {
; 1117 :         *pRC = OPOS_E_CLOSED;

  00027	41 c7 00 65 00
	00 00		 mov	 DWORD PTR [r8], 101	; 00000065H

; 1118 :         DOTRACEV( ( _T("*ClaimDevice [Function] -- Closed") ) );
; 1119 :         return S_OK;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 5d		 jmp	 SHORT $LN1@ClaimDevic
$LN2@ClaimDevic:

; 1120 :     }
; 1121 : 
; 1122 :     // Initialize so that events are allowed.
; 1123 :     EventClaim();

  00032	c6 81 09 02 00
	00 01		 mov	 BYTE PTR [rcx+521], 1

; 1127 :     Var.SetLONG( Timeout );

  00039	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0003e	66 89 74 24 40	 mov	 WORD PTR Var$[rsp], si
  00043	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1127 :     Var.SetLONG( Timeout );

  00048	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1128 :     return DoInvoke( DEBUGPARAM("ClaimDevice") S_OK, &Var, 1, nDIClaimDevice, pRC, false );

  0004d	40 88 74 24 30	 mov	 BYTE PTR [rsp+48], sil
  00052	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  00057	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0005c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00062	33 d2		 xor	 edx, edx
  00064	c7 44 24 20 07
	00 00 00	 mov	 DWORD PTR [rsp+32], 7
  0006c	48 8b cb	 mov	 rcx, rbx
  0006f	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00074	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00076	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  0007b	74 10		 je	 SHORT $LN9@ClaimDevic

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  00082	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN9@ClaimDevic:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1128 :     return DoInvoke( DEBUGPARAM("ClaimDevice") S_OK, &Var, 1, nDIClaimDevice, pRC, false );

  0008d	8b c3		 mov	 eax, ebx
$LN1@ClaimDevic:

; 1129 : }

  0008f	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00094	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  00099	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
?ClaimDevice@COPOSDeviceMonitor@@UEAAJJPEAJ@Z ENDP	; COPOSDeviceMonitor::ClaimDevice
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z
_TEXT	SEGMENT
Var$ = 64
this$ = 112
Level$ = 120
pRC$ = 128
?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z PROC	; COPOSDeviceMonitor::CheckHealth, COMDAT

; 1174 : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00010	48 8b f9	 mov	 rdi, rcx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00013	33 f6		 xor	 esi, esi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1176 :     Var.SetLONG( Level );

  00015	48 8d 48 d8	 lea	 rcx, QWORD PTR [rax-40]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00019	66 89 70 d8	 mov	 WORD PTR [rax-40], si
  0001d	40 88 70 f0	 mov	 BYTE PTR [rax-16], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1174 : {

  00021	49 8b d8	 mov	 rbx, r8

; 1176 :     Var.SetLONG( Level );

  00024	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 1177 :     return DoInvoke( DEBUGPARAM("CheckHealth") S_OK, &Var, 1, nDICheckHealth, pRC );

  00029	c6 44 24 30 01	 mov	 BYTE PTR [rsp+48], 1
  0002e	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  00032	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00037	4c 8d 44 24 40	 lea	 r8, QWORD PTR Var$[rsp]
  0003c	33 d2		 xor	 edx, edx
  0003e	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR [rsp+32], 6
  00046	48 8b cf	 mov	 rcx, rdi
  00049	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0004e	8b d8		 mov	 ebx, eax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00050	40 38 74 24 58	 cmp	 BYTE PTR Var$[rsp+24], sil
  00055	74 10		 je	 SHORT $LN6@CheckHealt

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00057	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Var$[rsp]
  0005c	40 88 74 24 58	 mov	 BYTE PTR Var$[rsp+24], sil
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN6@CheckHealt:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1178 : }

  00067	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
  0006c	8b c3		 mov	 eax, ebx
  0006e	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  00073	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
?CheckHealth@COPOSDeviceMonitor@@UEAAJJPEAJ@Z ENDP	; COPOSDeviceMonitor::CheckHealth
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pCapUpdateFirmware$ = 56
?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC ; COPOSDeviceMonitor::get_CapUpdateFirmware, COMDAT

; 1618 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00009	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]
  0000e	ba f9 01 00 00	 mov	 edx, 505		; 000001f9H
  00013	41 b9 10 00 00
	00		 mov	 r9d, 16
  00019	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001e	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00022	f7 d9		 neg	 ecx
  00024	66 45 1b c0	 sbb	 r8w, r8w
  00028	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1619 :     return GetOposProp( DEBUGPARAM("CapUpdateFirmware") PIDX_CapUpdateFirmware, pCapUpdateFirmware, 16 /*MinorVersion*/ );
; 1620 : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
?get_CapUpdateFirmware@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP ; COPOSDeviceMonitor::get_CapUpdateFirmware
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pCapCompareFirmwareVersion$ = 56
?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC ; COPOSDeviceMonitor::get_CapCompareFirmwareVersion, COMDAT

; 1611 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00009	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]
  0000e	ba f8 01 00 00	 mov	 edx, 504		; 000001f8H
  00013	41 b9 10 00 00
	00		 mov	 r9d, 16
  00019	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001e	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00022	f7 d9		 neg	 ecx
  00024	66 45 1b c0	 sbb	 r8w, r8w
  00028	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1612 :     return GetOposProp( DEBUGPARAM("CapCompareFirmwareVersion") PIDX_CapCompareFirmwareVersion, pCapCompareFirmwareVersion, 16 /*MinorVersion*/ );
; 1613 : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP ; COPOSDeviceMonitor::get_CapCompareFirmwareVersion
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pCapUpdateStatistics$ = 56
?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC ; COPOSDeviceMonitor::get_CapUpdateStatistics, COMDAT

; 1604 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00009	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]
  0000e	ba f7 01 00 00	 mov	 edx, 503		; 000001f7H
  00013	41 b9 10 00 00
	00		 mov	 r9d, 16
  00019	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001e	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00022	f7 d9		 neg	 ecx
  00024	66 45 1b c0	 sbb	 r8w, r8w
  00028	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1605 :     return GetOposProp( DEBUGPARAM("CapUpdateStatistics") PIDX_CapUpdateStatistics, pCapUpdateStatistics, 16 /*MinorVersion*/ );
; 1606 : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
?get_CapUpdateStatistics@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP ; COPOSDeviceMonitor::get_CapUpdateStatistics
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pCapStatisticsReporting$ = 56
?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC ; COPOSDeviceMonitor::get_CapStatisticsReporting, COMDAT

; 1597 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00009	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]
  0000e	ba f6 01 00 00	 mov	 edx, 502		; 000001f6H
  00013	41 b9 10 00 00
	00		 mov	 r9d, 16
  00019	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001e	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00022	f7 d9		 neg	 ecx
  00024	66 45 1b c0	 sbb	 r8w, r8w
  00028	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1598 :     return GetOposProp( DEBUGPARAM("CapStatisticsReporting") PIDX_CapStatisticsReporting, pCapStatisticsReporting, 16 /*MinorVersion*/ );
; 1599 : }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5b		 pop	 rbx
  00031	c3		 ret	 0
?get_CapStatisticsReporting@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP ; COPOSDeviceMonitor::get_CapStatisticsReporting
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DeviceName@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pDeviceName$ = 16
?get_DeviceName@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_DeviceName, COMDAT

; 1591 :     return GetOposProp( DEBUGPARAM("DeviceName") PIDX_DeviceName, pDeviceName, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba 43 42 0f 00	 mov	 edx, 1000003		; 000f4243H
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_DeviceName@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_DeviceName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DeviceDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pDeviceDescription$ = 16
?get_DeviceDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_DeviceDescription, COMDAT

; 1584 :     return GetOposProp( DEBUGPARAM("DeviceDescription") PIDX_DeviceDescription, pDeviceDescription, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba 42 42 0f 00	 mov	 edx, 1000002		; 000f4242H
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_DeviceDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_DeviceDescription
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_ServiceObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pServiceObjectVersion$ = 16
?get_ServiceObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::get_ServiceObjectVersion, COMDAT

; 1577 :     return GetOposProp( DEBUGPARAM("ServiceObjectVersion") PIDX_ServiceObjectVersion, pServiceObjectVersion, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	4c 8b c2	 mov	 r8, rdx
  00009	41 8d 51 f8	 lea	 edx, QWORD PTR [r9-8]
  0000d	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_ServiceObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::get_ServiceObjectVersion
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_ServiceObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pServiceObjectDescription$ = 16
?get_ServiceObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_ServiceObjectDescription, COMDAT

; 1570 :     return GetOposProp( DEBUGPARAM("ServiceObjectDescription") PIDX_ServiceObjectDescription, pServiceObjectDescription, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba 44 42 0f 00	 mov	 edx, 1000004		; 000f4244H
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_ServiceObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_ServiceObjectDescription
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_ControlObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pControlObjectVersion$ = 16
?get_ControlObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::get_ControlObjectVersion, COMDAT

; 1432 :     *pControlObjectVersion = g_ControlVersion;

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?g_ControlVersion@@3JA ; g_ControlVersion
  00006	89 02		 mov	 DWORD PTR [rdx], eax

; 1433 :     DOTRACEV( ( _T("*ControlObjectVersion [Get]: %d"), g_ControlVersion ) );
; 1434 :     return S_OK;

  00008	33 c0		 xor	 eax, eax

; 1435 : }

  0000a	c3		 ret	 0
?get_ControlObjectVersion@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::get_ControlObjectVersion
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\CWString.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
pControlObjectDescription$ = 88
?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_ControlObjectDescription, COMDAT

; 1422 : {

$LN16:
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?g_ControlDescription@@3PADA ; g_ControlDescription

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  0000d	c6 44 24 38 00	 mov	 BYTE PTR $T1[rsp+24], 0
  00012	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  00017	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  0001c	48 83 c8 ff	 or	 rax, -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1422 : {

  00020	48 8b da	 mov	 rbx, rdx
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00023	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp+8], rax
  00028	89 44 24 30	 mov	 DWORD PTR $T1[rsp+16], eax

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0002c	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1423 :     *pControlObjectDescription = ::SysAllocString( _CW(g_ControlDescription) );

  00031	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp+8]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysAllocString
  0003c	48 89 03	 mov	 QWORD PTR [rbx], rax
; File C:\Develop\OPOS-CCO\Common\CWString.h

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  0003f	8a 44 24 38	 mov	 al, BYTE PTR $T1[rsp+24]
  00043	3c 63		 cmp	 al, 99			; 00000063H
  00045	75 07		 jne	 SHORT $LN9@get_Contro
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004c	eb 09		 jmp	 SHORT $LN13@get_Contro
$LN9@get_Contro:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  0004e	3c 77		 cmp	 al, 119			; 00000077H
  00050	75 0a		 jne	 SHORT $LN11@get_Contro
  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp+8]
$LN13@get_Contro:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1425 :     return S_OK;

  00057	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN11@get_Contro:
  0005c	33 c0		 xor	 eax, eax

; 1426 : }

  0005e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00062	5b		 pop	 rbx
  00063	c3		 ret	 0
?get_ControlObjectDescription@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_ControlObjectDescription
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 48
pState$ = 56
?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC		; COPOSDeviceMonitor::get_State, COMDAT

; 1407 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1408 :     if ( ! _bOpened )                           // If not open,

  00004	80 b9 80 01 00
	00 00		 cmp	 BYTE PTR [rcx+384], 0
  0000b	75 08		 jne	 SHORT $LN2@get_State

; 1409 :     {
; 1410 :         *pState = OPOS_S_CLOSED;                //   then return "closed".

  0000d	c7 02 01 00 00
	00		 mov	 DWORD PTR [rdx], 1

; 1411 :         DOTRACEV( ( _T("*State [Get] -- Closed") ) );
; 1412 :     }

  00013	eb 0f		 jmp	 SHORT $LN3@get_State
$LN2@get_State:

; 1413 :     else
; 1414 :         GetOposProp( DEBUGPARAM("State") PIDX_State, pState ); // Otherwise go to SO.

  00015	45 33 c9	 xor	 r9d, r9d
  00018	4c 8b c2	 mov	 r8, rdx
  0001b	41 8d 51 09	 lea	 edx, QWORD PTR [r9+9]
  0001f	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
$LN3@get_State:

; 1415 : 
; 1416 :     return S_OK;

  00024	33 c0		 xor	 eax, eax

; 1417 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?get_State@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP		; COPOSDeviceMonitor::get_State
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_ResultCodeExtended@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pResultCodeExtended$ = 16
?get_ResultCodeExtended@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::get_ResultCodeExtended, COMDAT

; 1563 :     return GetOposProp( DEBUGPARAM("ResultCodeExtended") PIDX_ResultCodeExtended, pResultCodeExtended, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	4c 8b c2	 mov	 r8, rdx
  00009	41 8d 51 f7	 lea	 edx, QWORD PTR [r9-9]
  0000d	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_ResultCodeExtended@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::get_ResultCodeExtended
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 48
pResultCode$ = 56
?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::get_ResultCode, COMDAT

; 1387 : {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1388 :     if ( ! _bOpened )                               // If not open,

  00004	80 b9 80 01 00
	00 00		 cmp	 BYTE PTR [rcx+384], 0
  0000b	75 08		 jne	 SHORT $LN2@get_Result

; 1389 :     {
; 1390 :         *pResultCode = OPOS_E_CLOSED;               //   then return "closed".

  0000d	c7 02 65 00 00
	00		 mov	 DWORD PTR [rdx], 101	; 00000065H

; 1391 :         DOTRACEV( ( _T("*ResultCode [Get] -- Closed") ) );
; 1392 :     }

  00013	eb 1e		 jmp	 SHORT $LN5@get_Result
$LN2@get_Result:

; 1393 :     else if ( _nCOResultCode != -1 )                // If the control object has to report a status,

  00015	8b 81 90 01 00
	00		 mov	 eax, DWORD PTR [rcx+400]
  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	74 04		 je	 SHORT $LN4@get_Result

; 1394 :     {
; 1395 :         *pResultCode = _nCOResultCode;              //   then return it.

  00020	89 02		 mov	 DWORD PTR [rdx], eax

; 1396 :         DOTRACEV( ( _T("*ResultCode [Get]: %d -- from CO"), _nCOResultCode ) );
; 1397 :     }

  00022	eb 0f		 jmp	 SHORT $LN5@get_Result
$LN4@get_Result:

; 1398 :     else
; 1399 :         GetOposProp( DEBUGPARAM("ResultCode") PIDX_ResultCode, pResultCode );// Otherwise go to SO.

  00024	45 33 c9	 xor	 r9d, r9d
  00027	4c 8b c2	 mov	 r8, rdx
  0002a	41 8d 51 06	 lea	 edx, QWORD PTR [r9+6]
  0002e	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
$LN5@get_Result:

; 1400 : 
; 1401 :     return S_OK;

  00033	33 c0		 xor	 eax, eax

; 1402 : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
?get_ResultCode@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::get_ResultCode
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_PowerState@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pPowerState$ = 16
?get_PowerState@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::get_PowerState, COMDAT

; 1556 :     return GetOposProp( DEBUGPARAM("PowerState") PIDX_PowerState, pPowerState, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	4c 8b c2	 mov	 r8, rdx
  00009	41 8d 51 fe	 lea	 edx, QWORD PTR [r9-2]
  0000d	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_PowerState@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::get_PowerState
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?put_PowerNotify@COPOSDeviceMonitor@@UEAAJJ@Z
_TEXT	SEGMENT
this$ = 8
PowerNotify$ = 16
?put_PowerNotify@COPOSDeviceMonitor@@UEAAJJ@Z PROC	; COPOSDeviceMonitor::put_PowerNotify, COMDAT

; 1549 :     return SetOposProp( DEBUGPARAM("PowerNotify") PIDX_PowerNotify, PowerNotify, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	44 8b c2	 mov	 r8d, edx
  00009	41 8d 51 fd	 lea	 edx, QWORD PTR [r9-3]
  0000d	e9 00 00 00 00	 jmp	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
?put_PowerNotify@COPOSDeviceMonitor@@UEAAJJ@Z ENDP	; COPOSDeviceMonitor::put_PowerNotify
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_PowerNotify@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pPowerNotify$ = 16
?get_PowerNotify@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::get_PowerNotify, COMDAT

; 1542 :     return GetOposProp( DEBUGPARAM("PowerNotify") PIDX_PowerNotify, pPowerNotify, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	4c 8b c2	 mov	 r8, rdx
  00009	41 8d 51 fd	 lea	 edx, QWORD PTR [r9-3]
  0000d	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_PowerNotify@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::get_PowerNotify
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z
_TEXT	SEGMENT
this$ = 48
FreezeEvents$ = 56
?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z PROC	; COPOSDeviceMonitor::put_FreezeEvents, COMDAT

; 1356 : {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00006	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 1356 : {

  0000d	48 8b d9	 mov	 rbx, rcx

; 1357 :     SetRC();
; 1358 : 
; 1359 :     // If not opened, do nothing.
; 1360 :     if ( ! _bOpened )

  00010	80 b9 80 01 00
	00 00		 cmp	 BYTE PTR [rcx+384], 0
  00017	74 2d		 je	 SHORT $LN4@put_Freeze

; 1361 :     {
; 1362 :         DOTRACEV( ( _T("*FreezeEvents [Set] -- Closed") ) );
; 1363 :         return S_OK;
; 1364 :     }
; 1365 : 
; 1366 :     if ( FreezeEvents )

  00019	45 33 c9	 xor	 r9d, r9d
  0001c	66 85 d2	 test	 dx, dx
  0001f	41 8d 51 04	 lea	 edx, QWORD PTR [r9+4]
  00023	74 12		 je	 SHORT $LN3@put_Freeze

; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00025	45 8d 41 01	 lea	 r8d, QWORD PTR [r9+1]
  00029	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1367 :     {
; 1368 :         // Call down into the Service Object first to set the property value.
; 1369 :         SetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, FreezeEvents ); // First tell the SO the new state.
; 1370 :         _bFreezeState = true;                           // Then update ours.

  0002e	c6 83 a4 01 00
	00 01		 mov	 BYTE PTR [rbx+420], 1

; 1371 :     }

  00035	eb 0f		 jmp	 SHORT $LN4@put_Freeze
$LN3@put_Freeze:

; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00037	45 33 c0	 xor	 r8d, r8d

; 1372 :     else
; 1373 :     {
; 1374 :         // Update our state first, then tell the SO.
; 1375 :         // This avoids a lockup in the event firing object's DoEvent() routine
; 1376 :         //   that would occur if the SO calls an event from its property update method.
; 1377 :         _bFreezeState = false;

  0003a	c6 81 a4 01 00
	00 00		 mov	 BYTE PTR [rcx+420], 0

; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00041	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
$LN4@put_Freeze:

; 1378 :         SetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, FreezeEvents );
; 1379 :     }
; 1380 : 
; 1381 :     return S_OK;

  00046	33 c0		 xor	 eax, eax

; 1382 : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
?put_FreezeEvents@COPOSDeviceMonitor@@UEAAJF@Z ENDP	; COPOSDeviceMonitor::put_FreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pFreezeEvents$ = 56
?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC	; COPOSDeviceMonitor::get_FreezeEvents, COMDAT

; 1349 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00006	45 33 c9	 xor	 r9d, r9d
  00009	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]

; 1349 : {

  0000e	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00011	41 8d 51 04	 lea	 edx, QWORD PTR [r9+4]
  00015	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001a	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  0001e	f7 d9		 neg	 ecx
  00020	66 45 1b c0	 sbb	 r8w, r8w
  00024	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1350 :     return GetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, pFreezeEvents );
; 1351 : }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5b		 pop	 rbx
  0002d	c3		 ret	 0
?get_FreezeEvents@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP	; COPOSDeviceMonitor::get_FreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?put_DeviceEnabled@COPOSDeviceMonitor@@UEAAJF@Z
_TEXT	SEGMENT
this$ = 8
DeviceEnabled$ = 16
?put_DeviceEnabled@COPOSDeviceMonitor@@UEAAJF@Z PROC	; COPOSDeviceMonitor::put_DeviceEnabled, COMDAT

; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00000	45 33 c0	 xor	 r8d, r8d
  00003	66 85 d2	 test	 dx, dx
  00006	ba 03 00 00 00	 mov	 edx, 3
  0000b	41 0f 95 c0	 setne	 r8b
  0000f	44 8d 4a 0d	 lea	 r9d, QWORD PTR [rdx+13]
  00013	e9 00 00 00 00	 jmp	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
?put_DeviceEnabled@COPOSDeviceMonitor@@UEAAJF@Z ENDP	; COPOSDeviceMonitor::put_DeviceEnabled
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pDeviceEnabled$ = 56
?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC	; COPOSDeviceMonitor::get_DeviceEnabled, COMDAT

; 1527 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00006	41 b9 10 00 00
	00		 mov	 r9d, 16
  0000c	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]

; 1527 : {

  00011	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00014	41 8d 51 f3	 lea	 edx, QWORD PTR [r9-13]
  00018	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001d	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00021	f7 d9		 neg	 ecx
  00023	66 45 1b c0	 sbb	 r8w, r8w
  00027	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1528 :     return GetOposProp( DEBUGPARAM("DeviceEnabled") PIDX_DeviceEnabled, pDeviceEnabled, 16 /*MinorVersion*/ );
; 1529 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
?get_DeviceEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP	; COPOSDeviceMonitor::get_DeviceEnabled
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?put_DataEventEnabled@COPOSDeviceMonitor@@UEAAJF@Z
_TEXT	SEGMENT
this$ = 8
DataEventEnabled$ = 16
?put_DataEventEnabled@COPOSDeviceMonitor@@UEAAJF@Z PROC	; COPOSDeviceMonitor::put_DataEventEnabled, COMDAT

; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00000	45 33 c0	 xor	 r8d, r8d
  00003	66 85 d2	 test	 dx, dx
  00006	ba 02 00 00 00	 mov	 edx, 2
  0000b	41 0f 95 c0	 setne	 r8b
  0000f	44 8d 4a 0e	 lea	 r9d, QWORD PTR [rdx+14]
  00013	e9 00 00 00 00	 jmp	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
?put_DataEventEnabled@COPOSDeviceMonitor@@UEAAJF@Z ENDP	; COPOSDeviceMonitor::put_DataEventEnabled
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pDataEventEnabled$ = 56
?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC ; COPOSDeviceMonitor::get_DataEventEnabled, COMDAT

; 1513 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00006	41 b9 10 00 00
	00		 mov	 r9d, 16
  0000c	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]

; 1513 : {

  00011	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00014	41 8d 51 f2	 lea	 edx, QWORD PTR [r9-14]
  00018	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001d	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00021	f7 d9		 neg	 ecx
  00023	66 45 1b c0	 sbb	 r8w, r8w
  00027	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1514 :     return GetOposProp( DEBUGPARAM("DataEventEnabled") PIDX_DataEventEnabled, pDataEventEnabled, 16 /*MinorVersion*/ );
; 1515 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
?get_DataEventEnabled@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP ; COPOSDeviceMonitor::get_DataEventEnabled
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_DataCount@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pDataCount$ = 16
?get_DataCount@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::get_DataCount, COMDAT

; 1507 :     return GetOposProp( DEBUGPARAM("DataCount") PIDX_DataCount, pDataCount, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	4c 8b c2	 mov	 r8, rdx
  00009	41 8d 51 fc	 lea	 edx, QWORD PTR [r9-4]
  0000d	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_DataCount@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::get_DataCount
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pClaimed$ = 56
?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC	; COPOSDeviceMonitor::get_Claimed, COMDAT

; 1499 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00006	41 b9 10 00 00
	00		 mov	 r9d, 16
  0000c	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]

; 1499 : {

  00011	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00014	41 8d 51 f1	 lea	 edx, QWORD PTR [r9-15]
  00018	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001d	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00021	f7 d9		 neg	 ecx
  00023	66 45 1b c0	 sbb	 r8w, r8w
  00027	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1500 :     return GetOposProp( DEBUGPARAM("Claimed") PIDX_Claimed, pClaimed, 16 /*MinorVersion*/ );
; 1501 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
?get_Claimed@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP	; COPOSDeviceMonitor::get_Claimed
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_CheckHealthText@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 8
pCheckHealthText$ = 16
?get_CheckHealthText@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z PROC ; COPOSDeviceMonitor::get_CheckHealthText, COMDAT

; 1493 :     return GetOposProp( DEBUGPARAM("CheckHealthText") PIDX_CheckHealthText, pCheckHealthText, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba 41 42 0f 00	 mov	 edx, 1000001		; 000f4241H
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_CheckHealthText@COPOSDeviceMonitor@@UEAAJPEAPEA_W@Z ENDP ; COPOSDeviceMonitor::get_CheckHealthText
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_CapPowerReporting@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pCapPowerReporting$ = 16
?get_CapPowerReporting@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::get_CapPowerReporting, COMDAT

; 1486 :     return GetOposProp( DEBUGPARAM("CapPowerReporting") PIDX_CapPowerReporting, pCapPowerReporting, 16 /*MinorVersion*/ );

  00000	4c 8b c2	 mov	 r8, rdx
  00003	41 b9 10 00 00
	00		 mov	 r9d, 16
  00009	ba f5 01 00 00	 mov	 edx, 501		; 000001f5H
  0000e	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_CapPowerReporting@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::get_CapPowerReporting
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?put_BinaryConversion@COPOSDeviceMonitor@@UEAAJJ@Z
_TEXT	SEGMENT
this$ = 8
BinaryConversion$ = 16
?put_BinaryConversion@COPOSDeviceMonitor@@UEAAJJ@Z PROC	; COPOSDeviceMonitor::put_BinaryConversion, COMDAT

; 1478 :     IFDEBUG( _nBinaryConversion = BinaryConversion);
; 1479 :     return SetOposProp( DEBUGPARAM("BinaryConversion") PIDX_BinaryConversion, BinaryConversion, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	44 8b c2	 mov	 r8d, edx
  00009	41 8d 51 fb	 lea	 edx, QWORD PTR [r9-5]
  0000d	e9 00 00 00 00	 jmp	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
?put_BinaryConversion@COPOSDeviceMonitor@@UEAAJJ@Z ENDP	; COPOSDeviceMonitor::put_BinaryConversion
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_BinaryConversion@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pBinaryConversion$ = 16
?get_BinaryConversion@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC ; COPOSDeviceMonitor::get_BinaryConversion, COMDAT

; 1471 :     return GetOposProp( DEBUGPARAM("BinaryConversion") PIDX_BinaryConversion, pBinaryConversion, 16 /*MinorVersion*/ );

  00000	41 b9 10 00 00
	00		 mov	 r9d, 16
  00006	4c 8b c2	 mov	 r8, rdx
  00009	41 8d 51 fb	 lea	 edx, QWORD PTR [r9-5]
  0000d	e9 00 00 00 00	 jmp	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp
?get_BinaryConversion@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP ; COPOSDeviceMonitor::get_BinaryConversion
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?put_AutoDisable@COPOSDeviceMonitor@@UEAAJF@Z
_TEXT	SEGMENT
this$ = 8
AutoDisable$ = 16
?put_AutoDisable@COPOSDeviceMonitor@@UEAAJF@Z PROC	; COPOSDeviceMonitor::put_AutoDisable, COMDAT

; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00000	45 33 c0	 xor	 r8d, r8d
  00003	66 85 d2	 test	 dx, dx
  00006	ba 0a 00 00 00	 mov	 edx, 10
  0000b	41 0f 95 c0	 setne	 r8b
  0000f	44 8d 4a 06	 lea	 r9d, QWORD PTR [rdx+6]
  00013	e9 00 00 00 00	 jmp	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
?put_AutoDisable@COPOSDeviceMonitor@@UEAAJF@Z ENDP	; COPOSDeviceMonitor::put_AutoDisable
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z
_TEXT	SEGMENT
this$ = 48
nValue$1 = 56
pAutoDisable$ = 56
?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z PROC	; COPOSDeviceMonitor::get_AutoDisable, COMDAT

; 1456 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00006	41 b9 10 00 00
	00		 mov	 r9d, 16
  0000c	4c 8d 44 24 38	 lea	 r8, QWORD PTR nValue$1[rsp]

; 1456 : {

  00011	48 8b da	 mov	 rbx, rdx

; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00014	41 8d 51 fa	 lea	 edx, QWORD PTR [r9-6]
  00018	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0001d	8b 4c 24 38	 mov	 ecx, DWORD PTR nValue$1[rsp]
  00021	f7 d9		 neg	 ecx
  00023	66 45 1b c0	 sbb	 r8w, r8w
  00027	66 44 89 03	 mov	 WORD PTR [rbx], r8w

; 1457 :     return GetOposProp( DEBUGPARAM("AutoDisable") PIDX_AutoDisable, pAutoDisable, 16 /*MinorVersion*/ );
; 1458 : }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5b		 pop	 rbx
  00030	c3		 ret	 0
?get_AutoDisable@COPOSDeviceMonitor@@UEAAJPEAF@Z ENDP	; COPOSDeviceMonitor::get_AutoDisable
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?get_OpenResult@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 8
pOpenResult$ = 16
?get_OpenResult@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::get_OpenResult, COMDAT

; 1441 :     *pOpenResult = _nOpenResult;

  00000	8b 81 84 01 00
	00		 mov	 eax, DWORD PTR [rcx+388]
  00006	89 02		 mov	 DWORD PTR [rdx], eax

; 1442 :     DOTRACEV( ( _T("*OpenResult [Get]: %d"), _nOpenResult ) );
; 1443 :     return S_OK;

  00008	33 c0		 xor	 eax, eax

; 1444 : }

  0000a	c3		 ret	 0
?get_OpenResult@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::get_OpenResult
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z
_TEXT	SEGMENT
this$ = 48
pProcessID$ = 56
?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z PROC	; COPOSDeviceMonitor::SOProcessID, COMDAT

; 1157 : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 1158 :     *pProcessID = GetCurrentProcessId();

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId
  0000f	89 03		 mov	 DWORD PTR [rbx], eax

; 1159 :     DOTRACEV( ( _T("*SOProcessID: 0x%X"), *pProcessID ) );
; 1160 :     return S_OK;

  00011	33 c0		 xor	 eax, eax

; 1161 : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
?SOProcessID@COPOSDeviceMonitor@@UEAAJPEAJ@Z ENDP	; COPOSDeviceMonitor::SOProcessID
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z
_TEXT	SEGMENT
this$ = 64
uMsg$ = 72
wParam$ = 80
lParam$ = 88
?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z PROC	; COPOSDeviceMonitor::EventWindowProc, COMDAT

; 536  :     {

$LN47:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	4d 8b d9	 mov	 r11, r9
  0000d	4d 8b d0	 mov	 r10, r8
  00010	48 8b d9	 mov	 rbx, rcx

; 537  :         bool bProcessed = true;
; 538  : 
; 539  :         switch ( uMsg )

  00013	81 ea 64 04 00
	00		 sub	 edx, 1124		; 00000464H
  00019	0f 84 01 01 00
	00		 je	 $LN4@EventWindo
  0001f	83 ea 01	 sub	 edx, 1
  00022	0f 84 b7 00 00
	00		 je	 $LN6@EventWindo
  00028	83 ea 01	 sub	 edx, 1
  0002b	74 5c		 je	 SHORT $LN8@EventWindo
  0002d	33 ff		 xor	 edi, edi
  0002f	83 fa 02	 cmp	 edx, 2
  00032	0f 85 31 01 00
	00		 jne	 $LN5@EventWindo

; 611  :              _bFreezeState || _nCOFreezeEventCount != 0 )

  00038	40 38 b9 09 02
	00 00		 cmp	 BYTE PTR [rcx+521], dil
  0003f	0f 84 12 01 00
	00		 je	 $LN16@EventWindo
  00045	40 38 b9 a4 01
	00 00		 cmp	 BYTE PTR [rcx+420], dil
  0004c	0f 85 05 01 00
	00		 jne	 $LN16@EventWindo
  00052	39 b9 a0 01 00
	00		 cmp	 DWORD PTR [rcx+416], edi
  00058	0f 85 f9 00 00
	00		 jne	 $LN16@EventWindo

; 612  :         {
; 613  :             ::SetEvent( _Event_FiringDoneEvent );
; 614  :             return false;
; 615  :         }
; 616  : 
; 617  :         // If events are legal and not frozen,
; 618  :         //   set event in progress flag, and return true.
; 619  :         _Event_bEventInProgress = true;

  0005e	c6 81 0a 02 00
	00 01		 mov	 BYTE PTR [rcx+522], 1

; 571  :                         (long) wParam, (long) lParam, _Event_Err_ErrorLocus, _Event_Err_pErrorResponse );
; 572  :                     FireEventCleanup();
; 573  :                 }
; 574  :                 break;
; 575  :             }
; 576  : 
; 577  :         case WMU_STATUS_UPDATE_EVENT:
; 578  :             {
; 579  :                 if ( FireEventSetup() )
; 580  :                 {
; 581  :                     DOTRACEV( ( _T("*EventWindowProc: Firing StatusUpdateEvent") ) );
; 582  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_StatusUpdateEvent(

  00065	41 8b d2	 mov	 edx, r10d
  00068	48 81 c1 40 01
	00 00		 add	 rcx, 320		; 00000140H
  0006f	e8 00 00 00 00	 call	 ?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent
$LN45@EventWindo:

; 583  :                         (long) wParam );
; 584  :                     FireEventCleanup();
; 585  :                 }
; 586  :                 break;
; 587  :             }
; 588  : 
; 589  :         default:
; 590  :             {
; 591  :                 bProcessed = false;
; 592  :                 break;
; 593  :             }
; 594  :         }
; 595  : 
; 596  :         return bProcessed;

  00074	48 8b 8b 10 02
	00 00		 mov	 rcx, QWORD PTR [rbx+528]
  0007b	66 c7 83 0a 02
	00 00 00 01	 mov	 WORD PTR [rbx+522], 256	; 00000100H
  00084	e9 d5 00 00 00	 jmp	 $LN42@EventWindo
$LN8@EventWindo:

; 611  :              _bFreezeState || _nCOFreezeEventCount != 0 )

  00089	33 ff		 xor	 edi, edi
  0008b	40 38 b9 09 02
	00 00		 cmp	 BYTE PTR [rcx+521], dil
  00092	0f 84 bf 00 00
	00		 je	 $LN16@EventWindo
  00098	40 38 b9 a4 01
	00 00		 cmp	 BYTE PTR [rcx+420], dil
  0009f	0f 85 b2 00 00
	00		 jne	 $LN16@EventWindo
  000a5	39 b9 a0 01 00
	00		 cmp	 DWORD PTR [rcx+416], edi
  000ab	0f 85 a6 00 00
	00		 jne	 $LN16@EventWindo

; 559  :                         (long) wParam, (long*) lParam, _Event_DIO_pString );
; 560  :                     FireEventCleanup();
; 561  :                 }
; 562  :                 break;
; 563  :             }
; 564  : 
; 565  :         case WMU_ERROR_EVENT:
; 566  :             {
; 567  :                 if ( FireEventSetup() )
; 568  :                 {
; 569  :                     DOTRACEV( ( _T("*EventWindowProc: Firing ErrorEvent") ) );
; 570  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_ErrorEvent (

  000b1	48 8b 83 38 02
	00 00		 mov	 rax, QWORD PTR [rbx+568]
  000b8	45 8b c3	 mov	 r8d, r11d
  000bb	44 8b 8b 30 02
	00 00		 mov	 r9d, DWORD PTR [rbx+560]
  000c2	41 8b d2	 mov	 edx, r10d

; 619  :         _Event_bEventInProgress = true;

  000c5	c6 81 0a 02 00
	00 01		 mov	 BYTE PTR [rcx+522], 1

; 559  :                         (long) wParam, (long*) lParam, _Event_DIO_pString );
; 560  :                     FireEventCleanup();
; 561  :                 }
; 562  :                 break;
; 563  :             }
; 564  : 
; 565  :         case WMU_ERROR_EVENT:
; 566  :             {
; 567  :                 if ( FireEventSetup() )
; 568  :                 {
; 569  :                     DOTRACEV( ( _T("*EventWindowProc: Firing ErrorEvent") ) );
; 570  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_ErrorEvent (

  000cc	48 81 c1 40 01
	00 00		 add	 rcx, 320		; 00000140H
  000d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d8	e8 00 00 00 00	 call	 ?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent

; 634  :         ::SetEvent( _Event_FiringDoneEvent );

  000dd	eb 95		 jmp	 SHORT $LN45@EventWindo
$LN6@EventWindo:

; 611  :              _bFreezeState || _nCOFreezeEventCount != 0 )

  000df	33 ff		 xor	 edi, edi
  000e1	40 38 b9 09 02
	00 00		 cmp	 BYTE PTR [rcx+521], dil
  000e8	74 6d		 je	 SHORT $LN16@EventWindo
  000ea	40 38 b9 a4 01
	00 00		 cmp	 BYTE PTR [rcx+420], dil
  000f1	75 64		 jne	 SHORT $LN16@EventWindo
  000f3	39 b9 a0 01 00
	00		 cmp	 DWORD PTR [rcx+416], edi
  000f9	75 5c		 jne	 SHORT $LN16@EventWindo

; 547  :                         (long) wParam );
; 548  :                     FireEventCleanup();
; 549  :                 }
; 550  :                 break;
; 551  :             }
; 552  : 
; 553  :         case WMU_DIRECT_IO_EVENT:
; 554  :             {
; 555  :                 if ( FireEventSetup() )
; 556  :                 {
; 557  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DirectIOEvent") ) );
; 558  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_DirectIOEvent(

  000fb	4c 8b 8b 28 02
	00 00		 mov	 r9, QWORD PTR [rbx+552]
  00102	4d 8b c3	 mov	 r8, r11

; 619  :         _Event_bEventInProgress = true;

  00105	c6 81 0a 02 00
	00 01		 mov	 BYTE PTR [rcx+522], 1

; 547  :                         (long) wParam );
; 548  :                     FireEventCleanup();
; 549  :                 }
; 550  :                 break;
; 551  :             }
; 552  : 
; 553  :         case WMU_DIRECT_IO_EVENT:
; 554  :             {
; 555  :                 if ( FireEventSetup() )
; 556  :                 {
; 557  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DirectIOEvent") ) );
; 558  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_DirectIOEvent(

  0010c	41 8b d2	 mov	 edx, r10d
  0010f	48 81 c1 40 01
	00 00		 add	 rcx, 320		; 00000140H
  00116	e8 00 00 00 00	 call	 ?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent

; 634  :         ::SetEvent( _Event_FiringDoneEvent );

  0011b	e9 54 ff ff ff	 jmp	 $LN45@EventWindo
$LN4@EventWindo:

; 611  :              _bFreezeState || _nCOFreezeEventCount != 0 )

  00120	33 ff		 xor	 edi, edi
  00122	40 38 b9 09 02
	00 00		 cmp	 BYTE PTR [rcx+521], dil
  00129	74 2c		 je	 SHORT $LN16@EventWindo
  0012b	40 38 b9 a4 01
	00 00		 cmp	 BYTE PTR [rcx+420], dil
  00132	75 23		 jne	 SHORT $LN16@EventWindo
  00134	39 b9 a0 01 00
	00		 cmp	 DWORD PTR [rcx+416], edi
  0013a	75 1b		 jne	 SHORT $LN16@EventWindo

; 612  :         {
; 613  :             ::SetEvent( _Event_FiringDoneEvent );
; 614  :             return false;
; 615  :         }
; 616  : 
; 617  :         // If events are legal and not frozen,
; 618  :         //   set event in progress flag, and return true.
; 619  :         _Event_bEventInProgress = true;

  0013c	c6 81 0a 02 00
	00 01		 mov	 BYTE PTR [rcx+522], 1

; 540  :         {
; 541  :         case WMU_DATA_EVENT:
; 542  :             {
; 543  :                 if ( FireEventSetup() )
; 544  :                 {
; 545  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DataEvent") ) );
; 546  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_DataEvent(

  00143	41 8b d2	 mov	 edx, r10d
  00146	48 81 c1 40 01
	00 00		 add	 rcx, 320		; 00000140H
  0014d	e8 00 00 00 00	 call	 ?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent

; 634  :         ::SetEvent( _Event_FiringDoneEvent );

  00152	e9 1d ff ff ff	 jmp	 $LN45@EventWindo
$LN16@EventWindo:

; 583  :                         (long) wParam );
; 584  :                     FireEventCleanup();
; 585  :                 }
; 586  :                 break;
; 587  :             }
; 588  : 
; 589  :         default:
; 590  :             {
; 591  :                 bProcessed = false;
; 592  :                 break;
; 593  :             }
; 594  :         }
; 595  : 
; 596  :         return bProcessed;

  00157	48 8b 89 10 02
	00 00		 mov	 rcx, QWORD PTR [rcx+528]
$LN42@EventWindo:
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
  00164	bf 01 00 00 00	 mov	 edi, 1
$LN5@EventWindo:

; 597  :     }

  00169	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0016e	48 8b c7	 mov	 rax, rdi
  00171	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00175	5f		 pop	 rdi
  00176	c3		 ret	 0
?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z ENDP	; COPOSDeviceMonitor::EventWindowProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z
_TEXT	SEGMENT
hwnd$ = 48
uMsg$ = 56
wParam$ = 64
lParam$ = 72
?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z PROC ; COPOSDeviceMonitor::s_EventWindowProc, COMDAT

; 497  :     {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f9	 mov	 rdi, r9
  00017	49 8b e8	 mov	 rbp, r8
  0001a	8b f2		 mov	 esi, edx
  0001c	48 8b d9	 mov	 rbx, rcx

; 498  :         COPOSDeviceMonitor* pThis;
; 499  : 
; 500  :         // On window creation, save our window instance into user window space.
; 501  :         if ( uMsg == WM_CREATE )

  0001f	83 fa 01	 cmp	 edx, 1
  00022	75 31		 jne	 SHORT $LN2@s_EventWin

; 502  :         {
; 503  :             pThis = (COPOSDeviceMonitor*) ((LPCREATESTRUCT) lParam)->lpCreateParams;
; 504  :             ::SetWindowLongPtr( hwnd, 0, (LONG_PTR) pThis );

  00024	4d 8b 01	 mov	 r8, QWORD PTR [r9]
  00027	33 d2		 xor	 edx, edx
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetWindowLongPtrW
$LN4@s_EventWin:

; 514  :         }
; 515  : 
; 516  :         // Unless handled by our class method, pass on to default processing.
; 517  :         return ::DefWindowProc( hwnd, uMsg, wParam, lParam );

  0002f	4c 8b cf	 mov	 r9, rdi
  00032	4c 8b c5	 mov	 r8, rbp
  00035	8b d6		 mov	 edx, esi
  00037	48 8b cb	 mov	 rcx, rbx
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
$LN1@s_EventWin:

; 518  :     }

  00040	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00045	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0004a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN2@s_EventWin:

; 505  :         }
; 506  : 
; 507  :         // If other message, give our class a chance to handle.
; 508  :         else
; 509  :         {
; 510  :             pThis = (COPOSDeviceMonitor*) ::GetWindowLongPtr( hwnd, 0 );

  00055	33 d2		 xor	 edx, edx
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetWindowLongPtrW

; 511  :             if ( pThis != 0 &&

  0005d	48 85 c0	 test	 rax, rax
  00060	74 cd		 je	 SHORT $LN4@s_EventWin
  00062	4c 8b cf	 mov	 r9, rdi
  00065	4c 8b c5	 mov	 r8, rbp
  00068	8b d6		 mov	 edx, esi
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?EventWindowProc@COPOSDeviceMonitor@@IEAA_JI_K_J@Z ; COPOSDeviceMonitor::EventWindowProc
  00072	48 85 c0	 test	 rax, rax
  00075	74 b8		 je	 SHORT $LN4@s_EventWin

; 512  :                  pThis->EventWindowProc( uMsg, wParam, lParam ) )
; 513  :                     return 0;

  00077	33 c0		 xor	 eax, eax
  00079	eb c5		 jmp	 SHORT $LN1@s_EventWin
?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z ENDP ; COPOSDeviceMonitor::s_EventWindowProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventUninit@COPOSDeviceMonitor@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?EventUninit@COPOSDeviceMonitor@@IEAAXXZ PROC		; COPOSDeviceMonitor::EventUninit, COMDAT

; 268  :     {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 269  :         if ( _Event_hEventWnd != 0 )

  00009	48 8b 89 20 02
	00 00		 mov	 rcx, QWORD PTR [rcx+544]
  00010	48 85 c9	 test	 rcx, rcx
  00013	74 06		 je	 SHORT $LN2@EventUnini

; 270  :             CMVERIFY( ::DestroyWindow( _Event_hEventWnd ) != 0 );

  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DestroyWindow
$LN2@EventUnini:

; 271  : 
; 272  :         // If last instance of this CO being destroyed, then
; 273  :         //   unregister the hidden window class.
; 274  :         if ( s_nInstances == 0 )

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA, 0 ; COPOSDeviceMonitor::s_nInstances
  00022	75 14		 jne	 SHORT $LN3@EventUnini

; 275  :             CMVERIFY( ::UnregisterClass( g_WindowName, _Module.GetModuleInstance() ) != 0 );

  00024	48 8b 15 08 00
	00 00		 mov	 rdx, QWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+8
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_WindowName@@3PA_WA ; g_WindowName
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnregisterClassW
$LN3@EventUnini:

; 276  : 
; 277  :         if ( _Event_FiringDoneEvent != 0 )

  00038	48 8b 8b 10 02
	00 00		 mov	 rcx, QWORD PTR [rbx+528]
  0003f	48 85 c9	 test	 rcx, rcx
  00042	74 06		 je	 SHORT $LN4@EventUnini

; 278  :             CMVERIFY( ::CloseHandle( _Event_FiringDoneEvent ) != 0 );

  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN4@EventUnini:

; 279  :         if ( _Event_DoEventMutex != 0 )

  0004a	48 8b 8b 18 02
	00 00		 mov	 rcx, QWORD PTR [rbx+536]
  00051	48 85 c9	 test	 rcx, rcx
  00054	74 06		 je	 SHORT $LN5@EventUnini

; 280  :             CMVERIFY( ::CloseHandle( _Event_DoEventMutex ) != 0 );

  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN5@EventUnini:

; 281  :     }

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx
  00061	c3		 ret	 0
?EventUninit@COPOSDeviceMonitor@@IEAAXXZ ENDP		; COPOSDeviceMonitor::EventUninit
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventInit@COPOSDeviceMonitor@@IEAAJXZ
_TEXT	SEGMENT
WndClass$1 = 96
this$ = 192
?EventInit@COPOSDeviceMonitor@@IEAAJXZ PROC		; COPOSDeviceMonitor::EventInit, COMDAT

; 106  :     {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 107  :         _Event_bOpen = false;

  00012	33 ff		 xor	 edi, edi
  00014	48 8b d9	 mov	 rbx, rcx
  00017	40 88 b9 08 02
	00 00		 mov	 BYTE PTR [rcx+520], dil

; 108  : 
; 109  :         // This function must be called by the thread that creates the OCX.
; 110  :         // Then these functions will ensure that events from the SO are fired
; 111  :         //   on the thread that creates the OCX.
; 112  :         _Event_ControlThreadID = ::GetCurrentThreadId();

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentThreadId

; 113  : 
; 114  :         // Perform some initialization in case of a failure below,
; 115  :         //   so that EventUninit will not fail.
; 116  :         _Event_hEventWnd = 0;

  00024	48 89 bb 20 02
	00 00		 mov	 QWORD PTR [rbx+544], rdi

; 117  :         _Event_FiringDoneEvent = 0;
; 118  :         _Event_DoEventMutex = 0;
; 119  : 
; 120  :         // If first instance of this CO being created, then
; 121  :         //   register a class for our hidden window.
; 122  :         if ( s_nInstances == 0 )

  0002b	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:?g_WindowName@@3PA_WA ; g_WindowName
  00032	89 83 04 02 00
	00		 mov	 DWORD PTR [rbx+516], eax
  00038	48 89 bb 10 02
	00 00		 mov	 QWORD PTR [rbx+528], rdi
  0003f	48 89 bb 18 02
	00 00		 mov	 QWORD PTR [rbx+536], rdi
  00046	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA, edi ; COPOSDeviceMonitor::s_nInstances
  0004c	75 5c		 jne	 SHORT $LN12@EventInit

; 123  :         {
; 124  :             WNDCLASS WndClass =
; 125  :             {
; 126  :                 0,                              // style
; 127  :                 s_EventWindowProc,              // lpfnWndProc

  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?s_EventWindowProc@COPOSDeviceMonitor@@KA_JPEAUHWND__@@I_K_J@Z ; COPOSDeviceMonitor::s_EventWindowProc
  00055	89 7c 24 60	 mov	 DWORD PTR WndClass$1[rsp], edi
  00059	48 89 44 24 68	 mov	 QWORD PTR WndClass$1[rsp+8], rax

; 128  :                 0,                              // cbClsExtra
; 129  :                 sizeof( void* ),                // cbWndExtra
; 130  :                 _Module.GetModuleInstance(),    // hInstance
; 131  :                 NULL,                           // hIcon
; 132  :                 NULL,                           // hCursor
; 133  :                 NULL,                           // hbrBackground
; 134  :                 NULL,                           // lpszMenuName
; 135  :                 g_WindowName                    // lpszClassName
; 136  :             };
; 137  :             if ( 0 == ::RegisterClass( &WndClass ) )

  0005e	48 8d 4c 24 60	 lea	 rcx, QWORD PTR WndClass$1[rsp]
  00063	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+8
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	0f 57 c9	 xorps	 xmm1, xmm1
  00070	48 89 44 24 78	 mov	 QWORD PTR WndClass$1[rsp+24], rax
  00075	89 7c 24 70	 mov	 DWORD PTR WndClass$1[rsp+16], edi
  00079	c7 44 24 74 08
	00 00 00	 mov	 DWORD PTR WndClass$1[rsp+20], 8
  00081	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR WndClass$1[rsp+32], xmm0
  0008a	66 0f 7f 8c 24
	90 00 00 00	 movdqa	 XMMWORD PTR WndClass$1[rsp+48], xmm1
  00093	48 89 b4 24 a0
	00 00 00	 mov	 QWORD PTR WndClass$1[rsp+64], rsi
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassW
  000a1	66 3b f8	 cmp	 di, ax
  000a4	0f 84 83 00 00
	00		 je	 $LN6@EventInit
$LN12@EventInit:

; 138  :             {
; 139  :                 DOTRACEERR( _T("  EventInit: Failed RegisterClass %lu\n    %s"), ::GetLastError() );
; 140  :                 return E_UNEXPECTED;
; 141  :             }
; 142  :         }
; 143  : 
; 144  :         // Create the hidden window for event handling.
; 145  :         _Event_hEventWnd = CreateWindowEx(

  000aa	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+8
  000b1	45 33 c9	 xor	 r9d, r9d
  000b4	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  000b9	4c 8b c6	 mov	 r8, rsi
  000bc	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000c1	48 8b d6	 mov	 rdx, rsi
  000c4	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  000c9	33 c9		 xor	 ecx, ecx
  000cb	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  000d0	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  000d4	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  000d8	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  000dc	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExW
  000e6	48 89 83 20 02
	00 00		 mov	 QWORD PTR [rbx+544], rax

; 146  :             0,                              // extended window style
; 147  :             g_WindowName,                   // pointer to registered class name
; 148  :             g_WindowName,                   // pointer to window name
; 149  :             0,                              // window style
; 150  :             0,                              // horizontal position of window
; 151  :             0,                              // vertical position of window
; 152  :             0,                              // window width
; 153  :             0,                              // window height
; 154  :             NULL,                           // handle to parent or owner window
; 155  :             0,                              // handle to menu, or child-window identifier
; 156  :             _Module.GetModuleInstance(),    // handle to application instance
; 157  :             this );                         // pointer to window-creation data
; 158  :         if ( 0 == _Event_hEventWnd )

  000ed	48 85 c0	 test	 rax, rax
  000f0	74 3b		 je	 SHORT $LN6@EventInit

; 159  :         {
; 160  :             DOTRACEERR( _T("  EventInit: Failed CreateWindowEx %lu\n    %s"), ::GetLastError() );
; 161  :             return E_UNEXPECTED;
; 162  :         }
; 163  : 
; 164  :         // Create synchronization objects.
; 165  :         if ( 0 == ( _Event_FiringDoneEvent = CreateEvent(
; 166  :                         0,                  // pointer to security attributes
; 167  :                         TRUE,               // flag for manual-reset event
; 168  :                         FALSE,              // flag for initial state
; 169  :                         0 ) ) ||            // pointer to event-object name

  000f2	45 33 c9	 xor	 r9d, r9d
  000f5	45 33 c0	 xor	 r8d, r8d
  000f8	33 c9		 xor	 ecx, ecx
  000fa	41 8d 51 01	 lea	 edx, QWORD PTR [r9+1]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  00104	48 89 83 10 02
	00 00		 mov	 QWORD PTR [rbx+528], rax
  0010b	48 85 c0	 test	 rax, rax
  0010e	74 1d		 je	 SHORT $LN6@EventInit
  00110	45 33 c0	 xor	 r8d, r8d
  00113	33 d2		 xor	 edx, edx
  00115	33 c9		 xor	 ecx, ecx
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateMutexW
  0011d	48 89 83 18 02
	00 00		 mov	 QWORD PTR [rbx+536], rax
  00124	48 85 c0	 test	 rax, rax
  00127	74 04		 je	 SHORT $LN6@EventInit

; 177  :         }
; 178  : 
; 179  :         return S_OK;

  00129	33 c0		 xor	 eax, eax
  0012b	eb 05		 jmp	 SHORT $LN1@EventInit
$LN6@EventInit:

; 170  :              0 == ( _Event_DoEventMutex = CreateMutex(
; 171  :                         0,                  // pointer to security attributes
; 172  :                         FALSE,              // flag for initial ownership
; 173  :                         0 ) ) )             // pointer to mutex-object name
; 174  :         {
; 175  :             DOTRACEERR( _T("  EventInit: Failed CreateEvent/Mutex %lu\n    %s"), ::GetLastError() );
; 176  :             return E_UNEXPECTED;

  0012d	b8 ff ff 00 80	 mov	 eax, -2147418113	; ffffffff8000ffffH
$LN1@EventInit:

; 180  :     }

  00132	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  0013a	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0013e	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  00142	49 8b e3	 mov	 rsp, r11
  00145	5f		 pop	 rdi
  00146	c3		 ret	 0
?EventInit@COPOSDeviceMonitor@@IEAAJXZ ENDP		; COPOSDeviceMonitor::EventInit
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
;	COMDAT ?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z
_TEXT	SEGMENT
pnEntries$ = 48
?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z PROC ; COPOSDeviceMonitor::GetConnMap, COMDAT

; 267  : BEGIN_CONNECTION_POINT_MAP(COPOSDeviceMonitor)

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	65 48 8b 04 25
	58 00 00 00	 mov	 rax, QWORD PTR gs:88
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_Init_thread_epoch
  0001d	48 8b 14 d0	 mov	 rdx, QWORD PTR [rax+rdx*8]
  00021	8b 04 11	 mov	 eax, DWORD PTR [rcx+rdx]
  00024	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA, eax ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  0002a	7f 18		 jg	 SHORT $LN14@GetConnMap
$LN2@GetConnMap:

; 268  :     CONNECTION_POINT_ENTRY(IID_IPropertyNotifySink)
; 269  :     CONNECTION_POINT_ENTRY(DIID__IOPOSDeviceMonitorEvents)
; 270  : END_CONNECTION_POINT_MAP()

  0002c	48 85 db	 test	 rbx, rbx
  0002f	74 06		 je	 SHORT $LN3@GetConnMap
  00031	c7 03 02 00 00
	00		 mov	 DWORD PTR [rbx], 2
$LN3@GetConnMap:
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B ; `COPOSDeviceMonitor::GetConnMap'::`2'::_entries
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
$LN14@GetConnMap:

; 267  : BEGIN_CONNECTION_POINT_MAP(COPOSDeviceMonitor)

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  0004b	e8 00 00 00 00	 call	 _Init_thread_header
  00050	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA, -1 ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  00057	75 d3		 jne	 SHORT $LN2@GetConnMap

; 268  :     CONNECTION_POINT_ENTRY(IID_IPropertyNotifySink)
; 269  :     CONNECTION_POINT_ENTRY(DIID__IOPOSDeviceMonitorEvents)
; 270  : END_CONNECTION_POINT_MAP()

  00059	48 83 0d 10 00
	00 00 ff	 or	 QWORD PTR ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B+16, -1
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  00068	48 c7 05 00 00
	00 00 40 00 00
	00		 mov	 QWORD PTR ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B, 64 ; 00000040H
  00073	48 c7 05 08 00
	00 00 58 00 00
	00		 mov	 QWORD PTR ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z@4QBU34@B+8, 88 ; 00000058H
  0007e	e8 00 00 00 00	 call	 _Init_thread_footer
  00083	eb a7		 jmp	 SHORT $LN2@GetConnMap
?GetConnMap@COPOSDeviceMonitor@@SAPEBU_ATL_CONNMAP_ENTRY@ATL@@PEAH@Z ENDP ; COPOSDeviceMonitor::GetConnMap
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z
_TEXT	SEGMENT
bmp$ = 80
this$ = 128
di$ = 136
?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z PROC ; COPOSDeviceMonitor::OnDraw, COMDAT

; 236  : {

$LN10:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 237  :     RECT& rc = *(RECT*)di.prcBounds;

  00019	48 8b 5a 28	 mov	 rbx, QWORD PTR [rdx+40]
  0001d	48 8b ea	 mov	 rbp, rdx

; 238  : 
; 239  :     // Draw our bitmap...
; 240  :     //  - Load bitmap and get info
; 241  :     HBITMAP hBitmap = LoadBitmap(

  00020	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+8
  00027	ba c9 00 00 00	 mov	 edx, 201		; 000000c9H
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadBitmapW

; 242  :         _Module.GetModuleInstance(),            // handle of the instance containing the image
; 243  :         MAKEINTRESOURCE(IDB_OPOSDEVICEMONITOR2) ); // bitmap resource name
; 244  :     BITMAP bmp;
; 245  :     GetObject(

  00032	4c 8d 44 24 50	 lea	 r8, QWORD PTR bmp$[rsp]
  00037	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	4c 8b f0	 mov	 r14, rax
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetObjectW

; 246  :         hBitmap,                                // handle to graphics object of interest
; 247  :         sizeof(BITMAP),                         // size of buffer for object information
; 248  :         &bmp );                                 // pointer to buffer for object information
; 249  :     //  - Create a compatible memory DC and select bitmap into it
; 250  :     HDC hMemDC = CreateCompatibleDC(

  00048	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateCompatibleDC

; 251  :         di.hdcDraw );                           // handle to the device context
; 252  :     HBITMAP hOldBitmap =

  00052	48 8b c8	 mov	 rcx, rax
  00055	49 8b d6	 mov	 rdx, r14
  00058	48 8b f0	 mov	 rsi, rax
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject

; 253  :         (HBITMAP) SelectObject(
; 254  :             hMemDC,                             // handle to device context
; 255  :             hBitmap );                          // handle to object
; 256  :     //  - Copy bitmap from memory DC to screen DC
; 257  :     BitBlt(

  00061	8b 4b 0c	 mov	 ecx, DWORD PTR [rbx+12]
  00064	48 8b f8	 mov	 rdi, rax
  00067	44 8b 43 04	 mov	 r8d, DWORD PTR [rbx+4]
  0006b	41 2b c8	 sub	 ecx, r8d
  0006e	39 4c 24 58	 cmp	 DWORD PTR bmp$[rsp+8], ecx
  00072	44 8b 4b 08	 mov	 r9d, DWORD PTR [rbx+8]
  00076	0f 4c 4c 24 58	 cmovl	 ecx, DWORD PTR bmp$[rsp+8]
  0007b	44 2b 0b	 sub	 r9d, DWORD PTR [rbx]
  0007e	44 39 4c 24 54	 cmp	 DWORD PTR bmp$[rsp+4], r9d
  00083	8b 13		 mov	 edx, DWORD PTR [rbx]
  00085	44 0f 4c 4c 24
	54		 cmovl	 r9d, DWORD PTR bmp$[rsp+4]
  0008b	c7 44 24 40 20
	00 cc 00	 mov	 DWORD PTR [rsp+64], 13369376 ; 00cc0020H
  00093	83 64 24 38 00	 and	 DWORD PTR [rsp+56], 0
  00098	83 64 24 30 00	 and	 DWORD PTR [rsp+48], 0
  0009d	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  000a2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000a6	48 8b 4d 20	 mov	 rcx, QWORD PTR [rbp+32]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BitBlt

; 258  :       di.hdcDraw,                               // handle to destination device context
; 259  :       rc.left,                                  // x-coordinate of destination rectangle's upper-left corner
; 260  :       rc.top,                                   // y-coordinate of destination rectangle's upper-left corner
; 261  :       min( bmp.bmWidth, rc.right - rc.left ),   // width of destination rectangle
; 262  :       min( bmp.bmHeight, rc.bottom - rc.top ),  // height of destination rectangle
; 263  :       hMemDC,                                   // handle to source device context
; 264  :       0,                                        // x-coordinate of source rectangle's upper-left corner
; 265  :       0,                                        // y-coordinate of source rectangle's upper-left corner
; 266  :       SRCCOPY );                                // raster operation code
; 267  : 
; 268  :     // Cleanup
; 269  :     SelectObject( hMemDC, hOldBitmap );

  000b0	48 8b d7	 mov	 rdx, rdi
  000b3	48 8b ce	 mov	 rcx, rsi
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject

; 270  :     DeleteObject( hMemDC );

  000bc	48 8b ce	 mov	 rcx, rsi
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteObject

; 271  :     DeleteObject( hBitmap );

  000c5	49 8b ce	 mov	 rcx, r14
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteObject

; 272  : 
; 273  :     return S_OK;
; 274  : }

  000ce	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  000d3	33 c0		 xor	 eax, eax
  000d5	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000d9	49 8b 6b 18	 mov	 rbp, QWORD PTR [r11+24]
  000dd	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  000e1	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  000e5	49 8b e3	 mov	 rsp, r11
  000e8	41 5e		 pop	 r14
  000ea	c3		 ret	 0
?OnDraw@COPOSDeviceMonitor@@MEAAJAEAUATL_DRAWINFO@@@Z ENDP ; COPOSDeviceMonitor::OnDraw
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z
_TEXT	SEGMENT
this$ = 48
bFreeze$ = 56
?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z PROC		; COPOSDeviceMonitor::FreezeEvents, COMDAT

; 207  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [rcx+224]
  0000c	48 8b d9	 mov	 rbx, rcx

; 208  :     // If requesting events to be frozen...
; 209  :     if ( bFreeze )

  0000f	85 d2		 test	 edx, edx
  00011	74 2b		 je	 SHORT $LN2@FreezeEven

; 210  :     {
; 211  :         DOTRACEV( ( _T("*FreezeEvents: Freezing %d"), _nCOFreezeEventCount ) );
; 212  :         if ( _nCOFreezeEventCount == 0 &&   // If events are not currently frozen and

  00013	85 c0		 test	 eax, eax
  00015	75 1d		 jne	 SHORT $LN4@FreezeEven
  00017	38 81 c0 00 00
	00		 cmp	 BYTE PTR [rcx+192], al
  0001d	74 15		 je	 SHORT $LN4@FreezeEven

; 213  :              _bOpened )                     //   SO is opened,
; 214  :             SetCOFreezeEvents( TRUE );      //   then freeze events in the SO.

  0001f	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  00022	48 81 c1 40 ff
	ff ff		 add	 rcx, -192		; ffffffffffffff40H
  00029	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z ; COPOSDeviceMonitor::SetCOFreezeEvents
  0002e	8b 83 e0 00 00
	00		 mov	 eax, DWORD PTR [rbx+224]
$LN4@FreezeEven:

; 215  :         _nCOFreezeEventCount++;             // Increment freeze count. Must do after informing SO.

  00034	ff c0		 inc	 eax
  00036	89 83 e0 00 00
	00		 mov	 DWORD PTR [rbx+224], eax

; 216  :     }

  0003c	eb 28		 jmp	 SHORT $LN5@FreezeEven
$LN2@FreezeEven:

; 217  :     // Else requesting events to be unfrozen...
; 218  :     else
; 219  :     {
; 220  :         _nCOFreezeEventCount--;             // Decrement freeze count. Must do before informing SO.

  0003e	83 e8 01	 sub	 eax, 1
  00041	89 81 e0 00 00
	00		 mov	 DWORD PTR [rcx+224], eax

; 221  :         DOTRACEV( ( _T("*FreezeEvents: Unfreezing %d"), _nCOFreezeEventCount ) );
; 222  :         if ( _nCOFreezeEventCount == 0 &&   // If events have become unfrozen and

  00047	75 1d		 jne	 SHORT $LN5@FreezeEven
  00049	80 b9 c0 00 00
	00 00		 cmp	 BYTE PTR [rcx+192], 0
  00050	74 14		 je	 SHORT $LN5@FreezeEven

; 223  :              _bOpened )                     //   SO is opened,
; 224  :             SetCOFreezeEvents( FALSE );     //   then unfreeze events in the SO.

  00052	33 d2		 xor	 edx, edx
  00054	48 81 c1 40 ff
	ff ff		 add	 rcx, -192		; ffffffffffffff40H
  0005b	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z ; COPOSDeviceMonitor::SetCOFreezeEvents
  00060	8b 83 e0 00 00
	00		 mov	 eax, DWORD PTR [rbx+224]
$LN5@FreezeEven:

; 225  :     }
; 226  : 
; 227  :     // Just in case anyone cares ... keep the CComControlBase one in sync.
; 228  :     m_nFreezeEvents = _nCOFreezeEventCount;

  00066	89 43 a8	 mov	 DWORD PTR [rbx-88], eax

; 229  :     return S_OK;

  00069	33 c0		 xor	 eax, eax

; 230  : }

  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5b		 pop	 rbx
  00070	c3		 ret	 0
?FreezeEvents@COPOSDeviceMonitor@@MEAAJH@Z ENDP		; COPOSDeviceMonitor::FreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z
_TEXT	SEGMENT
Disp$1 = 80
VarResult$2 = 104
Var$3 = 136
this$ = 192
bFreeze$ = 200
?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z PROC	; COPOSDeviceMonitor::SetCOFreezeEvents, COMDAT

; 655  : {

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi
  0000a	55		 push	 rbp
  0000b	48 8d 6c 24 a9	 lea	 rbp, QWORD PTR [rsp-87]
  00010	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 656  :     // If open...
; 657  :     if ( _bOpened )

  00017	33 ff		 xor	 edi, edi
  00019	48 8b d9	 mov	 rbx, rcx
  0001c	40 38 b9 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], dil
  00023	0f 84 a5 00 00
	00		 je	 $LN20@SetCOFreez

; 664  :         Var.SetVARIANT_BOOL( bFreeze );

  00029	48 8d 4d 2f	 lea	 rcx, QWORD PTR Var$3[rbp-89]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0002d	66 89 7d 2f	 mov	 WORD PTR Var$3[rbp-89], di
  00031	40 88 7d 47	 mov	 BYTE PTR Var$3[rbp-65], dil
  00035	66 89 7d 0f	 mov	 WORD PTR VarResult$2[rbp-89], di
  00039	40 88 7d 27	 mov	 BYTE PTR VarResult$2[rbp-65], dil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 664  :         Var.SetVARIANT_BOOL( bFreeze );

  0003d	e8 00 00 00 00	 call	 ?SetVARIANT_BOOL@OposVariant@@QEAAXF@Z ; OposVariant::SetVARIANT_BOOL

; 665  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };
; 666  :         _pService->Invoke(

  00042	48 8b 8b 98 01
	00 00		 mov	 rcx, QWORD PTR [rbx+408]
  00049	44 8d 47 01	 lea	 r8d, QWORD PTR [rdi+1]
  0004d	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00052	48 8d 55 0f	 lea	 rdx, QWORD PTR VarResult$2[rbp-89]
  00056	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0005b	48 8d 45 2f	 lea	 rax, QWORD PTR Var$3[rbp-89]
  0005f	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  00064	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  0006a	4c 89 45 07	 mov	 QWORD PTR Disp$1[rbp-73], r8
  0006e	48 8d 55 f7	 lea	 rdx, QWORD PTR Disp$1[rbp-89]
  00072	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00077	8b 93 ac 01 00
	00		 mov	 edx, DWORD PTR [rbx+428]
  0007d	48 89 45 f7	 mov	 QWORD PTR Disp$1[rbp-89], rax
  00081	48 89 7d ff	 mov	 QWORD PTR Disp$1[rbp-81], rdi
  00085	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00088	66 44 89 44 24
	20		 mov	 WORD PTR [rsp+32], r8w
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  00095	ff 50 30	 call	 QWORD PTR [rax+48]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00098	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  0009c	40 88 7d 27	 mov	 BYTE PTR VarResult$2[rbp-65], dil
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000a6	40 38 7d 27	 cmp	 BYTE PTR VarResult$2[rbp-65], dil
  000aa	74 0e		 je	 SHORT $LN15@SetCOFreez

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000ac	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000b0	40 88 7d 27	 mov	 BYTE PTR VarResult$2[rbp-65], dil
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN15@SetCOFreez:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000ba	40 38 7d 47	 cmp	 BYTE PTR Var$3[rbp-65], dil
  000be	74 0e		 je	 SHORT $LN20@SetCOFreez

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c0	48 8d 4d 2f	 lea	 rcx, QWORD PTR Var$3[rbp-89]
  000c4	40 88 7d 47	 mov	 BYTE PTR Var$3[rbp-65], dil
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN20@SetCOFreez:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 670  : }

  000ce	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  000d6	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  000da	49 8b 7b 18	 mov	 rdi, QWORD PTR [r11+24]
  000de	49 8b e3	 mov	 rsp, r11
  000e1	5d		 pop	 rbp
  000e2	c3		 ret	 0
?SetCOFreezeEvents@COPOSDeviceMonitor@@IEAAXF@Z ENDP	; COPOSDeviceMonitor::SetCOFreezeEvents
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z
_TEXT	SEGMENT
Disp$1 = 80
VarResult$2 = 104
this$ = 160
hRC$ = 168
pParms$ = 176
nParms$ = 184
nDispIDIndex$ = 192
pRC$ = 200
bOpenCheck$ = 208
?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z PROC ; COPOSDeviceMonitor::DoInvoke, COMDAT

; 514  : {

$LN33:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi
  0000f	55		 push	 rbp
  00010	48 8d 68 b9	 lea	 rbp, QWORD PTR [rax-71]
  00014	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0001b	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 572  :     if ( bOpenCheck )

  00022	33 f6		 xor	 esi, esi
  00024	49 8b c0	 mov	 rax, r8
  00027	48 63 7d 6f	 movsxd	 rdi, DWORD PTR nDispIDIndex$[rbp-81]
  0002b	48 8b d9	 mov	 rbx, rcx
  0002e	40 38 75 7f	 cmp	 BYTE PTR bOpenCheck$[rbp-81], sil
  00032	74 35		 je	 SHORT $LN29@DoInvoke

; 573  :     {
; 574  :         // If not opened, set error code and return....
; 575  :         if ( ! _bOpened )

  00034	40 38 b1 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], sil
  0003b	75 0c		 jne	 SHORT $LN3@DoInvoke

; 576  :         {
; 577  :             *pRC = OPOS_E_CLOSED;

  0003d	48 8b 45 77	 mov	 rax, QWORD PTR pRC$[rbp-81]
  00041	c7 00 65 00 00
	00		 mov	 DWORD PTR [rax], 101	; 00000065H

; 578  :             hRC = S_OK;
; 579  :         }

  00047	eb 19		 jmp	 SHORT $LN30@DoInvoke
$LN3@DoInvoke:

; 580  :         // If the SO's release level doesn't support this method, then return error.
; 581  :         else if ( nDispIDIndex >= _nMaxMethod )

  00049	3b b9 a8 01 00
	00		 cmp	 edi, DWORD PTR [rcx+424]
  0004f	7c 18		 jl	 SHORT $LN29@DoInvoke

; 583  :             *pRC = SetRC( OPOS_E_NOSERVICE );

  00051	48 8b 45 77	 mov	 rax, QWORD PTR pRC$[rbp-81]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00055	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  0005a	89 8b 90 01 00
	00		 mov	 DWORD PTR [rbx+400], ecx
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 583  :             *pRC = SetRC( OPOS_E_NOSERVICE );

  00060	89 08		 mov	 DWORD PTR [rax], ecx
$LN30@DoInvoke:

; 603  : 
; 604  :     // Trace result and outgoing parameters.
; 605  : #ifdef _DEBUG
; 606  :     LPCTSTR pszInfo = _T("");
; 607  :     TCHAR szHR[50];
; 608  :     if ( !_bOpened )
; 609  :         pszInfo = _T(" -- Closed");
; 610  :     else if ( nDispIDIndex >= _nMaxMethod )
; 611  :         pszInfo = _T(" -- Not supported by SO");
; 612  :     else if ( hRC != 0 )
; 613  :     {
; 614  :         _sntprintf( szHR, TSIZEOF(szHR), _T(" -- COM error: HR = 0x%X"), hRC );
; 615  :         NULTERMINATE(szHR);
; 616  :         pszInfo = szHR;
; 617  :     }
; 618  : 
; 619  :     DOTRACEV( ( _T("-%hs [Function]  RC=%d%s"), pFuncName, *pRC, pszInfo ) );
; 620  :     for ( u = 0; ++u <= nParms; )
; 621  :     {
; 622  :         pVar = &pParms[ nParms - u ];
; 623  :         _sntprintf( szParmNum, TSIZEOF(szParmNum), _T("    #%u: "), u );
; 624  :         NULTERMINATE(szParmNum);
; 625  :         switch ( pVar->vt )
; 626  :         {
; 627  :         case VT_BYREF|VT_BOOL: DOTRACEV( ( _T("%sBOOL* 0x%X"), szParmNum, *pVar->pboolVal ) ); break;
; 628  :         case VT_BYREF|VT_I4: DOTRACEV( ( _T("%sLONG* %d (0x%X)"), szParmNum, *pVar->plVal, *pVar->plVal ) ); break;
; 629  :         case VT_BYREF|VT_BSTR:
; 630  :             {
; 631  :                 _sntprintf( szPrefix, TSIZEOF(szPrefix), _T("%sSTRING*;"), szParmNum );
; 632  :                 NULTERMINATE(szPrefix);
; 633  :                 UINT nStrRefLen;
; 634  :                 OposVariant* pStrRef = &pStrRefs[u-1];
; 635  :                 if ( pStrRef->vt == VT_BSTR &&
; 636  :                      ( nStrRefLen = ::SysStringByteLen( pStrRef->bstrVal ) ) == ::SysStringByteLen( *pVar->pbstrVal ) &&
; 637  :                       0 == ::memcmp( pStrRef->bstrVal, *pVar->pbstrVal, nStrRefLen ) )
; 638  :                     DOTRACEV( ( _T("%s Unchanged"), szPrefix ) );
; 639  :                 else
; 640  :                     DOTRACESTRINGV( szPrefix, *pVar->pbstrVal );
; 641  :                 break;
; 642  :             }
; 643  :         }
; 644  :     }
; 645  : 
; 646  :     delete [] pStrRefs;
; 647  : #endif
; 648  : 
; 649  :     return hRC;

  00062	8b fe		 mov	 edi, esi
  00064	e9 b0 00 00 00	 jmp	 $LN25@DoInvoke
$LN29@DoInvoke:

; 592  :         OposDispParms Disp( pParms, nParms );

  00069	45 8b c1	 mov	 r8d, r9d
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0006c	66 89 75 17	 mov	 WORD PTR VarResult$2[rbp-81], si
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 592  :         OposDispParms Disp( pParms, nParms );

  00070	48 8b d0	 mov	 rdx, rax
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00073	40 88 75 2f	 mov	 BYTE PTR VarResult$2[rbp-57], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 592  :         OposDispParms Disp( pParms, nParms );

  00077	48 8d 4d ff	 lea	 rcx, QWORD PTR Disp$1[rbp-81]
  0007b	e8 00 00 00 00	 call	 ??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 593  : 
; 594  :         // Invoke the SO method.
; 595  :         hRC = _pService->Invoke(

  00080	48 8b 8b 98 01
	00 00		 mov	 rcx, QWORD PTR [rbx+408]
  00087	48 8d 55 17	 lea	 rdx, QWORD PTR VarResult$2[rbp-81]
  0008b	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00090	41 b8 01 00 00
	00		 mov	 r8d, 1
  00096	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0009b	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  000a1	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  000a6	48 8d 55 ff	 lea	 rdx, QWORD PTR Disp$1[rbp-81]
  000aa	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  000ad	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  000b2	8b 94 bb ac 01
	00 00		 mov	 edx, DWORD PTR [rbx+rdi*4+428]
  000b9	66 44 89 44 24
	20		 mov	 WORD PTR [rsp+32], r8w
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  000c6	41 ff 52 30	 call	 QWORD PTR [r10+48]
  000ca	8b f8		 mov	 edi, eax

; 601  :         *pRC = (hRC == S_OK) ? VarResult.GetLONG() : SetRC( OPOS_E_NOSERVICE );

  000cc	85 c0		 test	 eax, eax
  000ce	75 0d		 jne	 SHORT $LN8@DoInvoke
  000d0	48 8d 4d 17	 lea	 rcx, QWORD PTR VarResult$2[rbp-81]
  000d4	e8 00 00 00 00	 call	 ?GetLONG@OposVariant@@QEAAJXZ ; OposVariant::GetLONG
  000d9	8b c8		 mov	 ecx, eax
  000db	eb 0b		 jmp	 SHORT $LN9@DoInvoke
$LN8@DoInvoke:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  000dd	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  000e2	89 8b 90 01 00
	00		 mov	 DWORD PTR [rbx+400], ecx
$LN9@DoInvoke:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 601  :         *pRC = (hRC == S_OK) ? VarResult.GetLONG() : SetRC( OPOS_E_NOSERVICE );

  000e8	48 8b 45 77	 mov	 rax, QWORD PTR pRC$[rbp-81]
  000ec	89 08		 mov	 DWORD PTR [rax], ecx

; 602  :     }

  000ee	48 8d 4d ff	 lea	 rcx, QWORD PTR Disp$1[rbp-81]
  000f2	e8 00 00 00 00	 call	 ??1OposDispParms@@QEAA@XZ ; OposDispParms::~OposDispParms
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000f7	48 8d 4d 17	 lea	 rcx, QWORD PTR VarResult$2[rbp-81]
  000fb	40 88 75 2f	 mov	 BYTE PTR VarResult$2[rbp-57], sil
  000ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00105	40 38 75 2f	 cmp	 BYTE PTR VarResult$2[rbp-57], sil
  00109	74 0e		 je	 SHORT $LN25@DoInvoke

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0010b	48 8d 4d 17	 lea	 rcx, QWORD PTR VarResult$2[rbp-81]
  0010f	40 88 75 2f	 mov	 BYTE PTR VarResult$2[rbp-57], sil
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN25@DoInvoke:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 650  : }

  00119	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  00121	8b c7		 mov	 eax, edi
  00123	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  00127	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  0012b	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  0012f	49 8b e3	 mov	 rsp, r11
  00132	5d		 pop	 rbp
  00133	c3		 ret	 0
?DoInvoke@COPOSDeviceMonitor@@IEAAJJPEAVOposVariant@@IHPEAJ_N@Z ENDP ; COPOSDeviceMonitor::DoInvoke
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z
_TEXT	SEGMENT
Disp$1 = 80
VarResult$2 = 104
Vars$3 = 144
hRC$ = 240
this$ = 240
nIndex$ = 248
sValue$ = 256
nMinor$ = 264
?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z PROC	; COPOSDeviceMonitor::SetOposProp, COMDAT

; 459  : {

$LN51:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000b	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  0000f	55		 push	 rbp
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  00018	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0001f	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 466  :     HRESULT hRC = S_OK;

  00026	33 db		 xor	 ebx, ebx
  00028	4d 8b f0	 mov	 r14, r8
  0002b	48 8b f9	 mov	 rdi, rcx
  0002e	89 5d 67	 mov	 DWORD PTR hRC$[rbp-137], ebx

; 467  : 
; 468  :     SetRC();                            // Clear COResultCode.
; 469  : 
; 470  :     // If open and SO version support's property...
; 471  :     if ( _bOpened && _nSOMinor >= nMinor )

  00031	38 99 80 01 00
	00		 cmp	 BYTE PTR [rcx+384], bl
  00037	0f 84 fb 00 00
	00		 je	 $LN5@SetOposPro
  0003d	44 39 89 8c 01
	00 00		 cmp	 DWORD PTR [rcx+396], r9d
  00044	0f 8c e4 00 00
	00		 jl	 $LN2@SetOposPro

; 472  :     {
; 473  :         // Set up and call the SO's set property number method.
; 474  :         OposVariant Vars[2];

  0004a	8d 73 02	 lea	 esi, QWORD PTR [rbx+2]
  0004d	8b ce		 mov	 ecx, esi
  0004f	48 8d 45 07	 lea	 rax, QWORD PTR Vars$3[rbp-137]
  00053	44 8d 7b 01	 lea	 r15d, QWORD PTR [rbx+1]
$LL10@SetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00057	66 89 18	 mov	 WORD PTR [rax], bx
  0005a	88 58 18	 mov	 BYTE PTR [rax+24], bl
  0005d	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  00061	49 2b cf	 sub	 rcx, r15
  00064	75 f1		 jne	 SHORT $LL10@SetOposPro
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 476  :         Vars[1].SetLONG( nIndex );

  00066	48 8d 4d 27	 lea	 rcx, QWORD PTR Vars$3[rbp-105]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0006a	66 89 5d df	 mov	 WORD PTR VarResult$2[rbp-137], bx
  0006e	88 5d f7	 mov	 BYTE PTR VarResult$2[rbp-113], bl
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 476  :         Vars[1].SetLONG( nIndex );

  00071	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 477  :         Vars[0].SetBSTR( sValue, hRC );

  00076	4c 8d 45 67	 lea	 r8, QWORD PTR hRC$[rbp-137]
  0007a	49 8b d6	 mov	 rdx, r14
  0007d	48 8d 4d 07	 lea	 rcx, QWORD PTR Vars$3[rbp-137]
  00081	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QEAAXPEA_WAEAJ@Z ; OposVariant::SetBSTR

; 478  :         OposDispParms Disp( Vars, 2 );

  00086	44 8b c6	 mov	 r8d, esi
  00089	48 8d 55 07	 lea	 rdx, QWORD PTR Vars$3[rbp-137]
  0008d	48 8d 4d c7	 lea	 rcx, QWORD PTR Disp$1[rbp-137]
  00091	e8 00 00 00 00	 call	 ??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 479  :         if ( hRC == S_OK )

  00096	39 5d 67	 cmp	 DWORD PTR hRC$[rbp-137], ebx
  00099	75 45		 jne	 SHORT $LN4@SetOposPro

; 480  :             hRC = _pService->Invoke(

  0009b	48 8b 8f 98 01
	00 00		 mov	 rcx, QWORD PTR [rdi+408]
  000a2	48 8d 55 df	 lea	 rdx, QWORD PTR VarResult$2[rbp-137]
  000a6	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  000ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  000b2	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  000b7	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  000bd	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  000c2	48 8d 55 c7	 lea	 rdx, QWORD PTR Disp$1[rbp-137]
  000c6	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000c9	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  000ce	8b 97 bc 01 00
	00		 mov	 edx, DWORD PTR [rdi+444]
  000d4	66 44 89 7c 24
	20		 mov	 WORD PTR [rsp+32], r15w
  000da	ff 50 30	 call	 QWORD PTR [rax+48]
  000dd	89 45 67	 mov	 DWORD PTR hRC$[rbp-137], eax
$LN4@SetOposPro:

; 483  :     }

  000e0	48 8d 4d c7	 lea	 rcx, QWORD PTR Disp$1[rbp-137]
  000e4	e8 00 00 00 00	 call	 ??1OposDispParms@@QEAA@XZ ; OposDispParms::~OposDispParms
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000e9	48 8d 4d df	 lea	 rcx, QWORD PTR VarResult$2[rbp-137]
  000ed	88 5d f7	 mov	 BYTE PTR VarResult$2[rbp-113], bl
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000f6	38 5d f7	 cmp	 BYTE PTR VarResult$2[rbp-113], bl
  000f9	74 0d		 je	 SHORT $LN24@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000fb	48 8d 4d df	 lea	 rcx, QWORD PTR VarResult$2[rbp-137]
  000ff	88 5d f7	 mov	 BYTE PTR VarResult$2[rbp-113], bl
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN24@SetOposPro:
  00108	48 8d 7d 47	 lea	 rdi, QWORD PTR Vars$3[rbp-73]
$LL44@SetOposPro:
  0010c	48 83 ef 20	 sub	 rdi, 32			; 00000020H
  00110	49 2b f7	 sub	 rsi, r15

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00113	38 5f 18	 cmp	 BYTE PTR [rdi+24], bl
  00116	74 0c		 je	 SHORT $LN33@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00118	48 8b cf	 mov	 rcx, rdi
  0011b	88 5f 18	 mov	 BYTE PTR [rdi+24], bl
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN33@SetOposPro:
  00124	48 85 f6	 test	 rsi, rsi
  00127	75 e3		 jne	 SHORT $LL44@SetOposPro
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 483  :     }

  00129	8b 5d 67	 mov	 ebx, DWORD PTR hRC$[rbp-137]
  0012c	eb 0a		 jmp	 SHORT $LN5@SetOposPro
$LN2@SetOposPro:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  0012e	c7 81 90 01 00
	00 68 00 00 00	 mov	 DWORD PTR [rcx+400], 104 ; 00000068H
$LN5@SetOposPro:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 508  : }

  00138	4c 8d 9c 24 d0
	00 00 00	 lea	 r11, QWORD PTR [rsp+208]
  00140	8b c3		 mov	 eax, ebx
  00142	49 8b 5b 28	 mov	 rbx, QWORD PTR [r11+40]
  00146	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  0014a	49 8b 7b 38	 mov	 rdi, QWORD PTR [r11+56]
  0014e	49 8b e3	 mov	 rsp, r11
  00151	41 5f		 pop	 r15
  00153	41 5e		 pop	 r14
  00155	5d		 pop	 rbp
  00156	c3		 ret	 0
?SetOposProp@COPOSDeviceMonitor@@IEAAJJPEA_WJ@Z ENDP	; COPOSDeviceMonitor::SetOposProp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z
_TEXT	SEGMENT
Disp$1 = 80
VarResult$2 = 104
Var$3 = 136
hRC$ = 192
this$ = 192
nIndex$ = 200
psValue$ = 208
nMinor$ = 216
?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z PROC	; COPOSDeviceMonitor::GetOposProp, COMDAT

; 410  : {

$LN28:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000b	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  0000f	55		 push	 rbp
  00010	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  00014	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 411  :     DOTRACEV( ( _T("+%hs [Get]"), pPropName ) );
; 412  : 
; 413  :     // Initialize return value.
; 414  :     HRESULT hRC = S_OK;

  0001b	33 f6		 xor	 esi, esi
  0001d	49 8b f8	 mov	 rdi, r8
  00020	48 8b d9	 mov	 rbx, rcx
  00023	89 75 67	 mov	 DWORD PTR hRC$[rbp-89], esi

; 415  : 
; 416  :     // If open and SO version support's property...
; 417  :     if ( _bOpened && _nSOMinor >= nMinor )

  00026	40 38 b1 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], sil
  0002d	0f 84 cb 00 00
	00		 je	 $LN2@GetOposPro
  00033	44 39 89 8c 01
	00 00		 cmp	 DWORD PTR [rcx+396], r9d
  0003a	0f 8c be 00 00
	00		 jl	 $LN2@GetOposPro

; 422  :         Var.SetLONG( nIndex );

  00040	48 8d 4d 2f	 lea	 rcx, QWORD PTR Var$3[rbp-89]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00044	66 89 75 2f	 mov	 WORD PTR Var$3[rbp-89], si
  00048	40 88 75 47	 mov	 BYTE PTR Var$3[rbp-65], sil
  0004c	66 89 75 0f	 mov	 WORD PTR VarResult$2[rbp-89], si
  00050	40 88 75 27	 mov	 BYTE PTR VarResult$2[rbp-65], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 422  :         Var.SetLONG( nIndex );

  00054	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 423  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };
; 424  :         hRC = _pService->Invoke(

  00059	48 8b 8b 98 01
	00 00		 mov	 rcx, QWORD PTR [rbx+408]
  00060	44 8d 46 01	 lea	 r8d, QWORD PTR [rsi+1]
  00064	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  00069	48 8d 55 0f	 lea	 rdx, QWORD PTR VarResult$2[rbp-89]
  0006d	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00072	48 8d 45 2f	 lea	 rax, QWORD PTR Var$3[rbp-89]
  00076	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  0007b	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  00081	4c 89 45 07	 mov	 QWORD PTR Disp$1[rbp-73], r8
  00085	48 8d 55 f7	 lea	 rdx, QWORD PTR Disp$1[rbp-89]
  00089	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0008e	8b 93 b8 01 00
	00		 mov	 edx, DWORD PTR [rbx+440]
  00094	48 89 45 f7	 mov	 QWORD PTR Disp$1[rbp-89], rax
  00098	48 89 75 ff	 mov	 QWORD PTR Disp$1[rbp-81], rsi
  0009c	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0009f	66 44 89 44 24
	20		 mov	 WORD PTR [rsp+32], r8w
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  000ac	ff 50 30	 call	 QWORD PTR [rax+48]
  000af	89 45 67	 mov	 DWORD PTR hRC$[rbp-89], eax

; 425  :                 _DispIDs[nDIGetPropertyString], IID_NULL, LOCALE_USER_DEFAULT,
; 426  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 427  : 
; 428  :         // If succeeds, then return result.
; 429  :         if ( hRC == S_OK )

  000b2	85 c0		 test	 eax, eax
  000b4	75 10		 jne	 SHORT $LN4@GetOposPro

; 430  :             VarResult.ChangeBSTR( psValue, hRC );

  000b6	4c 8d 45 67	 lea	 r8, QWORD PTR hRC$[rbp-89]
  000ba	48 8b d7	 mov	 rdx, rdi
  000bd	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000c1	e8 00 00 00 00	 call	 ?ChangeBSTR@OposVariant@@QEAAXPEAPEA_WAEAJ@Z ; OposVariant::ChangeBSTR
$LN4@GetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c6	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000ca	40 88 75 27	 mov	 BYTE PTR VarResult$2[rbp-65], sil
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000d4	40 38 75 27	 cmp	 BYTE PTR VarResult$2[rbp-65], sil
  000d8	74 0e		 je	 SHORT $LN17@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000da	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000de	40 88 75 27	 mov	 BYTE PTR VarResult$2[rbp-65], sil
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN17@GetOposPro:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000e8	40 38 75 47	 cmp	 BYTE PTR Var$3[rbp-65], sil
  000ec	74 20		 je	 SHORT $LN3@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000ee	48 8d 4d 2f	 lea	 rcx, QWORD PTR Var$3[rbp-89]
  000f2	40 88 75 47	 mov	 BYTE PTR Var$3[rbp-65], sil
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 431  :     }

  000fc	eb 10		 jmp	 SHORT $LN3@GetOposPro
$LN2@GetOposPro:

; 432  :     // Else return default string.
; 433  :     else
; 434  :         *psValue = ::SysAllocString( L"[Error]" );

  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@IFHENID@?$AA?$FL?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$FN@
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysAllocString
  0010b	48 89 07	 mov	 QWORD PTR [rdi], rax
$LN3@GetOposPro:

; 435  : 
; 436  :     // Trace result.
; 437  : #ifdef _DEBUG
; 438  :     LPCTSTR pszFormat = _T("-%hs [Get].");
; 439  :     if ( !_bOpened )
; 440  :         pszFormat = _T("-%hs [Get] -- Closed.");
; 441  :     else if ( _nSOMinor < nMinor )
; 442  :         pszFormat = _T("-%hs [Get] -- Not supported by SO.");
; 443  :     else if ( hRC != 0 )
; 444  :         pszFormat = _T("-%hs [Get] -- COM error: HR = 0x%X");
; 445  : 
; 446  :     TCHAR szPrefix[100];
; 447  :     _sntprintf( szPrefix, TSIZEOF(szPrefix), pszFormat, pPropName, hRC );
; 448  :     NULTERMINATE(szPrefix);
; 449  :     DOTRACESTRINGV( szPrefix, *psValue );
; 450  : #endif
; 451  : 
; 452  :     return hRC;

  0010e	8b 45 67	 mov	 eax, DWORD PTR hRC$[rbp-89]

; 453  : }

  00111	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  00119	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  0011d	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00121	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  00125	49 8b e3	 mov	 rsp, r11
  00128	5d		 pop	 rbp
  00129	c3		 ret	 0
?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAPEA_WJ@Z ENDP	; COPOSDeviceMonitor::GetOposProp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?SetOposProp@COPOSDeviceMonitor@@IEAAJJFJ@Z
_TEXT	SEGMENT
this$ = 8
nIndex$ = 16
nValue$ = 24
nMinor$ = 32
?SetOposProp@COPOSDeviceMonitor@@IEAAJJFJ@Z PROC	; COPOSDeviceMonitor::SetOposProp, COMDAT

; 398  : {

  00000	41 0f b7 c0	 movzx	 eax, r8w

; 399  :     // If setting a boolean, then force to use VC++ TRUE or FALSE,
; 400  :     //   since several vendors test specifically against TRUE (1)
; 401  :     //   rather than non-zero.
; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00004	45 33 c0	 xor	 r8d, r8d
  00007	66 85 c0	 test	 ax, ax
  0000a	41 0f 95 c0	 setne	 r8b
  0000e	e9 00 00 00 00	 jmp	 ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ; COPOSDeviceMonitor::SetOposProp
?SetOposProp@COPOSDeviceMonitor@@IEAAJJFJ@Z ENDP	; COPOSDeviceMonitor::SetOposProp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z
_TEXT	SEGMENT
this$ = 48
nIndex$ = 56
nValue$ = 64
pnValue$ = 64
nMinor$ = 72
?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z PROC	; COPOSDeviceMonitor::GetOposProp, COMDAT

; 385  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	49 8b d8	 mov	 rbx, r8

; 386  :     // If getting a boolean, then force return value to proper VARIANT_BOOL value.
; 387  :     long nValue;
; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00009	4c 8d 44 24 40	 lea	 r8, QWORD PTR nValue$[rsp]
  0000e	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  00013	8b 4c 24 40	 mov	 ecx, DWORD PTR nValue$[rsp]
  00017	f7 d9		 neg	 ecx
  00019	66 1b d2	 sbb	 dx, dx
  0001c	66 89 13	 mov	 WORD PTR [rbx], dx

; 391  :     return hRC;
; 392  : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5b		 pop	 rbx
  00024	c3		 ret	 0
?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAFJ@Z ENDP	; COPOSDeviceMonitor::GetOposProp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z
_TEXT	SEGMENT
Disp$1 = 80
VarResult$2 = 104
Vars$3 = 144
this$ = 240
nIndex$ = 248
nValue$ = 256
nMinor$ = 264
?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z PROC	; COPOSDeviceMonitor::SetOposProp, COMDAT

; 336  : {

$LN50:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi
  0000f	4c 89 60 20	 mov	 QWORD PTR [rax+32], r12
  00013	55		 push	 rbp
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  0001c	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00023	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 338  :     HRESULT hRC = S_OK;

  0002a	45 33 ff	 xor	 r15d, r15d
  0002d	45 8b f0	 mov	 r14d, r8d
  00030	48 8b d9	 mov	 rbx, rcx
  00033	41 8b f7	 mov	 esi, r15d

; 339  : 
; 340  :     SetRC();                            // Clear COResultCode.
; 341  : 
; 342  :     // If open and SO version support's property...
; 343  :     if ( _bOpened && _nSOMinor >= nMinor )

  00036	44 38 b9 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], r15b
  0003d	0f 84 f8 00 00
	00		 je	 $LN4@SetOposPro
  00043	44 39 89 8c 01
	00 00		 cmp	 DWORD PTR [rcx+396], r9d
  0004a	0f 8c e1 00 00
	00		 jl	 $LN2@SetOposPro

; 344  :     {
; 345  :         // Set up and call the SO's set property number method.
; 346  :         OposVariant Vars[2];

  00050	41 8d 7f 02	 lea	 edi, QWORD PTR [r15+2]
  00054	8b cf		 mov	 ecx, edi
  00056	48 8d 45 07	 lea	 rax, QWORD PTR Vars$3[rbp-137]
  0005a	45 8d 67 01	 lea	 r12d, QWORD PTR [r15+1]
$LL9@SetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0005e	66 44 89 38	 mov	 WORD PTR [rax], r15w
  00062	44 88 78 18	 mov	 BYTE PTR [rax+24], r15b
  00066	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  0006a	49 2b cc	 sub	 rcx, r12
  0006d	75 ef		 jne	 SHORT $LL9@SetOposPro
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 348  :         Vars[1].SetLONG( nIndex );

  0006f	48 8d 4d 27	 lea	 rcx, QWORD PTR Vars$3[rbp-105]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00073	66 44 89 7d df	 mov	 WORD PTR VarResult$2[rbp-137], r15w
  00078	44 88 7d f7	 mov	 BYTE PTR VarResult$2[rbp-113], r15b
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 348  :         Vars[1].SetLONG( nIndex );

  0007c	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 349  :         Vars[0].SetLONG( nValue );

  00081	41 8b d6	 mov	 edx, r14d
  00084	48 8d 4d 07	 lea	 rcx, QWORD PTR Vars$3[rbp-137]
  00088	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 350  :         OposDispParms Disp( Vars, 2 );

  0008d	44 8b c7	 mov	 r8d, edi
  00090	48 8d 55 07	 lea	 rdx, QWORD PTR Vars$3[rbp-137]
  00094	48 8d 4d c7	 lea	 rcx, QWORD PTR Disp$1[rbp-137]
  00098	e8 00 00 00 00	 call	 ??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 351  :         hRC = _pService->Invoke(

  0009d	48 8b 8b 98 01
	00 00		 mov	 rcx, QWORD PTR [rbx+408]
  000a4	48 8d 55 df	 lea	 rdx, QWORD PTR VarResult$2[rbp-137]
  000a8	4c 89 7c 24 40	 mov	 QWORD PTR [rsp+64], r15
  000ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  000b4	4c 89 7c 24 38	 mov	 QWORD PTR [rsp+56], r15
  000b9	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  000bf	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  000c4	48 8d 55 c7	 lea	 rdx, QWORD PTR Disp$1[rbp-137]
  000c8	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000cb	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  000d0	8b 93 b4 01 00
	00		 mov	 edx, DWORD PTR [rbx+436]
  000d6	66 44 89 64 24
	20		 mov	 WORD PTR [rsp+32], r12w
  000dc	ff 50 30	 call	 QWORD PTR [rax+48]

; 354  :     }

  000df	48 8d 4d c7	 lea	 rcx, QWORD PTR Disp$1[rbp-137]
  000e3	8b f0		 mov	 esi, eax
  000e5	e8 00 00 00 00	 call	 ??1OposDispParms@@QEAA@XZ ; OposDispParms::~OposDispParms
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000ea	48 8d 4d df	 lea	 rcx, QWORD PTR VarResult$2[rbp-137]
  000ee	44 88 7d f7	 mov	 BYTE PTR VarResult$2[rbp-113], r15b
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000f8	44 38 7d f7	 cmp	 BYTE PTR VarResult$2[rbp-113], r15b
  000fc	74 0e		 je	 SHORT $LN23@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000fe	48 8d 4d df	 lea	 rcx, QWORD PTR VarResult$2[rbp-137]
  00102	44 88 7d f7	 mov	 BYTE PTR VarResult$2[rbp-113], r15b
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN23@SetOposPro:
  0010c	48 8d 5d 47	 lea	 rbx, QWORD PTR Vars$3[rbp-73]
$LL43@SetOposPro:
  00110	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  00114	49 2b fc	 sub	 rdi, r12

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00117	44 38 7b 18	 cmp	 BYTE PTR [rbx+24], r15b
  0011b	74 0d		 je	 SHORT $LN32@SetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0011d	48 8b cb	 mov	 rcx, rbx
  00120	44 88 7b 18	 mov	 BYTE PTR [rbx+24], r15b
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN32@SetOposPro:
  0012a	48 85 ff	 test	 rdi, rdi
  0012d	75 e1		 jne	 SHORT $LL43@SetOposPro
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 354  :     }

  0012f	eb 0a		 jmp	 SHORT $LN4@SetOposPro
$LN2@SetOposPro:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h

; 156  :         { return _nCOResultCode = nRC; }

  00131	c7 81 90 01 00
	00 68 00 00 00	 mov	 DWORD PTR [rcx+400], 104 ; 00000068H
$LN4@SetOposPro:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 379  : }

  0013b	4c 8d 9c 24 d0
	00 00 00	 lea	 r11, QWORD PTR [rsp+208]
  00143	8b c6		 mov	 eax, esi
  00145	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  00149	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  0014d	49 8b 7b 30	 mov	 rdi, QWORD PTR [r11+48]
  00151	4d 8b 63 38	 mov	 r12, QWORD PTR [r11+56]
  00155	49 8b e3	 mov	 rsp, r11
  00158	41 5f		 pop	 r15
  0015a	41 5e		 pop	 r14
  0015c	5d		 pop	 rbp
  0015d	c3		 ret	 0
?SetOposProp@COPOSDeviceMonitor@@IEAAJJJJ@Z ENDP	; COPOSDeviceMonitor::SetOposProp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z
_TEXT	SEGMENT
Disp$1 = 80
VarResult$2 = 104
Var$3 = 136
hRC$ = 192
this$ = 192
nIndex$ = 200
pnValue$ = 208
nMinor$ = 216
?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z PROC	; COPOSDeviceMonitor::GetOposProp, COMDAT

; 287  : {

$LN28:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00007	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000b	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  0000f	55		 push	 rbp
  00010	48 8d 68 a1	 lea	 rbp, QWORD PTR [rax-95]
  00014	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 288  :     DOTRACEV( ( _T("+%hs [Get]"), pPropName ) );
; 289  : 
; 290  :     // Initialize return value.
; 291  :     HRESULT hRC = S_OK;

  0001b	33 f6		 xor	 esi, esi
  0001d	49 8b f8	 mov	 rdi, r8

; 292  :     *pnValue = 0;

  00020	41 89 30	 mov	 DWORD PTR [r8], esi
  00023	48 8b d9	 mov	 rbx, rcx
  00026	89 75 67	 mov	 DWORD PTR hRC$[rbp-89], esi

; 293  : 
; 294  :     // If open and SO version support's property...
; 295  :     if ( _bOpened && _nSOMinor >= nMinor )

  00029	40 38 b1 80 01
	00 00		 cmp	 BYTE PTR [rcx+384], sil
  00030	0f 84 c9 00 00
	00		 je	 $LN25@GetOposPro
  00036	44 39 89 8c 01
	00 00		 cmp	 DWORD PTR [rcx+396], r9d
  0003d	0f 8c bc 00 00
	00		 jl	 $LN25@GetOposPro

; 300  :         Var.SetLONG( nIndex );

  00043	48 8d 4d 2f	 lea	 rcx, QWORD PTR Var$3[rbp-89]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00047	66 89 75 2f	 mov	 WORD PTR Var$3[rbp-89], si
  0004b	40 88 75 47	 mov	 BYTE PTR Var$3[rbp-65], sil
  0004f	66 89 75 0f	 mov	 WORD PTR VarResult$2[rbp-89], si
  00053	40 88 75 27	 mov	 BYTE PTR VarResult$2[rbp-65], sil
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 300  :         Var.SetLONG( nIndex );

  00057	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 301  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };
; 302  :         hRC = _pService->Invoke(

  0005c	48 8b 8b 98 01
	00 00		 mov	 rcx, QWORD PTR [rbx+408]
  00063	44 8d 46 01	 lea	 r8d, QWORD PTR [rsi+1]
  00067	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0006c	48 8d 55 0f	 lea	 rdx, QWORD PTR VarResult$2[rbp-89]
  00070	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00075	48 8d 45 2f	 lea	 rax, QWORD PTR Var$3[rbp-89]
  00079	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  0007e	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  00084	4c 89 45 07	 mov	 QWORD PTR Disp$1[rbp-73], r8
  00088	48 8d 55 f7	 lea	 rdx, QWORD PTR Disp$1[rbp-89]
  0008c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00091	8b 93 b0 01 00
	00		 mov	 edx, DWORD PTR [rbx+432]
  00097	48 89 45 f7	 mov	 QWORD PTR Disp$1[rbp-89], rax
  0009b	48 89 75 ff	 mov	 QWORD PTR Disp$1[rbp-81], rsi
  0009f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000a2	66 44 89 44 24
	20		 mov	 WORD PTR [rsp+32], r8w
  000a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  000af	ff 50 30	 call	 QWORD PTR [rax+48]
  000b2	89 45 67	 mov	 DWORD PTR hRC$[rbp-89], eax

; 303  :                 _DispIDs[nDIGetPropertyNumber], IID_NULL, LOCALE_USER_DEFAULT,
; 304  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 305  : 
; 306  :         // If success, then set return result.
; 307  :         if ( hRC == S_OK )

  000b5	85 c0		 test	 eax, eax
  000b7	75 10		 jne	 SHORT $LN3@GetOposPro

; 308  :             VarResult.ChangeLONG( pnValue, hRC );

  000b9	4c 8d 45 67	 lea	 r8, QWORD PTR hRC$[rbp-89]
  000bd	48 8b d7	 mov	 rdx, rdi
  000c0	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000c4	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::ChangeLONG
$LN3@GetOposPro:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c9	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000cd	40 88 75 27	 mov	 BYTE PTR VarResult$2[rbp-65], sil
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000d7	40 38 75 27	 cmp	 BYTE PTR VarResult$2[rbp-65], sil
  000db	74 0e		 je	 SHORT $LN16@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000dd	48 8d 4d 0f	 lea	 rcx, QWORD PTR VarResult$2[rbp-89]
  000e1	40 88 75 27	 mov	 BYTE PTR VarResult$2[rbp-65], sil
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN16@GetOposPro:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000eb	40 38 75 47	 cmp	 BYTE PTR Var$3[rbp-65], sil
  000ef	74 0e		 je	 SHORT $LN25@GetOposPro

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000f1	48 8d 4d 2f	 lea	 rcx, QWORD PTR Var$3[rbp-89]
  000f5	40 88 75 47	 mov	 BYTE PTR Var$3[rbp-65], sil
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN25@GetOposPro:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 329  :     return hRC;

  000ff	8b 45 67	 mov	 eax, DWORD PTR hRC$[rbp-89]

; 330  : }

  00102	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  0010a	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  0010e	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  00112	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  00116	49 8b e3	 mov	 rsp, r11
  00119	5d		 pop	 rbp
  0011a	c3		 ret	 0
?GetOposProp@COPOSDeviceMonitor@@IEAAJJPEAJJ@Z ENDP	; COPOSDeviceMonitor::GetOposProp
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ??1COPOSDeviceMonitor@@UEAA@XZ
_TEXT	SEGMENT
RC$ = 48
this$ = 48
??1COPOSDeviceMonitor@@UEAA@XZ PROC			; COPOSDeviceMonitor::~COPOSDeviceMonitor, COMDAT

; 183  : {

$LN23:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 184  :     DOTRACE( ( _T("*Destructing") ) );
; 185  : 
; 186  :     s_nInstances--; // Decrement instance count at start of destructor.

  00006	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA ; COPOSDeviceMonitor::s_nInstances
  0000c	48 8b d9	 mov	 rbx, rcx

; 187  :     long RC;
; 188  :     if ( _bOpened )

  0000f	80 b9 80 01 00
	00 00		 cmp	 BYTE PTR [rcx+384], 0
  00016	74 0a		 je	 SHORT $LN2@COPOSDevic

; 189  :         Close( &RC );

  00018	48 8d 54 24 30	 lea	 rdx, QWORD PTR RC$[rsp]
  0001d	e8 00 00 00 00	 call	 ?Close@COPOSDeviceMonitor@@UEAAJPEAJ@Z ; COPOSDeviceMonitor::Close
$LN2@COPOSDevic:

; 190  :     EventUninit();

  00022	48 8b cb	 mov	 rcx, rbx
  00025	e8 00 00 00 00	 call	 ?EventUninit@COPOSDeviceMonitor@@IEAAXXZ ; COPOSDeviceMonitor::EventUninit

; 194  : }

  0002a	48 8d 8b 40 01
	00 00		 lea	 rcx, QWORD PTR [rbx+320]
  00031	e8 00 00 00 00	 call	 ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
  00036	48 8d 8b 28 01
	00 00		 lea	 rcx, QWORD PTR [rbx+296]
  0003d	e8 00 00 00 00	 call	 ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h

; 250  : 		if (pThunk)

  00042	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  00049	48 85 c9	 test	 rcx, rcx
  0004c	74 05		 je	 SHORT $LN19@COPOSDevic

; 251  : 		{
; 252  : #ifdef USE_ATL_THUNK2
; 253  : 			AtlThunk_FreeData(pThunk);

  0004e	e8 00 00 00 00	 call	 AtlThunk_FreeData
$LN19@COPOSDevic:
  00053	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 194  : }

  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5b		 pop	 rbx
  0005c	e9 00 00 00 00	 jmp	 ??1CComControlBase@ATL@@UEAA@XZ ; ATL::CComControlBase::~CComControlBase
??1COPOSDeviceMonitor@@UEAA@XZ ENDP			; COPOSDeviceMonitor::~COPOSDeviceMonitor
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ
_TEXT	SEGMENT
this$ = 48
?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ PROC	; COPOSDeviceMonitor::FinalConstruct, COMDAT

; 159  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 160  :     TRACEINIT;
; 161  :     DOTRACE( ( _T("") ) );
; 162  :     DOTRACE( ( _T("*Constructing: %hs"), g_ControlDescription ) );
; 163  : 
; 164  :     _bOpened = false;
; 165  :     _nOpenResult = 0;
; 166  :     _nSOMajor = 0;
; 167  :     _nSOMinor = 0;
; 168  :     _nCOResultCode = -1;

  00004	83 89 90 01 00
	00 ff		 or	 DWORD PTR [rcx+400], -1
  0000b	33 c0		 xor	 eax, eax
  0000d	88 81 80 01 00
	00		 mov	 BYTE PTR [rcx+384], al
  00013	48 89 81 84 01
	00 00		 mov	 QWORD PTR [rcx+388], rax
  0001a	89 81 8c 01 00
	00		 mov	 DWORD PTR [rcx+396], eax

; 169  :     _nCOFreezeEventCount = 0;

  00020	89 81 a0 01 00
	00		 mov	 DWORD PTR [rcx+416], eax

; 170  :     _bFreezeState = false;

  00026	88 81 a4 01 00
	00		 mov	 BYTE PTR [rcx+420], al

; 171  :     IFDEBUG( _nBinaryConversion = OPOS_BC_NONE );
; 172  : 
; 173  :     HRESULT hRC = EventInit();

  0002c	e8 00 00 00 00	 call	 ?EventInit@COPOSDeviceMonitor@@IEAAJXZ ; COPOSDeviceMonitor::EventInit

; 174  : 
; 175  :     s_nInstances++; // Increment instance count at end of FinalConstruct.

  00031	ff 05 00 00 00
	00		 inc	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA ; COPOSDeviceMonitor::s_nInstances

; 176  : 
; 177  :     return hRC;
; 178  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
?FinalConstruct@COPOSDeviceMonitor@@QEAAJXZ ENDP	; COPOSDeviceMonitor::FinalConstruct
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
;	COMDAT ??0COPOSDeviceMonitor@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0COPOSDeviceMonitor@@QEAA@XZ PROC			; COPOSDeviceMonitor::COPOSDeviceMonitor, COMDAT
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2430 : 		m_dwRef = 0L;

  00000	45 33 c0	 xor	 r8d, r8d
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 1592 : 	CComControl() : CComControlBase(this->m_hWnd) {}

  00003	48 8d 51 78	 lea	 rdx, QWORD PTR [rcx+120]
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2430 : 		m_dwRef = 0L;

  00007	44 89 81 78 01
	00 00		 mov	 DWORD PTR [rcx+376], r8d
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 185  : 		m_sizeExtent.cx = 2*2540;

  0000e	b8 d8 13 00 00	 mov	 eax, 5080		; 000013d8H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 165  :         p = NULL;

  00013	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
  00017	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
  0001b	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8
  0001f	4c 89 41 28	 mov	 QWORD PTR [rcx+40], r8
  00023	4c 89 41 30	 mov	 QWORD PTR [rcx+48], r8
  00027	4c 89 41 38	 mov	 QWORD PTR [rcx+56], r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 206  : 		m_bDrawGetDataInHimetric = 0;

  0002b	81 61 6c 00 c0
	ff ff		 and	 DWORD PTR [rcx+108], -16384 ; ffffc000H
  00032	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00035	48 89 41 4c	 mov	 QWORD PTR [rcx+76], rax
  00039	48 8b 41 48	 mov	 rax, QWORD PTR [rcx+72]
  0003d	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 3438 : 	CWindowImplBaseT() : m_pfnSuperWindowProc(::DefWindowProc)

  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_DefWindowProcW
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 183  : 	CComControlBase(_Inout_ HWND& h) : m_hWndCD(h)

  00048	48 89 51 60	 mov	 QWORD PTR [rcx+96], rdx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 3438 : 	CWindowImplBaseT() : m_pfnSuperWindowProc(::DefWindowProc)

  0004c	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 145  :     {

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 190  : 		m_rcPos.top = 0;

  0005a	4c 89 41 54	 mov	 QWORD PTR [rcx+84], r8

; 191  : 		m_rcPos.bottom = 0;

  0005e	44 89 41 5c	 mov	 DWORD PTR [rcx+92], r8d

; 192  : 		m_nFreezeEvents = 0;

  00062	44 89 41 68	 mov	 DWORD PTR [rcx+104], r8d
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 794  : 		m_hWnd(hWnd)

  00066	4c 89 02	 mov	 QWORD PTR [rdx], r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h

; 241  : 		pThunk = NULL;

  00069	4c 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], r8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 3222 : 	CWindowImplRoot() : m_pCurrentMsg(NULL), m_dwState(0)

  00070	4c 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], r8
  00077	44 89 81 a8 00
	00 00		 mov	 DWORD PTR [rcx+168], r8d
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 145  :     {

  0007e	48 89 81 40 01
	00 00		 mov	 QWORD PTR [rcx+320], rax

; 146  :         _DIDData = -1;

  00085	83 c8 ff	 or	 eax, -1
  00088	89 81 58 01 00
	00		 mov	 DWORD PTR [rcx+344], eax

; 147  :         _DIDDirectIO = -1;

  0008e	89 81 5c 01 00
	00		 mov	 DWORD PTR [rcx+348], eax

; 148  :         _DIDError = -1;

  00094	89 81 60 01 00
	00		 mov	 DWORD PTR [rcx+352], eax

; 149  :         _DIDOutput = -1;

  0009a	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 150  :         _DIDStatus = -1;

  000a0	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 154  : }

  000a6	48 8b c1	 mov	 rax, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 3656 : 	IObjectSafetyImpl() : m_dwCurrentSafety(0)

  000a9	44 89 81 20 01
	00 00		 mov	 DWORD PTR [rcx+288], r8d
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6146 : 		m_nSize = 0;

  000b0	44 89 81 38 01
	00 00		 mov	 DWORD PTR [rcx+312], r8d

; 6147 : 		m_ppUnk = NULL;

  000b7	4c 89 81 30 01
	00 00		 mov	 QWORD PTR [rcx+304], r8

; 6146 : 		m_nSize = 0;

  000be	44 89 81 50 01
	00 00		 mov	 DWORD PTR [rcx+336], r8d

; 6147 : 		m_ppUnk = NULL;

  000c5	4c 89 81 48 01
	00 00		 mov	 QWORD PTR [rcx+328], r8
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp

; 154  : }

  000cc	c3		 ret	 0
??0COPOSDeviceMonitor@@QEAA@XZ ENDP			; COPOSDeviceMonitor::COPOSDeviceMonitor
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z
_TEXT	SEGMENT
DispParms$ = 80
DispID$ = 128
this$ = 128
rgvarg$ = 136
cArgs$ = 144
FirstDispID$ = 152
pName$ = 160
MyDispID$ = 168
?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent, COMDAT

; 183  :     {

$LN12:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00010	48 8b d9	 mov	 rbx, rcx
  00013	49 8b f9	 mov	 rdi, r9

; 184  :         IFDEBUG( const OLECHAR* pNameOrig = pName );
; 185  : 
; 186  :         // Declare and initialize the dispatch parameters and dispatch ID.
; 187  :         OposDispParms DispParms( rgvarg, cArgs );

  00016	48 8d 4c 24 50	 lea	 rcx, QWORD PTR DispParms$[rsp]
  0001b	e8 00 00 00 00	 call	 ??0OposDispParms@@QEAA@PEAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 188  :         DISPID DispID = FirstDispID;
; 189  :         // If not first connection (not likely for our controls!) or first dispatch ID not yet looked up...
; 190  :         if ( _nCOConnectionIndex != 0 || FirstDispID < 0 )

  00020	83 7b 2c 00	 cmp	 DWORD PTR [rbx+44], 0
  00024	41 be 01 00 00
	00		 mov	 r14d, 1
  0002a	8b 17		 mov	 edx, DWORD PTR [rdi]
  0002c	89 94 24 80 00
	00 00		 mov	 DWORD PTR DispID$[rsp], edx
  00033	75 04		 jne	 SHORT $LN3@FireTheEve
  00035	85 d2		 test	 edx, edx
  00037	79 5b		 jns	 SHORT $LN7@FireTheEve
$LN3@FireTheEve:

; 191  :         {
; 192  :             // Get the dispatch ID of the event we want to call.
; 193  :             //   If not implemented, then assume that client used typelib to use our default DispIDs.
; 194  :             //   If other failure, the can't fire.
; 195  :             HRESULT hRC = _pCPDispatch->GetIDsOfNames( IID_NULL, const_cast<OLECHAR**>(&pName), 1, LOCALE_USER_DEFAULT, &DispID );

  00039	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0003d	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR DispID$[rsp]
  00045	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0004a	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR pName$[rsp]
  00052	45 8b ce	 mov	 r9d, r14d
  00055	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:GUID_NULL
  00064	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00067	ff 50 28	 call	 QWORD PTR [rax+40]

; 196  :             if ( hRC == E_NOTIMPL )

  0006a	3d 01 40 00 80	 cmp	 eax, -2147467263	; ffffffff80004001H
  0006f	75 10		 jne	 SHORT $LN4@FireTheEve

; 197  :                 DispID = MyDispID;

  00071	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR MyDispID$[rsp]
  00078	89 94 24 80 00
	00 00		 mov	 DWORD PTR DispID$[rsp], edx
  0007f	eb 0b		 jmp	 SHORT $LN6@FireTheEve
$LN4@FireTheEve:

; 198  :             else if ( hRC != S_OK )

  00081	85 c0		 test	 eax, eax
  00083	75 48		 jne	 SHORT $LN9@FireTheEve
  00085	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR DispID$[rsp]
$LN6@FireTheEve:

; 199  :                 return;
; 200  :             // If first connection, then save in cache for next time.
; 201  :             if ( _nCOConnectionIndex == 0 )

  0008c	83 7b 2c 00	 cmp	 DWORD PTR [rbx+44], 0
  00090	75 02		 jne	 SHORT $LN7@FireTheEve

; 202  :                 FirstDispID = DispID;

  00092	89 17		 mov	 DWORD PTR [rdi], edx
$LN7@FireTheEve:

; 203  :         }
; 204  :         // Call the event.
; 205  :         IFDEBUG( _pOposControl->DOTRACEV( ( _T("*FireTheEvent: Delivering %ls; Sink 0x%X; DispID %d"), pNameOrig, pUnkSink, DispID ) ) );
; 206  :         _pCPDispatch->Invoke( DispID, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &DispParms, NULL, NULL, NULL );

  00094	48 83 64 24 40
	00		 and	 QWORD PTR [rsp+64], 0
  0009a	4c 8d 54 24 50	 lea	 r10, QWORD PTR DispParms$[rsp]
  0009f	48 83 64 24 38
	00		 and	 QWORD PTR [rsp+56], 0
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GUID_NULL
  000ac	48 83 64 24 30
	00		 and	 QWORD PTR [rsp+48], 0
  000b2	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  000b8	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000bc	4c 89 54 24 28	 mov	 QWORD PTR [rsp+40], r10
  000c1	66 44 89 74 24
	20		 mov	 WORD PTR [rsp+32], r14w
  000c7	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000ca	ff 50 30	 call	 QWORD PTR [rax+48]
$LN9@FireTheEve:

; 207  :     }

  000cd	48 8d 4c 24 50	 lea	 rcx, QWORD PTR DispParms$[rsp]
  000d2	e8 00 00 00 00	 call	 ??1OposDispParms@@QEAA@XZ ; OposDispParms::~OposDispParms
  000d7	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  000dc	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  000e0	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  000e4	49 8b e3	 mov	 rsp, r11
  000e7	41 5e		 pop	 r14
  000e9	c3		 ret	 0
?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z
_TEXT	SEGMENT
var$ = 48
this$ = 96
Data$ = 104
?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent, COMDAT

; 123  :     {

$LN37:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 124  :         T* pT = static_cast<T*>(this);
; 125  :         OposVariant var;
; 126  :         int nConnections = m_vec.GetSize();

  00019	8b 71 10	 mov	 esi, DWORD PTR [rcx+16]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0001c	45 33 f6	 xor	 r14d, r14d
  0001f	66 44 89 70 d8	 mov	 WORD PTR [rax-40], r14w
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 123  :     {

  00024	8b ea		 mov	 ebp, edx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00026	44 88 70 f0	 mov	 BYTE PTR [rax-16], r14b
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 123  :     {

  0002a	48 8b d9	 mov	 rbx, rcx

; 128  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  0002d	44 89 71 2c	 mov	 DWORD PTR [rcx+44], r14d
  00031	85 f6		 test	 esi, esi
  00033	0f 8e 98 00 00
	00		 jle	 $LN26@Fire_Statu
  00039	41 8b c6	 mov	 eax, r14d
$LL4@Fire_Statu:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  0003c	85 c0		 test	 eax, eax
  0003e	78 6a		 js	 SHORT $LN12@Fire_Statu
  00040	3b 43 10	 cmp	 eax, DWORD PTR [rbx+16]
  00043	7d 65		 jge	 SHORT $LN12@Fire_Statu

; 6199 : 			return m_ppUnk[nIndex];

  00045	48 63 c8	 movsxd	 rcx, eax
  00048	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0004c	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  00050	48 85 ff	 test	 rdi, rdi
  00053	74 4f		 je	 SHORT $LN18@Fire_Statu

; 171  :             p->AddRef();

  00055	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	ff 50 08	 call	 QWORD PTR [rax+8]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 136  :                 var.SetLONG( Data );

  0005e	8b d5		 mov	 edx, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  00060	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 136  :                 var.SetLONG( Data );

  00064	48 8d 4c 24 30	 lea	 rcx, QWORD PTR var$[rsp]
  00069	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 137  :                 FireTheEvent( FEUNKNOWN &var, 1, _DIDStatus, L"StatusUpdateEvent", 5 );

  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@
  00075	c7 44 24 28 05
	00 00 00	 mov	 DWORD PTR [rsp+40], 5
  0007d	4c 8d 4b 28	 lea	 r9, QWORD PTR [rbx+40]
  00081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00086	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008c	48 8d 54 24 30	 lea	 rdx, QWORD PTR var$[rsp]
  00091	48 8b cb	 mov	 rcx, rbx
  00094	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  00099	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	ff 50 10	 call	 QWORD PTR [rax+16]
  000a2	eb 0a		 jmp	 SHORT $LN2@Fire_Statu
$LN18@Fire_Statu:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 133  :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000a4	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
  000a8	eb 04		 jmp	 SHORT $LN2@Fire_Statu
$LN12@Fire_Statu:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  000aa	4c 89 73 30	 mov	 QWORD PTR [rbx+48], r14
$LN2@Fire_Statu:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 128  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  000ae	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  000b1	ff c0		 inc	 eax
  000b3	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  000b6	3b c6		 cmp	 eax, esi
  000b8	7c 82		 jl	 SHORT $LL4@Fire_Statu
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000ba	44 38 74 24 48	 cmp	 BYTE PTR var$[rsp+24], r14b
  000bf	74 10		 je	 SHORT $LN26@Fire_Statu

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR var$[rsp]
  000c6	44 88 74 24 48	 mov	 BYTE PTR var$[rsp+24], r14b
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN26@Fire_Statu:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 140  :     }

  000d1	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000d6	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000db	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  000e0	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  000e5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000e9	41 5e		 pop	 r14
  000eb	c3		 ret	 0
?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z
_TEXT	SEGMENT
hr$1 = 48
vars$ = 64
__$ArrayPad$ = 192
this$ = 288
ResultCode$ = 296
ResultCodeExtended$ = 304
ErrorLocus$ = 312
pErrorResponse$ = 320
?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent, COMDAT

; 97   :     {

$LN55:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00026	4c 8b ac 24 40
	01 00 00	 mov	 r13, QWORD PTR pErrorResponse$[rsp]

; 98   :         T* pT = static_cast<T*>(this);
; 99   :         OposVariant vars[4];

  0002e	48 8d 44 24 40	 lea	 rax, QWORD PTR vars$[rsp]
  00033	bf 04 00 00 00	 mov	 edi, 4
  00038	44 8b f2	 mov	 r14d, edx
  0003b	48 8b d9	 mov	 rbx, rcx
  0003e	45 8b e1	 mov	 r12d, r9d
  00041	8b cf		 mov	 ecx, edi
  00043	45 8b f8	 mov	 r15d, r8d
  00046	33 d2		 xor	 edx, edx
$LL10@Fire_Error:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00048	66 89 10	 mov	 WORD PTR [rax], dx
  0004b	88 50 18	 mov	 BYTE PTR [rax+24], dl
  0004e	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  00052	48 83 e9 01	 sub	 rcx, 1
  00056	75 f0		 jne	 SHORT $LL10@Fire_Error
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 100  :         int nConnections = m_vec.GetSize();

  00058	8b 6b 10	 mov	 ebp, DWORD PTR [rbx+16]

; 102  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  0005b	89 53 2c	 mov	 DWORD PTR [rbx+44], edx
  0005e	85 ed		 test	 ebp, ebp
  00060	0f 8e c2 00 00
	00		 jle	 $LN3@Fire_Error
  00066	8b c2		 mov	 eax, edx
$LL4@Fire_Error:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00068	85 c0		 test	 eax, eax
  0006a	0f 88 a4 00 00
	00		 js	 $LN16@Fire_Error
  00070	3b 43 10	 cmp	 eax, DWORD PTR [rbx+16]
  00073	0f 8d 9b 00 00
	00		 jge	 $LN16@Fire_Error

; 6199 : 			return m_ppUnk[nIndex];

  00079	48 63 c8	 movsxd	 rcx, eax
  0007c	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00080	48 8b 34 c8	 mov	 rsi, QWORD PTR [rax+rcx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  00084	48 85 f6	 test	 rsi, rsi
  00087	0f 84 81 00 00
	00		 je	 $LN22@Fire_Error

; 171  :             p->AddRef();

  0008d	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00090	48 8b ce	 mov	 rcx, rsi
  00093	ff 50 08	 call	 QWORD PTR [rax+8]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 111  :                 vars[3].SetLONG( ResultCode );

  00096	41 8b d6	 mov	 edx, r14d
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  00099	48 89 73 30	 mov	 QWORD PTR [rbx+48], rsi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 111  :                 vars[3].SetLONG( ResultCode );

  0009d	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR vars$[rsp+96]
  000a5	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 112  :                 vars[2].SetLONG( ResultCodeExtended );

  000aa	41 8b d7	 mov	 edx, r15d
  000ad	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR vars$[rsp+64]
  000b5	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 113  :                 vars[1].SetLONG( ErrorLocus );

  000ba	41 8b d4	 mov	 edx, r12d
  000bd	48 8d 4c 24 60	 lea	 rcx, QWORD PTR vars$[rsp+32]
  000c2	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 114  :                 vars[0].SetLONG_Ptr( pErrorResponse, hr );

  000c7	4c 8d 44 24 30	 lea	 r8, QWORD PTR hr$1[rsp]
  000cc	49 8b d5	 mov	 rdx, r13
  000cf	48 8d 4c 24 40	 lea	 rcx, QWORD PTR vars$[rsp]
  000d4	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::SetLONG_Ptr

; 115  :                 FireTheEvent( FEUNKNOWN vars, 4, _DIDError, L"ErrorEvent", 3 );

  000d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@
  000e0	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  000e8	4c 8d 4b 20	 lea	 r9, QWORD PTR [rbx+32]
  000ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f1	44 8b c7	 mov	 r8d, edi
  000f4	48 8d 54 24 40	 lea	 rdx, QWORD PTR vars$[rsp]
  000f9	48 8b cb	 mov	 rcx, rbx
  000fc	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  00101	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00104	48 8b ce	 mov	 rcx, rsi
  00107	ff 50 10	 call	 QWORD PTR [rax+16]
  0010a	33 d2		 xor	 edx, edx
  0010c	eb 0a		 jmp	 SHORT $LN2@Fire_Error
$LN22@Fire_Error:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 107  :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  0010e	48 89 73 30	 mov	 QWORD PTR [rbx+48], rsi
  00112	eb 04		 jmp	 SHORT $LN2@Fire_Error
$LN16@Fire_Error:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  00114	48 89 53 30	 mov	 QWORD PTR [rbx+48], rdx
$LN2@Fire_Error:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 102  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00118	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  0011b	ff c0		 inc	 eax
  0011d	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  00120	3b c5		 cmp	 eax, ebp
  00122	0f 8c 40 ff ff
	ff		 jl	 $LL4@Fire_Error
$LN3@Fire_Error:
  00128	48 8d 9c 24 c0
	00 00 00	 lea	 rbx, QWORD PTR vars$[rsp+128]
$LL45@Fire_Error:
  00130	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  00134	48 ff cf	 dec	 rdi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00137	38 53 18	 cmp	 BYTE PTR [rbx+24], dl
  0013a	74 0e		 je	 SHORT $LN34@Fire_Error

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0013c	48 8b cb	 mov	 rcx, rbx
  0013f	88 53 18	 mov	 BYTE PTR [rbx+24], dl
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
  00148	33 d2		 xor	 edx, edx
$LN34@Fire_Error:
  0014a	48 85 ff	 test	 rdi, rdi
  0014d	75 e1		 jne	 SHORT $LL45@Fire_Error
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 118  :     }

  0014f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00157	48 33 cc	 xor	 rcx, rsp
  0015a	e8 00 00 00 00	 call	 __security_check_cookie
  0015f	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00166	41 5f		 pop	 r15
  00168	41 5e		 pop	 r14
  0016a	41 5d		 pop	 r13
  0016c	41 5c		 pop	 r12
  0016e	5f		 pop	 rdi
  0016f	5e		 pop	 rsi
  00170	5d		 pop	 rbp
  00171	5b		 pop	 rbx
  00172	c3		 ret	 0
?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJJJPEAJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z
_TEXT	SEGMENT
hr$1 = 48
vars$ = 64
__$ArrayPad$ = 160
this$ = 256
EventNumber$ = 264
pData$ = 272
pString$ = 280
?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent, COMDAT

; 72   :     {

$LN55:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00026	bf 03 00 00 00	 mov	 edi, 3

; 73   :         T* pT = static_cast<T*>(this);
; 74   :         OposVariant vars[3];

  0002b	48 8d 44 24 40	 lea	 rax, QWORD PTR vars$[rsp]
  00030	48 8b d9	 mov	 rbx, rcx
  00033	4d 8b e1	 mov	 r12, r9
  00036	8b cf		 mov	 ecx, edi
  00038	4d 8b f8	 mov	 r15, r8
  0003b	44 8b f2	 mov	 r14d, edx
  0003e	45 33 ed	 xor	 r13d, r13d
$LL10@Fire_Direc:
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00041	66 44 89 28	 mov	 WORD PTR [rax], r13w
  00045	44 88 68 18	 mov	 BYTE PTR [rax+24], r13b
  00049	48 8d 40 20	 lea	 rax, QWORD PTR [rax+32]
  0004d	48 83 e9 01	 sub	 rcx, 1
  00051	75 ee		 jne	 SHORT $LL10@Fire_Direc
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 75   :         int nConnections = m_vec.GetSize();

  00053	8b 6b 10	 mov	 ebp, DWORD PTR [rbx+16]

; 77   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00056	44 89 6b 2c	 mov	 DWORD PTR [rbx+44], r13d
  0005a	85 ed		 test	 ebp, ebp
  0005c	0f 8e b2 00 00
	00		 jle	 $LN3@Fire_Direc
  00062	41 8b c5	 mov	 eax, r13d
$LL4@Fire_Direc:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00065	85 c0		 test	 eax, eax
  00067	0f 88 93 00 00
	00		 js	 $LN16@Fire_Direc
  0006d	3b 43 10	 cmp	 eax, DWORD PTR [rbx+16]
  00070	0f 8d 8a 00 00
	00		 jge	 $LN16@Fire_Direc

; 6199 : 			return m_ppUnk[nIndex];

  00076	48 63 c8	 movsxd	 rcx, eax
  00079	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0007d	48 8b 34 c8	 mov	 rsi, QWORD PTR [rax+rcx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  00081	48 85 f6	 test	 rsi, rsi
  00084	74 74		 je	 SHORT $LN22@Fire_Direc

; 171  :             p->AddRef();

  00086	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00089	48 8b ce	 mov	 rcx, rsi
  0008c	ff 50 08	 call	 QWORD PTR [rax+8]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 86   :                 vars[2].SetLONG( EventNumber );

  0008f	41 8b d6	 mov	 edx, r14d
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  00092	48 89 73 30	 mov	 QWORD PTR [rbx+48], rsi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 86   :                 vars[2].SetLONG( EventNumber );

  00096	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR vars$[rsp+64]
  0009e	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 87   :                 vars[1].SetLONG_Ptr( pData, hr );

  000a3	4c 8d 44 24 30	 lea	 r8, QWORD PTR hr$1[rsp]
  000a8	49 8b d7	 mov	 rdx, r15
  000ab	48 8d 4c 24 60	 lea	 rcx, QWORD PTR vars$[rsp+32]
  000b0	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QEAAXPEAJAEAJ@Z ; OposVariant::SetLONG_Ptr

; 88   :                 vars[0].SetBSTR_InOutPtr( pString, hr );

  000b5	4c 8d 44 24 30	 lea	 r8, QWORD PTR hr$1[rsp]
  000ba	49 8b d4	 mov	 rdx, r12
  000bd	48 8d 4c 24 40	 lea	 rcx, QWORD PTR vars$[rsp]
  000c2	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QEAA_NPEAPEA_WAEAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 89   :                 FireTheEvent( FEUNKNOWN vars, 3, _DIDDirectIO, L"DirectIOEvent", 2 );

  000c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@
  000ce	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  000d6	4c 8d 4b 1c	 lea	 r9, QWORD PTR [rbx+28]
  000da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000df	44 8b c7	 mov	 r8d, edi
  000e2	48 8d 54 24 40	 lea	 rdx, QWORD PTR vars$[rsp]
  000e7	48 8b cb	 mov	 rcx, rbx
  000ea	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  000ef	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000f2	48 8b ce	 mov	 rcx, rsi
  000f5	ff 50 10	 call	 QWORD PTR [rax+16]
  000f8	eb 0a		 jmp	 SHORT $LN2@Fire_Direc
$LN22@Fire_Direc:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 82   :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000fa	48 89 73 30	 mov	 QWORD PTR [rbx+48], rsi
  000fe	eb 04		 jmp	 SHORT $LN2@Fire_Direc
$LN16@Fire_Direc:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  00100	4c 89 6b 30	 mov	 QWORD PTR [rbx+48], r13
$LN2@Fire_Direc:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 77   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00104	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  00107	ff c0		 inc	 eax
  00109	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  0010c	3b c5		 cmp	 eax, ebp
  0010e	0f 8c 51 ff ff
	ff		 jl	 $LL4@Fire_Direc
$LN3@Fire_Direc:
  00114	48 8d 9c 24 a0
	00 00 00	 lea	 rbx, QWORD PTR vars$[rsp+96]
$LL45@Fire_Direc:
  0011c	48 83 eb 20	 sub	 rbx, 32			; 00000020H
  00120	48 ff cf	 dec	 rdi
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00123	44 38 6b 18	 cmp	 BYTE PTR [rbx+24], r13b
  00127	74 0d		 je	 SHORT $LN34@Fire_Direc

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00129	48 8b cb	 mov	 rcx, rbx
  0012c	44 88 6b 18	 mov	 BYTE PTR [rbx+24], r13b
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN34@Fire_Direc:
  00136	48 85 ff	 test	 rdi, rdi
  00139	75 e1		 jne	 SHORT $LL45@Fire_Direc
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 92   :     }

  0013b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00143	48 33 cc	 xor	 rcx, rsp
  00146	e8 00 00 00 00	 call	 __security_check_cookie
  0014b	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00152	41 5f		 pop	 r15
  00154	41 5e		 pop	 r14
  00156	41 5d		 pop	 r13
  00158	41 5c		 pop	 r12
  0015a	5f		 pop	 rdi
  0015b	5e		 pop	 rsi
  0015c	5d		 pop	 rbp
  0015d	5b		 pop	 rbx
  0015e	c3		 ret	 0
?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJPEAJPEAPEA_W@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z
_TEXT	SEGMENT
var$ = 48
this$ = 96
Status$ = 104
?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent, COMDAT

; 50   :     {

$LN37:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 51   :         T* pT = static_cast<T*>(this);
; 52   :         OposVariant var;
; 53   :         int nConnections = m_vec.GetSize();

  00019	8b 71 10	 mov	 esi, DWORD PTR [rcx+16]
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  0001c	45 33 f6	 xor	 r14d, r14d
  0001f	66 44 89 70 d8	 mov	 WORD PTR [rax-40], r14w
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 50   :     {

  00024	8b ea		 mov	 ebp, edx
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00026	44 88 70 f0	 mov	 BYTE PTR [rax-16], r14b
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 50   :     {

  0002a	48 8b d9	 mov	 rbx, rcx

; 55   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  0002d	44 89 71 2c	 mov	 DWORD PTR [rcx+44], r14d
  00031	85 f6		 test	 esi, esi
  00033	0f 8e 98 00 00
	00		 jle	 $LN26@Fire_DataE
  00039	41 8b c6	 mov	 eax, r14d
$LL4@Fire_DataE:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  0003c	85 c0		 test	 eax, eax
  0003e	78 6a		 js	 SHORT $LN12@Fire_DataE
  00040	3b 43 10	 cmp	 eax, DWORD PTR [rbx+16]
  00043	7d 65		 jge	 SHORT $LN12@Fire_DataE

; 6199 : 			return m_ppUnk[nIndex];

  00045	48 63 c8	 movsxd	 rcx, eax
  00048	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0004c	48 8b 3c c8	 mov	 rdi, QWORD PTR [rax+rcx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 170  :         if (p != NULL)

  00050	48 85 ff	 test	 rdi, rdi
  00053	74 4f		 je	 SHORT $LN18@Fire_DataE

; 171  :             p->AddRef();

  00055	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00058	48 8b cf	 mov	 rcx, rdi
  0005b	ff 50 08	 call	 QWORD PTR [rax+8]
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 63   :                 var.SetLONG( Status );

  0005e	8b d5		 mov	 edx, ebp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 171  :             p->AddRef();

  00060	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 63   :                 var.SetLONG( Status );

  00064	48 8d 4c 24 30	 lea	 rcx, QWORD PTR var$[rsp]
  00069	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QEAAXJ@Z ; OposVariant::SetLONG

; 64   :                 FireTheEvent( FEUNKNOWN &var, 1, _DIDData, L"DataEvent", 1 );

  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@
  00075	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0007d	4c 8d 4b 18	 lea	 r9, QWORD PTR [rbx+24]
  00081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00086	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008c	48 8d 54 24 30	 lea	 rdx, QWORD PTR var$[rsp]
  00091	48 8b cb	 mov	 rcx, rbx
  00094	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IEAAXPEAVOposVariant@@IAEAJPEB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 184  :             p->Release();

  00099	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	ff 50 10	 call	 QWORD PTR [rax+16]
  000a2	eb 0a		 jmp	 SHORT $LN2@Fire_DataE
$LN18@Fire_DataE:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 60   :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000a4	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
  000a8	eb 04		 jmp	 SHORT $LN2@Fire_DataE
$LN12@Fire_DataE:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6201 : 			return NULL;

  000aa	4c 89 73 30	 mov	 QWORD PTR [rbx+48], r14
$LN2@Fire_DataE:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 55   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  000ae	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  000b1	ff c0		 inc	 eax
  000b3	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  000b6	3b c6		 cmp	 eax, esi
  000b8	7c 82		 jl	 SHORT $LL4@Fire_DataE
; File C:\Develop\OPOS-CCO\Common\OposVariant.h

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  000ba	44 38 74 24 48	 cmp	 BYTE PTR var$[rsp+24], r14b
  000bf	74 10		 je	 SHORT $LN26@Fire_DataE

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  000c1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR var$[rsp]
  000c6	44 88 74 24 48	 mov	 BYTE PTR var$[rsp+24], r14b
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN26@Fire_DataE:
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h

; 67   :     }

  000d1	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000d6	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000db	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  000e0	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  000e5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000e9	41 5e		 pop	 r14
  000eb	c3		 ret	 0
?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QEAAXJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z
_TEXT	SEGMENT
this$ = 64
ppEnum$ = 72
?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::EnumConnections, COMDAT

; 6412 : {

$LN109:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	4c 8b fa	 mov	 r15, rdx
  0001b	48 8b f9	 mov	 rdi, rcx

; 6413 : 	if (ppEnum == NULL)

  0001e	48 85 d2	 test	 rdx, rdx
  00021	75 0a		 jne	 SHORT $LN5@EnumConnec

; 6414 : 		return E_POINTER;

  00023	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H
  00028	e9 8f 00 00 00	 jmp	 $LN1@EnumConnec
$LN5@EnumConnec:

; 6415 : 	*ppEnum = NULL;

  0002d	48 83 22 00	 and	 QWORD PTR [rdx], 0

; 6416 : 	CComObject<CComEnumConnections>* pEnum = NULL;
; 6417 : 	pEnum = _ATL_NEW CComObject<CComEnumConnections>;

  00031	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0003d	e8 00 00 00 00	 call	 ??2@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new
  00042	48 8b d8	 mov	 rbx, rax
  00045	48 85 c0	 test	 rax, rax
  00048	74 6d		 je	 SHORT $LN105@EnumConnec
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 165  :         p = NULL;

  0004a	48 83 60 08 00	 and	 QWORD PTR [rax+8], 0
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 5501 : 		m_begin = m_end = m_iter = NULL;

  0004f	48 83 60 20 00	 and	 QWORD PTR [rax+32], 0
  00054	48 83 60 18 00	 and	 QWORD PTR [rax+24], 0
  00059	48 83 60 10 00	 and	 QWORD PTR [rax+16], 0

; 5502 : 		m_dwFlags = 0;

  0005e	83 60 28 00	 and	 DWORD PTR [rax+40], 0

; 2430 : 		m_dwRef = 0L;

  00062	83 60 30 00	 and	 DWORD PTR [rax+48], 0

; 2912 : 	{

  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
  0006d	48 89 03	 mov	 QWORD PTR [rbx], rax

; 2913 : 		_pAtlModule->Lock();

  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_pAtlModule@ATL@@3PEAVCAtlModule@1@EA ; ATL::_pAtlModule
  00077	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0007a	ff 50 08	 call	 QWORD PTR [rax+8]

; 6418 : 	if (pEnum == NULL)
; 6419 : 		return E_OUTOFMEMORY;
; 6420 : 	T* pT = static_cast<T*>(this);
; 6421 : 	pT->Lock();
; 6422 : 	CONNECTDATA* pcd = NULL;
; 6423 : 	pcd = _ATL_NEW CONNECTDATA[m_vec.end()-m_vec.begin()];

  0007d	48 63 4f 10	 movsxd	 rcx, DWORD PTR [rdi+16]
  00081	b8 10 00 00 00	 mov	 eax, 16
  00086	48 f7 e1	 mul	 rcx
  00089	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00097	48 0f 40 c1	 cmovo	 rax, rcx
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000a3	48 8b e8	 mov	 rbp, rax

; 6424 : 	if (pcd == NULL)

  000a6	48 85 c0	 test	 rax, rax
  000a9	75 2a		 jne	 SHORT $LN7@EnumConnec

; 6425 : 	{
; 6426 : 		delete pEnum;

  000ab	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000ae	8d 55 01	 lea	 edx, QWORD PTR [rbp+1]
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	ff 50 38	 call	 QWORD PTR [rax+56]
$LN105@EnumConnec:

; 6449 : }

  000b7	b8 0e 00 07 80	 mov	 eax, -2147024882	; ffffffff8007000eH
$LN1@EnumConnec:
  000bc	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000c1	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000c6	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000cb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cf	41 5f		 pop	 r15
  000d1	41 5e		 pop	 r14
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
$LN7@EnumConnec:

; 6427 : 		pT->Unlock();
; 6428 : 		return E_OUTOFMEMORY;
; 6429 : 	}
; 6430 : 	CONNECTDATA* pend = pcd;
; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  000d5	48 8b 77 08	 mov	 rsi, QWORD PTR [rdi+8]
  000d9	4c 8b f5	 mov	 r14, rbp

; 6192 : 		return &m_ppUnk[m_nSize];

  000dc	48 63 47 10	 movsxd	 rax, DWORD PTR [rdi+16]
  000e0	48 8d 0c c6	 lea	 rcx, QWORD PTR [rsi+rax*8]

; 6427 : 		pT->Unlock();
; 6428 : 		return E_OUTOFMEMORY;
; 6429 : 	}
; 6430 : 	CONNECTDATA* pend = pcd;
; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  000e4	48 3b f1	 cmp	 rsi, rcx
  000e7	73 63		 jae	 SHORT $LN3@EnumConnec
  000e9	8b 57 10	 mov	 edx, DWORD PTR [rdi+16]
$LL4@EnumConnec:

; 6433 : 	{
; 6434 : 		if (*pp != NULL)

  000ec	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000ef	48 85 c9	 test	 rcx, rcx
  000f2	74 44		 je	 SHORT $LN2@EnumConnec

; 6435 : 		{
; 6436 : 			(*pp)->AddRef();

  000f4	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000f7	ff 50 08	 call	 QWORD PTR [rax+8]

; 6437 : 			pend->pUnk = *pp;

  000fa	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000fd	49 89 06	 mov	 QWORD PTR [r14], rax

; 6162 : 		if (ppFind && *ppFind)

  00100	4c 8b 0e	 mov	 r9, QWORD PTR [rsi]
  00103	4d 85 c9	 test	 r9, r9
  00106	74 23		 je	 SHORT $LN39@EnumConnec

; 6163 : 		{
; 6164 : 			IUnknown** ppUnk = NULL;
; 6165 : 			DWORD dwCookie = 1;
; 6166 : 			// find IUnknown* in array
; 6167 : 			for (ppUnk = begin(); ppUnk < end(); ppUnk++)

  00108	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  0010c	ba 01 00 00 00	 mov	 edx, 1

; 6192 : 		return &m_ppUnk[m_nSize];

  00111	48 63 47 10	 movsxd	 rax, DWORD PTR [rdi+16]
  00115	4c 8d 04 c1	 lea	 r8, QWORD PTR [rcx+rax*8]
  00119	eb 0b		 jmp	 SHORT $LN106@EnumConnec
$LL40@EnumConnec:

; 6169 : 				if (*ppUnk == *ppFind)

  0011b	4c 39 09	 cmp	 QWORD PTR [rcx], r9
  0011e	74 0d		 je	 SHORT $LN37@EnumConnec

; 6170 : 					return dwCookie; // cookie minus one is an index into the array
; 6171 : 				dwCookie++;

  00120	ff c2		 inc	 edx
  00122	48 83 c1 08	 add	 rcx, 8
$LN106@EnumConnec:

; 6163 : 		{
; 6164 : 			IUnknown** ppUnk = NULL;
; 6165 : 			DWORD dwCookie = 1;
; 6166 : 			// find IUnknown* in array
; 6167 : 			for (ppUnk = begin(); ppUnk < end(); ppUnk++)

  00126	49 3b c8	 cmp	 rcx, r8
  00129	72 f0		 jb	 SHORT $LL40@EnumConnec
$LN39@EnumConnec:

; 6172 : 			}
; 6173 : 		}
; 6174 : 		return 0;

  0012b	33 d2		 xor	 edx, edx
$LN37@EnumConnec:

; 6438 : 			pend->dwCookie = m_vec.GetCookie(pp);

  0012d	41 89 56 08	 mov	 DWORD PTR [r14+8], edx

; 6439 : 			pend++;

  00131	49 83 c6 10	 add	 r14, 16
  00135	8b 57 10	 mov	 edx, DWORD PTR [rdi+16]
$LN2@EnumConnec:

; 6192 : 		return &m_ppUnk[m_nSize];

  00138	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]

; 6427 : 		pT->Unlock();
; 6428 : 		return E_OUTOFMEMORY;
; 6429 : 	}
; 6430 : 	CONNECTDATA* pend = pcd;
; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  0013c	48 83 c6 08	 add	 rsi, 8

; 6192 : 		return &m_ppUnk[m_nSize];

  00140	48 63 ca	 movsxd	 rcx, edx
  00143	48 8d 0c c8	 lea	 rcx, QWORD PTR [rax+rcx*8]

; 6427 : 		pT->Unlock();
; 6428 : 		return E_OUTOFMEMORY;
; 6429 : 	}
; 6430 : 	CONNECTDATA* pend = pcd;
; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  00147	48 3b f1	 cmp	 rsi, rcx
  0014a	72 a0		 jb	 SHORT $LL4@EnumConnec
$LN3@EnumConnec:

; 5654 : 		m_begin = begin;

  0014c	48 89 6b 10	 mov	 QWORD PTR [rbx+16], rbp

; 5655 : 		m_end = end;

  00150	4c 89 73 18	 mov	 QWORD PTR [rbx+24], r14
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 329  :         if(this->p!=lp)

  00154	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00158	48 85 c9	 test	 rcx, rcx
  0015b	74 0f		 je	 SHORT $LN89@EnumConnec

; 177  :         other.p = pTemp;

  0015d	48 83 63 08 00	 and	 QWORD PTR [rbx+8], 0

; 184  :             p->Release();

  00162	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00165	ff 50 10	 call	 QWORD PTR [rax+16]
  00168	48 8b 6b 10	 mov	 rbp, QWORD PTR [rbx+16]
$LN89@EnumConnec:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  0016c	4d 8b cf	 mov	 r9, r15

; 5658 : 	m_iter = m_begin;

  0016f	48 89 6b 20	 mov	 QWORD PTR [rbx+32], rbp

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  00173	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_GUID_b196b287_bab4_101a_b69c_00aa00341d07

; 5659 : 	m_dwFlags = flags;

  0017a	c7 43 28 02 00
	00 00		 mov	 DWORD PTR [rbx+40], 2

; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SAPEBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  00188	48 8b cb	 mov	 rcx, rbx
  0018b	e8 00 00 00 00	 call	 ?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z ; ATL::AtlInternalQueryInterface
  00190	8b f8		 mov	 edi, eax

; 6440 : 		}
; 6441 : 	}
; 6442 : 	// don't copy the data, but transfer ownership to it
; 6443 : 	pEnum->Init(pcd, pend, NULL, AtlFlagTakeOwnership);
; 6444 : 	pT->Unlock();
; 6445 : 	HRESULT hRes = pEnum->_InternalQueryInterface(__uuidof(IEnumConnections), (void**)ppEnum);
; 6446 : 	if (FAILED(hRes))

  00192	85 c0		 test	 eax, eax
  00194	79 0f		 jns	 SHORT $LN17@EnumConnec

; 6447 : 		delete pEnum;

  00196	4c 8b 03	 mov	 r8, QWORD PTR [rbx]
  00199	ba 01 00 00 00	 mov	 edx, 1
  0019e	48 8b cb	 mov	 rcx, rbx
  001a1	41 ff 50 38	 call	 QWORD PTR [r8+56]
$LN17@EnumConnec:

; 6448 : 	return hRes;

  001a5	8b c7		 mov	 eax, edi
  001a7	e9 10 ff ff ff	 jmp	 $LN1@EnumConnec
?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIEnumConnections@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::EnumConnections
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z
_TEXT	SEGMENT
this$ = 48
dwCookie$ = 56
?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise, COMDAT

; 6397 : {

$LN23:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 6181 : 		if (dwCookie != 0 && dwCookie <= (DWORD)m_nSize)

  00006	33 db		 xor	 ebx, ebx

; 6397 : {

  00008	4c 8b c1	 mov	 r8, rcx

; 6181 : 		if (dwCookie != 0 && dwCookie <= (DWORD)m_nSize)

  0000b	85 d2		 test	 edx, edx
  0000d	74 1e		 je	 SHORT $LN20@Unadvise
  0000f	3b 51 10	 cmp	 edx, DWORD PTR [rcx+16]
  00012	77 19		 ja	 SHORT $LN20@Unadvise

; 6182 : 			return GetAt(dwCookie-1); // cookie minus one is an index into the array

  00014	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00017	85 c0		 test	 eax, eax
  00019	78 12		 js	 SHORT $LN20@Unadvise
  0001b	3b 41 10	 cmp	 eax, DWORD PTR [rcx+16]
  0001e	7d 0d		 jge	 SHORT $LN20@Unadvise

; 6199 : 			return m_ppUnk[nIndex];

  00020	48 63 c8	 movsxd	 rcx, eax
  00023	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  00027	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0002b	eb 03		 jmp	 SHORT $LN8@Unadvise
$LN20@Unadvise:

; 6268 : 	DWORD idx = dwCookie -1;

  0002d	48 8b cb	 mov	 rcx, rbx
$LN8@Unadvise:
  00030	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]

; 6269 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6270 : 	ATLASSERT(idx < dwCookie && idx < (DWORD)m_nSize);
; 6271 : #endif
; 6272 : 	if (idx < dwCookie && idx < (DWORD)m_nSize)

  00033	3b c2		 cmp	 eax, edx
  00035	73 23		 jae	 SHORT $LN15@Unadvise
  00037	41 3b 40 10	 cmp	 eax, DWORD PTR [r8+16]
  0003b	73 1d		 jae	 SHORT $LN15@Unadvise

; 6273 : 	{
; 6274 : 		// cookie minus one is index into array
; 6275 : 		if (m_ppUnk[idx] == NULL)

  0003d	8b d0		 mov	 edx, eax
  0003f	49 8b 40 08	 mov	 rax, QWORD PTR [r8+8]
  00043	48 39 1c d0	 cmp	 QWORD PTR [rax+rdx*8], rbx
  00047	74 11		 je	 SHORT $LN15@Unadvise

; 6276 : 			return FALSE;
; 6277 : 		m_ppUnk[idx] = NULL;

  00049	48 89 1c d0	 mov	 QWORD PTR [rax+rdx*8], rbx

; 6398 : 	T* pT = static_cast<T*>(this);
; 6399 : 	pT->Lock();
; 6400 : 	IUnknown* p = m_vec.GetUnknown(dwCookie);
; 6401 : 	HRESULT hRes = m_vec.Remove(dwCookie) ? S_OK : CONNECT_E_NOCONNECTION;
; 6402 : 	pT->Unlock();
; 6403 : 	if (hRes == S_OK && p != NULL)

  0004d	48 85 c9	 test	 rcx, rcx
  00050	74 0d		 je	 SHORT $LN2@Unadvise

; 6404 : 		p->Release();

  00052	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00055	ff 50 10	 call	 QWORD PTR [rax+16]
  00058	eb 05		 jmp	 SHORT $LN2@Unadvise
$LN15@Unadvise:

; 6405 : 	return hRes;

  0005a	bb 00 02 04 80	 mov	 ebx, -2147220992	; ffffffff80040200H
$LN2@Unadvise:
  0005f	8b c3		 mov	 eax, ebx

; 6406 : }

  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5b		 pop	 rbx
  00066	c3		 ret	 0
?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJK@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z
_TEXT	SEGMENT
p$ = 32
iid$ = 40
__$ArrayPad$ = 56
this$ = 96
pUnkSink$ = 104
pdwCookie$ = 112
?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise, COMDAT

; 6368 : {

$LN16:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00008	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000f	48 33 c4	 xor	 rax, rsp
  00012	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6369 : 	T* pT = static_cast<T*>(this);
; 6370 : 	IUnknown* p = NULL;

  00017	48 83 64 24 20
	00		 and	 QWORD PTR p$[rsp], 0
  0001d	49 8b f8	 mov	 rdi, r8
  00020	48 8b da	 mov	 rbx, rdx
  00023	48 8b f1	 mov	 rsi, rcx

; 6371 : 	HRESULT hRes = S_OK;
; 6372 : 	if (pdwCookie != NULL)

  00026	4d 85 c0	 test	 r8, r8
  00029	74 04		 je	 SHORT $LN13@Advise

; 6373 : 		*pdwCookie = 0;

  0002b	41 83 20 00	 and	 DWORD PTR [r8], 0
$LN13@Advise:

; 6374 : 	if (pUnkSink == NULL || pdwCookie == NULL)

  0002f	48 85 db	 test	 rbx, rbx
  00032	74 6e		 je	 SHORT $LN4@Advise
  00034	48 85 ff	 test	 rdi, rdi
  00037	74 69		 je	 SHORT $LN4@Advise

; 6376 : 	IID iid;
; 6377 : 	GetConnectionInterface(&iid);

  00039	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0003c	48 8d 54 24 28	 lea	 rdx, QWORD PTR iid$[rsp]
  00041	ff 50 18	 call	 QWORD PTR [rax+24]

; 6378 : 	hRes = pUnkSink->QueryInterface(iid, (void**)&p);

  00044	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00047	4c 8d 44 24 20	 lea	 r8, QWORD PTR p$[rsp]
  0004c	48 8d 54 24 28	 lea	 rdx, QWORD PTR iid$[rsp]
  00051	48 8b cb	 mov	 rcx, rbx
  00054	ff 10		 call	 QWORD PTR [rax]
  00056	8b d8		 mov	 ebx, eax

; 6379 : 	if (SUCCEEDED(hRes))

  00058	85 c0		 test	 eax, eax
  0005a	78 33		 js	 SHORT $LN5@Advise

; 6380 : 	{
; 6381 : 		pT->Lock();
; 6382 : 		*pdwCookie = m_vec.Add(p);

  0005c	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  00061	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00065	e8 00 00 00 00	 call	 ?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::Add

; 6383 : 		hRes = (*pdwCookie != NULL) ? S_OK : CONNECT_E_ADVISELIMIT;

  0006a	8b c8		 mov	 ecx, eax
  0006c	89 07		 mov	 DWORD PTR [rdi], eax
  0006e	f7 d9		 neg	 ecx
  00070	1b db		 sbb	 ebx, ebx
  00072	f7 d3		 not	 ebx
  00074	81 e3 01 02 04
	80		 and	 ebx, -2147220991	; ffffffff80040201H

; 6384 : 		pT->Unlock();
; 6385 : 		if (hRes != S_OK)

  0007a	85 c0		 test	 eax, eax
  0007c	75 0b		 jne	 SHORT $LN8@Advise

; 6386 : 			p->Release();

  0007e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00083	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00086	ff 50 10	 call	 QWORD PTR [rax+16]
$LN8@Advise:

; 6390 : 	if (FAILED(hRes))

  00089	85 db		 test	 ebx, ebx
  0008b	79 11		 jns	 SHORT $LN9@Advise
  0008d	eb 0c		 jmp	 SHORT $LN14@Advise
$LN5@Advise:

; 6387 : 	}
; 6388 : 	else if (hRes == E_NOINTERFACE)

  0008f	3d 02 40 00 80	 cmp	 eax, -2147467262	; ffffffff80004002H
  00094	75 05		 jne	 SHORT $LN14@Advise

; 6389 : 		hRes = CONNECT_E_CANNOTCONNECT;

  00096	bb 02 02 04 80	 mov	 ebx, -2147220990	; ffffffff80040202H
$LN14@Advise:

; 6391 : 		*pdwCookie = 0;

  0009b	83 27 00	 and	 DWORD PTR [rdi], 0
$LN9@Advise:

; 6392 : 	return hRes;

  0009e	8b c3		 mov	 eax, ebx
  000a0	eb 05		 jmp	 SHORT $LN1@Advise
$LN4@Advise:

; 6375 : 		return E_POINTER;

  000a2	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H
$LN1@Advise:

; 6393 : }

  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ac	48 33 cc	 xor	 rcx, rsp
  000af	e8 00 00 00 00	 call	 __security_check_cookie
  000b4	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b8	5f		 pop	 rdi
  000b9	5e		 pop	 rsi
  000ba	5b		 pop	 rbx
  000bb	c3		 ret	 0
?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAUIUnknown@@PEAK@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIConnectionPointContainer@@@Z
_TEXT	SEGMENT
this$ = 8
ppCPC$ = 16
?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIConnectionPointContainer@@@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer, COMDAT

; 6339 : 		T* pT = static_cast<T*>(this);
; 6340 : 		// No need to check ppCPC for NULL since QI will do that for us
; 6341 : 		return pT->QueryInterface(__uuidof(IConnectionPointContainer), (void**)ppCPC);

  00000	48 8d 81 c0 fe
	ff ff		 lea	 rax, QWORD PTR [rcx-320]
  00007	4c 8b c2	 mov	 r8, rdx
  0000a	48 f7 d9	 neg	 rcx
  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_b196b284_bab4_101a_b69c_00aa00341d07
  00014	48 1b c9	 sbb	 rcx, rcx
  00017	48 23 c8	 and	 rcx, rax
  0001a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0001d	48 ff 20	 rex_jmp QWORD PTR [rax]
?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAPEAUIConnectionPointContainer@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAU_GUID@@@Z
_TEXT	SEGMENT
this$ = 8
piid2$ = 16
?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAU_GUID@@@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface, COMDAT

; 6331 : 		if (piid2 == NULL)

  00000	48 85 d2	 test	 rdx, rdx
  00003	75 06		 jne	 SHORT $LN2@GetConnect

; 6332 : 			return E_POINTER;

  00005	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H

; 6335 : 	}

  0000a	c3		 ret	 0
$LN2@GetConnect:

; 6333 : 		*piid2 = *piid;

  0000b	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR DIID__IOPOSDeviceMonitorEvents

; 6334 : 		return S_OK;

  00012	33 c0		 xor	 eax, eax
  00014	f3 0f 7f 02	 movdqu	 XMMWORD PTR [rdx], xmm0

; 6335 : 	}

  00018	c3		 ret	 0
?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJPEAU_GUID@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\guiddef.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z
_TEXT	SEGMENT
this$ = 48
riid$ = 56
ppvObject$ = 64
?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface, COMDAT

; 6308 : 	{

$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6309 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6310 : 		ATLASSERT(ppvObject != NULL);
; 6311 : #endif
; 6312 : 		if (ppvObject == NULL)

  00004	33 c0		 xor	 eax, eax
  00006	4d 85 c0	 test	 r8, r8
  00009	75 07		 jne	 SHORT $LN2@LocCPQuery

; 6313 : 			return E_POINTER;

  0000b	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H
  00010	eb 59		 jmp	 SHORT $LN4@LocCPQuery
$LN2@LocCPQuery:

; 6314 : 		*ppvObject = NULL;

  00012	49 89 00	 mov	 QWORD PTR [r8], rax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\guiddef.h

; 152  :    return (

  00015	81 3a 86 b2 96
	b1		 cmp	 DWORD PTR [rdx], -1315523962 ; b196b286H
  0001b	75 21		 jne	 SHORT $LN9@LocCPQuery
  0001d	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR _GUID_b196b286_bab4_101a_b69c_00aa00341d07+4
  00023	39 42 04	 cmp	 DWORD PTR [rdx+4], eax
  00026	75 3e		 jne	 SHORT $LN13@LocCPQuery
  00028	8b 05 08 00 00
	00		 mov	 eax, DWORD PTR _GUID_b196b286_bab4_101a_b69c_00aa00341d07+8
  0002e	39 42 08	 cmp	 DWORD PTR [rdx+8], eax
  00031	75 33		 jne	 SHORT $LN13@LocCPQuery
  00033	8b 05 0c 00 00
	00		 mov	 eax, DWORD PTR _GUID_b196b286_bab4_101a_b69c_00aa00341d07+12
  00039	39 42 0c	 cmp	 DWORD PTR [rdx+12], eax
  0003c	eb 19		 jmp	 SHORT $LN15@LocCPQuery
$LN9@LocCPQuery:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 667  :    return (

  0003e	39 02		 cmp	 DWORD PTR [rdx], eax
  00040	75 24		 jne	 SHORT $LN13@LocCPQuery
  00042	39 42 04	 cmp	 DWORD PTR [rdx+4], eax
  00045	75 1f		 jne	 SHORT $LN13@LocCPQuery
  00047	81 7a 08 c0 00
	00 00		 cmp	 DWORD PTR [rdx+8], 192	; 000000c0H
  0004e	75 16		 jne	 SHORT $LN13@LocCPQuery
  00050	81 7a 0c 00 00
	00 46		 cmp	 DWORD PTR [rdx+12], 1174405120 ; 46000000H
$LN15@LocCPQuery:
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6318 : 			*ppvObject = this;

  00057	75 0d		 jne	 SHORT $LN13@LocCPQuery
  00059	49 89 08	 mov	 QWORD PTR [r8], rcx

; 6319 : 			this->AddRef();

  0005c	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0005f	ff 50 08	 call	 QWORD PTR [rax+8]

; 6320 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 6321 : 			_AtlDebugInterfacesModule.AddThunk((IUnknown**)ppvObject, _T("IConnectionPointImpl"), riid);
; 6322 : #endif // _ATL_DEBUG_INTERFACES
; 6323 : 			return S_OK;

  00062	33 c0		 xor	 eax, eax
  00064	eb 05		 jmp	 SHORT $LN4@LocCPQuery
$LN13@LocCPQuery:

; 6324 : 		}
; 6325 : 		else
; 6326 : 			return E_NOINTERFACE;

  00066	b8 02 40 00 80	 mov	 eax, -2147467262	; ffffffff80004002H
$LN4@LocCPQuery:

; 6327 : 	}

  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	c3		 ret	 0
?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UEAAJAEBU_GUID@@PEAPEAX@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>, COMDAT

; 6354 : {

$LN17:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 6355 : 	IUnknown** pp = m_vec.begin();

  0000a	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]
  0000e	48 8b f9	 mov	 rdi, rcx

; 6192 : 		return &m_ppUnk[m_nSize];

  00011	4c 63 41 10	 movsxd	 r8, DWORD PTR [rcx+16]
  00015	4a 8d 14 c3	 lea	 rdx, QWORD PTR [rbx+r8*8]

; 6356 : 	while (pp < m_vec.end())

  00019	48 3b da	 cmp	 rbx, rdx
  0001c	73 26		 jae	 SHORT $LN3@IConnectio
$LL2@IConnectio:

; 6357 : 	{
; 6358 : 		if (*pp != NULL)

  0001e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00021	48 85 c9	 test	 rcx, rcx
  00024	74 06		 je	 SHORT $LN4@IConnectio

; 6359 : 			(*pp)->Release();

  00026	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00029	ff 50 10	 call	 QWORD PTR [rax+16]
$LN4@IConnectio:

; 6192 : 		return &m_ppUnk[m_nSize];

  0002c	4c 63 47 10	 movsxd	 r8, DWORD PTR [rdi+16]

; 6360 : 		pp++;

  00030	48 83 c3 08	 add	 rbx, 8

; 6192 : 		return &m_ppUnk[m_nSize];

  00034	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00038	4a 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+r8*8]

; 6356 : 	while (pp < m_vec.end())

  0003c	48 3b d9	 cmp	 rbx, rcx
  0003f	72 dd		 jb	 SHORT $LL2@IConnectio
  00041	48 8b da	 mov	 rbx, rdx
$LN3@IConnectio:

; 6152 : 		if (m_nSize > 0)

  00044	45 85 c0	 test	 r8d, r8d
  00047	7e 08		 jle	 SHORT $LN9@IConnectio

; 6153 : 			free(m_ppUnk);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 free
$LN9@IConnectio:

; 6361 : 	}
; 6362 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>, COMDAT

; 6354 : {

$LN17:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 6355 : 	IUnknown** pp = m_vec.begin();

  0000a	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]
  0000e	48 8b f9	 mov	 rdi, rcx

; 6192 : 		return &m_ppUnk[m_nSize];

  00011	4c 63 41 10	 movsxd	 r8, DWORD PTR [rcx+16]
  00015	4a 8d 14 c3	 lea	 rdx, QWORD PTR [rbx+r8*8]

; 6356 : 	while (pp < m_vec.end())

  00019	48 3b da	 cmp	 rbx, rdx
  0001c	73 26		 jae	 SHORT $LN3@IConnectio
$LL2@IConnectio:

; 6357 : 	{
; 6358 : 		if (*pp != NULL)

  0001e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00021	48 85 c9	 test	 rcx, rcx
  00024	74 06		 je	 SHORT $LN4@IConnectio

; 6359 : 			(*pp)->Release();

  00026	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00029	ff 50 10	 call	 QWORD PTR [rax+16]
$LN4@IConnectio:

; 6192 : 		return &m_ppUnk[m_nSize];

  0002c	4c 63 47 10	 movsxd	 r8, DWORD PTR [rdi+16]

; 6360 : 		pp++;

  00030	48 83 c3 08	 add	 rbx, 8

; 6192 : 		return &m_ppUnk[m_nSize];

  00034	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00038	4a 8d 0c c2	 lea	 rcx, QWORD PTR [rdx+r8*8]

; 6356 : 	while (pp < m_vec.end())

  0003c	48 3b d9	 cmp	 rbx, rcx
  0003f	72 dd		 jb	 SHORT $LL2@IConnectio
  00041	48 8b da	 mov	 rbx, rdx
$LN3@IConnectio:

; 6152 : 		if (m_nSize > 0)

  00044	45 85 c0	 test	 r8d, r8d
  00047	7e 08		 jle	 SHORT $LN9@IConnectio

; 6153 : 			free(m_ppUnk);

  00049	48 8b cb	 mov	 rcx, rbx
  0004c	e8 00 00 00 00	 call	 free
$LN9@IConnectio:

; 6361 : 	}
; 6362 : }

  00051	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QEAA@XZ ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??1OposVariant@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1OposVariant@@QEAA@XZ PROC				; OposVariant::~OposVariant, COMDAT

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	80 79 18 00	 cmp	 BYTE PTR [rcx+24], 0
  00008	74 0a		 je	 SHORT $LN2@OposVarian

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  0000a	c6 41 18 00	 mov	 BYTE PTR [rcx+24], 0
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VariantClear
$LN2@OposVarian:

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
??1OposVariant@@QEAA@XZ ENDP				; OposVariant::~OposVariant
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??0OposVariant@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0OposVariant@@QEAA@XZ PROC				; OposVariant::OposVariant, COMDAT

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00000	33 c0		 xor	 eax, eax
  00002	66 89 01	 mov	 WORD PTR [rcx], ax
  00005	88 41 18	 mov	 BYTE PTR [rcx+24], al
  00008	48 8b c1	 mov	 rax, rcx
  0000b	c3		 ret	 0
??0OposVariant@@QEAA@XZ ENDP				; OposVariant::OposVariant
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??1CComControlBase@ATL@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1CComControlBase@ATL@@UEAA@XZ PROC			; ATL::CComControlBase::~CComControlBase, COMDAT

; 209  : 	{

$LN38:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 210  : 		if (m_hWndCD != NULL)

  00006	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00010	48 85 c9	 test	 rcx, rcx
  00013	74 06		 je	 SHORT $LN2@CComContro

; 211  : 			::DestroyWindow(m_hWndCD);

  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DestroyWindow
$LN2@CComContro:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h

; 183  :         if (p)

  0001b	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0001f	48 85 c9	 test	 rcx, rcx
  00022	74 06		 je	 SHORT $LN9@CComContro

; 184  :             p->Release();

  00024	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00027	ff 50 10	 call	 QWORD PTR [rax+16]
$LN9@CComContro:

; 183  :         if (p)

  0002a	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  0002e	48 85 c9	 test	 rcx, rcx
  00031	74 06		 je	 SHORT $LN14@CComContro

; 184  :             p->Release();

  00033	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00036	ff 50 10	 call	 QWORD PTR [rax+16]
$LN14@CComContro:

; 183  :         if (p)

  00039	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0003d	48 85 c9	 test	 rcx, rcx
  00040	74 06		 je	 SHORT $LN19@CComContro

; 184  :             p->Release();

  00042	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00045	ff 50 10	 call	 QWORD PTR [rax+16]
$LN19@CComContro:

; 183  :         if (p)

  00048	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0004c	48 85 c9	 test	 rcx, rcx
  0004f	74 06		 je	 SHORT $LN24@CComContro

; 184  :             p->Release();

  00051	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00054	ff 50 10	 call	 QWORD PTR [rax+16]
$LN24@CComContro:

; 183  :         if (p)

  00057	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0005b	48 85 c9	 test	 rcx, rcx
  0005e	74 06		 je	 SHORT $LN29@CComContro

; 184  :             p->Release();

  00060	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00063	ff 50 10	 call	 QWORD PTR [rax+16]
$LN29@CComContro:

; 183  :         if (p)

  00066	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0006a	48 85 c9	 test	 rcx, rcx
  0006d	74 06		 je	 SHORT $LN34@CComContro

; 184  :             p->Release();

  0006f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00072	ff 50 10	 call	 QWORD PTR [rax+16]
$LN34@CComContro:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h

; 213  : 	}

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
??1CComControlBase@ATL@@UEAA@XZ ENDP			; ATL::CComControlBase::~CComControlBase
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ PROC	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>, COMDAT

; 3227 : 	{

$LN10:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h

; 250  : 		if (pThunk)

  00004	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00008	48 85 c9	 test	 rcx, rcx
  0000b	74 05		 je	 SHORT $LN6@CWindowImp

; 251  : 		{
; 252  : #ifdef USE_ATL_THUNK2
; 253  : 			AtlThunk_FreeData(pThunk);

  0000d	e8 00 00 00 00	 call	 AtlThunk_FreeData
$LN6@CWindowImp:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h

; 3235 : 	}

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UEAA@XZ ENDP	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z
_TEXT	SEGMENT
this$ = 48
pUnk$ = 56
?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z PROC ; ATL::CComDynamicUnkArray::Add, COMDAT

; 6223 : {

$LN28:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 6224 : 	IUnknown** pp = NULL;
; 6225 : 	if (m_nSize == 0)

  0000f	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  00013	48 8b f2	 mov	 rsi, rdx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	75 2d		 jne	 SHORT $LN23@Add

; 6226 : 	{
; 6227 : 		// Create array with _DEFAULT_VECTORLENGTH number of items.
; 6228 : 		ATLTRY(pp = (IUnknown**)calloc(sizeof(IUnknown*),_DEFAULT_VECTORLENGTH));

  0001b	bf 04 00 00 00	 mov	 edi, 4
  00020	8b d7		 mov	 edx, edi
  00022	8d 4f 04	 lea	 ecx, QWORD PTR [rdi+4]
  00025	e8 00 00 00 00	 call	 calloc
  0002a	4c 8b c8	 mov	 r9, rax

; 6229 : 		if (pp == NULL)

  0002d	48 85 c0	 test	 rax, rax
  00030	0f 84 a3 00 00
	00		 je	 $LN25@Add

; 6230 : 			return 0;
; 6231 : 		memset(pp, 0, sizeof(IUnknown*)*_DEFAULT_VECTORLENGTH);
; 6232 : 		m_ppUnk = pp;

  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	48 89 03	 mov	 QWORD PTR [rbx], rax
  0003c	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 6233 : 		m_nSize = _DEFAULT_VECTORLENGTH;

  0003f	89 7b 08	 mov	 DWORD PTR [rbx+8], edi
  00042	0f 11 40 10	 movups	 XMMWORD PTR [rax+16], xmm0
  00046	eb 06		 jmp	 SHORT $LN5@Add
$LN23@Add:
  00048	8b 79 08	 mov	 edi, DWORD PTR [rcx+8]
  0004b	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
$LN5@Add:

; 6192 : 		return &m_ppUnk[m_nSize];

  0004e	48 63 c7	 movsxd	 rax, edi

; 6234 : 	}
; 6235 : 	// Walk array and use empty slots if any.
; 6236 : 	DWORD dwCookie = 1;

  00051	ba 01 00 00 00	 mov	 edx, 1

; 6237 : 	for (pp = begin(); pp < end(); pp++)

  00056	49 8b c9	 mov	 rcx, r9

; 6192 : 		return &m_ppUnk[m_nSize];

  00059	4d 8d 04 c1	 lea	 r8, QWORD PTR [r9+rax*8]

; 6237 : 	for (pp = begin(); pp < end(); pp++)

  0005d	4d 3b c8	 cmp	 r9, r8
  00060	73 14		 jae	 SHORT $LN3@Add
$LL4@Add:

; 6238 : 	{
; 6239 : 		if (*pp == NULL)

  00062	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  00066	74 6a		 je	 SHORT $LN20@Add

; 6243 : 		}
; 6244 : 		dwCookie++;

  00068	ff c2		 inc	 edx
  0006a	48 83 c1 08	 add	 rcx, 8
  0006e	49 3b c8	 cmp	 rcx, r8
  00071	72 ef		 jb	 SHORT $LL4@Add

; 6238 : 	{
; 6239 : 		if (*pp == NULL)

  00073	8b 7b 08	 mov	 edi, DWORD PTR [rbx+8]
$LN3@Add:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h

; 121  : 	__int64 i64Result=static_cast<__int64>(iLeft) * static_cast<__int64>(iRight);

  00076	48 63 ff	 movsxd	 rdi, edi

; 122  : 	if(i64Result>INT_MAX || i64Result < INT_MIN)

  00079	b8 00 00 00 80	 mov	 eax, -2147483648	; ffffffff80000000H
  0007e	48 03 ff	 add	 rdi, rdi
  00081	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00086	48 03 c7	 add	 rax, rdi
  00089	48 3b c1	 cmp	 rax, rcx
  0008c	77 4b		 ja	 SHORT $LN25@Add
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h

; 6255 : 	pp = (IUnknown**)_recalloc(m_ppUnk, sizeof(IUnknown*),nAlloc);

  0008e	4c 63 c7	 movsxd	 r8, edi
  00091	ba 08 00 00 00	 mov	 edx, 8
  00096	49 8b c9	 mov	 rcx, r9
  00099	e8 00 00 00 00	 call	 _recalloc

; 6256 : 	if (pp == NULL)

  0009e	48 85 c0	 test	 rax, rax
  000a1	74 36		 je	 SHORT $LN25@Add

; 6258 : 	m_ppUnk = pp;
; 6259 : 	memset(&m_ppUnk[m_nSize], 0, sizeof(IUnknown*)*m_nSize);

  000a3	48 63 4b 08	 movsxd	 rcx, DWORD PTR [rbx+8]
  000a7	33 d2		 xor	 edx, edx
  000a9	48 89 03	 mov	 QWORD PTR [rbx], rax
  000ac	4c 8d 04 cd 00
	00 00 00	 lea	 r8, QWORD PTR [rcx*8]
  000b4	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  000b8	e8 00 00 00 00	 call	 memset

; 6260 : 	m_ppUnk[m_nSize] = pUnk;

  000bd	48 63 4b 08	 movsxd	 rcx, DWORD PTR [rbx+8]
  000c1	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000c4	48 89 34 c8	 mov	 QWORD PTR [rax+rcx*8], rsi

; 6261 : 	dwCookie = m_nSize+1;

  000c8	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  000cb	ff c0		 inc	 eax

; 6262 : 	m_nSize = nAlloc;

  000cd	89 7b 08	 mov	 DWORD PTR [rbx+8], edi

; 6263 : 	return dwCookie; // cookie minus one is index into array

  000d0	eb 09		 jmp	 SHORT $LN1@Add
$LN20@Add:

; 6240 : 		{
; 6241 : 			*pp = pUnk;

  000d2	48 89 31	 mov	 QWORD PTR [rcx], rsi

; 6242 : 			return dwCookie; // cookie minus one is index into array

  000d5	8b c2		 mov	 eax, edx
  000d7	eb 02		 jmp	 SHORT $LN1@Add
$LN25@Add:

; 6257 : 		return 0;

  000d9	33 c0		 xor	 eax, eax
$LN1@Add:

; 6264 : }

  000db	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e9	5f		 pop	 rdi
  000ea	c3		 ret	 0
?Add@CComDynamicUnkArray@ATL@@QEAAKPEAUIUnknown@@@Z ENDP ; ATL::CComDynamicUnkArray::Add
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z PROC ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
$LN25:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 56		 push	 r14
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	8b ea		 mov	 ebp, edx
  0001b	48 8b d9	 mov	 rbx, rcx
  0001e	f6 c2 02	 test	 dl, 2
  00021	74 47		 je	 SHORT $LN2@vector
  00023	48 8d 71 f8	 lea	 rsi, QWORD PTR [rcx-8]
  00027	4c 8b 36	 mov	 r14, QWORD PTR [rsi]
  0002a	49 8b fe	 mov	 rdi, r14
  0002d	48 c1 e7 04	 shl	 rdi, 4
  00031	48 03 f9	 add	 rdi, rcx
  00034	4d 85 f6	 test	 r14, r14
  00037	74 13		 je	 SHORT $LN19@vector
$LL7@vector:
  00039	48 8d 7f f0	 lea	 rdi, QWORD PTR [rdi-16]

; 1674 :     ::SysFreeString(m_str);

  0003d	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysFreeString
  00046	49 83 ee 01	 sub	 r14, 1
  0004a	75 ed		 jne	 SHORT $LL7@vector
$LN19@vector:
  0004c	40 f6 c5 01	 test	 bpl, 1
  00050	74 13		 je	 SHORT $LN3@vector
  00052	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  00055	48 8b ce	 mov	 rcx, rsi
  00058	48 c1 e2 04	 shl	 rdx, 4
  0005c	48 83 c2 08	 add	 rdx, 8
  00060	e8 00 00 00 00	 call	 ??_V@YAXPEAX_K@Z	; operator delete[]
$LN3@vector:
  00065	48 8b c6	 mov	 rax, rsi
  00068	eb 1f		 jmp	 SHORT $LN1@vector
$LN2@vector:
  0006a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysFreeString
  00073	40 f6 c5 01	 test	 bpl, 1
  00077	74 0d		 je	 SHORT $LN4@vector
  00079	ba 10 00 00 00	 mov	 edx, 16
  0007e	48 8b cb	 mov	 rcx, rbx
  00081	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN4@vector:
  00086	48 8b c3	 mov	 rax, rbx
$LN1@vector:
  00089	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00093	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00098	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	41 5e		 pop	 r14
  000a3	c3		 ret	 0
??_Estringdispid@CComTypeInfoHolder@ATL@@QEAAPEAXI@Z ENDP ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT

; 1674 :     ::SysFreeString(m_str);

  00000	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_SysFreeString
??1stringdispid@CComTypeInfoHolder@ATL@@QEAA@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??__F_AtlWinModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlWinModule'', COMDAT
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2957 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

  00004	48 8b 15 08 00
	00 00		 mov	 rdx, QWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+8
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  00012	e8 00 00 00 00	 call	 ?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

  00017	48 8b 0d 38 00
	00 00		 mov	 rcx, QWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+56
  0001e	48 85 c9	 test	 rcx, rcx
  00021	74 0d		 je	 SHORT $LN15@dynamic

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

  00023	e8 00 00 00 00	 call	 free

; 221  : 			m_aT = NULL;

  00028	48 83 25 38 00
	00 00 00	 and	 QWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+56, 0
$LN15@dynamic:

; 222  : 		}
; 223  : 		m_nSize = 0;

  00030	83 25 40 00 00
	00 00		 and	 DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+64, 0

; 224  : 		m_nAllocSize = 0;

  00037	83 25 44 00 00
	00 00		 and	 DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+68, 0
  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
??__F_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlWinModule''
text$yd	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlWinModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlWinModule'', COMDAT

; 2972 : __declspec(selectany) CAtlWinModule _AtlWinModule;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  0000b	e8 00 00 00 00	 call	 ??0CAtlWinModule@ATL@@QEAA@XZ ; ATL::CAtlWinModule::CAtlWinModule
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F_AtlWinModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlWinModule''
  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 atexit
??__E_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlWinModule''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlWinModule@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0CAtlWinModule@ATL@@QEAA@XZ PROC			; ATL::CAtlWinModule::CAtlWinModule, COMDAT

; 2937 : 	CAtlWinModule()

$LN24:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00009	33 c0		 xor	 eax, eax
  0000b	48 83 c1 08	 add	 rcx, 8
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00012	45 33 c0	 xor	 r8d, r8d
  00015	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00017	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  0001a	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
  0001e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

  00022	48 21 43 38	 and	 QWORD PTR [rbx+56], rax
  00026	21 43 40	 and	 DWORD PTR [rbx+64], eax
  00029	21 43 44	 and	 DWORD PTR [rbx+68], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 8404 : 	pWinModule->m_pCreateWndList = NULL;

  0002c	48 21 43 30	 and	 QWORD PTR [rbx+48], rax

; 2938 : 	{
; 2939 : 		cbSize = sizeof(_ATL_WIN_MODULE);

  00030	c7 03 48 00 00
	00		 mov	 DWORD PTR [rbx], 72	; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionEx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 145  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

  0003c	85 c0		 test	 eax, eax
  0003e	75 22		 jne	 SHORT $LN2@CAtlWinMod

; 146  : 		{
; 147  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h

; 29051: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00046	0f b7 c8	 movzx	 ecx, ax
  00049	81 c9 00 00 07
	80		 or	 ecx, -2147024896	; ffffffff80070000H
  0004f	85 c0		 test	 eax, eax
  00051	0f 4e c8	 cmovle	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2941 : 		if (FAILED(hr))

  00054	85 c9		 test	 ecx, ecx
  00056	79 0a		 jns	 SHORT $LN2@CAtlWinMod

; 2942 : 		{
; 2943 : 			ATLASSERT(0);
; 2944 : 			CAtlBaseModule::m_bInitFailed = true;

  00058	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2945 : 			cbSize = 0;

  0005f	83 23 00	 and	 DWORD PTR [rbx], 0
$LN2@CAtlWinMod:

; 2946 : 			return;
; 2947 : 		}
; 2948 : 	}

  00062	48 8b c3	 mov	 rax, rbx
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
??0CAtlWinModule@ATL@@QEAA@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__F_AtlComModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlComModule'', COMDAT

; 2608 : 		Term();

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  00007	e9 00 00 00 00	 jmp	 ?Term@CAtlComModule@ATL@@QEAAXXZ ; ATL::CAtlComModule::Term
??__F_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlComModule''
text$yd	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlComModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlComModule'', COMDAT

; 2716 : __declspec(selectany) CAtlComModule _AtlComModule;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  0000b	e8 00 00 00 00	 call	 ??0CAtlComModule@ATL@@QEAA@XZ ; ATL::CAtlComModule::CAtlComModule
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F_AtlComModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlComModule''
  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 atexit
??__E_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlComModule''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlComModule@ATL@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?Term@CAtlComModule@ATL@@QEAAXXZ PROC			; ATL::CAtlComModule::Term, COMDAT

; 2613 : 	{

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2614 : 		if (cbSize == 0)

  0000f	83 39 00	 cmp	 DWORD PTR [rcx], 0
  00012	48 8b d9	 mov	 rbx, rcx
  00015	74 48		 je	 SHORT $LN1@Term

; 2615 : 			return;
; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00017	48 8b 79 10	 mov	 rdi, QWORD PTR [rcx+16]
  0001b	48 3b 79 18	 cmp	 rdi, QWORD PTR [rcx+24]
  0001f	73 31		 jae	 SHORT $LN3@Term
$LL4@Term:

; 2618 : 		{
; 2619 : 			if (*ppEntry != NULL)

  00021	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00024	48 85 c0	 test	 rax, rax
  00027	74 1f		 je	 SHORT $LN2@Term

; 2620 : 			{
; 2621 : 				_ATL_OBJMAP_CACHE* pCache = (**ppEntry).pCache;

  00029	48 8b 70 20	 mov	 rsi, QWORD PTR [rax+32]

; 2622 : 
; 2623 : 				if (pCache->pCF != NULL)

  0002d	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00030	48 85 c9	 test	 rcx, rcx
  00033	74 13		 je	 SHORT $LN2@Term

; 2624 : 				{
; 2625 : 					// Decode factory pointer if it's not null
; 2626 : 					IUnknown *factory = reinterpret_cast<IUnknown*>(::DecodePointer(pCache->pCF));

  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DecodePointer

; 2627 : 					_Analysis_assume_(factory != nullptr);
; 2628 : 					factory->Release();

  0003b	48 8b c8	 mov	 rcx, rax
  0003e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00041	ff 52 10	 call	 QWORD PTR [rdx+16]

; 2629 : 					pCache->pCF = NULL;

  00044	48 83 26 00	 and	 QWORD PTR [rsi], 0
$LN2@Term:

; 2615 : 			return;
; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00048	48 83 c7 08	 add	 rdi, 8
  0004c	48 3b 7b 18	 cmp	 rdi, QWORD PTR [rbx+24]
  00050	72 cf		 jb	 SHORT $LL4@Term
$LN3@Term:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  00052	48 8d 4b 20	 lea	 rcx, QWORD PTR [rbx+32]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteCriticalSection
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2637 : 		cbSize = 0;

  0005c	83 23 00	 and	 DWORD PTR [rbx], 0
$LN1@Term:

; 2638 : 	}

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
?Term@CAtlComModule@ATL@@QEAAXXZ ENDP			; ATL::CAtlComModule::Term
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlComModule@ATL@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0CAtlComModule@ATL@@QEAA@XZ PROC			; ATL::CAtlComModule::CAtlComModule, COMDAT

; 2586 : 	CAtlComModule() throw()

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00009	33 c0		 xor	 eax, eax
  0000b	48 83 c1 20	 add	 rcx, 32			; 00000020H
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00012	45 33 c0	 xor	 r8d, r8d
  00015	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  00017	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  0001a	0f 11 41 10	 movups	 XMMWORD PTR [rcx+16], xmm0
  0001e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2588 : 		cbSize = 0;

  00022	21 03		 and	 DWORD PTR [rbx], eax

; 2589 : 
; 2590 : 		m_hInstTypeLib = reinterpret_cast<HINSTANCE>(&__ImageBase);

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  0002b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 2591 : 
; 2592 : 		m_ppAutoObjMapFirst = &__pobjMapEntryFirst + 1;

  0002f	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:__pobjMapEntryFirst+8
  00036	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 2593 : 		m_ppAutoObjMapLast = &__pobjMapEntryLast;

  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__pobjMapEntryLast
  00041	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionEx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 145  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

  0004b	85 c0		 test	 eax, eax
  0004d	75 21		 jne	 SHORT $LN2@CAtlComMod

; 146  : 		{
; 147  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h

; 29051: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00055	0f b7 c8	 movzx	 ecx, ax
  00058	81 c9 00 00 07
	80		 or	 ecx, -2147024896	; ffffffff80070000H
  0005e	85 c0		 test	 eax, eax
  00060	0f 4e c8	 cmovle	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 2595 : 		if (FAILED(m_csObjMap.Init()))

  00063	85 c9		 test	 ecx, ecx
  00065	79 09		 jns	 SHORT $LN2@CAtlComMod

; 2596 : 		{
; 2597 : 			ATLTRACE(atlTraceCOM, 0, _T("ERROR : Unable to initialize critical section in CAtlComModule\n"));
; 2598 : 			ATLASSERT(0);
; 2599 : 			CAtlBaseModule::m_bInitFailed = true;

  00067	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2600 : 			return;

  0006e	eb 06		 jmp	 SHORT $LN1@CAtlComMod
$LN2@CAtlComMod:

; 2601 : 		}
; 2602 : 		// Set cbSize on success.
; 2603 : 		cbSize = sizeof(_ATL_COM_MODULE);

  00070	c7 03 48 00 00
	00		 mov	 DWORD PTR [rbx], 72	; 00000048H
$LN1@CAtlComMod:

; 2604 : 	}

  00076	48 8b c3	 mov	 rax, rbx
  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
??0CAtlComModule@ATL@@QEAA@XZ ENDP			; ATL::CAtlComModule::CAtlComModule
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z
_TEXT	SEGMENT
pWinModule$ = 48
hInst$ = 56
?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z PROC ; ATL::AtlWinModuleTerm, COMDAT

; 7652 : {

$LN35:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b ea	 mov	 rbp, rdx
  00017	48 8b d9	 mov	 rbx, rcx

; 7653 : 	if (pWinModule == NULL)

  0001a	48 85 c9	 test	 rcx, rcx
  0001d	74 67		 je	 SHORT $LN31@AtlWinModu

; 7654 : 		return E_INVALIDARG;
; 7655 : 	if (pWinModule->cbSize == 0)

  0001f	83 39 00	 cmp	 DWORD PTR [rcx], 0
  00022	75 04		 jne	 SHORT $LN6@AtlWinModu
$LN33@AtlWinModu:

; 7666 : }

  00024	33 c0		 xor	 eax, eax
  00026	eb 63		 jmp	 SHORT $LN1@AtlWinModu
$LN6@AtlWinModu:

; 7656 : 		return S_OK;
; 7657 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  00028	83 39 48	 cmp	 DWORD PTR [rcx], 72	; 00000048H
  0002b	75 59		 jne	 SHORT $LN31@AtlWinModu

; 7659 : 
; 7660 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

  0002d	33 ff		 xor	 edi, edi
  0002f	39 79 40	 cmp	 DWORD PTR [rcx+64], edi
  00032	7e 28		 jle	 SHORT $LN3@AtlWinModu

; 7661 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00034	33 f6		 xor	 esi, esi
$LL4@AtlWinModu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

  00036	48 85 f6	 test	 rsi, rsi
  00039	78 65		 js	 SHORT $LN24@AtlWinModu
  0003b	3b 7b 40	 cmp	 edi, DWORD PTR [rbx+64]
  0003e	7d 60		 jge	 SHORT $LN24@AtlWinModu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 7661 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00040	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00044	48 8b d5	 mov	 rdx, rbp
  00047	0f b7 0c 30	 movzx	 ecx, WORD PTR [rax+rsi]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnregisterClassW
  00051	ff c7		 inc	 edi
  00053	48 83 c6 02	 add	 rsi, 2
  00057	3b 7b 40	 cmp	 edi, DWORD PTR [rbx+64]
  0005a	7c da		 jl	 SHORT $LL4@AtlWinModu
$LN3@AtlWinModu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

  0005c	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00060	48 85 c9	 test	 rcx, rcx
  00063	74 0a		 je	 SHORT $LN18@AtlWinModu

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

  00065	e8 00 00 00 00	 call	 free

; 221  : 			m_aT = NULL;

  0006a	48 83 63 38 00	 and	 QWORD PTR [rbx+56], 0
$LN18@AtlWinModu:

; 222  : 		}
; 223  : 		m_nSize = 0;

  0006f	83 63 40 00	 and	 DWORD PTR [rbx+64], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  00073	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 224  : 		m_nAllocSize = 0;

  00077	83 63 44 00	 and	 DWORD PTR [rbx+68], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h

; 155  : 		DeleteCriticalSection(&m_sec);

  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteCriticalSection
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 7664 : 	pWinModule->cbSize = 0;

  00081	83 23 00	 and	 DWORD PTR [rbx], 0

; 7665 : 	return S_OK;

  00084	eb 9e		 jmp	 SHORT $LN33@AtlWinModu
$LN31@AtlWinModu:

; 7658 : 		return E_INVALIDARG;

  00086	b8 57 00 07 80	 mov	 eax, -2147024809	; ffffffff80070057H
$LN1@AtlWinModu:

; 7666 : }

  0008b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00090	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
$LN24@AtlWinModu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h

; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	b9 8c 00 00 c0	 mov	 ecx, -1073741684	; c000008cH
  000aa	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
  000af	cc		 int	 3
$LN32@AtlWinModu:
?AtlWinModuleTerm@ATL@@YAJPEAU_ATL_WIN_MODULE70@1@PEAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\guiddef.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z
_TEXT	SEGMENT
pThis$ = 48
pEntries$ = 56
iid$ = 64
ppvObject$ = 72
?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z PROC ; ATL::AtlInternalQueryInterface, COMDAT

; 8265 : {

$LN36:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi
  0000f	4c 89 70 20	 mov	 QWORD PTR [rax+32], r14
  00013	41 57		 push	 r15
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	4d 8b f1	 mov	 r14, r9
  0001c	49 8b d8	 mov	 rbx, r8
  0001f	4c 8b f9	 mov	 r15, rcx

; 8266 : 	ATLASSERT(pThis != NULL);
; 8267 : 	ATLASSERT(pEntries!= NULL);
; 8268 : 
; 8269 : 	if(pThis == NULL || pEntries == NULL)

  00022	48 85 c9	 test	 rcx, rcx
  00025	0f 84 bd 00 00
	00		 je	 $LN6@AtlInterna
  0002b	48 85 d2	 test	 rdx, rdx
  0002e	0f 84 b4 00 00
	00		 je	 $LN6@AtlInterna

; 8271 : 
; 8272 : 	// First entry in the com map should be a simple map entry
; 8273 : 	ATLASSERT(pEntries->pFunc == _ATL_SIMPLEMAPENTRY);
; 8274 : 
; 8275 : 	if (ppvObject == NULL)

  00034	4d 85 c9	 test	 r9, r9
  00037	75 0a		 jne	 SHORT $LN7@AtlInterna

; 8276 : 		return E_POINTER;

  00039	b8 03 40 00 80	 mov	 eax, -2147467261	; ffffffff80004003H
  0003e	e9 aa 00 00 00	 jmp	 $LN1@AtlInterna
$LN7@AtlInterna:

; 667  :    return (

  00043	41 83 38 00	 cmp	 DWORD PTR [r8], 0
  00047	75 32		 jne	 SHORT $LN8@AtlInterna
  00049	41 83 78 04 00	 cmp	 DWORD PTR [r8+4], 0
  0004e	75 2b		 jne	 SHORT $LN8@AtlInterna
  00050	41 81 78 08 c0
	00 00 00	 cmp	 DWORD PTR [r8+8], 192	; 000000c0H
  00058	75 21		 jne	 SHORT $LN8@AtlInterna
  0005a	41 81 78 0c 00
	00 00 46	 cmp	 DWORD PTR [r8+12], 1174405120 ; 46000000H
  00062	75 17		 jne	 SHORT $LN8@AtlInterna

; 8277 : 
; 8278 : 	if (InlineIsEqualUnknown(iid)) // use first interface
; 8279 : 	{
; 8280 : 		IUnknown* pUnk = (IUnknown*)((INT_PTR)pThis+pEntries->dw);

  00064	48 8b 5a 08	 mov	 rbx, QWORD PTR [rdx+8]
$LN34@AtlInterna:

; 8322 : }

  00068	49 03 df	 add	 rbx, r15
  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00071	ff 50 08	 call	 QWORD PTR [rax+8]
  00074	49 89 1e	 mov	 QWORD PTR [r14], rbx
$LN27@AtlInterna:
  00077	33 c0		 xor	 eax, eax
  00079	eb 72		 jmp	 SHORT $LN1@AtlInterna
$LN8@AtlInterna:

; 8289 : 	{
; 8290 : 		if (pEntries->pFunc == NULL)

  0007b	48 8d 7a 10	 lea	 rdi, QWORD PTR [rdx+16]
  0007f	eb 50		 jmp	 SHORT $LN33@AtlInterna
$LL4@AtlInterna:

; 8293 : 			break;
; 8294 : 		}
; 8295 : 
; 8296 : 		BOOL bBlind = (pEntries->piid == NULL);

  00081	48 8b 77 f0	 mov	 rsi, QWORD PTR [rdi-16]

; 8297 : 		if (bBlind || InlineIsEqualGUID(*(pEntries->piid), iid))

  00085	48 85 f6	 test	 rsi, rsi
  00088	74 1e		 je	 SHORT $LN11@AtlInterna
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\guiddef.h

; 152  :    return (

  0008a	8b 03		 mov	 eax, DWORD PTR [rbx]
  0008c	39 06		 cmp	 DWORD PTR [rsi], eax
  0008e	75 3d		 jne	 SHORT $LN2@AtlInterna
  00090	8b 43 04	 mov	 eax, DWORD PTR [rbx+4]
  00093	39 46 04	 cmp	 DWORD PTR [rsi+4], eax
  00096	75 35		 jne	 SHORT $LN2@AtlInterna
  00098	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  0009b	39 46 08	 cmp	 DWORD PTR [rsi+8], eax
  0009e	75 2d		 jne	 SHORT $LN2@AtlInterna
  000a0	8b 43 0c	 mov	 eax, DWORD PTR [rbx+12]
  000a3	39 46 0c	 cmp	 DWORD PTR [rsi+12], eax
  000a6	75 25		 jne	 SHORT $LN2@AtlInterna
$LN11@AtlInterna:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h

; 8299 : 			if (pEntries->pFunc == _ATL_SIMPLEMAPENTRY) //offset

  000a8	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000ab	48 83 f8 01	 cmp	 rax, 1
  000af	74 31		 je	 SHORT $LN26@AtlInterna

; 8306 : 			}
; 8307 : 
; 8308 : 			// Actual function call
; 8309 : 
; 8310 : 			hRes = pEntries->pFunc(pThis,

  000b1	4c 8b 4f f8	 mov	 r9, QWORD PTR [rdi-8]
  000b5	4d 8b c6	 mov	 r8, r14
  000b8	48 8b d3	 mov	 rdx, rbx
  000bb	49 8b cf	 mov	 rcx, r15
  000be	ff d0		 call	 rax

; 8311 : 				iid, ppvObject, pEntries->dw);
; 8312 : 			if (hRes == S_OK)

  000c0	85 c0		 test	 eax, eax
  000c2	74 b3		 je	 SHORT $LN27@AtlInterna

; 8313 : 				return S_OK;
; 8314 : 			if (!bBlind && FAILED(hRes))

  000c4	48 85 f6	 test	 rsi, rsi
  000c7	74 04		 je	 SHORT $LN2@AtlInterna
  000c9	85 c0		 test	 eax, eax
  000cb	78 0f		 js	 SHORT $LN28@AtlInterna
$LN2@AtlInterna:

; 8281 : 		pUnk->AddRef();
; 8282 : 		*ppvObject = pUnk;
; 8283 : 		return S_OK;
; 8284 : 	}
; 8285 : 
; 8286 : 	HRESULT hRes;
; 8287 : 
; 8288 : 	for (;; pEntries++)

  000cd	48 83 c7 18	 add	 rdi, 24
$LN33@AtlInterna:

; 8289 : 	{
; 8290 : 		if (pEntries->pFunc == NULL)

  000d1	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  000d5	75 aa		 jne	 SHORT $LL4@AtlInterna

; 8291 : 		{
; 8292 : 			hRes = E_NOINTERFACE;

  000d7	b8 02 40 00 80	 mov	 eax, -2147467262	; ffffffff80004002H
$LN28@AtlInterna:

; 8315 : 				break;
; 8316 : 		}
; 8317 : 	}
; 8318 : 
; 8319 : 	*ppvObject = NULL;

  000dc	49 83 26 00	 and	 QWORD PTR [r14], 0

; 8320 : 
; 8321 : 	return hRes;

  000e0	eb 0b		 jmp	 SHORT $LN1@AtlInterna
$LN26@AtlInterna:

; 8300 : 			{
; 8301 : 				ATLASSERT(!bBlind);
; 8302 : 				IUnknown* pUnk = (IUnknown*)((INT_PTR)pThis+pEntries->dw);

  000e2	48 8b 5f f8	 mov	 rbx, QWORD PTR [rdi-8]

; 8303 : 				pUnk->AddRef();
; 8304 : 				*ppvObject = pUnk;
; 8305 : 				return S_OK;

  000e6	eb 80		 jmp	 SHORT $LN34@AtlInterna
$LN6@AtlInterna:

; 8270 : 		return E_INVALIDARG;

  000e8	b8 57 00 07 80	 mov	 eax, -2147024809	; ffffffff80070057H
$LN1@AtlInterna:

; 8322 : }

  000ed	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f2	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000f7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000fc	4c 8b 74 24 48	 mov	 r14, QWORD PTR [rsp+72]
  00101	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00105	41 5f		 pop	 r15
  00107	c3		 ret	 0
?AtlInternalQueryInterface@ATL@@YAJPEAXPEBU_ATL_INTMAP_ENTRY@1@AEBU_GUID@@PEAPEAX@Z ENDP ; ATL::AtlInternalQueryInterface
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
lpCriticalSection$ = 8
dwSpinCount$ = 16
Flags$ = 24
?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_InitializeCriticalSectionEx
?_AtlInitializeCriticalSectionEx@ATL@@YAHPEAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
dwExceptionCode$ = 8
dwExceptionFlags$ = 16
?_AtlRaiseException@ATL@@YAXKK@Z PROC			; ATL::_AtlRaiseException, COMDAT

; 31   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_RaiseException
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YAXJ@Z
_TEXT	SEGMENT
hr$ = 48
?AtlThrowImpl@ATL@@YAXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 95   : {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 96   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 97   : 	ATLASSERT( false );
; 98   : 	DWORD dwExceptionCode;
; 99   : 	switch(hr)
; 100  : 	{
; 101  : 	case E_OUTOFMEMORY:
; 102  : 		dwExceptionCode = STATUS_NO_MEMORY;
; 103  : 		break;
; 104  : 	default:
; 105  : 		dwExceptionCode = EXCEPTION_ILLEGAL_INSTRUCTION;
; 106  : 	}
; 107  : 	_AtlRaiseException((DWORD)dwExceptionCode);

  00004	81 f9 0e 00 07
	80		 cmp	 ecx, -2147024882	; ffffffff8007000eH
  0000a	ba 17 00 00 c0	 mov	 edx, -1073741801	; c0000017H
  0000f	b8 1d 00 00 c0	 mov	 eax, -1073741795	; c000001dH
  00014	0f 44 c2	 cmove	 eax, edx
  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
  00023	cc		 int	 3
$LN7@AtlThrowIm:
?AtlThrowImpl@ATL@@YAXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_I@YAXPEAX_K1P6AX0@Z@Z
_TEXT	SEGMENT
__t$ = 48
__s$ = 56
__n$ = 64
__f$ = 72
??_I@YAXPEAX_K1P6AX0@Z@Z PROC				; `vector destructor iterator', COMDAT
$LN12:
  00000	4d 85 c0	 test	 r8, r8
  00003	74 49		 je	 SHORT $LN10@vector
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000f	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00014	57		 push	 rdi
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	48 8b fa	 mov	 rdi, rdx
  0001c	49 8b e9	 mov	 rbp, r9
  0001f	49 0f af f8	 imul	 rdi, r8
  00023	49 8b d8	 mov	 rbx, r8
  00026	48 8b f2	 mov	 rsi, rdx
  00029	48 03 f9	 add	 rdi, rcx
$LL2@vector:
  0002c	48 2b fe	 sub	 rdi, rsi
  0002f	48 8b cf	 mov	 rcx, rdi
  00032	ff d5		 call	 rbp
  00034	48 83 eb 01	 sub	 rbx, 1
  00038	75 f2		 jne	 SHORT $LL2@vector
  0003a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003f	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00044	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
$LN10@vector:
  0004e	c3		 ret	 0
??_I@YAXPEAX_K1P6AX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
__t$ = 48
__s$ = 56
__n$ = 64
__f$ = 72
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN12:
  00000	4d 85 c0	 test	 r8, r8
  00003	74 42		 je	 SHORT $LN10@vector
  00005	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  0000a	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000f	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00014	57		 push	 rdi
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	49 8b f1	 mov	 rsi, r9
  0001c	49 8b d8	 mov	 rbx, r8
  0001f	48 8b ea	 mov	 rbp, rdx
  00022	48 8b f9	 mov	 rdi, rcx
$LL2@vector:
  00025	48 8b cf	 mov	 rcx, rdi
  00028	ff d6		 call	 rsi
  0002a	48 03 fd	 add	 rdi, rbp
  0002d	48 83 eb 01	 sub	 rbx, 1
  00031	75 f2		 jne	 SHORT $LL2@vector
  00033	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00038	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0003d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
$LN10@vector:
  00047	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
