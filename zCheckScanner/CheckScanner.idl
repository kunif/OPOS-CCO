/****************************************************************************
**
** CheckScanner.idl -- IDL source for CheckScanner.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (CheckScanner.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.7 ==========
//

    [
        object,
        uuid(CCB90231-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCheckScanner 1.7 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCheckScanner_1_7 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SOData")] HRESULT SOData( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.7
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(10), helpstring("property AutoDisable")]
        HRESULT AutoDisable( [out, retval] VARIANT_BOOL* pAutoDisable );
        [propput, id(10), helpstring("property AutoDisable")]
        HRESULT AutoDisable( [in] VARIANT_BOOL AutoDisable );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(15), helpstring("property DataCount")]
        HRESULT DataCount( [out, retval] long* pDataCount );
        [propget, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [out, retval] VARIANT_BOOL* pDataEventEnabled );
        [propput, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [in] VARIANT_BOOL DataEventEnabled );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(51), helpstring("property CapAutoGenerateFileID")]
        HRESULT CapAutoGenerateFileID( [out, retval] VARIANT_BOOL* pCapAutoGenerateFileID );
        [propget, id(52), helpstring("property CapAutoGenerateImageTagData")]
        HRESULT CapAutoGenerateImageTagData( [out, retval] VARIANT_BOOL* pCapAutoGenerateImageTagData );
        [propget, id(53), helpstring("property CapAutoSize")]
        HRESULT CapAutoSize( [out, retval] VARIANT_BOOL* pCapAutoSize );
        [propget, id(54), helpstring("property CapColor")]
        HRESULT CapColor( [out, retval] long* pCapColor );
        [propget, id(55), helpstring("property CapConcurrentMICR")]
        HRESULT CapConcurrentMICR( [out, retval] VARIANT_BOOL* pCapConcurrentMICR );
        [propget, id(56), helpstring("property CapDefineCropArea")]
        HRESULT CapDefineCropArea( [out, retval] VARIANT_BOOL* pCapDefineCropArea );
        [propget, id(57), helpstring("property CapImageFormat")]
        HRESULT CapImageFormat( [out, retval] long* pCapImageFormat );
        [propget, id(58), helpstring("property CapImageTagData")]
        HRESULT CapImageTagData( [out, retval] VARIANT_BOOL* pCapImageTagData );
        [propget, id(59), helpstring("property CapMICRDevice")]
        HRESULT CapMICRDevice( [out, retval] VARIANT_BOOL* pCapMICRDevice );
        [propget, id(60), helpstring("property CapStoreImageFiles")]
        HRESULT CapStoreImageFiles( [out, retval] VARIANT_BOOL* pCapStoreImageFiles );
        [propget, id(61), helpstring("property CapValidationDevice")]
        HRESULT CapValidationDevice( [out, retval] VARIANT_BOOL* pCapValidationDevice );
        [propget, id(62), helpstring("property Color")]
        HRESULT Color( [out, retval] long* pColor );
        [propput, id(62), helpstring("property Color")]
        HRESULT Color( [in] long Color );
        [propget, id(63), helpstring("property ConcurrentMICR")]
        HRESULT ConcurrentMICR( [out, retval] VARIANT_BOOL* pConcurrentMICR );
        [propput, id(63), helpstring("property ConcurrentMICR")]
        HRESULT ConcurrentMICR( [in] VARIANT_BOOL ConcurrentMICR );
        [propget, id(64), helpstring("property CropAreaCount")]
        HRESULT CropAreaCount( [out, retval] long* pCropAreaCount );
        [propget, id(65), helpstring("property DocumentHeight")]
        HRESULT DocumentHeight( [out, retval] long* pDocumentHeight );
        [propput, id(65), helpstring("property DocumentHeight")]
        HRESULT DocumentHeight( [in] long DocumentHeight );
        [propget, id(66), helpstring("property DocumentWidth")]
        HRESULT DocumentWidth( [out, retval] long* pDocumentWidth );
        [propput, id(66), helpstring("property DocumentWidth")]
        HRESULT DocumentWidth( [in] long DocumentWidth );
        [propget, id(67), helpstring("property FileID")]
        HRESULT FileID( [out, retval] BSTR* pFileID );
        [propput, id(67), helpstring("property FileID")]
        HRESULT FileID( [in] BSTR FileID );
        [propget, id(68), helpstring("property FileIndex")]
        HRESULT FileIndex( [out, retval] long* pFileIndex );
        [propput, id(68), helpstring("property FileIndex")]
        HRESULT FileIndex( [in] long FileIndex );
        [propget, id(69), helpstring("property ImageData")]
        HRESULT ImageData( [out, retval] BSTR* pImageData );
        [propget, id(70), helpstring("property ImageFormat")]
        HRESULT ImageFormat( [out, retval] long* pImageFormat );
        [propput, id(70), helpstring("property ImageFormat")]
        HRESULT ImageFormat( [in] long ImageFormat );
        [propget, id(71), helpstring("property ImageMemoryStatus")]
        HRESULT ImageMemoryStatus( [out, retval] long* pImageMemoryStatus );
        [propget, id(72), helpstring("property ImageTagData")]
        HRESULT ImageTagData( [out, retval] BSTR* pImageTagData );
        [propput, id(72), helpstring("property ImageTagData")]
        HRESULT ImageTagData( [in] BSTR ImageTagData );
        [propget, id(73), helpstring("property MapMode")]
        HRESULT MapMode( [out, retval] long* pMapMode );
        [propput, id(73), helpstring("property MapMode")]
        HRESULT MapMode( [in] long MapMode );
        [propget, id(74), helpstring("property MaxCropAreas")]
        HRESULT MaxCropAreas( [out, retval] long* pMaxCropAreas );
        [propget, id(75), helpstring("property Quality")]
        HRESULT Quality( [out, retval] long* pQuality );
        [propput, id(75), helpstring("property Quality")]
        HRESULT Quality( [in] long Quality );
        [propget, id(76), helpstring("property QualityList")]
        HRESULT QualityList( [out, retval] BSTR* pQualityList );
        [propget, id(77), helpstring("property RemainingImagesEstimate")]
        HRESULT RemainingImagesEstimate( [out, retval] long* pRemainingImagesEstimate );
        [id(90), helpstring("method BeginInsertion")]
        HRESULT BeginInsertion( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(91), helpstring("method BeginRemoval")]
        HRESULT BeginRemoval( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(92), helpstring("method ClearImage")]
        HRESULT ClearImage( 
            [in] long By, 
            [out, retval] long* pRC );
        [id(93), helpstring("method DefineCropArea")]
        HRESULT DefineCropArea( 
            [in] long CropAreaID, 
            [in] long X, 
            [in] long Y, 
            [in] long CX, 
            [in] long CY, 
            [out, retval] long* pRC );
        [id(94), helpstring("method EndInsertion")]
        HRESULT EndInsertion( 
            [out, retval] long* pRC );
        [id(95), helpstring("method EndRemoval")]
        HRESULT EndRemoval( 
            [out, retval] long* pRC );
        [id(96), helpstring("method RetrieveImage")]
        HRESULT RetrieveImage( 
            [in] long CropAreaID, 
            [out, retval] long* pRC );
        [id(97), helpstring("method RetrieveMemory")]
        HRESULT RetrieveMemory( 
            [in] long By, 
            [out, retval] long* pRC );
        [id(98), helpstring("method StoreImage")]
        HRESULT StoreImage( 
            [in] long CropAreaID, 
            [out, retval] long* pRC );
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB91231-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCheckScanner 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCheckScanner_1_8 : IOPOSCheckScanner_1_7
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Previous Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB92231-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCheckScanner 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCheckScanner_1_9 : IOPOSCheckScanner_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(78), helpstring("property CapAutoContrast")]
        HRESULT CapAutoContrast( [out, retval] VARIANT_BOOL* pCapAutoContrast );
        [propget, id(79), helpstring("property CapContrast")]
        HRESULT CapContrast( [out, retval] VARIANT_BOOL* pCapContrast );
        [propget, id(80), helpstring("property Contrast")]
        HRESULT Contrast( [out, retval] long* pContrast );
        [propput, id(80), helpstring("property Contrast")]
        HRESULT Contrast( [in] long Contrast );
    };

//
//========== Current Interface: 1.10 ==========
//

    [
        object,
        uuid(CCB93231-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCheckScanner 1.10 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCheckScanner_1_10 : IOPOSCheckScanner_1_9
    {
    // Release 1.10
        [id(48), helpstring("method ClearInputProperties")]
        HRESULT ClearInputProperties( 
            [out, retval] long* pRC );
    // Release 1.11
    // Release 1.12
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSCheckScanner Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB94231-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCheckScanner Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCheckScanner : IOPOSCheckScanner_1_10
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90230-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS CheckScanner Control 1.15.000 [Public, by CRM/MCS]")
]
library OposCheckScanner_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90233-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSCheckScannerEvents Interface")
    ]
    dispinterface _IOPOSCheckScannerEvents
    {
        properties:
        methods:
        [id(1), helpstring("method DataEvent")]
            void DataEvent( [in] long Status );
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90232-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS CheckScanner Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSCheckScanner
    {
        [default] interface IOPOSCheckScanner;
        interface IOPOSCheckScanner_1_10;
        interface IOPOSCheckScanner_1_9;
        interface IOPOSCheckScanner_1_8;
        interface IOPOSCheckScanner_1_7;
        [default, source] dispinterface _IOPOSCheckScannerEvents;
    };
};

// End CheckScanner.idl
