/****************************************************************************
**
** Belt.idl -- IDL source for Belt.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (Belt.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

    [
        object,
        uuid(CCB90321-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSBelt 1.12 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSBelt_1_12 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SODataDummy")] HRESULT SODataDummy( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOErrorDummy")] HRESULT SOErrorDummy( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.12
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(70), helpstring("property AutoStopBackward")]
        HRESULT AutoStopBackward( [out, retval] VARIANT_BOOL* pAutoStopBackward );
        [propput, id(70), helpstring("property AutoStopBackward")]
        HRESULT AutoStopBackward( [in] VARIANT_BOOL AutoStopBackward );
        [propget, id(71), helpstring("property AutoStopBackwardDelayTime")]
        HRESULT AutoStopBackwardDelayTime( [out, retval] long* pAutoStopBackwardDelayTime );
        [propput, id(71), helpstring("property AutoStopBackwardDelayTime")]
        HRESULT AutoStopBackwardDelayTime( [in] long AutoStopBackwardDelayTime );
        [propget, id(72), helpstring("property AutoStopBackwardItemCount")]
        HRESULT AutoStopBackwardItemCount( [out, retval] long* pAutoStopBackwardItemCount );
        [propget, id(73), helpstring("property AutoStopForward")]
        HRESULT AutoStopForward( [out, retval] VARIANT_BOOL* pAutoStopForward );
        [propput, id(73), helpstring("property AutoStopForward")]
        HRESULT AutoStopForward( [in] VARIANT_BOOL AutoStopForward );
        [propget, id(74), helpstring("property AutoStopForwardDelayTime")]
        HRESULT AutoStopForwardDelayTime( [out, retval] long* pAutoStopForwardDelayTime );
        [propput, id(74), helpstring("property AutoStopForwardDelayTime")]
        HRESULT AutoStopForwardDelayTime( [in] long AutoStopForwardDelayTime );
        [propget, id(75), helpstring("property AutoStopForwardItemCount")]
        HRESULT AutoStopForwardItemCount( [out, retval] long* pAutoStopForwardItemCount );
        [propget, id(76), helpstring("property CapAutoStopBackward")]
        HRESULT CapAutoStopBackward( [out, retval] VARIANT_BOOL* pCapAutoStopBackward );
        [propget, id(77), helpstring("property CapAutoStopBackwardItemCount")]
        HRESULT CapAutoStopBackwardItemCount( [out, retval] VARIANT_BOOL* pCapAutoStopBackwardItemCount );
        [propget, id(78), helpstring("property CapAutoStopForward")]
        HRESULT CapAutoStopForward( [out, retval] VARIANT_BOOL* pCapAutoStopForward );
        [propget, id(79), helpstring("property CapAutoStopForwardItemCount")]
        HRESULT CapAutoStopForwardItemCount( [out, retval] VARIANT_BOOL* pCapAutoStopForwardItemCount );
        [propget, id(80), helpstring("property CapLightBarrierBackward")]
        HRESULT CapLightBarrierBackward( [out, retval] VARIANT_BOOL* pCapLightBarrierBackward );
        [propget, id(81), helpstring("property CapLightBarrierForward")]
        HRESULT CapLightBarrierForward( [out, retval] VARIANT_BOOL* pCapLightBarrierForward );
        [propget, id(82), helpstring("property CapMoveBackward")]
        HRESULT CapMoveBackward( [out, retval] VARIANT_BOOL* pCapMoveBackward );
        [propget, id(83), helpstring("property CapSecurityFlapBackward")]
        HRESULT CapSecurityFlapBackward( [out, retval] VARIANT_BOOL* pCapSecurityFlapBackward );
        [propget, id(84), helpstring("property CapSecurityFlapForward")]
        HRESULT CapSecurityFlapForward( [out, retval] VARIANT_BOOL* pCapSecurityFlapForward );
        [propget, id(85), helpstring("property CapSpeedStepsBackward")]
        HRESULT CapSpeedStepsBackward( [out, retval] long* pCapSpeedStepsBackward );
        [propget, id(86), helpstring("property CapSpeedStepsForward")]
        HRESULT CapSpeedStepsForward( [out, retval] long* pCapSpeedStepsForward );
        [propget, id(87), helpstring("property LightBarrierBackwardInterrupted")]
        HRESULT LightBarrierBackwardInterrupted( [out, retval] VARIANT_BOOL* pLightBarrierBackwardInterrupted );
        [propget, id(88), helpstring("property LightBarrierForwardInterrupted")]
        HRESULT LightBarrierForwardInterrupted( [out, retval] VARIANT_BOOL* pLightBarrierForwardInterrupted );
        [propget, id(89), helpstring("property MotionStatus")]
        HRESULT MotionStatus( [out, retval] long* pMotionStatus );
        [propget, id(90), helpstring("property SecurityFlapBackwardOpened")]
        HRESULT SecurityFlapBackwardOpened( [out, retval] VARIANT_BOOL* pSecurityFlapBackwardOpened );
        [propget, id(91), helpstring("property SecurityFlapForwardOpened")]
        HRESULT SecurityFlapForwardOpened( [out, retval] VARIANT_BOOL* pSecurityFlapForwardOpened );
        [id(110), helpstring("method AdjustItemCount")]
        HRESULT AdjustItemCount( 
            [in] long Direction, 
            [in] long Count, 
            [out, retval] long* pRC );
        [id(111), helpstring("method MoveBackward")]
        HRESULT MoveBackward( 
            [in] long Speed, 
            [out, retval] long* pRC );
        [id(112), helpstring("method MoveForward")]
        HRESULT MoveForward( 
            [in] long Speed, 
            [out, retval] long* pRC );
        [id(113), helpstring("method ResetBelt")]
        HRESULT ResetBelt( 
            [out, retval] long* pRC );
        [id(114), helpstring("method ResetItemCount")]
        HRESULT ResetItemCount( 
            [in] long Direction, 
            [out, retval] long* pRC );
        [id(115), helpstring("method StopBelt")]
        HRESULT StopBelt( 
            [out, retval] long* pRC );
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSBelt Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB91321-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSBelt Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSBelt : IOPOSBelt_1_12
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90320-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS Belt Control 1.15.000 [Public, by CRM/MCS]")
]
library OposBelt_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90323-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSBeltEvents Interface")
    ]
    dispinterface _IOPOSBeltEvents
    {
        properties:
        methods:
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90322-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS Belt Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSBelt
    {
        [default] interface IOPOSBelt;
        interface IOPOSBelt_1_12;
        [default, source] dispinterface _IOPOSBeltEvents;
    };
};

// End Belt.idl
