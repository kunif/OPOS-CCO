/****************************************************************************
**
** VideoCapture.idl -- IDL source for VideoCapture.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  2021/12/02 Initial Version from similar sources.                K. Fukuchi
**
*****************************************************************************
**
{{Begin License}}

Copyright 2021 Kunio Fukuchi

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (VideoCapture.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

    [
        object,
        uuid(CCB90451-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSVideoCapture 1.16 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSVideoCapture_1_16 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SODataDummy")] HRESULT SODataDummy( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.16
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(60), helpstring("property AutoExposure")]
        HRESULT AutoExposure( [out, retval] VARIANT_BOOL* pAutoExposure );
        [propput, id(60), helpstring("property AutoExposure")]
        HRESULT AutoExposure( [in] VARIANT_BOOL AutoExposure );
        [propget, id(61), helpstring("property AutoFocus")]
        HRESULT AutoFocus( [out, retval] VARIANT_BOOL* pAutoFocus );
        [propput, id(61), helpstring("property AutoFocus")]
        HRESULT AutoFocus( [in] VARIANT_BOOL AutoFocus );
        [propget, id(62), helpstring("property AutoGain")]
        HRESULT AutoGain( [out, retval] VARIANT_BOOL* pAutoGain );
        [propput, id(62), helpstring("property AutoGain")]
        HRESULT AutoGain( [in] VARIANT_BOOL AutoGain );
        [propget, id(63), helpstring("property AutoWhiteBalance")]
        HRESULT AutoWhiteBalance( [out, retval] VARIANT_BOOL* pAutoWhiteBalance );
        [propput, id(63), helpstring("property AutoWhiteBalance")]
        HRESULT AutoWhiteBalance( [in] VARIANT_BOOL AutoWhiteBalance );
        [propget, id(64), helpstring("property Brightness")]
        HRESULT Brightness( [out, retval] long* pBrightness );
        [propput, id(64), helpstring("property Brightness")]
        HRESULT Brightness( [in] long Brightness );
        [propget, id(65), helpstring("property CapAssociatedHardTotalsDevice")]
        HRESULT CapAssociatedHardTotalsDevice( [out, retval] BSTR* pCapAssociatedHardTotalsDevice );
        [propget, id(66), helpstring("property CapAutoExposure")]
        HRESULT CapAutoExposure( [out, retval] VARIANT_BOOL* pCapAutoExposure );
        [propget, id(67), helpstring("property CapAutoFocus")]
        HRESULT CapAutoFocus( [out, retval] VARIANT_BOOL* pCapAutoFocus );
        [propget, id(68), helpstring("property CapAutoGain")]
        HRESULT CapAutoGain( [out, retval] VARIANT_BOOL* pCapAutoGain );
        [propget, id(69), helpstring("property CapAutoWhiteBalance")]
        HRESULT CapAutoWhiteBalance( [out, retval] VARIANT_BOOL* pCapAutoWhiteBalance );
        [propget, id(70), helpstring("property CapBrightness")]
        HRESULT CapBrightness( [out, retval] VARIANT_BOOL* pCapBrightness );
        [propget, id(71), helpstring("property CapContrast")]
        HRESULT CapContrast( [out, retval] VARIANT_BOOL* pCapContrast );
        [propget, id(72), helpstring("property CapExposure")]
        HRESULT CapExposure( [out, retval] VARIANT_BOOL* pCapExposure );
        [propget, id(73), helpstring("property CapGain")]
        HRESULT CapGain( [out, retval] VARIANT_BOOL* pCapGain );
        [propget, id(74), helpstring("property CapHorizontalFlip")]
        HRESULT CapHorizontalFlip( [out, retval] VARIANT_BOOL* pCapHorizontalFlip );
        [propget, id(75), helpstring("property CapHue")]
        HRESULT CapHue( [out, retval] VARIANT_BOOL* pCapHue );
        [propget, id(76), helpstring("property CapPhoto")]
        HRESULT CapPhoto( [out, retval] VARIANT_BOOL* pCapPhoto );
        [propget, id(77), helpstring("property CapPhotoColorSpace")]
        HRESULT CapPhotoColorSpace( [out, retval] VARIANT_BOOL* pCapPhotoColorSpace );
        [propget, id(78), helpstring("property CapPhotoFrameRate")]
        HRESULT CapPhotoFrameRate( [out, retval] VARIANT_BOOL* pCapPhotoFrameRate );
        [propget, id(79), helpstring("property CapPhotoResolution")]
        HRESULT CapPhotoResolution( [out, retval] VARIANT_BOOL* pCapPhotoResolution );
        [propget, id(80), helpstring("property CapPhotoType")]
        HRESULT CapPhotoType( [out, retval] VARIANT_BOOL* pCapPhotoType );
        [propget, id(81), helpstring("property CapSaturation")]
        HRESULT CapSaturation( [out, retval] VARIANT_BOOL* pCapSaturation );
        [propget, id(82), helpstring("property CapStorage")]
        HRESULT CapStorage( [out, retval] long* pCapStorage );
        [propget, id(83), helpstring("property CapVerticalFlip")]
        HRESULT CapVerticalFlip( [out, retval] VARIANT_BOOL* pCapVerticalFlip );
        [propget, id(84), helpstring("property CapVideo")]
        HRESULT CapVideo( [out, retval] VARIANT_BOOL* pCapVideo );
        [propget, id(85), helpstring("property CapVideoColorSpace")]
        HRESULT CapVideoColorSpace( [out, retval] VARIANT_BOOL* pCapVideoColorSpace );
        [propget, id(86), helpstring("property CapVideoFrameRate")]
        HRESULT CapVideoFrameRate( [out, retval] VARIANT_BOOL* pCapVideoFrameRate );
        [propget, id(87), helpstring("property CapVideoResolution")]
        HRESULT CapVideoResolution( [out, retval] VARIANT_BOOL* pCapVideoResolution );
        [propget, id(88), helpstring("property CapVideoType")]
        HRESULT CapVideoType( [out, retval] VARIANT_BOOL* pCapVideoType );
        [propget, id(89), helpstring("property Contrast")]
        HRESULT Contrast( [out, retval] long* pContrast );
        [propput, id(89), helpstring("property Contrast")]
        HRESULT Contrast( [in] long Contrast );
        [propget, id(90), helpstring("property Exposure")]
        HRESULT Exposure( [out, retval] long* pExposure );
        [propput, id(90), helpstring("property Exposure")]
        HRESULT Exposure( [in] long Exposure );
        [propget, id(91), helpstring("property Gain")]
        HRESULT Gain( [out, retval] long* pGain );
        [propput, id(91), helpstring("property Gain")]
        HRESULT Gain( [in] long Gain );
        [propget, id(92), helpstring("property HorizontalFlip")]
        HRESULT HorizontalFlip( [out, retval] VARIANT_BOOL* pHorizontalFlip );
        [propput, id(92), helpstring("property HorizontalFlip")]
        HRESULT HorizontalFlip( [in] VARIANT_BOOL HorizontalFlip );
        [propget, id(93), helpstring("property Hue")]
        HRESULT Hue( [out, retval] long* pHue );
        [propput, id(93), helpstring("property Hue")]
        HRESULT Hue( [in] long Hue );
        [propget, id(94), helpstring("property PhotoColorSpace")]
        HRESULT PhotoColorSpace( [out, retval] BSTR* pPhotoColorSpace );
        [propput, id(94), helpstring("property PhotoColorSpace")]
        HRESULT PhotoColorSpace( [in] BSTR PhotoColorSpace );
        [propget, id(95), helpstring("property PhotoColorSpaceList")]
        HRESULT PhotoColorSpaceList( [out, retval] BSTR* pPhotoColorSpaceList );
        [propget, id(96), helpstring("property PhotoFrameRate")]
        HRESULT PhotoFrameRate( [out, retval] long* pPhotoFrameRate );
        [propput, id(96), helpstring("property PhotoFrameRate")]
        HRESULT PhotoFrameRate( [in] long PhotoFrameRate );
        [propget, id(97), helpstring("property PhotoMaxFrameRate")]
        HRESULT PhotoMaxFrameRate( [out, retval] long* pPhotoMaxFrameRate );
        [propget, id(98), helpstring("property PhotoResolution")]
        HRESULT PhotoResolution( [out, retval] BSTR* pPhotoResolution );
        [propput, id(98), helpstring("property PhotoResolution")]
        HRESULT PhotoResolution( [in] BSTR PhotoResolution );
        [propget, id(99), helpstring("property PhotoResolutionList")]
        HRESULT PhotoResolutionList( [out, retval] BSTR* pPhotoResolutionList );
        [propget, id(100), helpstring("property PhotoType")]
        HRESULT PhotoType( [out, retval] BSTR* pPhotoType );
        [propput, id(100), helpstring("property PhotoType")]
        HRESULT PhotoType( [in] BSTR PhotoType );
        [propget, id(101), helpstring("property PhotoTypeList")]
        HRESULT PhotoTypeList( [out, retval] BSTR* pPhotoTypeList );
        [propget, id(102), helpstring("property RemainingRecordingTimeInSec")]
        HRESULT RemainingRecordingTimeInSec( [out, retval] long* pRemainingRecordingTimeInSec );
        [propget, id(103), helpstring("property Saturation")]
        HRESULT Saturation( [out, retval] long* pSaturation );
        [propput, id(103), helpstring("property Saturation")]
        HRESULT Saturation( [in] long Saturation );
        [propget, id(104), helpstring("property Storage")]
        HRESULT Storage( [out, retval] long* pStorage );
        [propput, id(104), helpstring("property Storage")]
        HRESULT Storage( [in] long Storage );
        [propget, id(105), helpstring("property VerticalFlip")]
        HRESULT VerticalFlip( [out, retval] VARIANT_BOOL* pVerticalFlip );
        [propput, id(105), helpstring("property VerticalFlip")]
        HRESULT VerticalFlip( [in] VARIANT_BOOL VerticalFlip );
        [propget, id(106), helpstring("property VideoCaptureMode")]
        HRESULT VideoCaptureMode( [out, retval] long* pVideoCaptureMode );
        [propput, id(106), helpstring("property VideoCaptureMode")]
        HRESULT VideoCaptureMode( [in] long VideoCaptureMode );
        [propget, id(107), helpstring("property VideoColorSpace")]
        HRESULT VideoColorSpace( [out, retval] BSTR* pVideoColorSpace );
        [propput, id(107), helpstring("property VideoColorSpace")]
        HRESULT VideoColorSpace( [in] BSTR VideoColorSpace );
        [propget, id(108), helpstring("property VideoColorSpaceList")]
        HRESULT VideoColorSpaceList( [out, retval] BSTR* pVideoColorSpaceList );
        [propget, id(109), helpstring("property VideoFrameRate")]
        HRESULT VideoFrameRate( [out, retval] long* pVideoFrameRate );
        [propput, id(109), helpstring("property VideoFrameRate")]
        HRESULT VideoFrameRate( [in] long VideoFrameRate );
        [propget, id(110), helpstring("property VideoMaxFrameRate")]
        HRESULT VideoMaxFrameRate( [out, retval] long* pVideoMaxFrameRate );
        [propget, id(111), helpstring("property VideoResolution")]
        HRESULT VideoResolution( [out, retval] BSTR* pVideoResolution );
        [propput, id(111), helpstring("property VideoResolution")]
        HRESULT VideoResolution( [in] BSTR VideoResolution );
        [propget, id(112), helpstring("property VideoResolutionList")]
        HRESULT VideoResolutionList( [out, retval] BSTR* pVideoResolutionList );
        [propget, id(113), helpstring("property VideoType")]
        HRESULT VideoType( [out, retval] BSTR* pVideoType );
        [propput, id(113), helpstring("property VideoType")]
        HRESULT VideoType( [in] BSTR VideoType );
        [propget, id(114), helpstring("property VideoTypeList")]
        HRESULT VideoTypeList( [out, retval] BSTR* pVideoTypeList );
        [id(140), helpstring("method StartVideo")]
        HRESULT StartVideo( 
            [in] BSTR FileName, 
            [in] VARIANT_BOOL OverWrite, 
            [in] long RecordingTime, 
            [out, retval] long* pRC );
        [id(141), helpstring("method StopVideo")]
        HRESULT StopVideo( 
            [out, retval] long* pRC );
        [id(142), helpstring("method TakePhoto")]
        HRESULT TakePhoto( 
            [in] BSTR FileName, 
            [in] VARIANT_BOOL OverWrite, 
            [in] long Timeout, 
            [out, retval] long* pRC );
    };

//
//---------- IOPOSVideoCapture Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB91451-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSVideoCapture Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSVideoCapture : IOPOSVideoCapture_1_16
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90450-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS VideoCapture Control 1.16.000 [Public, by KF]")
]
library OposVideoCapture_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90453-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSVideoCaptureEvents Interface")
    ]
    dispinterface _IOPOSVideoCaptureEvents
    {
        properties:
        methods:
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90452-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS VideoCapture Control 1.16.000 [Public, by KF]")
    ]
    coclass OPOSVideoCapture
    {
        [default] interface IOPOSVideoCapture;
        interface IOPOSVideoCapture_1_16;
        [default, source] dispinterface _IOPOSVideoCaptureEvents;
    };
};

// End VideoCapture.idl
