/****************************************************************************
**
** ToneIndicator.idl -- IDL source for ToneIndicator.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (ToneIndicator.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91201-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSToneIndicator 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSToneIndicator_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SODataDummy")] HRESULT SODataDummy( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputComplete")] HRESULT SOOutputComplete( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.2
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(19), helpstring("property OutputID")]
        HRESULT OutputID( [out, retval] long* pOutputID );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(34), helpstring("method ClearOutput")]
        HRESULT ClearOutput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [out, retval] VARIANT_BOOL* pAsyncMode );
        [propput, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [in] VARIANT_BOOL AsyncMode );
        [propget, id(51), helpstring("property CapPitch")]
        HRESULT CapPitch( [out, retval] VARIANT_BOOL* pCapPitch );
        [propget, id(52), helpstring("property CapVolume")]
        HRESULT CapVolume( [out, retval] VARIANT_BOOL* pCapVolume );
        [propget, id(53), helpstring("property InterToneWait")]
        HRESULT InterToneWait( [out, retval] long* pInterToneWait );
        [propput, id(53), helpstring("property InterToneWait")]
        HRESULT InterToneWait( [in] long InterToneWait );
        [propget, id(54), helpstring("property Tone1Duration")]
        HRESULT Tone1Duration( [out, retval] long* pTone1Duration );
        [propput, id(54), helpstring("property Tone1Duration")]
        HRESULT Tone1Duration( [in] long Tone1Duration );
        [propget, id(55), helpstring("property Tone1Pitch")]
        HRESULT Tone1Pitch( [out, retval] long* pTone1Pitch );
        [propput, id(55), helpstring("property Tone1Pitch")]
        HRESULT Tone1Pitch( [in] long Tone1Pitch );
        [propget, id(56), helpstring("property Tone1Volume")]
        HRESULT Tone1Volume( [out, retval] long* pTone1Volume );
        [propput, id(56), helpstring("property Tone1Volume")]
        HRESULT Tone1Volume( [in] long Tone1Volume );
        [propget, id(57), helpstring("property Tone2Duration")]
        HRESULT Tone2Duration( [out, retval] long* pTone2Duration );
        [propput, id(57), helpstring("property Tone2Duration")]
        HRESULT Tone2Duration( [in] long Tone2Duration );
        [propget, id(58), helpstring("property Tone2Pitch")]
        HRESULT Tone2Pitch( [out, retval] long* pTone2Pitch );
        [propput, id(58), helpstring("property Tone2Pitch")]
        HRESULT Tone2Pitch( [in] long Tone2Pitch );
        [propget, id(59), helpstring("property Tone2Volume")]
        HRESULT Tone2Volume( [out, retval] long* pTone2Volume );
        [propput, id(59), helpstring("property Tone2Volume")]
        HRESULT Tone2Volume( [in] long Tone2Volume );
        [id(70), helpstring("method Sound")]
        HRESULT Sound( 
            [in] long NumberOfCycles, 
            [in] long InterSoundWait, 
            [out, retval] long* pRC );
        [id(71), helpstring("method SoundImmediate")]
        HRESULT SoundImmediate( 
            [out, retval] long* pRC );
    // Release 1.3
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
    // Release 1.4
    // Release 1.5
    // Release 1.6
    // Release 1.7
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB92201-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSToneIndicator 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSToneIndicator_1_8 : IOPOSToneIndicator_1_5
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Previous Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB93201-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSToneIndicator 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSToneIndicator_1_9 : IOPOSToneIndicator_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
    // Release 1.10
    // Release 1.11
    // Release 1.12
    };

    [
        object,
        uuid(CCB94201-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSToneIndicator 1.9 Interface (Old Invariant)"),
        pointer_default(unique),
        hidden
    ]
    interface IOPOSToneIndicator_1_9_zz : IOPOSToneIndicator_1_9
    {
    };

//
//========== Current Interface: 1.13 ==========
//

    [
        object,
        uuid(CCB95201-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSToneIndicator 1.13 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSToneIndicator_1_13 : IOPOSToneIndicator_1_9
    {
    // Release 1.13
        [propget, id(60), helpstring("property CapMelody")]
        HRESULT CapMelody( [out, retval] long* pCapMelody );
        [propget, id(61), helpstring("property MelodyType")]
        HRESULT MelodyType( [out, retval] long* pMelodyType );
        [propput, id(61), helpstring("property MelodyType")]
        HRESULT MelodyType( [in] long MelodyType );
        [propget, id(62), helpstring("property MelodyVolume")]
        HRESULT MelodyVolume( [out, retval] long* pMelodyVolume );
        [propput, id(62), helpstring("property MelodyVolume")]
        HRESULT MelodyVolume( [in] long MelodyVolume );
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSToneIndicator Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB96201-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSToneIndicator Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSToneIndicator : IOPOSToneIndicator_1_13
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90200-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS ToneIndicator Control 1.15.000 [Public, by CRM/MCS]")
]
library OposToneIndicator_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90203-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSToneIndicatorEvents Interface")
    ]
    dispinterface _IOPOSToneIndicatorEvents
    {
        properties:
        methods:
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), helpstring("method OutputCompleteEvent")]
            void OutputCompleteEvent( [in] long OutputID );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90202-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS ToneIndicator Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSToneIndicator
    {
        [default] interface IOPOSToneIndicator;
        interface IOPOSToneIndicator_1_13;
        interface IOPOSToneIndicator_1_9;
        interface IOPOSToneIndicator_1_9_zz; // (Old invariant interface.)
        interface IOPOSToneIndicator_1_8;
        interface IOPOSToneIndicator_1_5;
        [default, source] dispinterface _IOPOSToneIndicatorEvents;
    };
};

// End ToneIndicator.idl
