/****************************************************************************
**
** CAT.idl -- IDL source for CAT.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (CAT.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91051-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCAT 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCAT_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SODataDummy")] HRESULT SODataDummy( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputComplete")] HRESULT SOOutputComplete( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.4
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(19), helpstring("property OutputID")]
        HRESULT OutputID( [out, retval] long* pOutputID );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(34), helpstring("method ClearOutput")]
        HRESULT ClearOutput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(50), helpstring("property AccountNumber")]
        HRESULT AccountNumber( [out, retval] BSTR* pAccountNumber );
        [propget, id(51), helpstring("property AdditionalSecurityInformation")]
        HRESULT AdditionalSecurityInformation( [out, retval] BSTR* pAdditionalSecurityInformation );
        [propput, id(51), helpstring("property AdditionalSecurityInformation")]
        HRESULT AdditionalSecurityInformation( [in] BSTR AdditionalSecurityInformation );
        [propget, id(52), helpstring("property ApprovalCode")]
        HRESULT ApprovalCode( [out, retval] BSTR* pApprovalCode );
        [propget, id(53), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [out, retval] VARIANT_BOOL* pAsyncMode );
        [propput, id(53), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [in] VARIANT_BOOL AsyncMode );
        [propget, id(54), helpstring("property CapAdditionalSecurityInformation")]
        HRESULT CapAdditionalSecurityInformation( [out, retval] VARIANT_BOOL* pCapAdditionalSecurityInformation );
        [propget, id(55), helpstring("property CapAuthorizeCompletion")]
        HRESULT CapAuthorizeCompletion( [out, retval] VARIANT_BOOL* pCapAuthorizeCompletion );
        [propget, id(56), helpstring("property CapAuthorizePreSales")]
        HRESULT CapAuthorizePreSales( [out, retval] VARIANT_BOOL* pCapAuthorizePreSales );
        [propget, id(57), helpstring("property CapAuthorizeRefund")]
        HRESULT CapAuthorizeRefund( [out, retval] VARIANT_BOOL* pCapAuthorizeRefund );
        [propget, id(58), helpstring("property CapAuthorizeVoid")]
        HRESULT CapAuthorizeVoid( [out, retval] VARIANT_BOOL* pCapAuthorizeVoid );
        [propget, id(59), helpstring("property CapAuthorizeVoidPreSales")]
        HRESULT CapAuthorizeVoidPreSales( [out, retval] VARIANT_BOOL* pCapAuthorizeVoidPreSales );
        [propget, id(60), helpstring("property CapCenterResultCode")]
        HRESULT CapCenterResultCode( [out, retval] VARIANT_BOOL* pCapCenterResultCode );
        [propget, id(61), helpstring("property CapCheckCard")]
        HRESULT CapCheckCard( [out, retval] VARIANT_BOOL* pCapCheckCard );
        [propget, id(62), helpstring("property CapDailyLog")]
        HRESULT CapDailyLog( [out, retval] long* pCapDailyLog );
        [propget, id(63), helpstring("property CapInstallments")]
        HRESULT CapInstallments( [out, retval] VARIANT_BOOL* pCapInstallments );
        [propget, id(64), helpstring("property CapPaymentDetail")]
        HRESULT CapPaymentDetail( [out, retval] VARIANT_BOOL* pCapPaymentDetail );
        [propget, id(65), helpstring("property CapTaxOthers")]
        HRESULT CapTaxOthers( [out, retval] VARIANT_BOOL* pCapTaxOthers );
        [propget, id(67), helpstring("property CapTrainingMode")]
        HRESULT CapTrainingMode( [out, retval] VARIANT_BOOL* pCapTrainingMode );
        [propget, id(66), helpstring("property CapTransactionNumber")]
        HRESULT CapTransactionNumber( [out, retval] VARIANT_BOOL* pCapTransactionNumber );
        [propget, id(68), helpstring("property CardCompanyID")]
        HRESULT CardCompanyID( [out, retval] BSTR* pCardCompanyID );
        [propget, id(69), helpstring("property CenterResultCode")]
        HRESULT CenterResultCode( [out, retval] BSTR* pCenterResultCode );
        [propget, id(70), helpstring("property DailyLog")]
        HRESULT DailyLog( [out, retval] BSTR* pDailyLog );
        [propget, id(71), helpstring("property PaymentCondition")]
        HRESULT PaymentCondition( [out, retval] long* pPaymentCondition );
        [propget, id(72), helpstring("property PaymentDetail")]
        HRESULT PaymentDetail( [out, retval] BSTR* pPaymentDetail );
        [propget, id(73), helpstring("property SequenceNumber")]
        HRESULT SequenceNumber( [out, retval] long* pSequenceNumber );
        [propget, id(74), helpstring("property SlipNumber")]
        HRESULT SlipNumber( [out, retval] BSTR* pSlipNumber );
        [propget, id(75), helpstring("property TrainingMode")]
        HRESULT TrainingMode( [out, retval] VARIANT_BOOL* pTrainingMode );
        [propput, id(75), helpstring("property TrainingMode")]
        HRESULT TrainingMode( [in] VARIANT_BOOL TrainingMode );
        [propget, id(76), helpstring("property TransactionNumber")]
        HRESULT TransactionNumber( [out, retval] BSTR* pTransactionNumber );
        [propget, id(77), helpstring("property TransactionType")]
        HRESULT TransactionType( [out, retval] long* pTransactionType );
        [id(90), helpstring("method AccessDailyLog")]
        HRESULT AccessDailyLog( 
            [in] long SequenceNumber, 
            [in] long Type, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(91), helpstring("method AuthorizeCompletion")]
        HRESULT AuthorizeCompletion( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] CURRENCY TaxOthers, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(92), helpstring("method AuthorizePreSales")]
        HRESULT AuthorizePreSales( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] CURRENCY TaxOthers, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(93), helpstring("method AuthorizeRefund")]
        HRESULT AuthorizeRefund( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] CURRENCY TaxOthers, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(94), helpstring("method AuthorizeSales")]
        HRESULT AuthorizeSales( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] CURRENCY TaxOthers, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(95), helpstring("method AuthorizeVoid")]
        HRESULT AuthorizeVoid( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] CURRENCY TaxOthers, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(96), helpstring("method AuthorizeVoidPreSales")]
        HRESULT AuthorizeVoidPreSales( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] CURRENCY TaxOthers, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(97), helpstring("method CheckCard")]
        HRESULT CheckCard( 
            [in] long SequenceNumber, 
            [in] long Timeout, 
            [out, retval] long* pRC );
    // Release 1.5
        [propget, id(78), helpstring("property PaymentMedia")]
        HRESULT PaymentMedia( [out, retval] long* pPaymentMedia );
        [propput, id(78), helpstring("property PaymentMedia")]
        HRESULT PaymentMedia( [in] long PaymentMedia );
    // Release 1.6
    // Release 1.7
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB92051-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCAT 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCAT_1_8 : IOPOSCAT_1_5
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Current Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB93051-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCAT 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCAT_1_9 : IOPOSCAT_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(79), helpstring("property Balance")]
        HRESULT Balance( [out, retval] CURRENCY* pBalance );
        [propget, id(80), helpstring("property CapCashDeposit")]
        HRESULT CapCashDeposit( [out, retval] VARIANT_BOOL* pCapCashDeposit );
        [propget, id(81), helpstring("property CapLockTerminal")]
        HRESULT CapLockTerminal( [out, retval] VARIANT_BOOL* pCapLockTerminal );
        [propget, id(82), helpstring("property CapLogStatus")]
        HRESULT CapLogStatus( [out, retval] VARIANT_BOOL* pCapLogStatus );
        [propget, id(83), helpstring("property CapUnlockTerminal")]
        HRESULT CapUnlockTerminal( [out, retval] VARIANT_BOOL* pCapUnlockTerminal );
        [propget, id(84), helpstring("property LogStatus")]
        HRESULT LogStatus( [out, retval] long* pLogStatus );
        [propget, id(85), helpstring("property SettledAmount")]
        HRESULT SettledAmount( [out, retval] CURRENCY* pSettledAmount );
        [id(98), helpstring("method CashDeposit")]
        HRESULT CashDeposit( 
            [in] long SequenceNumber, 
            [in] CURRENCY Amount, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(99), helpstring("method LockTerminal")]
        HRESULT LockTerminal( 
            [out, retval] long* pRC );
        [id(100), helpstring("method UnlockTerminal")]
        HRESULT UnlockTerminal( 
            [out, retval] long* pRC );
    // Release 1.10
    // Release 1.11
    // Release 1.12
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSCAT Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB94051-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCAT Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCAT : IOPOSCAT_1_9
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90050-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS CAT Control 1.15.000 [Public, by CRM/MCS]")
]
library OposCAT_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90053-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSCATEvents Interface")
    ]
    dispinterface _IOPOSCATEvents
    {
        properties:
        methods:
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), helpstring("method OutputCompleteEvent")]
            void OutputCompleteEvent( [in] long OutputID );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90052-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS CAT Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSCAT
    {
        [default] interface IOPOSCAT;
        interface IOPOSCAT_1_9;
        interface IOPOSCAT_1_8;
        interface IOPOSCAT_1_5;
        [default, source] dispinterface _IOPOSCATEvents;
    };
};

// End CAT.idl
