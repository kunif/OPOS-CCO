/****************************************************************************
**
** CashChanger.idl -- IDL source for CashChanger.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (CashChanger.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91031-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCashChanger 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCashChanger_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SOData")] HRESULT SOData( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOErrorDummy")] HRESULT SOErrorDummy( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.2
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [out, retval] VARIANT_BOOL* pAsyncMode );
        [propput, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [in] VARIANT_BOOL AsyncMode );
        [propget, id(51), helpstring("property AsyncResultCode")]
        HRESULT AsyncResultCode( [out, retval] long* pAsyncResultCode );
        [propget, id(52), helpstring("property AsyncResultCodeExtended")]
        HRESULT AsyncResultCodeExtended( [out, retval] long* pAsyncResultCodeExtended );
        [propget, id(53), helpstring("property CapDiscrepancy")]
        HRESULT CapDiscrepancy( [out, retval] VARIANT_BOOL* pCapDiscrepancy );
        [propget, id(54), helpstring("property CapEmptySensor")]
        HRESULT CapEmptySensor( [out, retval] VARIANT_BOOL* pCapEmptySensor );
        [propget, id(55), helpstring("property CapFullSensor")]
        HRESULT CapFullSensor( [out, retval] VARIANT_BOOL* pCapFullSensor );
        [propget, id(56), helpstring("property CapNearEmptySensor")]
        HRESULT CapNearEmptySensor( [out, retval] VARIANT_BOOL* pCapNearEmptySensor );
        [propget, id(57), helpstring("property CapNearFullSensor")]
        HRESULT CapNearFullSensor( [out, retval] VARIANT_BOOL* pCapNearFullSensor );
        [propget, id(58), helpstring("property CurrencyCashList")]
        HRESULT CurrencyCashList( [out, retval] BSTR* pCurrencyCashList );
        [propget, id(59), helpstring("property CurrencyCode")]
        HRESULT CurrencyCode( [out, retval] BSTR* pCurrencyCode );
        [propput, id(59), helpstring("property CurrencyCode")]
        HRESULT CurrencyCode( [in] BSTR CurrencyCode );
        [propget, id(60), helpstring("property CurrencyCodeList")]
        HRESULT CurrencyCodeList( [out, retval] BSTR* pCurrencyCodeList );
        [propget, id(61), helpstring("property CurrentExit")]
        HRESULT CurrentExit( [out, retval] long* pCurrentExit );
        [propput, id(61), helpstring("property CurrentExit")]
        HRESULT CurrentExit( [in] long CurrentExit );
        [propget, id(62), helpstring("property DeviceExits")]
        HRESULT DeviceExits( [out, retval] long* pDeviceExits );
        [propget, id(63), helpstring("property DeviceStatus")]
        HRESULT DeviceStatus( [out, retval] long* pDeviceStatus );
        [propget, id(64), helpstring("property ExitCashList")]
        HRESULT ExitCashList( [out, retval] BSTR* pExitCashList );
        [propget, id(65), helpstring("property FullStatus")]
        HRESULT FullStatus( [out, retval] long* pFullStatus );
        [id(70), helpstring("method DispenseCash")]
        HRESULT DispenseCash( 
            [in] BSTR CashCounts, 
            [out, retval] long* pRC );
        [id(71), helpstring("method DispenseChange")]
        HRESULT DispenseChange( 
            [in] long Amount, 
            [out, retval] long* pRC );
        [id(72), helpstring("method ReadCashCounts")]
        HRESULT ReadCashCounts( 
            [out] BSTR* pCashCounts, 
            [out] VARIANT_BOOL* pDiscrepancy, 
            [out, retval] long* pRC );
    // Release 1.3
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
    // Release 1.4
    // Release 1.5
        [propget, id(15), helpstring("property DataCount")]
        HRESULT DataCount( [out, retval] long* pDataCount );
        [propget, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [out, retval] VARIANT_BOOL* pDataEventEnabled );
        [propput, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [in] VARIANT_BOOL DataEventEnabled );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
        [propget, id(80), helpstring("property CapDeposit")]
        HRESULT CapDeposit( [out, retval] VARIANT_BOOL* pCapDeposit );
        [propget, id(81), helpstring("property CapDepositDataEvent")]
        HRESULT CapDepositDataEvent( [out, retval] VARIANT_BOOL* pCapDepositDataEvent );
        [propget, id(82), helpstring("property CapPauseDeposit")]
        HRESULT CapPauseDeposit( [out, retval] VARIANT_BOOL* pCapPauseDeposit );
        [propget, id(83), helpstring("property CapRepayDeposit")]
        HRESULT CapRepayDeposit( [out, retval] VARIANT_BOOL* pCapRepayDeposit );
        [propget, id(84), helpstring("property DepositAmount")]
        HRESULT DepositAmount( [out, retval] long* pDepositAmount );
        [propget, id(85), helpstring("property DepositCashList")]
        HRESULT DepositCashList( [out, retval] BSTR* pDepositCashList );
        [propget, id(86), helpstring("property DepositCodeList")]
        HRESULT DepositCodeList( [out, retval] BSTR* pDepositCodeList );
        [propget, id(87), helpstring("property DepositCounts")]
        HRESULT DepositCounts( [out, retval] BSTR* pDepositCounts );
        [propget, id(88), helpstring("property DepositStatus")]
        HRESULT DepositStatus( [out, retval] long* pDepositStatus );
        [id(73), helpstring("method BeginDeposit")]
        HRESULT BeginDeposit( 
            [out, retval] long* pRC );
        [id(74), helpstring("method EndDeposit")]
        HRESULT EndDeposit( 
            [in] long Success, 
            [out, retval] long* pRC );
        [id(75), helpstring("method FixDeposit")]
        HRESULT FixDeposit( 
            [out, retval] long* pRC );
        [id(76), helpstring("method PauseDeposit")]
        HRESULT PauseDeposit( 
            [in] long Control, 
            [out, retval] long* pRC );
    // Release 1.6
    // Release 1.7
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB92031-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCashChanger 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCashChanger_1_8 : IOPOSCashChanger_1_5
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Previous Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB93031-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCashChanger 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCashChanger_1_9 : IOPOSCashChanger_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
    // Release 1.10
    };

//
//========== Current Interface: 1.11 ==========
//

    [
        object,
        uuid(CCB94031-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCashChanger 1.11 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCashChanger_1_11 : IOPOSCashChanger_1_9
    {
    // Release 1.11
        [propget, id(89), helpstring("property CapJamSensor")]
        HRESULT CapJamSensor( [out, retval] VARIANT_BOOL* pCapJamSensor );
        [propget, id(90), helpstring("property CapRealTimeData")]
        HRESULT CapRealTimeData( [out, retval] VARIANT_BOOL* pCapRealTimeData );
        [propget, id(91), helpstring("property CurrentService")]
        HRESULT CurrentService( [out, retval] long* pCurrentService );
        [propput, id(91), helpstring("property CurrentService")]
        HRESULT CurrentService( [in] long CurrentService );
        [propget, id(92), helpstring("property RealTimeDataEnabled")]
        HRESULT RealTimeDataEnabled( [out, retval] VARIANT_BOOL* pRealTimeDataEnabled );
        [propput, id(92), helpstring("property RealTimeDataEnabled")]
        HRESULT RealTimeDataEnabled( [in] VARIANT_BOOL RealTimeDataEnabled );
        [propget, id(93), helpstring("property ServiceCount")]
        HRESULT ServiceCount( [out, retval] long* pServiceCount );
        [propget, id(94), helpstring("property ServiceIndex")]
        HRESULT ServiceIndex( [out, retval] long* pServiceIndex );
        [id(77), helpstring("method AdjustCashCounts")]
        HRESULT AdjustCashCounts( 
            [in] BSTR CashCounts, 
            [out, retval] long* pRC );
    // Release 1.12
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSCashChanger Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB95031-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSCashChanger Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSCashChanger : IOPOSCashChanger_1_11
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90030-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS CashChanger Control 1.15.000 [Public, by CRM/MCS]")
]
library OposCashChanger_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90033-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSCashChangerEvents Interface")
    ]
    dispinterface _IOPOSCashChangerEvents
    {
        properties:
        methods:
        [id(1), helpstring("method DataEvent")]
            void DataEvent( [in] long Status );
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90032-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS CashChanger Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSCashChanger
    {
        [default] interface IOPOSCashChanger;
        interface IOPOSCashChanger_1_11;
        interface IOPOSCashChanger_1_9;
        interface IOPOSCashChanger_1_8;
        interface IOPOSCashChanger_1_5;
        [default, source] dispinterface _IOPOSCashChangerEvents;
    };
};

// End CashChanger.idl
