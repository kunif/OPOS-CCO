/****************************************************************************
**
** RemoteOrderDisplay.idl -- IDL source for RemoteOrderDisplay.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (RemoteOrderDisplay.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91161-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRemoteOrderDisplay 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRemoteOrderDisplay_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SOData")] HRESULT SOData( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputComplete")] HRESULT SOOutputComplete( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.3
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(15), helpstring("property DataCount")]
        HRESULT DataCount( [out, retval] long* pDataCount );
        [propget, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [out, retval] VARIANT_BOOL* pDataEventEnabled );
        [propput, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [in] VARIANT_BOOL DataEventEnabled );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(19), helpstring("property OutputID")]
        HRESULT OutputID( [out, retval] long* pOutputID );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
        [id(34), helpstring("method ClearOutput")]
        HRESULT ClearOutput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [out, retval] VARIANT_BOOL* pAsyncMode );
        [propput, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [in] VARIANT_BOOL AsyncMode );
        [propget, id(51), helpstring("property AutoToneDuration")]
        HRESULT AutoToneDuration( [out, retval] long* pAutoToneDuration );
        [propput, id(51), helpstring("property AutoToneDuration")]
        HRESULT AutoToneDuration( [in] long AutoToneDuration );
        [propget, id(52), helpstring("property AutoToneFrequency")]
        HRESULT AutoToneFrequency( [out, retval] long* pAutoToneFrequency );
        [propput, id(52), helpstring("property AutoToneFrequency")]
        HRESULT AutoToneFrequency( [in] long AutoToneFrequency );
        [propget, id(53), helpstring("property CapSelectCharacterSet")]
        HRESULT CapSelectCharacterSet( [out, retval] VARIANT_BOOL* pCapSelectCharacterSet );
        [propget, id(54), helpstring("property CapTone")]
        HRESULT CapTone( [out, retval] VARIANT_BOOL* pCapTone );
        [propget, id(55), helpstring("property CapTouch")]
        HRESULT CapTouch( [out, retval] VARIANT_BOOL* pCapTouch );
        [propget, id(56), helpstring("property CapTransaction")]
        HRESULT CapTransaction( [out, retval] VARIANT_BOOL* pCapTransaction );
        [propget, id(57), helpstring("property CharacterSet")]
        HRESULT CharacterSet( [out, retval] long* pCharacterSet );
        [propget, id(58), helpstring("property CharacterSetList")]
        HRESULT CharacterSetList( [out, retval] BSTR* pCharacterSetList );
        [propget, id(59), helpstring("property Clocks")]
        HRESULT Clocks( [out, retval] long* pClocks );
        [propget, id(60), helpstring("property CurrentUnitID")]
        HRESULT CurrentUnitID( [out, retval] long* pCurrentUnitID );
        [propput, id(60), helpstring("property CurrentUnitID")]
        HRESULT CurrentUnitID( [in] long CurrentUnitID );
        [propget, id(61), helpstring("property ErrorString")]
        HRESULT ErrorString( [out, retval] BSTR* pErrorString );
        [propget, id(62), helpstring("property ErrorUnits")]
        HRESULT ErrorUnits( [out, retval] long* pErrorUnits );
        [propget, id(63), helpstring("property EventString")]
        HRESULT EventString( [out, retval] BSTR* pEventString );
        [propget, id(64), helpstring("property EventType")]
        HRESULT EventType( [out, retval] long* pEventType );
        [propput, id(64), helpstring("property EventType")]
        HRESULT EventType( [in] long EventType );
        [propget, id(65), helpstring("property EventUnitID")]
        HRESULT EventUnitID( [out, retval] long* pEventUnitID );
        [propget, id(66), helpstring("property EventUnits")]
        HRESULT EventUnits( [out, retval] long* pEventUnits );
        [propget, id(67), helpstring("property SystemClocks")]
        HRESULT SystemClocks( [out, retval] long* pSystemClocks );
        [propget, id(68), helpstring("property SystemVideoSaveBuffers")]
        HRESULT SystemVideoSaveBuffers( [out, retval] long* pSystemVideoSaveBuffers );
        [propget, id(69), helpstring("property Timeout")]
        HRESULT Timeout( [out, retval] long* pTimeout );
        [propput, id(69), helpstring("property Timeout")]
        HRESULT Timeout( [in] long Timeout );
        [propget, id(70), helpstring("property UnitsOnline")]
        HRESULT UnitsOnline( [out, retval] long* pUnitsOnline );
        [propget, id(71), helpstring("property VideoDataCount")]
        HRESULT VideoDataCount( [out, retval] long* pVideoDataCount );
        [propget, id(72), helpstring("property VideoMode")]
        HRESULT VideoMode( [out, retval] long* pVideoMode );
        [propput, id(72), helpstring("property VideoMode")]
        HRESULT VideoMode( [in] long VideoMode );
        [propget, id(73), helpstring("property VideoModesList")]
        HRESULT VideoModesList( [out, retval] BSTR* pVideoModesList );
        [propget, id(74), helpstring("property VideoSaveBuffers")]
        HRESULT VideoSaveBuffers( [out, retval] long* pVideoSaveBuffers );
        [id(80), helpstring("method ClearVideo")]
        HRESULT ClearVideo( 
            [in] long Units, 
            [in] long Attribute, 
            [out, retval] long* pRC );
        [id(81), helpstring("method ClearVideoRegion")]
        HRESULT ClearVideoRegion( 
            [in] long Units, 
            [in] long Row, 
            [in] long Column, 
            [in] long Height, 
            [in] long Width, 
            [in] long Attribute, 
            [out, retval] long* pRC );
        [id(82), helpstring("method ControlClock")]
        HRESULT ControlClock( 
            [in] long Units, 
            [in] long Function, 
            [in] long ClockId, 
            [in] long Hour, 
            [in] long Min, 
            [in] long Sec, 
            [in] long Row, 
            [in] long Column, 
            [in] long Attribute, 
            [in] long Mode, 
            [out, retval] long* pRC );
        [id(83), helpstring("method ControlCursor")]
        HRESULT ControlCursor( 
            [in] long Units, 
            [in] long Function, 
            [out, retval] long* pRC );
        [id(84), helpstring("method CopyVideoRegion")]
        HRESULT CopyVideoRegion( 
            [in] long Units, 
            [in] long Row, 
            [in] long Column, 
            [in] long Height, 
            [in] long Width, 
            [in] long TargetRow, 
            [in] long TargetColumn, 
            [out, retval] long* pRC );
        [id(85), helpstring("method DisplayData")]
        HRESULT DisplayData( 
            [in] long Units, 
            [in] long Row, 
            [in] long Column, 
            [in] long Attribute, 
            [in] BSTR Data, 
            [out, retval] long* pRC );
        [id(86), helpstring("method DrawBox")]
        HRESULT DrawBox( 
            [in] long Units, 
            [in] long Row, 
            [in] long Column, 
            [in] long Height, 
            [in] long Width, 
            [in] long Attribute, 
            [in] long BorderType, 
            [out, retval] long* pRC );
        [id(87), helpstring("method FreeVideoRegion")]
        HRESULT FreeVideoRegion( 
            [in] long Units, 
            [in] long BufferId, 
            [out, retval] long* pRC );
        [id(88), helpstring("method ResetVideo")]
        HRESULT ResetVideo( 
            [in] long Units, 
            [out, retval] long* pRC );
        [id(89), helpstring("method RestoreVideoRegion")]
        HRESULT RestoreVideoRegion( 
            [in] long Units, 
            [in] long TargetRow, 
            [in] long TargetColumn, 
            [in] long BufferId, 
            [out, retval] long* pRC );
        [id(90), helpstring("method SaveVideoRegion")]
        HRESULT SaveVideoRegion( 
            [in] long Units, 
            [in] long Row, 
            [in] long Column, 
            [in] long Height, 
            [in] long Width, 
            [in] long BufferId, 
            [out, retval] long* pRC );
        [id(91), helpstring("method SelectCharacterSet")]
        HRESULT SelectCharacterSet( 
            [in] long Units, 
            [in] long CharacterSet, 
            [out, retval] long* pRC );
        [id(92), helpstring("method SetCursor")]
        HRESULT SetCursor( 
            [in] long Units, 
            [in] long Row, 
            [in] long Column, 
            [out, retval] long* pRC );
        [id(93), helpstring("method TransactionDisplay")]
        HRESULT TransactionDisplay( 
            [in] long Units, 
            [in] long Function, 
            [out, retval] long* pRC );
        [id(94), helpstring("method UpdateVideoRegionAttribute")]
        HRESULT UpdateVideoRegionAttribute( 
            [in] long Units, 
            [in] long Function, 
            [in] long Row, 
            [in] long Column, 
            [in] long Height, 
            [in] long Width, 
            [in] long Attribute, 
            [out, retval] long* pRC );
        [id(95), helpstring("method VideoSound")]
        HRESULT VideoSound( 
            [in] long Units, 
            [in] long Frequency, 
            [in] long Duration, 
            [in] long NumberOfCycles, 
            [in] long InterSoundWait, 
            [out, retval] long* pRC );
    // Release 1.4
    // Release 1.5
    // Release 1.6
    };

//
//========== Previous Interface: 1.7 ==========
//

    [
        object,
        uuid(CCB92161-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRemoteOrderDisplay 1.7 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRemoteOrderDisplay_1_7 : IOPOSRemoteOrderDisplay_1_5
    {
    // Release 1.7
        [propget, id(75), helpstring("property CapMapCharacterSet")]
        HRESULT CapMapCharacterSet( [out, retval] VARIANT_BOOL* pCapMapCharacterSet );
        [propget, id(76), helpstring("property MapCharacterSet")]
        HRESULT MapCharacterSet( [out, retval] VARIANT_BOOL* pMapCharacterSet );
        [propput, id(76), helpstring("property MapCharacterSet")]
        HRESULT MapCharacterSet( [in] VARIANT_BOOL MapCharacterSet );
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB93161-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRemoteOrderDisplay 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRemoteOrderDisplay_1_8 : IOPOSRemoteOrderDisplay_1_7
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Current Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB94161-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRemoteOrderDisplay 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRemoteOrderDisplay_1_9 : IOPOSRemoteOrderDisplay_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
    // Release 1.10
    // Release 1.11
    // Release 1.12
    // Release 1.13
    // Release 1.14
    // Release 1.15
    };

//
//---------- IOPOSRemoteOrderDisplay Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB95161-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSRemoteOrderDisplay Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSRemoteOrderDisplay : IOPOSRemoteOrderDisplay_1_9
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90160-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS RemoteOrderDisplay Control 1.15.000 [Public, by CRM/MCS]")
]
library OposRemoteOrderDisplay_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90163-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSRemoteOrderDisplayEvents Interface")
    ]
    dispinterface _IOPOSRemoteOrderDisplayEvents
    {
        properties:
        methods:
        [id(1), helpstring("method DataEvent")]
            void DataEvent( [in] long Status );
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), helpstring("method OutputCompleteEvent")]
            void OutputCompleteEvent( [in] long OutputID );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90162-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS RemoteOrderDisplay Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSRemoteOrderDisplay
    {
        [default] interface IOPOSRemoteOrderDisplay;
        interface IOPOSRemoteOrderDisplay_1_9;
        interface IOPOSRemoteOrderDisplay_1_8;
        interface IOPOSRemoteOrderDisplay_1_7;
        interface IOPOSRemoteOrderDisplay_1_5;
        [default, source] dispinterface _IOPOSRemoteOrderDisplayEvents;
    };
};

// End RemoteOrderDisplay.idl
