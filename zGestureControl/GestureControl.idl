/****************************************************************************
**
** GestureControl.idl -- IDL source for GestureControl.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  2021/12/02 Initial Version from similar sources.                K. Fukuchi
**
*****************************************************************************
**
{{Begin License}}

Copyright 2021 Kunio Fukuchi

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (GestureControl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

    [
        object,
        uuid(CCB90391-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSGestureControl 1.16 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSGestureControl_1_16 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SODataDummy")] HRESULT SODataDummy( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputComplete")] HRESULT SOOutputComplete( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.16
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(19), helpstring("property OutputID")]
        HRESULT OutputID( [out, retval] long* pOutputID );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(34), helpstring("method ClearOutput")]
        HRESULT ClearOutput( 
            [out, retval] long* pRC );
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(60), helpstring("property AutoMode")]
        HRESULT AutoMode( [out, retval] BSTR* pAutoMode );
        [propput, id(60), helpstring("property AutoMode")]
        HRESULT AutoMode( [in] BSTR AutoMode );
        [propget, id(61), helpstring("property AutoModeList")]
        HRESULT AutoModeList( [out, retval] BSTR* pAutoModeList );
        [propget, id(62), helpstring("property CapAssociatedHardTotalsDevice")]
        HRESULT CapAssociatedHardTotalsDevice( [out, retval] BSTR* pCapAssociatedHardTotalsDevice );
        [propget, id(63), helpstring("property CapMotion")]
        HRESULT CapMotion( [out, retval] VARIANT_BOOL* pCapMotion );
        [propget, id(64), helpstring("property CapMotionCreation")]
        HRESULT CapMotionCreation( [out, retval] VARIANT_BOOL* pCapMotionCreation );
        [propget, id(65), helpstring("property CapPose")]
        HRESULT CapPose( [out, retval] VARIANT_BOOL* pCapPose );
        [propget, id(66), helpstring("property CapPoseCreation")]
        HRESULT CapPoseCreation( [out, retval] VARIANT_BOOL* pCapPoseCreation );
        [propget, id(67), helpstring("property CapStorage")]
        HRESULT CapStorage( [out, retval] LONG* pCapStorage );
        [propget, id(68), helpstring("property JointList")]
        HRESULT JointList( [out, retval] BSTR* pJointList );
        [propget, id(69), helpstring("property MotionList")]
        HRESULT MotionList( [out, retval] BSTR* pMotionList );
        [propget, id(70), helpstring("property PoseCreationMode")]
        HRESULT PoseCreationMode( [out, retval] VARIANT_BOOL* pPoseCreationMode );
        [propput, id(70), helpstring("property PoseCreationMode")]
        HRESULT PoseCreationMode( [in] VARIANT_BOOL PoseCreationMode );
        [propget, id(71), helpstring("property PoseList")]
        HRESULT PoseList( [out, retval] BSTR* pPoseList );
        [propget, id(72), helpstring("property Storage")]
        HRESULT Storage( [out, retval] LONG* pStorage );
        [propput, id(72), helpstring("property Storage")]
        HRESULT Storage( [in] LONG Storage );
        [id(90), helpstring("method CreateMotion")]
        HRESULT CreateMotion( 
            [in] BSTR FileName, 
            [in] BSTR PoseList, 
            [out, retval] long* pRC );
        [id(91), helpstring("method CreatePose")]
        HRESULT CreatePose( 
            [in] BSTR FileName, 
            [in] long Time, 
            [out, retval] long* pRC );
        [id(92), helpstring("method GetPosition")]
        HRESULT GetPosition( 
            [in] BSTR JointID, 
            [out] long* pPosition, 
            [out, retval] long* pRC );
        [id(93), helpstring("method SetPosition")]
        HRESULT SetPosition( 
            [in] BSTR JointID, 
            [in] long Time, 
            [in] VARIANT_BOOL Absolute, 
            [out, retval] long* pRC );
        [id(94), helpstring("method SetSpeed")]
        HRESULT SetSpeed( 
            [in] BSTR SpeedList, 
            [in] long Time, 
            [out, retval] long* pRC );
        [id(95), helpstring("method StartMotion")]
        HRESULT StartMotion( 
            [in] BSTR FileName, 
            [out, retval] long* pRC );
        [id(96), helpstring("method StartPose")]
        HRESULT StartPose( 
            [in] BSTR FileName, 
            [out, retval] long* pRC );
        [id(97), helpstring("method StopControl")]
        HRESULT StopControl( 
            [in] long OutputID, 
            [out, retval] long* pRC );
    };

//
//---------- IOPOSGestureControl Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB91391-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSGestureControl Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSGestureControl : IOPOSGestureControl_1_16
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90390-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS GestureControl Control 1.16.000 [Public, by KF]")
]
library OposGestureControl_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90393-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSGestureControlEvents Interface")
    ]
    dispinterface _IOPOSGestureControlEvents
    {
        properties:
        methods:
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), helpstring("method OutputCompleteEvent")]
            void OutputCompleteEvent( [in] long OutputID );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90392-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS GestureControl Control 1.16.000 [Public, by KF]")
    ]
    coclass OPOSGestureControl
    {
        [default] interface IOPOSGestureControl;
        interface IOPOSGestureControl_1_16;
        [default, source] dispinterface _IOPOSGestureControlEvents;
    };
};

// End GestureControl.idl
