; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?cw_memcpy@@YAHPEADPEB_WH@Z			; cw_memcpy
PUBLIC	?cw_memcpy@@YAHPEA_WPEBDH@Z			; cw_memcpy
PUBLIC	?cw_memcpy@@YAHPEADPEBDH@Z			; cw_memcpy
PUBLIC	?cw_memcpy@@YAHPEA_WPEB_WH@Z			; cw_memcpy
PUBLIC	?cw_memset@@YAXPEADDH@Z				; cw_memset
PUBLIC	?cw_memset@@YAXPEA_W_WH@Z			; cw_memset
PUBLIC	?cw_strlen@@YAHPEBD@Z				; cw_strlen
PUBLIC	?cw_strlen@@YAHPEB_W@Z				; cw_strlen
PUBLIC	?cw_strcpy@@YAHPEADPEB_W@Z			; cw_strcpy
PUBLIC	?cw_strcpy@@YAHPEA_WPEBD@Z			; cw_strcpy
PUBLIC	?cw_strcpy@@YAHPEADPEBD@Z			; cw_strcpy
PUBLIC	?cw_strcpy@@YAHPEA_WPEB_W@Z			; cw_strcpy
PUBLIC	?cw_strcat@@YAHPEADPEB_W@Z			; cw_strcat
PUBLIC	?cw_strcat@@YAHPEA_WPEBD@Z			; cw_strcat
PUBLIC	?cw_strcat@@YAHPEADPEBD@Z			; cw_strcat
PUBLIC	?cw_strcat@@YAHPEA_WPEB_W@Z			; cw_strcat
PUBLIC	?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z			; cw_dup
PUBLIC	?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z			; cw_dup
PUBLIC	?DupChar@_CW@@AEAAXXZ				; _CW::DupChar
PUBLIC	?DupWide@_CW@@AEAAXXZ				; _CW::DupWide
PUBLIC	?GetCharsMbcs@_CW@@QEAAHXZ			; _CW::GetCharsMbcs
PUBLIC	?GetCharsWide@_CW@@QEAAHXZ			; _CW::GetCharsWide
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_WideCharToMultiByte:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
pdata	SEGMENT
$pdata$?cw_memcpy@@YAHPEADPEB_WH@Z DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$?cw_memcpy@@YAHPEADPEB_WH@Z
$pdata$?cw_memcpy@@YAHPEA_WPEBDH@Z DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$?cw_memcpy@@YAHPEA_WPEBDH@Z
$pdata$?cw_memcpy@@YAHPEADPEBDH@Z DD imagerel $LN8
	DD	imagerel $LN8+154
	DD	imagerel $unwind$?cw_memcpy@@YAHPEADPEBDH@Z
$pdata$?cw_memcpy@@YAHPEA_WPEB_WH@Z DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$?cw_memcpy@@YAHPEA_WPEB_WH@Z
$pdata$?cw_memset@@YAXPEADDH@Z DD imagerel $LN7
	DD	imagerel $LN7+98
	DD	imagerel $unwind$?cw_memset@@YAXPEADDH@Z
$pdata$?cw_memset@@YAXPEA_W_WH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?cw_memset@@YAXPEA_W_WH@Z
$pdata$?cw_strlen@@YAHPEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+99
	DD	imagerel $unwind$?cw_strlen@@YAHPEBD@Z
$pdata$?cw_strlen@@YAHPEB_W@Z DD imagerel $LN7
	DD	imagerel $LN7+100
	DD	imagerel $unwind$?cw_strlen@@YAHPEB_W@Z
$pdata$?cw_strcpy@@YAHPEADPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?cw_strcpy@@YAHPEADPEB_W@Z
$pdata$?cw_strcpy@@YAHPEA_WPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?cw_strcpy@@YAHPEA_WPEBD@Z
$pdata$?cw_strcpy@@YAHPEADPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?cw_strcpy@@YAHPEADPEBD@Z
$pdata$?cw_strcpy@@YAHPEA_WPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?cw_strcpy@@YAHPEA_WPEB_W@Z
$pdata$?cw_strcat@@YAHPEADPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?cw_strcat@@YAHPEADPEB_W@Z
$pdata$?cw_strcat@@YAHPEA_WPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?cw_strcat@@YAHPEA_WPEBD@Z
$pdata$?cw_strcat@@YAHPEADPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?cw_strcat@@YAHPEADPEBD@Z
$pdata$?cw_strcat@@YAHPEA_WPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?cw_strcat@@YAHPEA_WPEB_W@Z
$pdata$?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z DD imagerel $LN6
	DD	imagerel $LN6+257
	DD	imagerel $unwind$?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z
$pdata$?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z DD imagerel $LN6
	DD	imagerel $LN6+228
	DD	imagerel $unwind$?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z
$pdata$?DupChar@_CW@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?DupChar@_CW@@AEAAXXZ
$pdata$?DupWide@_CW@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?DupWide@_CW@@AEAAXXZ
$pdata$?GetCharsMbcs@_CW@@QEAAHXZ DD imagerel $LN6
	DD	imagerel $LN6+99
	DD	imagerel $unwind$?GetCharsMbcs@_CW@@QEAAHXZ
$pdata$?GetCharsWide@_CW@@QEAAHXZ DD imagerel $LN6
	DD	imagerel $LN6+101
	DD	imagerel $unwind$?GetCharsWide@_CW@@QEAAHXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$?cw_memcpy@@YAHPEADPEB_WH@Z DD 022801H
	DD	070107214H
$unwind$?cw_memcpy@@YAHPEA_WPEBDH@Z DD 022801H
	DD	070105214H
$unwind$?cw_memcpy@@YAHPEADPEBDH@Z DD 022801H
	DD	070105214H
$unwind$?cw_memcpy@@YAHPEA_WPEB_WH@Z DD 022801H
	DD	070103214H
$unwind$?cw_memset@@YAXPEADDH@Z DD 022701H
	DD	0700f1213H
$unwind$?cw_memset@@YAXPEA_W_WH@Z DD 022801H
	DD	070101214H
$unwind$?cw_strlen@@YAHPEBD@Z DD 021e01H
	DD	07006120aH
$unwind$?cw_strlen@@YAHPEB_W@Z DD 021e01H
	DD	07006120aH
$unwind$?cw_strcpy@@YAHPEADPEB_W@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcpy@@YAHPEA_WPEBD@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcpy@@YAHPEADPEBD@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcpy@@YAHPEA_WPEB_W@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcat@@YAHPEADPEB_W@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcat@@YAHPEA_WPEBD@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcat@@YAHPEADPEBD@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_strcat@@YAHPEA_WPEB_W@Z DD 022301H
	DD	0700b320fH
$unwind$?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z DD 022d01H
	DD	070155219H
$unwind$?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z DD 022d01H
	DD	070155219H
$unwind$?DupChar@_CW@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?DupWide@_CW@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?GetCharsMbcs@_CW@@QEAAHXZ DD 021e01H
	DD	07006320aH
$unwind$?GetCharsWide@_CW@@QEAAHXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
this$ = 48
?GetCharsWide@_CW@@QEAAHXZ PROC				; _CW::GetCharsWide

; 438  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 439  :     if (m_pWide == (wchar_t*)-1)

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 ff	 cmp	 QWORD PTR [rax+8], -1
  00028	75 0c		 jne	 SHORT $LN2@GetCharsWi

; 440  :         DupWide();

  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002f	e8 00 00 00 00	 call	 ?DupWide@_CW@@AEAAXXZ	; _CW::DupWide
  00034	eb 21		 jmp	 SHORT $LN3@GetCharsWi
$LN2@GetCharsWi:

; 441  :     else if ( m_nCharsWide < 0 )

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003b	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  0003f	7d 16		 jge	 SHORT $LN4@GetCharsWi

; 442  :         m_nCharsWide = cw_strlen( m_pWide );

  00041	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00046	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004a	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEB_W@Z	; cw_strlen
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00054	89 41 14	 mov	 DWORD PTR [rcx+20], eax
$LN4@GetCharsWi:
$LN3@GetCharsWi:

; 443  :     return m_nCharsWide;

  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0005c	8b 40 14	 mov	 eax, DWORD PTR [rax+20]

; 444  : }

  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
?GetCharsWide@_CW@@QEAAHXZ ENDP				; _CW::GetCharsWide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
this$ = 48
?GetCharsMbcs@_CW@@QEAAHXZ PROC				; _CW::GetCharsMbcs

; 429  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 430  :     if (m_pChar == (char*)-1)

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 ff	 cmp	 QWORD PTR [rax], -1
  00027	75 0c		 jne	 SHORT $LN2@GetCharsMb

; 431  :         DupChar();

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?DupChar@_CW@@AEAAXXZ	; _CW::DupChar
  00033	eb 20		 jmp	 SHORT $LN3@GetCharsMb
$LN2@GetCharsMb:

; 432  :     else if ( m_nChars < 0 )

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  0003e	7d 15		 jge	 SHORT $LN4@GetCharsMb

; 433  :         m_nChars = cw_strlen( m_pChar );

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEBD@Z	; cw_strlen
  0004d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00052	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN4@GetCharsMb:
$LN3@GetCharsMb:

; 434  :     return m_nChars;

  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0005a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]

; 435  : }

  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
?GetCharsMbcs@_CW@@QEAAHXZ ENDP				; _CW::GetCharsMbcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
this$ = 48
?DupWide@_CW@@AEAAXXZ PROC				; _CW::DupWide

; 423  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 424  :     cw_dup(m_pChar, m_nChars, m_pWide, m_nCharsWide);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 14	 add	 rax, 20
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	48 83 c1 08	 add	 rcx, 8
  00030	48 8b 54 24 30	 mov	 rdx, QWORD PTR this$[rsp]
  00035	48 83 c2 10	 add	 rdx, 16
  00039	4c 8b c8	 mov	 r9, rax
  0003c	4c 8b c1	 mov	 r8, rcx
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	e8 00 00 00 00	 call	 ?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z ; cw_dup

; 425  :     m_nDupFlag = 'w';

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00051	c6 40 18 77	 mov	 BYTE PTR [rax+24], 119	; 00000077H

; 426  : }

  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
?DupWide@_CW@@AEAAXXZ ENDP				; _CW::DupWide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
this$ = 48
?DupChar@_CW@@AEAAXXZ PROC				; _CW::DupChar

; 417  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 418  :     cw_dup(m_pWide, m_nCharsWide, m_pChar, m_nChars);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 10	 add	 rax, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	48 8b 54 24 30	 mov	 rdx, QWORD PTR this$[rsp]
  00031	48 83 c2 14	 add	 rdx, 20
  00035	4c 8b c8	 mov	 r9, rax
  00038	4c 8b c1	 mov	 r8, rcx
  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00040	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00044	e8 00 00 00 00	 call	 ?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z ; cw_dup

; 419  :     m_nDupFlag = 'c';

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004e	c6 40 18 63	 mov	 BYTE PTR [rax+24], 99	; 00000063H

; 420  : }

  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
?DupChar@_CW@@AEAAXXZ ENDP				; _CW::DupChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
$T1 = 32
pSrc$ = 64
nSrcChars$ = 72
pTarget$ = 80
nTargetChars$ = 88
?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z PROC			; cw_dup

; 382  : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 383  :     if ( pSrc == 0 )

  0002d	48 83 7c 24 40
	00		 cmp	 QWORD PTR pSrc$[rsp], 0
  00033	75 27		 jne	 SHORT $LN2@cw_dup

; 384  :     {
; 385  :         nSrcChars = nTargetChars = 0;

  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR nTargetChars$[rsp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 386  :         pTarget = 0;

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  00050	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 387  :         return;

  00057	e9 82 00 00 00	 jmp	 $LN1@cw_dup
$LN2@cw_dup:

; 388  :     }
; 389  : 
; 390  :     if ( nSrcChars < 0 )

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  00061	83 38 00	 cmp	 DWORD PTR [rax], 0
  00064	7d 11		 jge	 SHORT $LN3@cw_dup

; 391  :         nSrcChars = cw_strlen( pSrc );

  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pSrc$[rsp]
  0006b	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEB_W@Z	; cw_strlen
  00070	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nSrcChars$[rsp]
  00075	89 01		 mov	 DWORD PTR [rcx], eax
$LN3@cw_dup:

; 392  :     /* ==> Implementation one -- minimize memory.
; 393  :     nTargetChars = cw_memcpy( (char*) NULL, pSrc, nSrcChars );
; 394  :         // Determine how many characters are needed.
; 395  :         //   Can't assume one-to-one (some wide chars may need 2 multibyte chars),
; 396  :         //   but don't want to waste a bunch of bytes either.
; 397  :     pTarget = new char[nTargetChars+1];
; 398  :     */
; 399  :     /* ==> Implementation two -- maximize speed, with side effect of allocating up
; 400  :     **      to twice the memory needed (worst case when no multibyte chars needed).
; 401  :     **     Chose this because most converted strings will be short-lived.
; 402  :     */
; 403  :     pTarget = new char[(nSrcChars+1)*2];

  00077	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  0007c	8b 00		 mov	 eax, DWORD PTR [rax]
  0007e	8d 44 00 02	 lea	 eax, DWORD PTR [rax+rax+2]
  00082	48 98		 cdqe
  00084	48 8b c8	 mov	 rcx, rax
  00087	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  0008c	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  00096	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0009b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 404  :     if (pTarget)

  0009e	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  000a3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000a7	74 35		 je	 SHORT $LN4@cw_dup

; 405  :     {
; 406  :         nTargetChars = cw_memcpy( pTarget, pSrc, nSrcChars );

  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  000ae	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000b1	48 8b 54 24 40	 mov	 rdx, QWORD PTR pSrc$[rsp]
  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  000bb	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000be	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEADPEB_WH@Z ; cw_memcpy
  000c3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR nTargetChars$[rsp]
  000c8	89 01		 mov	 DWORD PTR [rcx], eax

; 407  :         pTarget[nTargetChars] = 0;

  000ca	48 8b 44 24 58	 mov	 rax, QWORD PTR nTargetChars$[rsp]
  000cf	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000d2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pTarget$[rsp]
  000d7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000da	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN4@cw_dup:
$LN1@cw_dup:

; 408  :     }
; 409  : }

  000de	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0
?cw_dup@@YAXPEB_WAEAHAEAPEAD1@Z ENDP			; cw_dup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
$T1 = 32
tv72 = 40
pSrc$ = 64
nSrcChars$ = 72
pTarget$ = 80
nTargetChars$ = 88
?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z PROC			; cw_dup

; 359  : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 360  :     if ( pSrc == 0 )

  0002d	48 83 7c 24 40
	00		 cmp	 QWORD PTR pSrc$[rsp], 0
  00033	75 27		 jne	 SHORT $LN2@cw_dup

; 361  :     {
; 362  :         nSrcChars = nTargetChars = 0;

  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR nTargetChars$[rsp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 363  :         pTarget = 0;

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  00050	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 364  :         return;

  00057	e9 9f 00 00 00	 jmp	 $LN1@cw_dup
$LN2@cw_dup:

; 365  :     }
; 366  : 
; 367  :     if ( nSrcChars < 0 )

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  00061	83 38 00	 cmp	 DWORD PTR [rax], 0
  00064	7d 11		 jge	 SHORT $LN3@cw_dup

; 368  :         nSrcChars = cw_strlen( pSrc );

  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pSrc$[rsp]
  0006b	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEBD@Z	; cw_strlen
  00070	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nSrcChars$[rsp]
  00075	89 01		 mov	 DWORD PTR [rcx], eax
$LN3@cw_dup:

; 369  :     pTarget = new wchar_t[nSrcChars+1];

  00077	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  0007c	8b 00		 mov	 eax, DWORD PTR [rax]
  0007e	ff c0		 inc	 eax
  00080	48 98		 cdqe
  00082	48 89 44 24 28	 mov	 QWORD PTR tv72[rsp], rax
  00087	b8 02 00 00 00	 mov	 eax, 2
  0008c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv72[rsp]
  00091	48 f7 e1	 mul	 rcx
  00094	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0009b	48 0f 40 c1	 cmovo	 rax, rcx
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  000a7	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  000ac	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  000b1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  000b6	48 89 08	 mov	 QWORD PTR [rax], rcx

; 370  :         // We allow one wide char for each multibyte char;
; 371  :         //   this may be too many for some countries, but no harm.
; 372  :     if (pTarget)

  000b9	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  000be	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000c2	74 37		 je	 SHORT $LN4@cw_dup

; 373  :     {
; 374  :         nTargetChars = cw_memcpy( pTarget, pSrc, nSrcChars );

  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR nSrcChars$[rsp]
  000c9	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000cc	48 8b 54 24 40	 mov	 rdx, QWORD PTR pSrc$[rsp]
  000d1	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  000d6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000d9	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEA_WPEBDH@Z ; cw_memcpy
  000de	48 8b 4c 24 58	 mov	 rcx, QWORD PTR nTargetChars$[rsp]
  000e3	89 01		 mov	 DWORD PTR [rcx], eax

; 375  :         pTarget[nTargetChars] = 0;

  000e5	48 8b 44 24 58	 mov	 rax, QWORD PTR nTargetChars$[rsp]
  000ea	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000ed	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pTarget$[rsp]
  000f2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f5	33 d2		 xor	 edx, edx
  000f7	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx
$LN4@cw_dup:
$LN1@cw_dup:

; 376  :     }
; 377  : }

  000fb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
?cw_dup@@YAXPEBDAEAHAEAPEA_W1@Z ENDP			; cw_dup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcat@@YAHPEA_WPEB_W@Z PROC			; cw_strcat

; 347  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 348  :     return cw_memcpy(pszTarget + cw_strlen(pszTarget), pszSrc, -1) - 1;

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00028	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEB_W@Z	; cw_strlen
  0002d	48 98		 cdqe
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00034	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00038	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0003e	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEA_WPEB_WH@Z ; cw_memcpy
  0004b	ff c8		 dec	 eax

; 349  : }       //   Return chars copied (not including NUL).

  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
?cw_strcat@@YAHPEA_WPEB_W@Z ENDP			; cw_strcat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcat@@YAHPEADPEBD@Z PROC				; cw_strcat

; 342  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 343  :     return cw_memcpy(pszTarget + cw_strlen(pszTarget), pszSrc, -1) - 1;

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00028	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEBD@Z	; cw_strlen
  0002d	48 98		 cdqe
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00040	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEADPEBDH@Z ; cw_memcpy
  0004d	ff c8		 dec	 eax

; 344  : }       //   Return chars copied (not including NUL).

  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
?cw_strcat@@YAHPEADPEBD@Z ENDP				; cw_strcat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcat@@YAHPEA_WPEBD@Z PROC				; cw_strcat

; 337  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 338  :     return cw_memcpy(pszTarget + cw_strlen(pszTarget), pszSrc, -1) - 1;

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00028	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEB_W@Z	; cw_strlen
  0002d	48 98		 cdqe
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00034	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00038	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0003e	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEA_WPEBDH@Z ; cw_memcpy
  0004b	ff c8		 dec	 eax

; 339  : }       //   Return chars copied (not including NUL).

  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
?cw_strcat@@YAHPEA_WPEBD@Z ENDP				; cw_strcat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcat@@YAHPEADPEB_W@Z PROC				; cw_strcat

; 332  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 333  :     return cw_memcpy(pszTarget + cw_strlen(pszTarget), pszSrc, -1) - 1;

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00028	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEBD@Z	; cw_strlen
  0002d	48 98		 cdqe
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00040	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEADPEB_WH@Z ; cw_memcpy
  0004d	ff c8		 dec	 eax

; 334  : }       //   Return chars copied (not including NUL).

  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
?cw_strcat@@YAHPEADPEB_W@Z ENDP				; cw_strcat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcpy@@YAHPEA_WPEB_W@Z PROC			; cw_strcpy

; 322  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 323  :     return cw_memcpy(pszTarget, pszSrc, -1) - 1;            //   Return chars copied (not including NUL).

  00023	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00033	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEA_WPEB_WH@Z ; cw_memcpy
  00038	ff c8		 dec	 eax

; 324  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
?cw_strcpy@@YAHPEA_WPEB_W@Z ENDP			; cw_strcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcpy@@YAHPEADPEBD@Z PROC				; cw_strcpy

; 317  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 318  :     return cw_memcpy(pszTarget, pszSrc, -1) - 1;            //   Return chars copied (not including NUL).

  00023	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00033	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEADPEBDH@Z ; cw_memcpy
  00038	ff c8		 dec	 eax

; 319  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
?cw_strcpy@@YAHPEADPEBD@Z ENDP				; cw_strcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcpy@@YAHPEA_WPEBD@Z PROC				; cw_strcpy

; 312  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 313  :     return cw_memcpy(pszTarget, pszSrc, -1) - 1;            //   Return chars copied (not including NUL).

  00023	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00033	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEA_WPEBDH@Z ; cw_memcpy
  00038	ff c8		 dec	 eax

; 314  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
?cw_strcpy@@YAHPEA_WPEBD@Z ENDP				; cw_strcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pszTarget$ = 48
pszSrc$ = 56
?cw_strcpy@@YAHPEADPEB_W@Z PROC				; cw_strcpy

; 307  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 308  :     return cw_memcpy(pszTarget, pszSrc, -1) - 1;            //   Return chars copied (not including NUL).

  00023	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR pszSrc$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pszTarget$[rsp]
  00033	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEADPEB_WH@Z ; cw_memcpy
  00038	ff c8		 dec	 eax

; 309  : }

  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
?cw_strcpy@@YAHPEADPEB_W@Z ENDP				; cw_strcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
nCount$ = 0
pChar$ = 32
?cw_strlen@@YAHPEB_W@Z PROC				; cw_strlen

; 125  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 126  : #if defined(_M_IX86) || defined(_M_X64)
; 127  :     int nCount = 0;

  0001e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nCount$[rsp], 0

; 128  :     if ( pChar && *pChar )

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR pChar$[rsp], 0
  0002b	74 2e		 je	 SHORT $LN5@cw_strlen
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR pChar$[rsp]
  00032	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00035	85 c0		 test	 eax, eax
  00037	74 22		 je	 SHORT $LN5@cw_strlen
$LN4@cw_strlen:

; 129  :     {
; 130  :         do nCount++;

  00039	8b 04 24	 mov	 eax, DWORD PTR nCount$[rsp]
  0003c	ff c0		 inc	 eax
  0003e	89 04 24	 mov	 DWORD PTR nCount$[rsp], eax

; 131  :         while (*++pChar);

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR pChar$[rsp]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 89 44 24 20	 mov	 QWORD PTR pChar$[rsp], rax
  0004f	48 8b 44 24 20	 mov	 rax, QWORD PTR pChar$[rsp]
  00054	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00057	85 c0		 test	 eax, eax
  00059	75 de		 jne	 SHORT $LN4@cw_strlen
$LN5@cw_strlen:

; 132  :     }
; 133  :     return nCount;

  0005b	8b 04 24	 mov	 eax, DWORD PTR nCount$[rsp]

; 134  : 
; 135  : #else
; 136  :     int nCount = 0;
; 137  :     const char* pNChar = (const char*) pChar;
; 138  :     if ( pNChar && ( pNChar[0] | pNChar[1] ) != 0 )
; 139  :     {
; 140  :         do
; 141  :         {
; 142  :             nCount++;
; 143  :             pNChar += 2;
; 144  :         }
; 145  :         while ( ( pNChar[0] | pNChar[1] ) != 0 );
; 146  :     }
; 147  :     return nCount;
; 148  : #endif
; 149  : }

  0005e	48 83 c4 10	 add	 rsp, 16
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
?cw_strlen@@YAHPEB_W@Z ENDP				; cw_strlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
nCount$ = 0
pChar$ = 32
?cw_strlen@@YAHPEBD@Z PROC				; cw_strlen

; 114  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 115  :     int nCount = 0;

  0001e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nCount$[rsp], 0

; 116  :     if ( pChar && *pChar )

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR pChar$[rsp], 0
  0002b	74 2d		 je	 SHORT $LN5@cw_strlen
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR pChar$[rsp]
  00032	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00035	85 c0		 test	 eax, eax
  00037	74 21		 je	 SHORT $LN5@cw_strlen
$LN4@cw_strlen:

; 117  :     {
; 118  :         do nCount++;

  00039	8b 04 24	 mov	 eax, DWORD PTR nCount$[rsp]
  0003c	ff c0		 inc	 eax
  0003e	89 04 24	 mov	 DWORD PTR nCount$[rsp], eax

; 119  :         while (*++pChar);

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR pChar$[rsp]
  00046	48 ff c0	 inc	 rax
  00049	48 89 44 24 20	 mov	 QWORD PTR pChar$[rsp], rax
  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR pChar$[rsp]
  00053	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00056	85 c0		 test	 eax, eax
  00058	75 df		 jne	 SHORT $LN4@cw_strlen
$LN5@cw_strlen:

; 120  :     }
; 121  :     return nCount;

  0005a	8b 04 24	 mov	 eax, DWORD PTR nCount$[rsp]

; 122  : }

  0005d	48 83 c4 10	 add	 rsp, 16
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
?cw_strlen@@YAHPEBD@Z ENDP				; cw_strlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
n$1 = 0
pCharTarget$2 = 8
pTarget$ = 32
cChar$ = 40
nCount$ = 48
?cw_memset@@YAXPEA_W_WH@Z PROC				; cw_memset

; 79   : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 10	 sub	 rsp, 16
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 04 00 00 00	 mov	 ecx, 4
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 80   :     // If Intel x86, resort to assembly...
; 81   : #if defined(_M_IX86)
; 82   :     _asm
; 83   :     {
; 84   :         mov ecx, nCount                 // Get count.
; 85   :         jcxz L2                         //   If zero, then jump: Nothing to do.
; 86   : 
; 87   :         mov edi, pTarget                // Get pointer to destination.
; 88   :         mov ax, cChar                   // Get wide character to set.
; 89   :         rep stosw                       // Set wide character for ECX times.
; 90   : 
; 91   :     L2:
; 92   :     }
; 93   : 
; 94   :     // If not Intel or alignment required, then set low and high bytes separately.
; 95   : #else
; 96   :     if ( nCount > 0 )

  00028	83 7c 24 30 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0002d	7e 61		 jle	 SHORT $LN5@cw_memset

; 97   :     {
; 98   :         int n = nCount;

  0002f	8b 44 24 30	 mov	 eax, DWORD PTR nCount$[rsp]
  00033	89 04 24	 mov	 DWORD PTR n$1[rsp], eax

; 99   :         char* pCharTarget = (char*) pTarget;

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR pTarget$[rsp]
  0003b	48 89 44 24 08	 mov	 QWORD PTR pCharTarget$2[rsp], rax
$LN4@cw_memset:

; 100  :         do {
; 101  :             *pCharTarget++ = LOBYTE(cChar);

  00040	0f b7 44 24 28	 movzx	 eax, WORD PTR cChar$[rsp]
  00045	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0004b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCharTarget$2[rsp]
  00050	88 01		 mov	 BYTE PTR [rcx], al
  00052	48 8b 44 24 08	 mov	 rax, QWORD PTR pCharTarget$2[rsp]
  00057	48 ff c0	 inc	 rax
  0005a	48 89 44 24 08	 mov	 QWORD PTR pCharTarget$2[rsp], rax

; 102  :             *pCharTarget++ = HIBYTE(cChar);

  0005f	0f b7 44 24 28	 movzx	 eax, WORD PTR cChar$[rsp]
  00064	48 c1 e8 08	 shr	 rax, 8
  00068	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0006e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCharTarget$2[rsp]
  00073	88 01		 mov	 BYTE PTR [rcx], al
  00075	48 8b 44 24 08	 mov	 rax, QWORD PTR pCharTarget$2[rsp]
  0007a	48 ff c0	 inc	 rax
  0007d	48 89 44 24 08	 mov	 QWORD PTR pCharTarget$2[rsp], rax

; 103  :         } while ( --n );

  00082	8b 04 24	 mov	 eax, DWORD PTR n$1[rsp]
  00085	ff c8		 dec	 eax
  00087	89 04 24	 mov	 DWORD PTR n$1[rsp], eax
  0008a	83 3c 24 00	 cmp	 DWORD PTR n$1[rsp], 0
  0008e	75 b0		 jne	 SHORT $LN4@cw_memset
$LN5@cw_memset:

; 104  :     }
; 105  : #endif
; 106  : }

  00090	48 83 c4 10	 add	 rsp, 16
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
?cw_memset@@YAXPEA_W_WH@Z ENDP				; cw_memset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
n$1 = 0
pTarget$ = 32
cChar$ = 40
nCount$ = 48
?cw_memset@@YAXPEADDH@Z PROC				; cw_memset

; 51   : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 10	 sub	 rsp, 16
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 04 00 00 00	 mov	 ecx, 4
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 52   :     // If Intel x86, resort to assembly...
; 53   : #if defined(_M_IX86)
; 54   :     _asm
; 55   :     {
; 56   :         mov ecx, nCount                 // Get count.
; 57   :         jcxz L2                         //   If zero, then jump: Nothing to do.
; 58   : 
; 59   :         mov edi, pTarget                // Get pointer to destination.
; 60   :         mov al, cChar                   // Get character to set.
; 61   :         rep stosb                       // Set character for ECX times.
; 62   : 
; 63   :     L2:
; 64   :     }
; 65   : 
; 66   :     // If not Intel, use tight loop.
; 67   : #else
; 68   :     if ( nCount > 0 )

  00027	83 7c 24 30 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0002c	7e 2e		 jle	 SHORT $LN5@cw_memset

; 69   :     {
; 70   :         int n = nCount;

  0002e	8b 44 24 30	 mov	 eax, DWORD PTR nCount$[rsp]
  00032	89 04 24	 mov	 DWORD PTR n$1[rsp], eax
$LN4@cw_memset:

; 71   :         do {
; 72   :             *pTarget++ = cChar;

  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR pTarget$[rsp]
  0003a	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR cChar$[rsp]
  0003f	88 08		 mov	 BYTE PTR [rax], cl
  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR pTarget$[rsp]
  00046	48 ff c0	 inc	 rax
  00049	48 89 44 24 20	 mov	 QWORD PTR pTarget$[rsp], rax

; 73   :         } while ( --n );

  0004e	8b 04 24	 mov	 eax, DWORD PTR n$1[rsp]
  00051	ff c8		 dec	 eax
  00053	89 04 24	 mov	 DWORD PTR n$1[rsp], eax
  00056	83 3c 24 00	 cmp	 DWORD PTR n$1[rsp], 0
  0005a	75 d9		 jne	 SHORT $LN4@cw_memset
$LN5@cw_memset:

; 74   :     }
; 75   : #endif
; 76   : }

  0005c	48 83 c4 10	 add	 rsp, 16
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
?cw_memset@@YAXPEADDH@Z ENDP				; cw_memset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pTarget$ = 48
pSrc$ = 56
nCount$ = 64
?cw_memcpy@@YAHPEA_WPEB_WH@Z PROC			; cw_memcpy

; 294  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 295  :     if ( nCount < 0 )

  00028	83 7c 24 40 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0002d	7d 10		 jge	 SHORT $LN2@cw_memcpy

; 296  :         nCount = cw_strlen(pSrc) + 1;

  0002f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pSrc$[rsp]
  00034	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEB_W@Z	; cw_strlen
  00039	ff c0		 inc	 eax
  0003b	89 44 24 40	 mov	 DWORD PTR nCount$[rsp], eax
$LN2@cw_memcpy:

; 297  :     cw_memcpy( (char*) pTarget, (const char*) pSrc, nCount * sizeof(wchar_t) );

  0003f	48 63 44 24 40	 movsxd	 rax, DWORD PTR nCount$[rsp]
  00044	48 d1 e0	 shl	 rax, 1
  00047	44 8b c0	 mov	 r8d, eax
  0004a	48 8b 54 24 38	 mov	 rdx, QWORD PTR pSrc$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTarget$[rsp]
  00054	e8 00 00 00 00	 call	 ?cw_memcpy@@YAHPEADPEBDH@Z ; cw_memcpy

; 298  :     return nCount;

  00059	8b 44 24 40	 mov	 eax, DWORD PTR nCount$[rsp]

; 299  : }

  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
?cw_memcpy@@YAHPEA_WPEB_WH@Z ENDP			; cw_memcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
n$1 = 32
pTarget$ = 64
pSrc$ = 72
nCount$ = 80
?cw_memcpy@@YAHPEADPEBDH@Z PROC				; cw_memcpy

; 257  : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 258  :     if ( nCount < 0 )

  00028	83 7c 24 50 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0002d	7d 10		 jge	 SHORT $LN5@cw_memcpy

; 259  :         nCount = cw_strlen(pSrc) + 1;

  0002f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pSrc$[rsp]
  00034	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEBD@Z	; cw_strlen
  00039	ff c0		 inc	 eax
  0003b	89 44 24 50	 mov	 DWORD PTR nCount$[rsp], eax
$LN5@cw_memcpy:

; 260  :     if ( pTarget && nCount )

  0003f	48 83 7c 24 40
	00		 cmp	 QWORD PTR pTarget$[rsp], 0
  00045	74 49		 je	 SHORT $LN6@cw_memcpy
  00047	83 7c 24 50 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0004c	74 42		 je	 SHORT $LN6@cw_memcpy

; 261  :     {
; 262  :         // If Intel x86, resort to assembly...
; 263  : #if defined(_M_IX86)
; 264  :         _asm
; 265  :         {
; 266  :             mov ecx, nCount                 // Get count.
; 267  :             jcxz L2                         //   If zero, then jump: Nothing to do.
; 268  : 
; 269  :             mov esi, pSrc                   // Get pointer to source.
; 270  :             mov edi, pTarget                // Get pointer to destination.
; 271  :             rep movsb                       // Move characters from ESI to EDI for ECX times.
; 272  : 
; 273  :         L2:
; 274  :         }
; 275  : 
; 276  :         // If not Intel, use tight loop.
; 277  : #else
; 278  :         int n = nCount;

  0004e	8b 44 24 50	 mov	 eax, DWORD PTR nCount$[rsp]
  00052	89 44 24 20	 mov	 DWORD PTR n$1[rsp], eax
$LN4@cw_memcpy:

; 279  :         do {
; 280  :             *pTarget++ = *pSrc++;

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR pTarget$[rsp]
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pSrc$[rsp]
  00060	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00063	88 08		 mov	 BYTE PTR [rax], cl
  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR pTarget$[rsp]
  0006a	48 ff c0	 inc	 rax
  0006d	48 89 44 24 40	 mov	 QWORD PTR pTarget$[rsp], rax
  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR pSrc$[rsp]
  00077	48 ff c0	 inc	 rax
  0007a	48 89 44 24 48	 mov	 QWORD PTR pSrc$[rsp], rax

; 281  :         } while ( --n );

  0007f	8b 44 24 20	 mov	 eax, DWORD PTR n$1[rsp]
  00083	ff c8		 dec	 eax
  00085	89 44 24 20	 mov	 DWORD PTR n$1[rsp], eax
  00089	83 7c 24 20 00	 cmp	 DWORD PTR n$1[rsp], 0
  0008e	75 c6		 jne	 SHORT $LN4@cw_memcpy
$LN6@cw_memcpy:

; 282  : #endif
; 283  :     }
; 284  :     return nCount;

  00090	8b 44 24 50	 mov	 eax, DWORD PTR nCount$[rsp]

; 285  : }

  00094	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00098	5f		 pop	 rdi
  00099	c3		 ret	 0
?cw_memcpy@@YAHPEADPEBDH@Z ENDP				; cw_memcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pTarget$ = 64
pSrc$ = 72
nCount$ = 80
?cw_memcpy@@YAHPEA_WPEBDH@Z PROC			; cw_memcpy

; 162  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 163  :     if ( nCount == 0 )

  00028	83 7c 24 50 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN2@cw_memcpy

; 164  :         return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 3d		 jmp	 SHORT $LN1@cw_memcpy
$LN2@cw_memcpy:

; 165  :     if ( nCount < 0 )

  00033	83 7c 24 50 00	 cmp	 DWORD PTR nCount$[rsp], 0
  00038	7d 10		 jge	 SHORT $LN3@cw_memcpy

; 166  :         nCount = cw_strlen( pSrc ) + 1;

  0003a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pSrc$[rsp]
  0003f	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEBD@Z	; cw_strlen
  00044	ff c0		 inc	 eax
  00046	89 44 24 50	 mov	 DWORD PTR nCount$[rsp], eax
$LN3@cw_memcpy:

; 167  : 
; 168  : #if defined(_M_IX86) || defined(_M_X64)
; 169  :     return MultiByteToWideChar(

  0004a	8b 44 24 50	 mov	 eax, DWORD PTR nCount$[rsp]
  0004e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR pTarget$[rsp]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nCount$[rsp]
  00061	4c 8b 44 24 48	 mov	 r8, QWORD PTR pSrc$[rsp]
  00066	33 d2		 xor	 edx, edx
  00068	33 c9		 xor	 ecx, ecx
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MultiByteToWideChar
$LN1@cw_memcpy:

; 170  :         CP_ACP,         // code page
; 171  :         0,              // character-type options
; 172  :         pSrc,           // address of string to map
; 173  :         nCount,         // number of characters in string
; 174  :         pTarget,        // address of wide-character buffer
; 175  :         nCount );       // size of buffer.
; 176  :                         //   This is worst case (no multi-byte chars).
; 177  :                         //   We assume that the caller passed a big enough buffer.
; 178  : 
; 179  : #else
; 180  :     wchar_t* pWide = pTarget;
; 181  :     if ( (DWORD) pWide & 1 )
; 182  :         pWide = new wchar_t[nCount];
; 183  :     nCount = MultiByteToWideChar(
; 184  :         CP_ACP,         // code page
; 185  :         0,              // character-type options
; 186  :         pSrc,           // address of string to map
; 187  :         nCount,         // number of characters in string
; 188  :         pWide,          // address of wide-character buffer
; 189  :         nCount );       // size of buffer.
; 190  :                         //   This is worst case (no multi-byte chars).
; 191  :                         //   We assume that the caller passed a big enough buffer.
; 192  :     if ( pTarget != pWide )
; 193  :     {
; 194  :         cw_memcpy( (char*) pTarget, (const char*) pWide, nCount * sizeof(wchar_t) );
; 195  :         delete [] pWide;
; 196  :     }
; 197  :     return nCount;
; 198  : #endif
; 199  : }

  00070	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
?cw_memcpy@@YAHPEA_WPEBDH@Z ENDP			; cw_memcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.cpp
_TEXT	SEGMENT
pTarget$ = 80
pSrc$ = 88
nCount$ = 96
?cw_memcpy@@YAHPEADPEB_WH@Z PROC			; cw_memcpy

; 207  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 208  :     if ( nCount == 0 )

  00028	83 7c 24 60 00	 cmp	 DWORD PTR nCount$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN2@cw_memcpy

; 209  :         return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 51		 jmp	 SHORT $LN1@cw_memcpy
$LN2@cw_memcpy:

; 210  :     if ( nCount < 0 )

  00033	83 7c 24 60 00	 cmp	 DWORD PTR nCount$[rsp], 0
  00038	7d 10		 jge	 SHORT $LN3@cw_memcpy

; 211  :         nCount = cw_strlen( pSrc ) + 1;

  0003a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pSrc$[rsp]
  0003f	e8 00 00 00 00	 call	 ?cw_strlen@@YAHPEB_W@Z	; cw_strlen
  00044	ff c0		 inc	 eax
  00046	89 44 24 60	 mov	 DWORD PTR nCount$[rsp], eax
$LN3@cw_memcpy:

; 212  : 
; 213  : #if defined(_M_IX86) || defined(_M_X64)
; 214  :     return WideCharToMultiByte(

  0004a	8b 44 24 60	 mov	 eax, DWORD PTR nCount$[rsp]
  0004e	d1 e0		 shl	 eax, 1
  00050	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  00059	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00062	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR pTarget$[rsp]
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	44 8b 4c 24 60	 mov	 r9d, DWORD PTR nCount$[rsp]
  00075	4c 8b 44 24 58	 mov	 r8, QWORD PTR pSrc$[rsp]
  0007a	33 d2		 xor	 edx, edx
  0007c	33 c9		 xor	 ecx, ecx
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WideCharToMultiByte
$LN1@cw_memcpy:

; 215  :         CP_ACP,         // code page
; 216  :         0,              // performance and mapping flags
; 217  :         pSrc,           // address of wide character string
; 218  :         nCount,         // number of characters in string
; 219  :         pTarget,        // address of buffer for new string
; 220  :         nCount*2,       // size of buffer
; 221  :                         //   This is worst case (every wide -> multi-byte char).
; 222  :                         //   We assume that the caller passed a big enough buffer.
; 223  :         NULL,           // address of default for unmappable characters
; 224  :         NULL );         // address of flag set when default char.
; 225  : 
; 226  : #else
; 227  :     wchar_t* pWide = (wchar_t*) pSrc;
; 228  :     if ( (DWORD) pWide & 1 )
; 229  :     {
; 230  :         pWide = new wchar_t[nCount];
; 231  :         cw_memcpy( (char*) pWide, (const char*) pSrc, nCount * sizeof(wchar_t) );
; 232  :     }
; 233  :     nCount = WideCharToMultiByte(
; 234  :         CP_ACP,         // code page
; 235  :         0,              // performance and mapping flags
; 236  :         pWide,          // address of wide character string
; 237  :         nCount,         // number of characters in string
; 238  :         pTarget,        // address of buffer for new string
; 239  :         nCount*2,       // size of buffer
; 240  :                         //   This is worst case (every wide -> multi-byte char).
; 241  :                         //   We assume that the caller passed a big enough buffer.
; 242  :         NULL,           // address of default for unmappable characters
; 243  :         NULL );         // address of flag set when default char.
; 244  :     if ( pSrc != pWide )
; 245  :         delete [] pWide;
; 246  :     return nCount;
; 247  : #endif
; 248  : }

  00084	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
?cw_memcpy@@YAHPEADPEB_WH@Z ENDP			; cw_memcpy
_TEXT	ENDS
END
