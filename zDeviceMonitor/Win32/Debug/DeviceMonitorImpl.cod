; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?WM_ATLGETHOST@ATL@@3IA				; ATL::WM_ATLGETHOST
PUBLIC	?WM_ATLGETCONTROL@ATL@@3IA			; ATL::WM_ATLGETCONTROL
PUBLIC	_LIBID_ATLLib
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?g_WindowName@@3PA_WA				; g_WindowName
PUBLIC	?g_ControlDescription@@3PADA			; g_ControlDescription
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?s_nInstances@COPOSDeviceMonitor@@1HA		; COPOSDeviceMonitor::s_nInstances
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?g_ControlVersion@@3JA				; g_ControlVersion
PUBLIC	?chDirSep@ATL@@3_WB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3_WB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3_WB			; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3_WB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3_WB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QB_WB			; ATL::szStringVal
PUBLIC	?multiszStringVal@ATL@@3QB_WB			; ATL::multiszStringVal
PUBLIC	?szDwordVal@ATL@@3QB_WB				; ATL::szDwordVal
PUBLIC	?szBinaryVal@ATL@@3QB_WB			; ATL::szBinaryVal
PUBLIC	?szValToken@ATL@@3QB_WB				; ATL::szValToken
PUBLIC	?szForceRemove@ATL@@3QB_WB			; ATL::szForceRemove
PUBLIC	?szNoRemove@ATL@@3QB_WB				; ATL::szNoRemove
PUBLIC	?szDelete@ATL@@3QB_WB				; ATL::szDelete
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	_IID_IInternalConnection
;	COMDAT ?WM_ATLGETHOST@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETHOST@ATL@@3IA DD 01H DUP (?)			; ATL::WM_ATLGETHOST
_BSS	ENDS
;	COMDAT ?WM_ATLGETCONTROL@ATL@@3IA
_BSS	SEGMENT
?WM_ATLGETCONTROL@ATL@@3IA DD 01H DUP (?)		; ATL::WM_ATLGETCONTROL
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
_BSS	SEGMENT
?s_nInstances@COPOSDeviceMonitor@@1HA DD 01H DUP (?)	; COPOSDeviceMonitor::s_nInstances
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QB_WB
CONST	SEGMENT
?szDelete@ATL@@3QB_WB DD FLAT:$SG111376			; ATL::szDelete
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QB_WB
CONST	SEGMENT
?szNoRemove@ATL@@3QB_WB DD FLAT:$SG111374		; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QB_WB
CONST	SEGMENT
?szForceRemove@ATL@@3QB_WB DD FLAT:$SG111372		; ATL::szForceRemove
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QB_WB
CONST	SEGMENT
?szValToken@ATL@@3QB_WB DD FLAT:$SG111370		; ATL::szValToken
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QB_WB
CONST	SEGMENT
?szBinaryVal@ATL@@3QB_WB DD FLAT:$SG111368		; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QB_WB
CONST	SEGMENT
?szDwordVal@ATL@@3QB_WB DD FLAT:$SG111366		; ATL::szDwordVal
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QB_WB
CONST	SEGMENT
?multiszStringVal@ATL@@3QB_WB DD FLAT:$SG111364		; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QB_WB
CONST	SEGMENT
?szStringVal@ATL@@3QB_WB DD FLAT:$SG111362		; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3_WB
CONST	SEGMENT
?chEquals@ATL@@3_WB DW 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3_WB
CONST	SEGMENT
?chQuote@ATL@@3_WB DW 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3_WB
CONST	SEGMENT
?chLeftBracket@ATL@@3_WB DW 07bH			; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3_WB
CONST	SEGMENT
?chRightBracket@ATL@@3_WB DW 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3_WB
CONST	SEGMENT
?chDirSep@ATL@@3_WB DW 05cH				; ATL::chDirSep
CONST	ENDS
_DATA	SEGMENT
?g_WindowName@@3PA_WA DB 'H', 00H, 'W', 00H, '_', 00H, 'O', 00H, 'P', 00H
	DB	'O', 00H, 'S', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H			; g_WindowName
	ORG $+6
?g_ControlDescription@@3PADA DB 'OPOS DeviceMonitor Control 1.16.000 [Pub'
	DB	'lic, by KF] [With Tracing]', 00H		; g_ControlDescription
	ORG $+1
?g_ControlVersion@@3JA DD 0f80c0H			; g_ControlVersion
_DATA	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
CONST	SEGMENT
$SG198103 DB	'p', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG198104 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198105 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198108 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h', 00H
$SG198109 DB	'S', 00H, 'u', 00H, 'b', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'g', 00H, 'h', 00H
	DB	' ', 00H, 'a', 00H, ' ', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k'
	DB	00H, ' ', 00H, 'd', 00H, 'i', 00H, 's', 00H, 'c', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '.', 00H, 0aH, 00H, 00H
	DB	00H
	ORG $+2
$SG198128 DB	'p', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'M', 00H, 's', 00H
	DB	'g', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '&', 00H, 'm'
	DB	00H, 's', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG198129 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198165 DB	't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, '_', 00H, 'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG198130 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198166 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198167 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198172 DB	't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, '_', 00H, 'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'h', 00H, 'W', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H
	ORG $+2
$SG198173 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198191 DB	't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, '_', 00H, 'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG198174 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198192 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198193 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198194 DB	':', 00H, ':', 00H, 'I', 00H, 's', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '(', 00H, 'h', 00H, 'W'
	DB	00H, 'n', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG198195 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198214 DB	't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, '_', 00H, 'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG198196 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198215 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198216 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198238 DB	'p', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'M', 00H, 's', 00H
	DB	'g', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '&', 00H, 'm'
	DB	00H, 's', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG198239 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198479 DB	'm', 00H, '_', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
	ORG $+2
$SG198240 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG198298 DB	'p', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG198299 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198300 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG198325 DB	'p', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG198326 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198327 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG198480 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198481 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG198510 DB	'h', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG198511 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG198512 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG198546 DB	'h', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG198547 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG182609 DB	':', 00H, 00H, 00H
$SG198548 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG198582 DB	'h', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG198583 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG199203 DB	'm', 00H, '_', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
	ORG $+2
$SG198584 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG198618 DB	'h', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG198619 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG199584 DB	'm', 00H, '_', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
	ORG $+2
$SG198620 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG182592 DB	'p', 00H, 'p', 00H, 'v', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	00H, 00H
	ORG $+2
$SG182593 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG93305 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 00H, 00H
$SG182594 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG199204 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG93354 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG199205 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG199406 DB	'p', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG199407 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG199408 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG199433 DB	'p', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG199434 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG199435 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG199585 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG199586 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG199608 DB	'p', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG199609 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG199610 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
$SG93134 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG93207 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 00H, 00H
$SG93256 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'Q', 00H, 'I', 00H, 00H, 00H
	ORG $+2
$SG93403 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG93452 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r'
	DB	00H, 'o', 00H, 'l', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG93501 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG93550 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'D', 00H, 'B', 00H, 'C', 00H, 'l', 00H, 'i'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG93599 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'D', 00H, 'B', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG93648 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i'
	DB	00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG93697 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'I', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, 00H, 00H
$SG93746 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG93795 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG93844 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG93893 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e'
	DB	00H, 00H, 00H
$SG93942 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c'
	DB	00H, 'i', 00H, 'l', 00H, 00H, 00H
$SG93991 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG94040 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG94045 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'U', 00H, 't', 00H, 'i', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG94094 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG94143 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+2
$SG94192 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'I', 00H, 'S', 00H, 'A', 00H, 'P', 00H, 'I'
	DB	00H, 00H, 00H
$SG193248 DB	'COFreezeEvents', 00H
	ORG $+1
$SG193249 DB	'GetPropertyNumber', 00H
	ORG $+2
$SG193250 DB	'SetPropertyNumber', 00H
	ORG $+2
$SG193251 DB	'GetPropertyString', 00H
	ORG $+2
$SG193252 DB	'SetPropertyString', 00H
	ORG $+2
$SG193253 DB	'OpenService', 00H
$SG193254 DB	'CheckHealth', 00H
$SG193255 DB	'ClaimDevice', 00H
$SG193256 DB	'ClearInput', 00H
	ORG $+1
$SG193257 DB	'CloseService', 00H
	ORG $+3
$SG193258 DB	'DirectIO', 00H
	ORG $+3
$SG193259 DB	'ReleaseDevice', 00H
	ORG $+2
$SG193260 DB	'ResetStatistics', 00H
$SG193261 DB	'RetrieveStatistics', 00H
	ORG $+1
$SG193262 DB	'UpdateStatistics', 00H
	ORG $+3
$SG193263 DB	'CompareFirmwareVersion', 00H
	ORG $+1
$SG193264 DB	'UpdateFirmware', 00H
	ORG $+1
$SG193265 DB	'ClearInputProperties', 00H
	ORG $+3
$SG193266 DB	'AddMonitoringDevice', 00H
$SG193267 DB	'ClearMonitoringDevice', 00H
	ORG $+2
$SG193268 DB	'DeleteMonitoringDevice', 00H
	ORG $+1
$SG193269 DB	'GetDeviceValue', 00H
	ORG $+1
$SG111362 DB	'S', 00H, 00H, 00H
$SG111364 DB	'M', 00H, 00H, 00H
$SG111366 DB	'D', 00H, 00H, 00H
$SG111368 DB	'B', 00H, 00H, 00H
$SG111370 DB	'V', 00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG111372 DB	'F', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG111374 DB	'N', 00H, 'o', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG111376 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG193361 DB	00H, 00H
	ORG $+2
$SG193362 DB	'*', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 'h', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG193367 DB	'*', 00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H
	ORG $+2
$SG193369 DB	00H, 00H
	ORG $+2
$SG193377 DB	'*', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'z', 00H
	DB	'e', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's'
	DB	00H, ':', 00H, ' ', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	'z', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 'd'
	DB	00H, 00H, 00H
	ORG $+2
$SG193379 DB	'*', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'z', 00H
	DB	'e', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's'
	DB	00H, ':', 00H, ' ', 00H, 'U', 00H, 'n', 00H, 'f', 00H, 'r', 00H
	DB	'e', 00H, 'e', 00H, 'z', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193423 DB	'+', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG193426 DB	00H, 00H
	ORG $+2
$SG193429 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193432 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H
	DB	'y', 00H, ' ', 00H, 'S', 00H, 'O', 00H, 00H, 00H
$SG193434 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'O', 00H
	DB	'M', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ':', 00H, ' ', 00H, 'H', 00H, 'R', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG193435 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ':', 00H, ' ', 00H, '%'
	DB	00H, 'd', 00H, ' ', 00H, '(', 00H, '0', 00H, 'x', 00H, '%', 00H
	DB	'X', 00H, ')', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG193464 DB	'+', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, ']', 00H, ':', 00H, ' ', 00H, '%'
	DB	00H, 'd', 00H, ' ', 00H, '(', 00H, '0', 00H, 'x', 00H, '%', 00H
	DB	'X', 00H, ')', 00H, 00H, 00H
$SG193468 DB	00H, 00H
	ORG $+2
$SG193471 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193474 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H
	DB	'y', 00H, ' ', 00H, 'S', 00H, 'O', 00H, 00H, 00H
$SG193476 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'O', 00H
	DB	'M', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ':', 00H, ' ', 00H, 'H', 00H, 'R', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG193477 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, ']', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG193522 DB	'+', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG193526 DB	'[', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	']', 00H, 00H, 00H
$SG193527 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, '.', 00H, 00H, 00H
$SG193530 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ' ', 00H, '-', 00H, '-'
	DB	00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'd', 00H, '.', 00H, 00H, 00H
$SG193533 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ' ', 00H, '-', 00H, '-'
	DB	00H, ' ', 00H, 'N', 00H, 'o', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'b', 00H, 'y', 00H, ' ', 00H, 'S', 00H
	DB	'O', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG193535 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ' ', 00H, '-', 00H, '-'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'M', 00H, ' ', 00H, 'e', 00H
	DB	'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'H'
	DB	00H, 'R', 00H, ' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H
	DB	'%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG193567 DB	'+', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, ']', 00H, '.', 00H, 00H, 00H
$SG193572 DB	00H, 00H
	ORG $+2
$SG193575 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193578 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H
	DB	'y', 00H, ' ', 00H, 'S', 00H, 'O', 00H, 00H, 00H
$SG193580 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'O', 00H
	DB	'M', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ':', 00H, ' ', 00H, 'H', 00H, 'R', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG193581 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, ']', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG193650 DB	00H, 00H
	ORG $+2
$SG193651 DB	's', 00H, 00H, 00H
$SG193653 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '#', 00H, '%', 00H
	DB	'u', 00H, ':', 00H, ' ', 00H, 00H, 00H
$SG193652 DB	'+', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ']', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'u', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG193655 DB	'%', 00H, 's', 00H, 'E', 00H, 'M', 00H, 'P', 00H, 'T', 00H
	DB	'Y', 00H, 00H, 00H
$SG193657 DB	'%', 00H, 's', 00H, 'B', 00H, 'O', 00H, 'O', 00H, 'L', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
$SG193659 DB	'%', 00H, 's', 00H, 'B', 00H, 'O', 00H, 'O', 00H, 'L', 00H
	DB	'*', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+2
$SG193661 DB	'%', 00H, 's', 00H, 'L', 00H, 'O', 00H, 'N', 00H, 'G', 00H
	DB	' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, 'X', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193663 DB	'%', 00H, 's', 00H, 'L', 00H, 'O', 00H, 'N', 00H, 'G', 00H
	DB	'*', 00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, 'X', 00H, ')', 00H, 00H, 00H
$SG193665 DB	'%', 00H, 's', 00H, 'D', 00H, 'I', 00H, 'S', 00H, 'P', 00H
	DB	'A', 00H, 'T', 00H, 'C', 00H, 'H', 00H, ' ', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, 'X', 00H, 00H, 00H
$SG193667 DB	'%', 00H, 's', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, ';', 00H, 00H, 00H
$SG193669 DB	'%', 00H, 's', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, '*', 00H, ';', 00H, 00H, 00H
	ORG $+2
$SG193671 DB	'%', 00H, 's', 00H, 'U', 00H, 'n', 00H, 'k', 00H, 'n', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, ' ', 00H, '(', 00H, 'V', 00H, 'a'
	DB	00H, 'r', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '=', 00H
	DB	'0', 00H, 'x', 00H, '%', 00H, 'X', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193680 DB	00H, 00H
	ORG $+2
$SG193674 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'P', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 0aH, 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG193683 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193686 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H
	DB	'y', 00H, ' ', 00H, 'S', 00H, 'O', 00H, 00H, 00H
$SG193688 DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'O', 00H
	DB	'M', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ':', 00H, ' ', 00H, 'H', 00H, 'R', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG193689 DB	'-', 00H, '%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '[', 00H
	DB	'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ']', 00H, ' ', 00H, ' ', 00H, 'R', 00H, 'C', 00H
	DB	'=', 00H, '%', 00H, 'd', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG193690 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '#', 00H, '%', 00H
	DB	'u', 00H, ':', 00H, ' ', 00H, 00H, 00H
$SG193692 DB	'%', 00H, 's', 00H, 'B', 00H, 'O', 00H, 'O', 00H, 'L', 00H
	DB	'*', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+2
$SG193694 DB	'%', 00H, 's', 00H, 'L', 00H, 'O', 00H, 'N', 00H, 'G', 00H
	DB	'*', 00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, 'X', 00H, ')', 00H, 00H, 00H
$SG193696 DB	'%', 00H, 's', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, '*', 00H, ';', 00H, 00H, 00H
	ORG $+2
$SG193699 DB	'%', 00H, 's', 00H, ' ', 00H, 'U', 00H, 'n', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG193722 DB	'*', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'O', 00H
	DB	'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'z', 00H, 'e', 00H, 'E'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG193857 DB	'SOFTWARE\OLEforRetail\ServiceOPOS\DeviceMonitor', 00H
$SG193870 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'O', 00H, 'p', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 'k'
	DB	00H, 'e', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG193850 DB	'*', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'[', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ']', 00H, ':', 00H, ' ', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ' ', 00H, '<', 00H, '%', 00H, 'l', 00H
	DB	's', 00H, '>', 00H, 00H, 00H
	ORG $+2
$SG193852 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'C'
	DB	00H, 'O', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'y', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '/', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG193854 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'E', 00H, 'm'
	DB	00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H
	DB	'/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193879 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'P', 00H, 'r', 00H
	DB	'o', 00H, 'g', 00H, 'I', 00H, 'D', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, 'I', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG193856 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o'
	DB	00H, ' ', 00H, 'b', 00H, 'i', 00H, 'g', 00H, ' ', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG193859 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'r', 00H, 'y', 00H, ' ', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '<', 00H, '%', 00H, 's'
	DB	00H, '>', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '/', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193891 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 00H, 00H
$SG193860 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	'g', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'K', 00H, 'e'
	DB	00H, 'y', 00H, 'E', 00H, 'x', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H, 'd', 00H, 0aH
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG193894 DB	'C', 00H, 'l', 00H, 'a', 00H, 'i', 00H, 'm', 00H, 00H, 00H
$SG193861 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'O', 00H, 'p', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'r', 00H, 'y', 00H
	DB	' ', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ' ', 00H, 'H', 00H, 'K'
	DB	00H, 'L', 00H, 'M', 00H, '\', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG193865 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'L', 00H, 'o'
	DB	00H, 'g', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'N', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ';', 00H, ' ', 00H, 't', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'P', 00H, 'h', 00H, 'y'
	DB	00H, 's', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'N', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG193902 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 00H, 00H
$SG193866 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'a', 00H
	DB	' ', 00H, 'L', 00H, 'o', 00H, 'g', 00H, 'i', 00H, 'c', 00H, 'a'
	DB	00H, 'l', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ';', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'P', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, '%', 00H, 's', 00H, '>', 00H, 00H, 00H
$SG193868 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'D', 00H, 'e', 00H, 'v'
	DB	00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e'
	DB	00H, 'y', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '/', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193897 DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, 00H, 00H
$SG193905 DB	'C', 00H, 'l', 00H, 'a', 00H, 'i', 00H, 'm', 00H, 00H, 00H
$SG193869 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	'g', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'K', 00H, 'e'
	DB	00H, 'y', 00H, 'E', 00H, 'x', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H, 'd', 00H, 0aH
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG193908 DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, 00H, 00H
$SG193919 DB	'Open-OpenService', 00H
	ORG $+3
$SG193873 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g'
	DB	00H, 'I', 00H, 'D', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'y', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193874 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	'g', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'K', 00H, 'e'
	DB	00H, 'y', 00H, 'E', 00H, 'x', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H, 'd', 00H, 0aH
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG193923 DB	'G', 00H, 'e', 00H, 't', 00H, 'O', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, 00H, 00H
$SG193875 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'p', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'g', 00H, 'I', 00H, 'D', 00H, ' ', 00H
	DB	'<', 00H, '%', 00H, 's', 00H, '>', 00H, 00H, 00H
	ORG $+2
$SG193927 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'I', 00H, 'n', 00H
	DB	'v', 00H, 'o', 00H, 'k', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'r'
	DB	00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '0', 00H, 'x', 00H
	DB	'%', 00H, 'X', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG193877 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, ' '
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'I', 00H, 'D', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, 'I', 00H, 'D', 00H, ' ', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
$SG193878 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'C', 00H, 'L', 00H
	DB	'S', 00H, 'I', 00H, 'D', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'I', 00H, 'D', 00H
	DB	' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 0aH, 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG193935 DB	'Open-ServiceObjectVersion', 00H
	ORG $+2
$SG193881 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H
	DB	'd', 00H, ')', 00H, 00H, 00H
$SG193882 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'C', 00H, 'o', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H
	DB	'e', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 0aH, 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG193883 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'C', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+2
$SG193885 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'r', 00H, 'v'
	DB	00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'O', 00H, 'b', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '''', 00H, 's', 00H, ' '
	DB	00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG193886 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'Q', 00H, 'u', 00H
	DB	'e', 00H, 'r', 00H, 'y', 00H, 'I', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, 'X', 00H, 0aH, 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG193932 DB	'Open-DeviceDescription', 00H
	ORG $+1
$SG193933 DB	'Open-DeviceName', 00H
$SG193947 DB	'-', 00H, ' ', 00H, ' ', 00H, 'S', 00H, 'u', 00H, 'c', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, '(', 00H, '0'
	DB	00H, '/', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG193887 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'A', 00H, 'c', 00H
	DB	'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H
	DB	'e', 00H, ' ', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, '''', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'i', 00H
	DB	's', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, ' '
	DB	00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
	ORG $+2
$SG193911 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'D', 00H, 'o'
	DB	00H, 'e', 00H, 's', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'o', 00H
	DB	'f', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, '''', 00H, 's', 00H, ' '
	DB	00H, 'm', 00H, 'e', 00H, 't', 00H, 'h', 00H, 'o', 00H, 'd', 00H
	DB	's', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '/', 00H, '%'
	DB	00H, 'd', 00H, ')', 00H, 00H, 00H
$SG193912 DB	'C', 00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'e', 00H, 'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P'
	DB	00H, 'O', 00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H
	DB	'\', 00H, 'z', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 'I', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG193959 DB	'*', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ']', 00H, ' ', 00H, ' ', 00H
	DB	'R', 00H, 'C', 00H, '=', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193913 DB	'(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H, 'S', 00H
	DB	'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '0', 00H, 'L', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'Q', 00H, 'u', 00H
	DB	'e', 00H, 'r', 00H, 'y', 00H, 'I', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '(', 00H
	DB	' ', 00H, 'I', 00H, 'I', 00H, 'D', 00H, '_', 00H, 'I', 00H, 'D'
	DB	00H, 'i', 00H, 's', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'c', 00H
	DB	'h', 00H, ',', 00H, ' ', 00H, '(', 00H, 'v', 00H, 'o', 00H, 'i'
	DB	00H, 'd', 00H, '*', 00H, '*', 00H, ')', 00H, ' ', 00H, '&', 00H
	DB	'p', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'c', 00H, 'h', 00H, ' ', 00H, ')', 00H, 00H, 00H
$SG193915 DB	'DeviceMonitor', 00H
	ORG $+2
$SG193960 DB	'Close-CloseService', 00H
	ORG $+1
$SG193917 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'u', 00H, 'p', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, 'X', 00H, 0aH, 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG193961 DB	'*', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ']', 00H, ' ', 00H, ' ', 00H
	DB	'R', 00H, 'C', 00H, '=', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193926 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ''''
	DB	00H, 's', 00H, ' ', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'S', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG193973 DB	'ClaimDevice', 00H
$SG193929 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'O'
	DB	00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '''', 00H
	DB	's', 00H, ' ', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 'e'
	DB	00H, 'd', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG193930 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '<', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 'r', 00H, 't', 00H, '>', 00H, ' ', 00H, 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'i', 00H, 'e', 00H, 's', 00H, '.', 00H, 00H
	DB	00H
	ORG $+2
$SG193931 DB	'Open-ServiceObjectDescription', 00H
	ORG $+2
$SG193934 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '<', 00H, 'E', 00H
	DB	'n', 00H, 'd', 00H, '>', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'r'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'O', 00H
	DB	'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG112072 DB	'A', 00H, 'p', 00H, 'p', 00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG193938 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'e'
	DB	00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ''''
	DB	00H, 's', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'j', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, '1', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG193943 DB	'-', 00H, ' ', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, 'D', 00H, 'o'
	DB	00H, 'e', 00H, 's', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'o', 00H
	DB	'f', 00H, ' ', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'''', 00H, 's', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 't', 00H, 'h'
	DB	00H, 'o', 00H, 'd', 00H, 's', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '/', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG193971 DB	'*', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 'i', 00H, 'm', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, '[', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ']', 00H, ' ', 00H, '-', 00H, '-'
	DB	00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H
$SG112073 DB	'C', 00H, 'L', 00H, 'S', 00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG193981 DB	'*', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, '[', 00H, 'F', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ']', 00H, ' '
	DB	00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o', 00H
	DB	's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG193982 DB	'ReleaseDevice', 00H
	ORG $+2
$SG193988 DB	'*', 00H, 'S', 00H, 'O', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'I', 00H, 'D', 00H, ':'
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG112074 DB	'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'n', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG112075 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG112076 DB	'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'f', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG193997 DB	'CheckHealth', 00H
$SG112077 DB	'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG112078 DB	'M', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG112079 DB	'S', 00H, 'A', 00H, 'M', 00H, 00H, 00H
$SG112080 DB	'S', 00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H
	DB	'T', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG112081 DB	'S', 00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H
	DB	00H, 00H
	ORG $+2
$SG112082 DB	'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG194003 DB	'ClearInput', 00H
	ORG $+1
$SG112083 DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 'L', 00H, 'i', 00H
	DB	'b', 00H, 00H, 00H
$SG194017 DB	'DirectIO', 00H
	ORG $+3
$SG194027 DB	'ResetStatistics', 00H
$SG194037 DB	'RetrieveStatistics', 00H
	ORG $+1
$SG194047 DB	'UpdateStatistics', 00H
	ORG $+3
$SG194060 DB	'CompareFirmwareVersion', 00H
	ORG $+1
$SG194070 DB	'UpdateFirmware', 00H
	ORG $+1
$SG194076 DB	'ClearInputProperties', 00H
	ORG $+3
$SG194092 DB	'AddMonitoringDevice', 00H
$SG194098 DB	'ClearMonitoringDevice', 00H
	ORG $+2
$SG194108 DB	'DeleteMonitoringDevice', 00H
	ORG $+1
$SG194121 DB	'GetDeviceValue', 00H
	ORG $+1
$SG194126 DB	'FreezeEvents', 00H
	ORG $+3
$SG194134 DB	'*', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'z', 00H
	DB	'e', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's'
	DB	00H, ' ', 00H, '[', 00H, 'S', 00H, 'e', 00H, 't', 00H, ']', 00H
	DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o'
	DB	00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG194137 DB	'FreezeEvents', 00H
	ORG $+3
$SG194138 DB	'FreezeEvents', 00H
	ORG $+3
$SG194146 DB	'*', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '['
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ' ', 00H, '-', 00H
	DB	'-', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
$SG194149 DB	'*', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '['
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ':', 00H, ' ', 00H
	DB	'%', 00H, 'd', 00H, ' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'f'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'C', 00H, 'O', 00H
	DB	00H, 00H
	ORG $+2
$SG194150 DB	'ResultCode', 00H
	ORG $+1
$SG194158 DB	'*', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, 'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ' '
	DB	00H, '-', 00H, '-', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o', 00H
	DB	's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG194159 DB	'State', 00H
	ORG $+2
$SG194166 DB	'*', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'l', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'c', 00H, 'r', 00H
	DB	'i', 00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' '
	DB	00H, '[', 00H, 'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ':', 00H
	DB	' ', 00H, '<', 00H, '%', 00H, 'h', 00H, 's', 00H, '>', 00H, 00H
	DB	00H
	ORG $+2
$SG194172 DB	'*', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'l', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, '[', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, ']', 00H, ':', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
$SG194178 DB	'*', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'R', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '['
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, ']', 00H, ':', 00H, ' ', 00H
	DB	'%', 00H, 'd', 00H, 00H, 00H
$SG194183 DB	'AutoDisable', 00H
$SG194188 DB	'AutoDisable', 00H
$SG194193 DB	'BinaryConversion', 00H
	ORG $+3
$SG194198 DB	'BinaryConversion', 00H
	ORG $+3
$SG194203 DB	'CapPowerReporting', 00H
	ORG $+2
$SG194208 DB	'CheckHealthText', 00H
$SG194213 DB	'Claimed', 00H
$SG194218 DB	'DataCount', 00H
	ORG $+2
$SG194223 DB	'DataEventEnabled', 00H
	ORG $+3
$SG194228 DB	'DataEventEnabled', 00H
	ORG $+3
$SG194233 DB	'DeviceEnabled', 00H
	ORG $+2
$SG194238 DB	'DeviceEnabled', 00H
	ORG $+2
$SG194243 DB	'PowerNotify', 00H
$SG194248 DB	'PowerNotify', 00H
$SG194253 DB	'PowerState', 00H
	ORG $+1
$SG194258 DB	'ResultCodeExtended', 00H
	ORG $+1
$SG194263 DB	'ServiceObjectDescription', 00H
	ORG $+3
$SG194268 DB	'ServiceObjectVersion', 00H
	ORG $+3
$SG194273 DB	'DeviceDescription', 00H
	ORG $+2
$SG194278 DB	'DeviceName', 00H
	ORG $+1
$SG194283 DB	'CapStatisticsReporting', 00H
	ORG $+1
$SG194288 DB	'CapUpdateStatistics', 00H
$SG194293 DB	'CapCompareFirmwareVersion', 00H
	ORG $+2
$SG194298 DB	'CapUpdateFirmware', 00H
	ORG $+2
$SG194303 DB	'DeviceData', 00H
	ORG $+1
$SG194308 DB	'DeviceList', 00H
	ORG $+1
$SG194313 DB	'MonitoringDeviceList', 00H
	ORG $+3
$SG194333 DB	'a', 00H, 00H, 00H
$SG194348 DB	'[', 00H, 'U', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, ']', 00H, 00H, 00H
$SG194361 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'h', 00H
	DB	's', 00H, 00H, 00H
$SG194391 DB	'%', 00H, 's', 00H, ' ', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '0', 00H, ' ', 00H, '<'
	DB	00H, '>', 00H, 00H, 00H
	ORG $+2
$SG194394 DB	'%', 00H, 's', 00H, ' ', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H, 'u', 00H, 00H
	DB	00H
	ORG $+2
$SG194406 DB	'%', 00H, 's', 00H, ' ', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H, 'u', 00H, ' '
	DB	00H, '[', 00H, 'B', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'v', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG194438 DB	'h', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG194439 DB	'l', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG194444 DB	' ', 00H, '<', 00H, '%', 00H, 00H, 00H
$SG194445 DB	'>', 00H, 00H, 00H
$SG194446 DB	' ', 00H, ' ', 00H, '<', 00H, '%', 00H, '%', 00H, '.', 00H
	DB	'%', 00H, 'u', 00H, '%', 00H, 's', 00H, '>', 00H, 00H, 00H
$SG194447 DB	'%', 00H, 's', 00H, ' ', 00H, '[', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 's', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'A', 00H, 'S', 00H
	DB	'C', 00H, 'I', 00H, 'I', 00H, ']', 00H, 00H, 00H
$SG186909 DB	00H, 00H
	ORG $+2
$SG186913 DB	'_', 00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 00H, 00H
$SG186914 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG186918 DB	'l', 00H, 'p', 00H, 's', 00H, 'z', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG186915 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG186919 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG113203 DB	'l', 00H, 'p', 00H, 's', 00H, 'z', 00H, 'P', 00H, 'a', 00H
	DB	't', 00H, 'h', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG186920 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG113204 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG187003 DB	00H, 00H
	ORG $+2
$SG186922 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlhost.h', 00H
	ORG $+3
$SG186925 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ':', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, 'x', 00H, ' ', 00H, '-', 00H, ' ', 00H
	DB	'%', 00H, 'T', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG186934 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG187007 DB	'_', 00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l'
	DB	00H, 00H, 00H
$SG186923 DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'f', 00H, 'a', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H, 'T', 00H, 's', 00H
	DB	'''', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG186924 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlhost.h', 00H
	ORG $+3
$SG186933 DB	'l', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H
	DB	00H, 00H
	ORG $+2
$SG187008 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG187014 DB	'l', 00H, 'p', 00H, 's', 00H, 'z', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG113205 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG187015 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG186935 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG187009 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG187016 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG187018 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlhost.h', 00H
	ORG $+7
$SG187019 DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'l', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'f', 00H, 'a', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H, 'T', 00H, 's', 00H
	DB	'''', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG187020 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlhost.h', 00H
	ORG $+3
$SG187021 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ':', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, 'x', 00H, ' ', 00H, '-', 00H, ' ', 00H
	DB	'%', 00H, 'T', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG187029 DB	'l', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H
	DB	00H, 00H
	ORG $+2
$SG187030 DB	'%', 00H, 'l', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG187031 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'3', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l'
	DB	00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'h', 00H, 'o', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??_I@YGXPAXIIP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	_InlineIsEqualGUID
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
PUBLIC	??0IPersistStorage@@QAE@XZ			; IPersistStorage::IPersistStorage
PUBLIC	??0IDataObject@@QAE@XZ				; IDataObject::IDataObject
PUBLIC	??0IDispatch@@QAE@XZ				; IDispatch::IDispatch
PUBLIC	??0IOleObject@@QAE@XZ				; IOleObject::IOleObject
PUBLIC	??0IOleWindow@@QAE@XZ				; IOleWindow::IOleWindow
PUBLIC	??0IOleInPlaceActiveObject@@QAE@XZ		; IOleInPlaceActiveObject::IOleInPlaceActiveObject
PUBLIC	??0IOleInPlaceObject@@QAE@XZ			; IOleInPlaceObject::IOleInPlaceObject
PUBLIC	??0IViewObject@@QAE@XZ				; IViewObject::IViewObject
PUBLIC	??0IViewObject2@@QAE@XZ				; IViewObject2::IViewObject2
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfwprintf_l
PUBLIC	_vfwprintf
PUBLIC	__vsnwprintf_l
PUBLIC	__snwprintf
PUBLIC	__vsnwprintf
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	??$AtlMultiply@H@ATL@@YAJPAHHH@Z		; ATL::AtlMultiply<int>
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
PUBLIC	??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
PUBLIC	??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
PUBLIC	??B?$CTraceCategoryEx@$01$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<2,0>::operator unsigned int
PUBLIC	??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
PUBLIC	??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
PUBLIC	??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
PUBLIC	??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
PUBLIC	??B?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<32,0>::operator unsigned int
PUBLIC	??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
PUBLIC	??B?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<64,0>::operator unsigned int
PUBLIC	??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
PUBLIC	??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
PUBLIC	??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
PUBLIC	??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z	; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	??0CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::CComCriticalSection
PUBLIC	??1CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::~CComCriticalSection
PUBLIC	?Init@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Init
PUBLIC	?Term@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Term
PUBLIC	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
PUBLIC	??0IEnumConnections@@QAE@XZ			; IEnumConnections::IEnumConnections
PUBLIC	??0IConnectionPointContainer@@QAE@XZ		; IConnectionPointContainer::IConnectionPointContainer
PUBLIC	??0IProvideClassInfo@@QAE@XZ			; IProvideClassInfo::IProvideClassInfo
PUBLIC	??0IProvideClassInfo2@@QAE@XZ			; IProvideClassInfo2::IProvideClassInfo2
PUBLIC	??0IOleControl@@QAE@XZ				; IOleControl::IOleControl
PUBLIC	??0ISpecifyPropertyPages@@QAE@XZ		; ISpecifyPropertyPages::ISpecifyPropertyPages
PUBLIC	??0IPersistStreamInit@@QAE@XZ			; IPersistStreamInit::IPersistStreamInit
PUBLIC	??0IOleInPlaceObjectWindowless@@QAE@XZ		; IOleInPlaceObjectWindowless::IOleInPlaceObjectWindowless
PUBLIC	??0IViewObjectEx@@QAE@XZ			; IViewObjectEx::IViewObjectEx
PUBLIC	??0IQuickActivate@@QAE@XZ			; IQuickActivate::IQuickActivate
PUBLIC	??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@XZ	; ATL::CComPtrBase<IDispatch>::CComPtrBase<IDispatch>
PUBLIC	??1?$CComPtrBase@UIDispatch@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IDispatch>::~CComPtrBase<IDispatch>
PUBLIC	??0?$CComPtr@UIDispatch@@@ATL@@QAE@XZ		; ATL::CComPtr<IDispatch>::CComPtr<IDispatch>
PUBLIC	??1?$CComPtr@UIDispatch@@@ATL@@QAE@XZ		; ATL::CComPtr<IDispatch>::~CComPtr<IDispatch>
PUBLIC	??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ	; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>
PUBLIC	??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z ; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>
PUBLIC	?Swap@?$CComPtrBase@UIUnknown@@@ATL@@IAEXAAV12@@Z ; ATL::CComPtrBase<IUnknown>::Swap
PUBLIC	??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IUnknown>::~CComPtrBase<IUnknown>
PUBLIC	??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
PUBLIC	??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ		; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
PUBLIC	??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
PUBLIC	??0?$CComPtr@UIUnknown@@@ATL@@QAE@ABV01@@Z	; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
PUBLIC	??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z ; ATL::CComPtr<IUnknown>::operator=
PUBLIC	??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ		; ATL::CComPtr<IUnknown>::~CComPtr<IUnknown>
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z	; ATL::CComSingleThreadModel::Increment
PUBLIC	?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z	; ATL::CComSingleThreadModel::Decrement
PUBLIC	??0_ATL_COM_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70
PUBLIC	??1_ATL_COM_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70
PUBLIC	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
PUBLIC	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
PUBLIC	?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
PUBLIC	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
PUBLIC	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
PUBLIC	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
PUBLIC	?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ; ATL::AtlInternalQueryInterface
PUBLIC	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
PUBLIC	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z	; ATL::InlineIsEqualUnknown
PUBLIC	??0CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::CAtlComModule
PUBLIC	??1CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::~CAtlComModule
PUBLIC	?Term@CAtlComModule@ATL@@QAEXXZ			; ATL::CAtlComModule::Term
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
PUBLIC	??1CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::~CAtlWinModule
PUBLIC	?Term@CAtlWinModule@ATL@@QAEXXZ			; ATL::CAtlWinModule::Term
PUBLIC	?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CComModule::GetModuleInstance
PUBLIC	??0CDynamicStdCallThunk2@ATL@@QAE@XZ		; ATL::CDynamicStdCallThunk2::CDynamicStdCallThunk2
PUBLIC	??1CDynamicStdCallThunk2@ATL@@QAE@XZ		; ATL::CDynamicStdCallThunk2::~CDynamicStdCallThunk2
PUBLIC	??0CComObjectRootBase@ATL@@QAE@XZ		; ATL::CComObjectRootBase::CComObjectRootBase
PUBLIC	??1CComObjectRootBase@ATL@@QAE@XZ		; ATL::CComObjectRootBase::~CComObjectRootBase
PUBLIC	?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ	; ATL::CComObjectRootBase::FinalConstruct
PUBLIC	?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ ; ATL::CComObjectRootBase::_AtlFinalConstruct
PUBLIC	?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ	; ATL::CComObjectRootBase::FinalRelease
PUBLIC	?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z ; ATL::CComObjectRootBase::InternalQueryInterface
PUBLIC	?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z	; ATL::CComObjectRootBase::SetVoid
PUBLIC	?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ ; ATL::CComObjectRootBase::InternalFinalConstructAddRef
PUBLIC	?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ ; ATL::CComObjectRootBase::InternalFinalConstructRelease
PUBLIC	??1?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::~CComObjectRootEx<ATL::CComSingleThreadModel>
PUBLIC	?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalAddRef
PUBLIC	?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalRelease
PUBLIC	?_AtlInitialConstruct@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEJXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::_AtlInitialConstruct
PUBLIC	?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock
PUBLIC	?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock
PUBLIC	??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::CComObjectRootEx<ATL::CComSingleThreadModel>
PUBLIC	??0ModuleLockHelper@ATL@@QAE@XZ			; ATL::ModuleLockHelper::ModuleLockHelper
PUBLIC	??1ModuleLockHelper@ATL@@QAE@XZ			; ATL::ModuleLockHelper::~ModuleLockHelper
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ; ATL::_Copy<tagCONNECTDATA>::copy
PUBLIC	?init@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ; ATL::_Copy<tagCONNECTDATA>::init
PUBLIC	?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ; ATL::_Copy<tagCONNECTDATA>::destroy
PUBLIC	??0CComDynamicUnkArray@ATL@@QAE@XZ		; ATL::CComDynamicUnkArray::CComDynamicUnkArray
PUBLIC	??1CComDynamicUnkArray@ATL@@QAE@XZ		; ATL::CComDynamicUnkArray::~CComDynamicUnkArray
PUBLIC	?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::Add
PUBLIC	?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z	; ATL::CComDynamicUnkArray::Remove
PUBLIC	?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::GetCookie
PUBLIC	?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z ; ATL::CComDynamicUnkArray::GetUnknown
PUBLIC	?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
PUBLIC	?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
PUBLIC	?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
PUBLIC	?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ	; ATL::CComDynamicUnkArray::GetSize
PUBLIC	?SetWindowLongPtrW@@YAJPAUHWND__@@HJ@Z		; SetWindowLongPtrW
PUBLIC	?GetWindowLongPtrW@@YAJPAUHWND__@@H@Z		; GetWindowLongPtrW
PUBLIC	??0CWindow@ATL@@QAE@PAUHWND__@@@Z		; ATL::CWindow::CWindow
PUBLIC	??0CWndProcThunk@ATL@@QAE@XZ			; ATL::CWndProcThunk::CWndProcThunk
PUBLIC	??1CWndProcThunk@ATL@@QAE@XZ			; ATL::CWndProcThunk::~CWndProcThunk
PUBLIC	??0CMessageMap@ATL@@QAE@XZ			; ATL::CMessageMap::CMessageMap
PUBLIC	??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ	; ATL::CWindowImplRoot<ATL::CWindow>::CWindowImplRoot<ATL::CWindow>
PUBLIC	??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
PUBLIC	??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >
PUBLIC	??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::~CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >
PUBLIC	??0?$CComPtrBase@UIOleClientSite@@@ATL@@IAE@XZ	; ATL::CComPtrBase<IOleClientSite>::CComPtrBase<IOleClientSite>
PUBLIC	??1?$CComPtrBase@UIOleClientSite@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IOleClientSite>::~CComPtrBase<IOleClientSite>
PUBLIC	??0?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ	; ATL::CComPtr<IOleClientSite>::CComPtr<IOleClientSite>
PUBLIC	??1?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ	; ATL::CComPtr<IOleClientSite>::~CComPtr<IOleClientSite>
PUBLIC	??0?$CComPtrBase@UIAdviseSink@@@ATL@@IAE@XZ	; ATL::CComPtrBase<IAdviseSink>::CComPtrBase<IAdviseSink>
PUBLIC	??1?$CComPtrBase@UIAdviseSink@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IAdviseSink>::~CComPtrBase<IAdviseSink>
PUBLIC	??0?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ		; ATL::CComPtr<IAdviseSink>::CComPtr<IAdviseSink>
PUBLIC	??1?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ		; ATL::CComPtr<IAdviseSink>::~CComPtr<IAdviseSink>
PUBLIC	??0IObjectSafety@@QAE@XZ			; IObjectSafety::IObjectSafety
PUBLIC	??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z	; ATL::CComControlBase::CComControlBase
PUBLIC	??1CComControlBase@ATL@@UAE@XZ			; ATL::CComControlBase::~CComControlBase
PUBLIC	??0?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::CComPtrBase<IOleInPlaceSiteWindowless>
PUBLIC	??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::~CComPtrBase<IOleInPlaceSiteWindowless>
PUBLIC	??0?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ; ATL::CComPtr<IOleInPlaceSiteWindowless>::CComPtr<IOleInPlaceSiteWindowless>
PUBLIC	??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ; ATL::CComPtr<IOleInPlaceSiteWindowless>::~CComPtr<IOleInPlaceSiteWindowless>
PUBLIC	??0?$CComPtrBase@UIDataAdviseHolder@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IDataAdviseHolder>::CComPtrBase<IDataAdviseHolder>
PUBLIC	??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IDataAdviseHolder>::~CComPtrBase<IDataAdviseHolder>
PUBLIC	??0?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ	; ATL::CComPtr<IDataAdviseHolder>::CComPtr<IDataAdviseHolder>
PUBLIC	??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ	; ATL::CComPtr<IDataAdviseHolder>::~CComPtr<IDataAdviseHolder>
PUBLIC	??0?$CComPtrBase@UIOleAdviseHolder@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IOleAdviseHolder>::CComPtrBase<IOleAdviseHolder>
PUBLIC	??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IOleAdviseHolder>::~CComPtrBase<IOleAdviseHolder>
PUBLIC	??0?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ	; ATL::CComPtr<IOleAdviseHolder>::CComPtr<IOleAdviseHolder>
PUBLIC	??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ	; ATL::CComPtr<IOleAdviseHolder>::~CComPtr<IOleAdviseHolder>
PUBLIC	??0?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>
PUBLIC	??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::~CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>
PUBLIC	??0IOPOSDeviceMonitor_1_16@@QAE@XZ		; IOPOSDeviceMonitor_1_16::IOPOSDeviceMonitor_1_16
PUBLIC	??0IOPOSDeviceMonitor@@QAE@XZ			; IOPOSDeviceMonitor::IOPOSDeviceMonitor
PUBLIC	??0OposVariant@@QAE@XZ				; OposVariant::OposVariant
PUBLIC	??1OposVariant@@QAE@XZ				; OposVariant::~OposVariant
PUBLIC	?Clear@OposVariant@@QAEJXZ			; OposVariant::Clear
PUBLIC	??_EOposVariant@@QAEPAXI@Z			; OposVariant::`vector deleting destructor'
PUBLIC	??1OposVariantResult@@QAE@XZ			; OposVariantResult::~OposVariantResult
PUBLIC	??0OposVariantResult@@QAE@XZ			; OposVariantResult::OposVariantResult
PUBLIC	??0?$IDispatchImpl@UIOPOSDeviceMonitor@@$1?IID_IOPOSDeviceMonitor@@3U_GUID@@B$1?LIBID_OposDeviceMonitor_CCO@@3U3@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ ; ATL::IDispatchImpl<IOPOSDeviceMonitor,&IID_IOPOSDeviceMonitor,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>::IDispatchImpl<IOPOSDeviceMonitor,&IID_IOPOSDeviceMonitor,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>
PUBLIC	??0?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@QAE@XZ ; ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >
PUBLIC	??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UAE@XZ ; ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >::~CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >
PUBLIC	??0?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
PUBLIC	??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::~CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
PUBLIC	??0?$IPersistStreamInitImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IPersistStreamInitImpl<COPOSDeviceMonitor>::IPersistStreamInitImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IOleControlImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IOleControlImpl<COPOSDeviceMonitor>::IOleControlImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IOleObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IOleObjectImpl<COPOSDeviceMonitor>::IOleObjectImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IOleInPlaceActiveObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IOleInPlaceActiveObjectImpl<COPOSDeviceMonitor>::IOleInPlaceActiveObjectImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IViewObjectExImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IViewObjectExImpl<COPOSDeviceMonitor>::IViewObjectExImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IOleInPlaceObjectWindowlessImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IOleInPlaceObjectWindowlessImpl<COPOSDeviceMonitor>::IOleInPlaceObjectWindowlessImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::IConnectionPointContainerImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IPersistStorageImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IPersistStorageImpl<COPOSDeviceMonitor>::IPersistStorageImpl<COPOSDeviceMonitor>
PUBLIC	??0?$ISpecifyPropertyPagesImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::ISpecifyPropertyPagesImpl<COPOSDeviceMonitor>::ISpecifyPropertyPagesImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IQuickActivateImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IQuickActivateImpl<COPOSDeviceMonitor>::IQuickActivateImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IDataObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ; ATL::IDataObjectImpl<COPOSDeviceMonitor>::IDataObjectImpl<COPOSDeviceMonitor>
PUBLIC	??0?$IProvideClassInfo2Impl@$1?CLSID_OPOSDeviceMonitor@@3U_GUID@@B$1?DIID__IOPOSDeviceMonitorEvents@@3U2@B$1?LIBID_OposDeviceMonitor_CCO@@3U2@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ ; ATL::IProvideClassInfo2Impl<&CLSID_OPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>::IProvideClassInfo2Impl<&CLSID_OPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>
PUBLIC	??0?$IObjectSafetyImpl@VCOPOSDeviceMonitor@@$02@ATL@@QAE@XZ ; ATL::IObjectSafetyImpl<COPOSDeviceMonitor,3>::IObjectSafetyImpl<COPOSDeviceMonitor,3>
PUBLIC	??0?$_ICPLocator@$1?IID_IPropertyNotifySink@@3U_GUID@@B@ATL@@QAE@XZ ; ATL::_ICPLocator<&IID_IPropertyNotifySink>::_ICPLocator<&IID_IPropertyNotifySink>
PUBLIC	??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
PUBLIC	??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
PUBLIC	??0?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>
PUBLIC	??1?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>::~IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>
PUBLIC	??0?$_ICPLocator@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@B@ATL@@QAE@XZ ; ATL::_ICPLocator<&DIID__IOPOSDeviceMonitorEvents>::_ICPLocator<&DIID__IOPOSDeviceMonitorEvents>
PUBLIC	??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
PUBLIC	?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface
PUBLIC	?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface
PUBLIC	?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer
PUBLIC	?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise
PUBLIC	?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise
PUBLIC	?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::EnumConnections
PUBLIC	??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
PUBLIC	?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent
PUBLIC	?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJPAJPAPA_W@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent
PUBLIC	?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJJJPAJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent
PUBLIC	?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent
PUBLIC	??0?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@PAVCOPOSDeviceMonitor@@@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::CProxy_IOPOSEvents<COPOSDeviceMonitor>
PUBLIC	?Advise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJPAUIUnknown@@PAK@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Advise
PUBLIC	?Unadvise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJK@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Unadvise
PUBLIC	?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
PUBLIC	??1?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@XZ ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::~CProxy_IOPOSEvents<COPOSDeviceMonitor>
PUBLIC	??0COPOSDeviceMonitor@@QAE@XZ			; COPOSDeviceMonitor::COPOSDeviceMonitor
PUBLIC	?FinalConstruct@COPOSDeviceMonitor@@QAEJXZ	; COPOSDeviceMonitor::FinalConstruct
PUBLIC	??1COPOSDeviceMonitor@@UAE@XZ			; COPOSDeviceMonitor::~COPOSDeviceMonitor
PUBLIC	?SetRC@COPOSDeviceMonitor@@IAEJJ@Z		; COPOSDeviceMonitor::SetRC
PUBLIC	?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ	; COPOSDeviceMonitor::WriteTrace
PUBLIC	?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ; COPOSDeviceMonitor::WriteTraceString
PUBLIC	?WriteTraceString@COPOSDeviceMonitor@@QAAXPAXHHHPB_WZZ ; COPOSDeviceMonitor::WriteTraceString
PUBLIC	?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError
PUBLIC	?WriteTraceMethods@COPOSDeviceMonitor@@QAEXPAJH@Z ; COPOSDeviceMonitor::WriteTraceMethods
PUBLIC	?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z	; COPOSDeviceMonitor::GetOposProp
PUBLIC	?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJJJ@Z	; COPOSDeviceMonitor::SetOposProp
PUBLIC	?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z	; COPOSDeviceMonitor::GetOposProp
PUBLIC	?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z	; COPOSDeviceMonitor::SetOposProp
PUBLIC	?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp
PUBLIC	?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJPA_WJ@Z ; COPOSDeviceMonitor::SetOposProp
PUBLIC	?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
PUBLIC	?SetCOFreezeEvents@COPOSDeviceMonitor@@IAEXF@Z	; COPOSDeviceMonitor::SetCOFreezeEvents
PUBLIC	?FreezeEvents@COPOSDeviceMonitor@@MAGJH@Z	; COPOSDeviceMonitor::FreezeEvents
PUBLIC	?OnDraw@COPOSDeviceMonitor@@MAEJAAUATL_DRAWINFO@@@Z ; COPOSDeviceMonitor::OnDraw
PUBLIC	?GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z ; COPOSDeviceMonitor::GetConnMap
PUBLIC	?EventInit@COPOSDeviceMonitor@@IAEJXZ		; COPOSDeviceMonitor::EventInit
PUBLIC	?EventOpen@COPOSDeviceMonitor@@IAEXXZ		; COPOSDeviceMonitor::EventOpen
PUBLIC	?EventClaim@COPOSDeviceMonitor@@IAEXXZ		; COPOSDeviceMonitor::EventClaim
PUBLIC	?EventPreCloseRelease@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventPreCloseRelease
PUBLIC	?EventClose@COPOSDeviceMonitor@@IAEXXZ		; COPOSDeviceMonitor::EventClose
PUBLIC	?EventUninit@COPOSDeviceMonitor@@IAEXXZ		; COPOSDeviceMonitor::EventUninit
PUBLIC	?s_EventWindowProc@COPOSDeviceMonitor@@KGJPAUHWND__@@IIJ@Z ; COPOSDeviceMonitor::s_EventWindowProc
PUBLIC	?EventWindowProc@COPOSDeviceMonitor@@IAGJIIJ@Z	; COPOSDeviceMonitor::EventWindowProc
PUBLIC	?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ	; COPOSDeviceMonitor::FireEventSetup
PUBLIC	?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ	; COPOSDeviceMonitor::FireEventCleanup
PUBLIC	?SOProcessID@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::SOProcessID
PUBLIC	?get_OpenResult@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::get_OpenResult
PUBLIC	?get_AutoDisable@COPOSDeviceMonitor@@UAGJPAF@Z	; COPOSDeviceMonitor::get_AutoDisable
PUBLIC	?put_AutoDisable@COPOSDeviceMonitor@@UAGJF@Z	; COPOSDeviceMonitor::put_AutoDisable
PUBLIC	?get_BinaryConversion@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::get_BinaryConversion
PUBLIC	?put_BinaryConversion@COPOSDeviceMonitor@@UAGJJ@Z ; COPOSDeviceMonitor::put_BinaryConversion
PUBLIC	?get_CapPowerReporting@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::get_CapPowerReporting
PUBLIC	?get_CheckHealthText@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_CheckHealthText
PUBLIC	?get_Claimed@COPOSDeviceMonitor@@UAGJPAF@Z	; COPOSDeviceMonitor::get_Claimed
PUBLIC	?get_DataCount@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::get_DataCount
PUBLIC	?get_DataEventEnabled@COPOSDeviceMonitor@@UAGJPAF@Z ; COPOSDeviceMonitor::get_DataEventEnabled
PUBLIC	?put_DataEventEnabled@COPOSDeviceMonitor@@UAGJF@Z ; COPOSDeviceMonitor::put_DataEventEnabled
PUBLIC	?get_DeviceEnabled@COPOSDeviceMonitor@@UAGJPAF@Z ; COPOSDeviceMonitor::get_DeviceEnabled
PUBLIC	?put_DeviceEnabled@COPOSDeviceMonitor@@UAGJF@Z	; COPOSDeviceMonitor::put_DeviceEnabled
PUBLIC	?get_FreezeEvents@COPOSDeviceMonitor@@UAGJPAF@Z	; COPOSDeviceMonitor::get_FreezeEvents
PUBLIC	?put_FreezeEvents@COPOSDeviceMonitor@@UAGJF@Z	; COPOSDeviceMonitor::put_FreezeEvents
PUBLIC	?get_PowerNotify@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::get_PowerNotify
PUBLIC	?put_PowerNotify@COPOSDeviceMonitor@@UAGJJ@Z	; COPOSDeviceMonitor::put_PowerNotify
PUBLIC	?get_PowerState@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::get_PowerState
PUBLIC	?get_ResultCode@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::get_ResultCode
PUBLIC	?get_ResultCodeExtended@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::get_ResultCodeExtended
PUBLIC	?get_State@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::get_State
PUBLIC	?get_ControlObjectDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_ControlObjectDescription
PUBLIC	?get_ControlObjectVersion@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::get_ControlObjectVersion
PUBLIC	?get_ServiceObjectDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_ServiceObjectDescription
PUBLIC	?get_ServiceObjectVersion@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::get_ServiceObjectVersion
PUBLIC	?get_DeviceDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_DeviceDescription
PUBLIC	?get_DeviceName@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_DeviceName
PUBLIC	?get_CapStatisticsReporting@COPOSDeviceMonitor@@UAGJPAF@Z ; COPOSDeviceMonitor::get_CapStatisticsReporting
PUBLIC	?get_CapUpdateStatistics@COPOSDeviceMonitor@@UAGJPAF@Z ; COPOSDeviceMonitor::get_CapUpdateStatistics
PUBLIC	?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UAGJPAF@Z ; COPOSDeviceMonitor::get_CapCompareFirmwareVersion
PUBLIC	?get_CapUpdateFirmware@COPOSDeviceMonitor@@UAGJPAF@Z ; COPOSDeviceMonitor::get_CapUpdateFirmware
PUBLIC	?CheckHealth@COPOSDeviceMonitor@@UAGJJPAJ@Z	; COPOSDeviceMonitor::CheckHealth
PUBLIC	?ClaimDevice@COPOSDeviceMonitor@@UAGJJPAJ@Z	; COPOSDeviceMonitor::ClaimDevice
PUBLIC	?ClearInput@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::ClearInput
PUBLIC	?Close@COPOSDeviceMonitor@@UAGJPAJ@Z		; COPOSDeviceMonitor::Close
PUBLIC	?DirectIO@COPOSDeviceMonitor@@UAGJJPAJPAPA_W0@Z	; COPOSDeviceMonitor::DirectIO
PUBLIC	?Open@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z		; COPOSDeviceMonitor::Open
PUBLIC	?ReleaseDevice@COPOSDeviceMonitor@@UAGJPAJ@Z	; COPOSDeviceMonitor::ReleaseDevice
PUBLIC	?ResetStatistics@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ; COPOSDeviceMonitor::ResetStatistics
PUBLIC	?RetrieveStatistics@COPOSDeviceMonitor@@UAGJPAPA_WPAJ@Z ; COPOSDeviceMonitor::RetrieveStatistics
PUBLIC	?UpdateStatistics@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ; COPOSDeviceMonitor::UpdateStatistics
PUBLIC	?CompareFirmwareVersion@COPOSDeviceMonitor@@UAGJPA_WPAJ1@Z ; COPOSDeviceMonitor::CompareFirmwareVersion
PUBLIC	?UpdateFirmware@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ; COPOSDeviceMonitor::UpdateFirmware
PUBLIC	?ClearInputProperties@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::ClearInputProperties
PUBLIC	?get_DeviceData@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_DeviceData
PUBLIC	?get_DeviceList@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_DeviceList
PUBLIC	?get_MonitoringDeviceList@COPOSDeviceMonitor@@UAGJPAPA_W@Z ; COPOSDeviceMonitor::get_MonitoringDeviceList
PUBLIC	?AddMonitoringDevice@COPOSDeviceMonitor@@UAGJPA_WJJJJPAJ@Z ; COPOSDeviceMonitor::AddMonitoringDevice
PUBLIC	?ClearMonitoringDevice@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::ClearMonitoringDevice
PUBLIC	?DeleteMonitoringDevice@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ; COPOSDeviceMonitor::DeleteMonitoringDevice
PUBLIC	?GetDeviceValue@COPOSDeviceMonitor@@UAGJPA_WPAJ1@Z ; COPOSDeviceMonitor::GetDeviceValue
PUBLIC	??0_CW@@QAE@PBD@Z				; _CW::_CW
PUBLIC	??0_CW@@QAE@PB_W@Z				; _CW::_CW
PUBLIC	??B_CW@@QAEPB_WXZ				; _CW::operator wchar_t const *
PUBLIC	??1_CW@@QAE@XZ					; _CW::~_CW
PUBLIC	??0_CWNCC@@QAE@PBD@Z				; _CWNCC::_CWNCC
PUBLIC	??B_CWNCC@@QAEPA_WXZ				; _CWNCC::operator wchar_t *
PUBLIC	??1_CWNCC@@QAE@XZ				; _CWNCC::~_CWNCC
PUBLIC	??0?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAE@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
PUBLIC	??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
PUBLIC	?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next
PUBLIC	?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip
PUBLIC	?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset
PUBLIC	?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone
PUBLIC	?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
PUBLIC	?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_InternalQueryInterface
PUBLIC	?_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries
PUBLIC	??0?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>
PUBLIC	??1?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::~CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>
PUBLIC	??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
PUBLIC	??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
PUBLIC	?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef
PUBLIC	?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release
PUBLIC	?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface
PUBLIC	?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
PUBLIC	??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1OE@EFJOHFCD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@DGDFBHKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0HD@ECNMIKGK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@	; `string'
PUBLIC	??_C@_1OG@DEDHKNLM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0HB@KEBNGHII@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1IA@KEEOONGN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@ ; `string'
PUBLIC	?_AtlComModule@ATL@@3VCAtlComModule@1@A		; ATL::_AtlComModule
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	??_C@_1BG@PEGMCOIG@?$AAp?$AAT?$AAh?$AAi?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1BK@ENABKMAI@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1GE@KALDMMBC@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?9?$AA?$DO?$AAp?$AAF?$AAu?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_1BA@JJDNGNLN@?$AA?$CB?$AAb?$AAB?$AAl?$AAi?$AAn?$AAd@ ; `string'
PUBLIC	??_C@_1IG@OPJAFKJH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@ ; `string'
PUBLIC	??_C@_1BO@IINBGKAE@?$AAp?$AAp?$AAv?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1BK@MDGGGAPK@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1BO@CFNLNIPO@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AAL@ ; `string'
PUBLIC	??_C@_1IG@BMPHLDAM@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAL?$AA?$CC?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1CE@GFEBMKPP@?$AAp?$AAp?$AAF?$AAi?$AAn?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAp?$AAp?$AAF?$AAi@ ; `string'
PUBLIC	??_C@_1FI@CDNFCAGD@?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1EO@PKGIEOJK@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5@ ; `string'
PUBLIC	__GUID_b196b287_bab4_101a_b69c_00aa00341d07
PUBLIC	??_C@_1OA@EJAAKNNE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0HA@DOAAAKDA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1CG@KBMKEOOB@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy@ ; `string'
PUBLIC	?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap
PUBLIC	??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@ ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::`vftable'
PUBLIC	?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B ; `COPOSDeviceMonitor::GetConnMap'::`2'::_entries
PUBLIC	?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
PUBLIC	??_C@_1FK@EJDCNMFO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@ ; `string'
PUBLIC	??_C@_1FM@GHFMGGAO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@ ; `string'
PUBLIC	??_C@_1GC@FLDBIEFG@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@ ; `string'
PUBLIC	??_C@_1BI@PMBJJHKM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAa?$AAi?$AAm@ ; `string'
PUBLIC	??_C@_1CM@JMADAJDC@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AAR@ ; `string'
PUBLIC	??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@ ; `string'
PUBLIC	??_C@_1DE@EPLGDCDL@?$AA?$CB?$AA?5?$AA_?$AAE?$AAv?$AAe?$AAn?$AAt?$AA_?$AAb?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BI@IOGKIMIM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAo?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1FC@INBMHOIJ@?$AA?3?$AA?3?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@ ; `string'
PUBLIC	??_C@_1IK@JGLBMEDC@?$AA?3?$AA?3?$AAU?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAC?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1FK@NNNDFBMJ@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@ ; `string'
PUBLIC	??_C@_1FE@CAEAEALH@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@ ; `string'
PUBLIC	??_C@_1EG@DCPEEBJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ ; `string'
PUBLIC	??_C@_1EO@JKFBLFHJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ ; `string'
PUBLIC	??_C@_1EI@OGEHNNLE@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ ; `string'
PUBLIC	??_C@_1FG@KGPDBNHF@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ ; `string'
PUBLIC	??_C@_1CO@NKNAIIAP@?$AA?$CK?$AAU?$AAn?$AAa?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAo?$AAk@ ; `string'
PUBLIC	??_C@_1EA@IMKHEMDJ@?$AA?$CK?$AAA?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAi?$AAn?$AAk?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@ ; `string'
PUBLIC	__GUID_b196b286_bab4_101a_b69c_00aa00341d07
PUBLIC	??_C@_0HA@JEDONBAF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1GI@EDPGCMOP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5@ ; `string'
PUBLIC	??_C@_1OK@FGCLCILL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GI@CMBOLMBG@?$AA?$CK?$AAF?$AAi?$AAr?$AAe?$AAT?$AAh?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1BE@ENNDGLJC@?$AA_?$AAC?$AAC?$AAo?$AAm?$AAE?$AAn?$AAu?$AAm@ ; `string'
PUBLIC	??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vftable'
PUBLIC	?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	__recalloc:PROC
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__CrtDbgReportW:PROC
EXTRN	_isdigit:PROC
EXTRN	_memcmp:PROC
EXTRN	_memset:PROC
EXTRN	_wcscpy_s:PROC
EXTRN	_wcscat:PROC
EXTRN	_wcscpy:PROC
EXTRN	_wcslen:PROC
EXTRN	__imp__DeleteFileW@4:PROC
EXTRN	__imp__DecodePointer@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__RaiseException@16:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__InitializeCriticalSectionEx@12:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__CreateMutexW@12:PROC
EXTRN	__imp__CreateEventW@16:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageW@28:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__GetObjectW@12:PROC
EXTRN	__imp__PeekMessageW@20:PROC
EXTRN	__imp__DefWindowProcW@16:PROC
EXTRN	__imp__RegisterClassW@4:PROC
EXTRN	__imp__UnregisterClassW@8:PROC
EXTRN	__imp__CreateWindowExW@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__LoadBitmapW@8:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExW@20:PROC
EXTRN	__imp__RegQueryValueExW@24:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	__imp__CLSIDFromProgID@8:PROC
EXTRN	__imp__SysAllocString@4:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__SysStringLen@4:PROC
EXTRN	__imp__SysStringByteLen@4:PROC
EXTRN	__imp__VariantClear@4:PROC
EXTRN	__wfopen:PROC
EXTRN	___stdio_common_vfwprintf:PROC
EXTRN	___stdio_common_vswprintf:PROC
EXTRN	___stdio_common_vswprintf_s:PROC
EXTRN	___stdio_common_vsnwprintf_s:PROC
EXTRN	_fclose:PROC
EXTRN	_putc:PROC
EXTRN	_AtlThunk_FreeData@4:PROC
EXTRN	?_assert@@YAXPB_W0I@Z:PROC			; _assert
EXTRN	?SetVARIANT_BOOL@OposVariant@@QAEXF@Z:PROC	; OposVariant::SetVARIANT_BOOL
EXTRN	?GetLONG@OposVariant@@QAEJXZ:PROC		; OposVariant::GetLONG
EXTRN	?ChangeLONG@OposVariant@@QAEXPAJAAJ@Z:PROC	; OposVariant::ChangeLONG
EXTRN	?SetLONG@OposVariant@@QAEXJ@Z:PROC		; OposVariant::SetLONG
EXTRN	?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z:PROC	; OposVariant::SetLONG_Ptr
EXTRN	?ChangeBSTR@OposVariant@@QAEXPAPA_WAAJ@Z:PROC	; OposVariant::ChangeBSTR
EXTRN	?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z:PROC	; OposVariant::SetBSTR
EXTRN	?SetBSTR_Copy@OposVariant@@QAEXPA_WAAJ@Z:PROC	; OposVariant::SetBSTR_Copy
EXTRN	?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z:PROC ; OposVariant::SetBSTR_InOutPtr
EXTRN	?SetString@OposVariant@@QAEXPB_WAAJ@Z:PROC	; OposVariant::SetString
EXTRN	?SetDispatch_Ptr@OposVariant@@QAEXPAUIDispatch@@AAJ@Z:PROC ; OposVariant::SetDispatch_Ptr
EXTRN	??0OposDispParms@@QAE@PAVOposVariant@@H@Z:PROC	; OposDispParms::OposDispParms
EXTRN	??1OposDispParms@@QAE@XZ:PROC			; OposDispParms::~OposDispParms
EXTRN	?cw_strcpy@@YAHPA_WPBD@Z:PROC			; cw_strcpy
EXTRN	?DupWide@_CW@@AAEXXZ:PROC			; _CW::DupWide
EXTRN	??_E?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z:PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allmul:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	_IID_IUnknown:BYTE
EXTRN	_GUID_NULL:BYTE
EXTRN	_IID_IDispatch:BYTE
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
EXTRN	___ImageBase:BYTE
EXTRN	?_Module@@3VCComModule@ATL@@A:BYTE		; _Module
EXTRN	_DIID__IOPOSDeviceMonitorEvents:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_AtlComModule@ATL@@3VCAtlComModule@1@A
_BSS	SEGMENT
?_AtlComModule@ATL@@3VCAtlComModule@1@A DB 028H DUP (?)	; ATL::_AtlComModule
_BSS	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
;	COMDAT ?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B
_BSS	SEGMENT
?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B DD 01H DUP (?) ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap
_BSS	ENDS
;	COMDAT ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B
_BSS	SEGMENT
?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B DD 03H DUP (?) ; `COPOSDeviceMonitor::GetConnMap'::`2'::_entries
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA DD 01H DUP (?) ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceGeneral$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceGeneral@ATL@@YAXXZ ; ATL::atlTraceGeneral$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT
?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B DD 00H ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
	DD	FLAT:??_C@_1BE@ENNDGLJC@?$AA_?$AAC?$AAC?$AAo?$AAm?$AAE?$AAn?$AAu?$AAm@
	DD	00H
	DD	FLAT:__GUID_b196b287_bab4_101a_b69c_00aa00341d07
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
CONST	SEGMENT
??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@ DD FLAT:?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`vftable'
	DD	FLAT:?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
	DD	FLAT:?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
	DD	FLAT:?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z
	DD	FLAT:?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z
	DD	FLAT:?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ
	DD	FLAT:?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
	DD	FLAT:??_E?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1BE@ENNDGLJC@?$AA_?$AAC?$AAC?$AAo?$AAm?$AAE?$AAn?$AAu?$AAm@
CONST	SEGMENT
??_C@_1BE@ENNDGLJC@?$AA_?$AAC?$AAC?$AAo?$AAm?$AAE?$AAn?$AAu?$AAm@ DB '_', 00H
	DB	'C', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'E', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@CMBOLMBG@?$AA?$CK?$AAF?$AAi?$AAr?$AAe?$AAT?$AAh?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5@
CONST	SEGMENT
??_C@_1GI@CMBOLMBG@?$AA?$CK?$AAF?$AAi?$AAr?$AAe?$AAT?$AAh?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5@ DB '*'
	DB	00H, 'F', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'T', 00H, 'h', 00H
	DB	'e', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ':'
	DB	00H, ' ', 00H, 'D', 00H, 'e', 00H, 'l', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%'
	DB	00H, 'l', 00H, 's', 00H, ';', 00H, ' ', 00H, 'S', 00H, 'i', 00H
	DB	'n', 00H, 'k', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'X'
	DB	00H, ';', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H
	DB	'I', 00H, 'D', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OK@FGCLCILL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OK@FGCLCILL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H, '3', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'c', 00H
	DB	'o', 00H, 'l', 00H, 'l', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EDPGCMOP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5@
CONST	SEGMENT
??_C@_1GI@EDPGCMOP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5@ DB 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ' ', 00H, '-', 00H
	DB	' ', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'y', 00H, 'e', 00H, 'd', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@JEDONBAF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0HA@JEDONBAF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.28.29333\atlmfc\include\atlwin.h', 00H ; `string'
CONST	ENDS
;	COMDAT __GUID_b196b286_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b286_bab4_101a_b69c_00aa00341d07 DD 0b196b286H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I', 00H
	DB	'O', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@ DB 'E'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 'E', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@
CONST	SEGMENT
??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@ DB 'S'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'u', 00H, 's', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@IMKHEMDJ@?$AA?$CK?$AAA?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAi?$AAn?$AAk?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1EA@IMKHEMDJ@?$AA?$CK?$AAA?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAi?$AAn?$AAk?$AA?5?$AA0@ DB '*'
	DB	00H, 'A', 00H, 'd', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'e', 00H
	DB	':', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'n', 00H, 'k', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, ';', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'i', 00H, 'e', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, '%', 00H, 'X', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@NKNAIIAP@?$AA?$CK?$AAU?$AAn?$AAa?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAo?$AAk@
CONST	SEGMENT
??_C@_1CO@NKNAIIAP@?$AA?$CK?$AAU?$AAn?$AAa?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAo?$AAk@ DB '*'
	DB	00H, 'U', 00H, 'n', 00H, 'a', 00H, 'd', 00H, 'v', 00H, 'i', 00H
	DB	's', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o', 00H, 'o'
	DB	00H, 'k', 00H, 'i', 00H, 'e', 00H, ' ', 00H, '0', 00H, 'x', 00H
	DB	'%', 00H, 'X', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?s_bFirst@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4HA
_DATA	SEGMENT
?s_bFirst@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4HA DD 01H ; `COPOSDeviceMonitor::WriteTrace'::`2'::s_bFirst
_DATA	ENDS
;	COMDAT ?s_TraceFile@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4PA_WA
_DATA	SEGMENT
?s_TraceFile@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4PA_WA DB 'C', 00H
	DB	':', 00H, '\', 00H, 'O', 00H, 'p', 00H, 'o', 00H, 's', 00H, 'C'
	DB	00H, 'C', 00H, 'O', 00H, '_', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '.', 00H, 'l', 00H, 'o', 00H
	DB	'g', 00H, 00H, 00H				; `COPOSDeviceMonitor::WriteTrace'::`2'::s_TraceFile
_DATA	ENDS
_DATA	SEGMENT
?s_SOMethodNames@@3PAPADA DD FLAT:$SG193248		; s_SOMethodNames
	DD	FLAT:$SG193249
	DD	FLAT:$SG193250
	DD	FLAT:$SG193251
	DD	FLAT:$SG193252
	DD	FLAT:$SG193253
	DD	FLAT:$SG193254
	DD	FLAT:$SG193255
	DD	FLAT:$SG193256
	DD	FLAT:$SG193257
	DD	FLAT:$SG193258
	DD	FLAT:$SG193259
	DD	FLAT:$SG193260
	DD	FLAT:$SG193261
	DD	FLAT:$SG193262
	DD	FLAT:$SG193263
	DD	FLAT:$SG193264
	DD	FLAT:$SG193265
	DD	FLAT:$SG193266
	DD	FLAT:$SG193267
	DD	FLAT:$SG193268
	DD	FLAT:$SG193269
	DD	00H
?s_RequiredMethodsPerRelease@@3PAHA DD 016H		; s_RequiredMethodsPerRelease
_DATA	ENDS
;	COMDAT ??_C@_1FG@KGPDBNHF@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
CONST	SEGMENT
??_C@_1FG@KGPDBNHF@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'c', 00H, ':', 00H, ' ', 00H, 'F', 00H, 'i', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 's', 00H, 'U', 00H, 'p', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'v', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@OGEHNNLE@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
CONST	SEGMENT
??_C@_1EI@OGEHNNLE@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'c', 00H, ':', 00H, ' ', 00H, 'F', 00H, 'i', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'E', 00H, 'r'
	DB	00H, 'r', 00H, 'o', 00H, 'r', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JKFBLFHJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
CONST	SEGMENT
??_C@_1EO@JKFBLFHJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'c', 00H, ':', 00H, ' ', 00H, 'F', 00H, 'i', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I', 00H, 'O', 00H
	DB	'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@DCPEEBJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
CONST	SEGMENT
??_C@_1EG@DCPEEBJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'c', 00H, ':', 00H, ' ', 00H, 'F', 00H, 'i', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@CAEAEALH@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@
CONST	SEGMENT
??_C@_1FE@CAEAEALH@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@ DB ':'
	DB	00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '('
	DB	00H, ' ', 00H, '_', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '_', 00H, 'D', 00H, 'o', 00H, 'E', 00H, 'v', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'M', 00H, 'u', 00H, 't', 00H, 'e', 00H
	DB	'x', 00H, ' ', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@NNNDFBMJ@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@
CONST	SEGMENT
??_C@_1FK@NNNDFBMJ@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@ DB ':'
	DB	00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '('
	DB	00H, ' ', 00H, '_', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '_', 00H, 'F', 00H, 'i', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'D', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, ')', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@JGLBMEDC@?$AA?3?$AA?3?$AAU?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAC?$AAl?$AAa@
CONST	SEGMENT
??_C@_1IK@JGLBMEDC@?$AA?3?$AA?3?$AAU?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAC?$AAl?$AAa@ DB ':'
	DB	00H, ':', 00H, 'U', 00H, 'n', 00H, 'r', 00H, 'e', 00H, 'g', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'C', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, 'W', 00H, '(', 00H, ' ', 00H
	DB	'g', 00H, '_', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ',', 00H
	DB	' ', 00H, '_', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l'
	DB	00H, 'e', 00H, '.', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'M', 00H
	DB	'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ' ', 00H, ')', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@INBMHOIJ@?$AA?3?$AA?3?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@
CONST	SEGMENT
??_C@_1FC@INBMHOIJ@?$AA?3?$AA?3?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@ DB ':'
	DB	00H, ':', 00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'y', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, '(', 00H, ' ', 00H, '_', 00H, 'E', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, '_', 00H, 'h', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@IOGKIMIM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAo?$AAs?$AAe@
CONST	SEGMENT
??_C@_1BI@IOGKIMIM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAo?$AAs?$AAe@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'C', 00H
	DB	'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@EPLGDCDL@?$AA?$CB?$AA?5?$AA_?$AAE?$AAv?$AAe?$AAn?$AAt?$AA_?$AAb?$AAE?$AAv?$AAe?$AAn?$AAt@
CONST	SEGMENT
??_C@_1DE@EPLGDCDL@?$AA?$CB?$AA?5?$AA_?$AAE?$AAv?$AAe?$AAn?$AAt?$AA_?$AAb?$AAE?$AAv?$AAe?$AAn?$AAt@ DB '!'
	DB	00H, ' ', 00H, '_', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '_', 00H, 'b', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 'I', 00H, 'n', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
CONST	SEGMENT
??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'e', 00H
	DB	'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P', 00H, 'O'
	DB	00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H, '\', 00H
	DB	'z', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@JMADAJDC@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AAR@
CONST	SEGMENT
??_C@_1CM@JMADAJDC@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AAR@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'P', 00H
	DB	'r', 00H, 'e', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e'
	DB	00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PMBJJHKM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAa?$AAi?$AAm@
CONST	SEGMENT
??_C@_1BI@PMBJJHKM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAa?$AAi?$AAm@ DB '*'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'C', 00H
	DB	'l', 00H, 'a', 00H, 'i', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@FLDBIEFG@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@
CONST	SEGMENT
??_C@_1GC@FLDBIEFG@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@ DB ' '
	DB	00H, ' ', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, ':', 00H, ' ', 00H, 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '/', 00H, 'M', 00H
	DB	'u', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '%', 00H, 'l'
	DB	00H, 'u', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@GHFMGGAO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@
CONST	SEGMENT
??_C@_1FM@GHFMGGAO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@ DB ' '
	DB	00H, ' ', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, ':', 00H, ' ', 00H, 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'E', 00H
	DB	'x', 00H, ' ', 00H, '%', 00H, 'l', 00H, 'u', 00H, 0aH, 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@EJDCNMFO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@
CONST	SEGMENT
??_C@_1FK@EJDCNMFO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@ DB ' '
	DB	00H, ' ', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, ':', 00H, ' ', 00H, 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, '%', 00H, 'l', 00H, 'u', 00H, 0aH, 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@
CONST	SEGMENT
??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@ DD FLAT:?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z
	DD	FLAT:?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z
	DD	FLAT:?Advise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJPAUIUnknown@@PAK@Z
	DD	FLAT:?Unadvise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJK@Z
	DD	FLAT:?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
CONST	ENDS
;	COMDAT ??_C@_1CG@KBMKEOOB@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy@
CONST	SEGMENT
??_C@_1CG@KBMKEOOB@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy@ DB 'C'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H
	DB	' ', 00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o'
	DB	00H, 'y', 00H, 'e', 00H, 'd', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@DOAAAKDA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0HA@DOAAAKDA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.28.29333\atlmfc\include\atlctl.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@EJAAKNNE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OA@EJAAKNNE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H, '3', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT __GUID_b196b287_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b287_bab4_101a_b69c_00aa00341d07 DD 0b196b287H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ??_C@_1EO@PKGIEOJK@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1EO@PKGIEOJK@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5@ DB 'i'
	DB	00H, 'd', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'd', 00H
	DB	'w', 00H, 'C', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'i', 00H, 'e'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, 'd', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'D', 00H, 'W'
	DB	00H, 'O', 00H, 'R', 00H, 'D', 00H, ')', 00H, 'm', 00H, '_', 00H
	DB	'n', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB 'n'
	DB	00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'n', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'n'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@CDNFCAGD@?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1FI@CDNFCAGD@?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ DB 'd'
	DB	00H, 'w', 00H, 'C', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'i', 00H
	DB	'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'd', 00H, 'w', 00H, 'C', 00H
	DB	'o', 00H, 'o', 00H, 'k', 00H, 'i', 00H, 'e', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '(', 00H, 'D', 00H, 'W', 00H, 'O', 00H
	DB	'R', 00H, 'D', 00H, ')', 00H, 'm', 00H, '_', 00H, 'n', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GFEBMKPP@?$AAp?$AAp?$AAF?$AAi?$AAn?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAp?$AAp?$AAF?$AAi@
CONST	SEGMENT
??_C@_1CE@GFEBMKPP@?$AAp?$AAp?$AAF?$AAi?$AAn?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAp?$AAp?$AAF?$AAi@ DB 'p'
	DB	00H, 'p', 00H, 'F', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '*', 00H, 'p', 00H, 'p', 00H, 'F'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IG@BMPHLDAM@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAL?$AA?$CC?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1IG@BMPHLDAM@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAL?$AA?$CC?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'L', 00H, '"', 00H
	DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, ' '
	DB	00H, 'h', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'l', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'y', 00H, ' ', 00H, 'b'
	DB	00H, 'e', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'd', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@CFNLNIPO@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AAL@
CONST	SEGMENT
??_C@_1BO@CFNLNIPO@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AAL@ DB 'm'
	DB	00H, '_', 00H, 'd', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'f', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '-', 00H, '1', 00H, 'L'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MDGGGAPK@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@MDGGGAPK@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'd', 00H, 'w', 00H, 'R', 00H, 'e', 00H, 'f', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@IINBGKAE@?$AAp?$AAp?$AAv?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BO@IINBGKAE@?$AAp?$AAp?$AAv?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'p'
	DB	00H, 'p', 00H, 'v', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
CONST	SEGMENT
??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'e', 00H
	DB	'l', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'O', 00H, 'P', 00H, 'O'
	DB	00H, 'S', 00H, '-', 00H, 'C', 00H, 'C', 00H, 'O', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, '\'
	DB	00H, 'A', 00H, 'T', 00H, 'L', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '.', 00H, 'h', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1IG@OPJAFKJH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1IG@OPJAFKJH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@ DB 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ' ', 00H, ':', 00H
	DB	' ', 00H, 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'A', 00H, 't', 00H, 'l', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@JJDNGNLN@?$AA?$CB?$AAb?$AAB?$AAl?$AAi?$AAn?$AAd@
CONST	SEGMENT
??_C@_1BA@JJDNGNLN@?$AA?$CB?$AAb?$AAB?$AAl?$AAi?$AAn?$AAd@ DB '!', 00H, 'b'
	DB	00H, 'B', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@KALDMMBC@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?9?$AA?$DO?$AAp?$AAF?$AAu?$AAn?$AAc@
CONST	SEGMENT
??_C@_1GE@KALDMMBC@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?9?$AA?$DO?$AAp?$AAF?$AAu?$AAn?$AAc@ DB 'p'
	DB	00H, 'E', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'p', 00H, 'F', 00H, 'u', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H
	DB	'(', 00H, 'A', 00H, 'T', 00H, 'L', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'A', 00H, 'T', 00H, 'L', 00H, '_', 00H, 'C', 00H, 'R', 00H
	DB	'E', 00H, 'A', 00H, 'T', 00H, 'O', 00H, 'R', 00H, 'A', 00H, 'R'
	DB	00H, 'G', 00H, 'F', 00H, 'U', 00H, 'N', 00H, 'C', 00H, '*', 00H
	DB	')', 00H, '1', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@ENABKMAI@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@ENABKMAI@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'p'
	DB	00H, 'E', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	's', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@PEGMCOIG@?$AAp?$AAT?$AAh?$AAi?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BG@PEGMCOIG@?$AAp?$AAT?$AAh?$AAi?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'p'
	DB	00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ??_C@_1IA@KEEOONGN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1IA@KEEOONGN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@ DB 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ' ', 00H, ':', 00H
	DB	' ', 00H, 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'C', 00H, 'A', 00H, 't', 00H, 'l'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'M', 00H, 'o', 00H, 'd', 00H
	DB	'u', 00H, 'l', 00H, 'e', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@KEBNGHII@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0HB@KEBNGHII@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.28.29333\atlmfc\include\atlbase.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H, '3', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1OG@DEDHKNLM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OG@DEDHKNLM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H, '3', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'e', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@ DB 'f', 00H, 'a', 00H, 'l', 00H
	DB	's', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'o', 00H
	DB	'w', 00H, ':', 00H, ' ', 00H, 'h', 00H, 'r', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@ECNMIKGK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0HD@ECNMIKGK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.28.29333\atlmfc\include\atlexcept.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@DGDFBHKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@DGDFBHKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H, '3', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_1OE@EFJOHFCD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@EFJOHFCD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H, '3', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceCOM$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceCOM@ATL@@YAXXZ ; ATL::atlTraceCOM$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceQI$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceQI@ATL@@YAXXZ ; ATL::atlTraceQI$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceRegistrar$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceRegistrar@ATL@@YAXXZ ; ATL::atlTraceRegistrar$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceRefcount$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceRefcount@ATL@@YAXXZ ; ATL::atlTraceRefcount$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceWindowing$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceWindowing@ATL@@YAXXZ ; ATL::atlTraceWindowing$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceControls$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceControls@ATL@@YAXXZ ; ATL::atlTraceControls$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceHosting$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceHosting@ATL@@YAXXZ ; ATL::atlTraceHosting$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceDBClient$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceDBClient@ATL@@YAXXZ ; ATL::atlTraceDBClient$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceDBProvider$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceDBProvider@ATL@@YAXXZ ; ATL::atlTraceDBProvider$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceSnapin$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceSnapin@ATL@@YAXXZ ; ATL::atlTraceSnapin$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceNotImpl$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceNotImpl@ATL@@YAXXZ ; ATL::atlTraceNotImpl$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceAllocation$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceAllocation@ATL@@YAXXZ ; ATL::atlTraceAllocation$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceTime$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceTime@ATL@@YAXXZ ; ATL::atlTraceTime$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceCache$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceCache@ATL@@YAXXZ ; ATL::atlTraceCache$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceStencil$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceStencil@ATL@@YAXXZ ; ATL::atlTraceStencil$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceString$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceString@ATL@@YAXXZ ; ATL::atlTraceString$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceMap$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceMap@ATL@@YAXXZ ; ATL::atlTraceMap$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceUtil$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceUtil@ATL@@YAXXZ ; ATL::atlTraceUtil$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceSecurity$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceSecurity@ATL@@YAXXZ ; ATL::atlTraceSecurity$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceSync$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceSync@ATL@@YAXXZ ; ATL::atlTraceSync$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceISAPI$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceISAPI@ATL@@YAXXZ ; ATL::atlTraceISAPI$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlComModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlComModule@ATL@@YAXXZ ; ATL::_AtlComModule$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlWinModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlWinModule@ATL@@YAXXZ ; ATL::_AtlWinModule$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??pConnMap$initializer$@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0P6AXXZA@@3P6AXXZA DD FLAT:??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ ; ??pConnMap$initializer$@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 1c		 push	 28			; 0000001cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z
_TEXT	SEGMENT
tv166 = -24						; size = 4
tv85 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_p$ = -8						; size = 4
_hRes$ = -4						; size = 4
_pp$ = 8						; size = 4
?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance, COMDAT

; 2963 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 2964 : 	ATLASSERT(pp != NULL);

  0001e	83 7d 08 00	 cmp	 DWORD PTR _pp$[ebp], 0
  00022	75 26		 jne	 SHORT $LN8@CreateInst
  00024	68 00 00 00 00	 push	 OFFSET $SG199608
  00029	68 00 00 00 00	 push	 OFFSET $SG199609
  0002e	6a 00		 push	 0
  00030	68 94 0b 00 00	 push	 2964			; 00000b94H
  00035	68 00 00 00 00	 push	 OFFSET $SG199610
  0003a	6a 02		 push	 2
  0003c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN8@CreateInst
  00049	cc		 int	 3
$LN8@CreateInst:

; 2965 : 	if (pp == NULL)

  0004a	83 7d 08 00	 cmp	 DWORD PTR _pp$[ebp], 0
  0004e	75 0a		 jne	 SHORT $LN2@CreateInst

; 2966 : 		return E_POINTER;

  00050	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00055	e9 f6 00 00 00	 jmp	 $LN1@CreateInst
$LN2@CreateInst:

; 2967 : 	*pp = NULL;

  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  0005d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2968 : 
; 2969 : 	HRESULT hRes = E_OUTOFMEMORY;

  00063	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hRes$[ebp], -2147024882 ; 8007000eH

; 2970 : 	CComObject<Base>* p = NULL;

  0006a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0

; 2971 : 	ATLTRY(p = _ATL_NEW CComObject<Base>())

  00071	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00076	6a 1c		 push	 28			; 0000001cH
  00078	e8 00 00 00 00	 call	 ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new
  0007d	83 c4 08	 add	 esp, 8
  00080	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
  00083	83 7d f4 00	 cmp	 DWORD PTR $T2[ebp], 0
  00087	74 0f		 je	 SHORT $LN9@CreateInst
  00089	6a 00		 push	 0
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR $T2[ebp]
  0008e	e8 00 00 00 00	 call	 ??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
  00093	89 45 ec	 mov	 DWORD PTR tv85[ebp], eax
  00096	eb 07		 jmp	 SHORT $LN10@CreateInst
$LN9@CreateInst:
  00098	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@CreateInst:
  0009f	8b 55 ec	 mov	 edx, DWORD PTR tv85[ebp]
  000a2	89 55 f8	 mov	 DWORD PTR _p$[ebp], edx

; 2972 : 	if (p != NULL)

  000a5	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  000a9	0f 84 96 00 00
	00		 je	 $LN3@CreateInst

; 2973 : 	{
; 2974 : 		p->SetVoid(NULL);

  000af	6a 00		 push	 0
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000b4	83 c1 18	 add	 ecx, 24			; 00000018H
  000b7	e8 00 00 00 00	 call	 ?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z ; ATL::CComObjectRootBase::SetVoid

; 2975 : 		p->InternalFinalConstructAddRef();

  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000bf	83 c1 18	 add	 ecx, 24			; 00000018H
  000c2	e8 00 00 00 00	 call	 ?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ ; ATL::CComObjectRootBase::InternalFinalConstructAddRef

; 2976 : 		hRes = p->_AtlInitialConstruct();

  000c7	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000ca	83 c1 18	 add	 ecx, 24			; 00000018H
  000cd	e8 00 00 00 00	 call	 ?_AtlInitialConstruct@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEJXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::_AtlInitialConstruct
  000d2	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax

; 2977 : 		if (SUCCEEDED(hRes))

  000d5	83 7d fc 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  000d9	7c 0e		 jl	 SHORT $LN4@CreateInst

; 2978 : 			hRes = p->FinalConstruct();

  000db	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000de	83 c1 18	 add	 ecx, 24			; 00000018H
  000e1	e8 00 00 00 00	 call	 ?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ ; ATL::CComObjectRootBase::FinalConstruct
  000e6	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax
$LN4@CreateInst:

; 2979 : 		if (SUCCEEDED(hRes))

  000e9	83 7d fc 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  000ed	7c 0e		 jl	 SHORT $LN5@CreateInst

; 2980 : 			hRes = p->_AtlFinalConstruct();

  000ef	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000f2	83 c1 18	 add	 ecx, 24			; 00000018H
  000f5	e8 00 00 00 00	 call	 ?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ ; ATL::CComObjectRootBase::_AtlFinalConstruct
  000fa	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax
$LN5@CreateInst:

; 2981 : 		p->InternalFinalConstructRelease();

  000fd	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00100	83 c1 18	 add	 ecx, 24			; 00000018H
  00103	e8 00 00 00 00	 call	 ?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ ; ATL::CComObjectRootBase::InternalFinalConstructRelease

; 2982 : 		if (hRes != S_OK)

  00108	83 7d fc 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  0010c	74 37		 je	 SHORT $LN3@CreateInst

; 2983 : 		{
; 2984 : 			delete p;

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00111	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00114	83 7d f0 00	 cmp	 DWORD PTR $T1[ebp], 0
  00118	74 1d		 je	 SHORT $LN11@CreateInst
  0011a	8b f4		 mov	 esi, esp
  0011c	6a 01		 push	 1
  0011e	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  00121	8b 11		 mov	 edx, DWORD PTR [ecx]
  00123	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  00126	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00129	ff d0		 call	 eax
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	89 45 e8	 mov	 DWORD PTR tv166[ebp], eax
  00135	eb 07		 jmp	 SHORT $LN12@CreateInst
$LN11@CreateInst:
  00137	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN12@CreateInst:

; 2985 : 			p = NULL;

  0013e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0
$LN3@CreateInst:

; 2986 : 		}
; 2987 : 	}
; 2988 : 	*pp = p;

  00145	8b 4d 08	 mov	 ecx, DWORD PTR _pp$[ebp]
  00148	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  0014b	89 11		 mov	 DWORD PTR [ecx], edx

; 2989 : 	return hRes;

  0014d	8b 45 fc	 mov	 eax, DWORD PTR _hRes$[ebp]
$LN1@CreateInst:

; 2990 : }

  00150	5e		 pop	 esi
  00151	83 c4 18	 add	 esp, 24			; 00000018H
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 04 00	 ret	 4
?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_ppvObject$ = 16					; size = 4
?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface, COMDAT

; 2947 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2948 : 		return this->_InternalQueryInterface(iid, ppvObject);

  00003	8b 45 10	 mov	 eax, DWORD PTR _ppvObject$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_InternalQueryInterface

; 2949 : 	}

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT
tv84 = -24						; size = 4
$T1 = -20						; size = 4
_lock$2 = -9						; size = 1
_l$ = -4						; size = 4
_this$ = 8						; size = 4
?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release, COMDAT

; 2933 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 2934 : 		ULONG l = this->InternalRelease();

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 18	 add	 ecx, 24			; 00000018H
  00024	e8 00 00 00 00	 call	 ?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalRelease
  00029	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax

; 2935 : 		if (l == 0)

  0002c	83 7d fc 00	 cmp	 DWORD PTR _l$[ebp], 0
  00030	75 40		 jne	 SHORT $LN2@Release

; 2936 : 		{
; 2937 : 			// Lock the module to avoid DLL unload when destruction of member variables take a long time
; 2938 : 			ModuleLockHelper lock;

  00032	8d 4d f7	 lea	 ecx, DWORD PTR _lock$2[ebp]
  00035	e8 00 00 00 00	 call	 ??0ModuleLockHelper@ATL@@QAE@XZ ; ATL::ModuleLockHelper::ModuleLockHelper

; 2939 : 			delete this;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  00040	83 7d ec 00	 cmp	 DWORD PTR $T1[ebp], 0
  00044	74 1d		 je	 SHORT $LN4@Release
  00046	8b f4		 mov	 esi, esp
  00048	6a 01		 push	 1
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  00052	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00055	ff d0		 call	 eax
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	89 45 e8	 mov	 DWORD PTR tv84[ebp], eax
  00061	eb 07		 jmp	 SHORT $LN5@Release
$LN4@Release:
  00063	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN5@Release:

; 2940 : 		}

  0006a	8d 4d f7	 lea	 ecx, DWORD PTR _lock$2[ebp]
  0006d	e8 00 00 00 00	 call	 ??1ModuleLockHelper@ATL@@QAE@XZ ; ATL::ModuleLockHelper::~ModuleLockHelper
$LN2@Release:

; 2941 : 		return l;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]

; 2942 : 	}

  00075	52		 push	 edx
  00076	8b cd		 mov	 ecx, ebp
  00078	50		 push	 eax
  00079	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Release
  0007f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00084	58		 pop	 eax
  00085	5a		 pop	 edx
  00086	5e		 pop	 esi
  00087	83 c4 18	 add	 esp, 24			; 00000018H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
  00097	90		 npad	 1
$LN8@Release:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN7@Release
$LN7@Release:
  000a0	f7 ff ff ff	 DD	 -9			; fffffff7H
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN6@Release
$LN6@Release:
  000ac	6c		 DB	 108			; 0000006cH
  000ad	6f		 DB	 111			; 0000006fH
  000ae	63		 DB	 99			; 00000063H
  000af	6b		 DB	 107			; 0000006bH
  000b0	00		 DB	 0
?Release@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef, COMDAT

; 2929 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2930 : 		return this->InternalAddRef();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	83 c1 18	 add	 ecx, 24			; 00000018H
  00009	e8 00 00 00 00	 call	 ?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalAddRef

; 2931 : 	}

  0000e	3b ec		 cmp	 ebp, esp
  00010	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?AddRef@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::AddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >, COMDAT
; _this$ = ecx

; 2918 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@

; 2919 : 		this->m_dwRef = -(LONG_MAX/2);

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 18 01 00
	00 c0		 mov	 DWORD PTR [ecx+24], -1073741823 ; c0000001H

; 2920 : 		this->FinalRelease();

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 c1 18	 add	 ecx, 24			; 00000018H
  00028	e8 00 00 00 00	 call	 ?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ ; ATL::CComObjectRootBase::FinalRelease

; 2921 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 2922 : 		_AtlDebugInterfacesModule.DeleteNonAddRefThunk(_GetRawUnknown());
; 2923 : #endif
; 2924 : 		_pAtlModule->Unlock();

  0002d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00033	8b 02		 mov	 eax, DWORD PTR [edx]
  00035	8b f4		 mov	 esi, esp
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  0003d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00040	ff d2		 call	 edx
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2925 : 	}

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??1?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ
  00051	5e		 pop	 esi
  00052	83 c4 04	 add	 esp, 4
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??1?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::~CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z PROC ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >, COMDAT
; _this$ = ecx

; 2911 : 	CComObject(_In_opt_ void* = NULL)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2912 : 	{

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@

; 2913 : 		_pAtlModule->Lock();

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	8b f4		 mov	 esi, esp
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	ff d0		 call	 eax
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2914 : 	}

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5e		 pop	 esi
  00040	83 c4 04	 add	 esp, 4
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ENDP ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ PROC ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::~CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 18	 add	 ecx, 24			; 00000018H
  00014	e8 00 00 00 00	 call	 ??1?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::~CComObjectRootEx<ATL::CComSingleThreadModel>
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ ENDP ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::~CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ PROC ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAE@XZ ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 18	 add	 ecx, 24			; 00000018H
  0001c	e8 00 00 00 00	 call	 ??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ ENDP ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT
?_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ PROC ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries, COMDAT

; 5671 : 	BEGIN_COM_MAP(_CComEnum)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5672 : 		COM_INTERFACE_ENTRY_IID(*piid, _CComEnumBase)
; 5673 : 	END_COM_MAP()

  00003	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00008	c1 e0 00	 shl	 eax, 0
  0000b	05 00 00 00 00	 add	 eax, OFFSET ?_entries@?1??_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B ; `ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries'::`2'::_entries
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ ENDP ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_ppvObject$ = 12					; size = 4
?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z PROC ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_InternalQueryInterface, COMDAT
; _this$ = ecx

; 5671 : 	BEGIN_COM_MAP(_CComEnum)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _ppvObject$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _iid$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ?_GetEntries@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_GetEntries
  0001b	50		 push	 eax
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z ; ATL::CComObjectRootBase::InternalQueryInterface
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z ENDP ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_InternalQueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z
_TEXT	SEGMENT
tv140 = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_p$3 = -16						; size = 4
_hr$4 = -12						; size = 4
_i$5 = -8						; size = 4
_this$ = -4						; size = 4
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
_pUnk$ = 16						; size = 4
_flags$ = 20						; size = 4
?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init, COMDAT
; _this$ = ecx

; 5627 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5628 : 	if (flags == AtlFlagCopy)

  00023	83 7d 14 03	 cmp	 DWORD PTR _flags$[ebp], 3
  00027	0f 85 64 01 00
	00		 jne	 $LN10@Init
$LN4@Init:

; 5629 : 	{
; 5630 : 		ATLASSUME(m_begin == NULL); //Init called twice?

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 26		 je	 SHORT $LN2@Init
  00036	68 00 00 00 00	 push	 OFFSET $SG199584
  0003b	68 00 00 00 00	 push	 OFFSET $SG199585
  00040	6a 00		 push	 0
  00042	68 fe 15 00 00	 push	 5630			; 000015feH
  00047	68 00 00 00 00	 push	 OFFSET $SG199586
  0004c	6a 02		 push	 2
  0004e	e8 00 00 00 00	 call	 __CrtDbgReportW
  00053	83 c4 18	 add	 esp, 24			; 00000018H
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 01		 jne	 SHORT $LN2@Init
  0005b	cc		 int	 3
$LN2@Init:
  0005c	33 d2		 xor	 edx, edx
  0005e	75 cd		 jne	 SHORT $LN4@Init

; 5631 : 		ATLTRY(m_begin = _ATL_NEW T[end-begin])

  00060	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00065	8b 45 0c	 mov	 eax, DWORD PTR _end$[ebp]
  00068	2b 45 08	 sub	 eax, DWORD PTR _begin$[ebp]
  0006b	c1 f8 03	 sar	 eax, 3
  0006e	33 c9		 xor	 ecx, ecx
  00070	ba 08 00 00 00	 mov	 edx, 8
  00075	f7 e2		 mul	 edx
  00077	0f 90 c1	 seto	 cl
  0007a	f7 d9		 neg	 ecx
  0007c	0b c8		 or	 ecx, eax
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00084	83 c4 08	 add	 esp, 8
  00087	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00090	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 5632 : 		m_iter = m_begin;

  00093	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009c	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 5633 : 		if (m_begin == NULL)

  0009f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000a6	75 0a		 jne	 SHORT $LN12@Init

; 5634 : 			return E_OUTOFMEMORY;

  000a8	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000ad	e9 17 01 00 00	 jmp	 $LN1@Init
$LN12@Init:

; 5635 : 		for (T* i=begin; i != end; i++)

  000b2	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  000b5	89 45 f8	 mov	 DWORD PTR _i$5[ebp], eax
  000b8	eb 09		 jmp	 SHORT $LN7@Init
$LN5@Init:
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _i$5[ebp]
  000bd	83 c1 08	 add	 ecx, 8
  000c0	89 4d f8	 mov	 DWORD PTR _i$5[ebp], ecx
$LN7@Init:
  000c3	8b 55 f8	 mov	 edx, DWORD PTR _i$5[ebp]
  000c6	3b 55 0c	 cmp	 edx, DWORD PTR _end$[ebp]
  000c9	0f 84 a8 00 00
	00		 je	 $LN6@Init

; 5636 : 		{
; 5637 : 			Copy::init(m_iter);

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ?init@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ; ATL::_Copy<tagCONNECTDATA>::init
  000db	83 c4 04	 add	 esp, 4

; 5638 : 			HRESULT hr = Copy::copy(m_iter, i);

  000de	8b 55 f8	 mov	 edx, DWORD PTR _i$5[ebp]
  000e1	52		 push	 edx
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ; ATL::_Copy<tagCONNECTDATA>::copy
  000ee	83 c4 08	 add	 esp, 8
  000f1	89 45 f4	 mov	 DWORD PTR _hr$4[ebp], eax

; 5639 : 			if (FAILED(hr))

  000f4	83 7d f4 00	 cmp	 DWORD PTR _hr$4[ebp], 0
  000f8	7d 69		 jge	 SHORT $LN13@Init

; 5640 : 			{
; 5641 : 				T* p = m_begin;

  000fa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00100	89 45 f0	 mov	 DWORD PTR _p$3[ebp], eax
$LN8@Init:

; 5642 : 				while (p < m_iter)

  00103	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 55 f0	 mov	 edx, DWORD PTR _p$3[ebp]
  00109	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0010c	73 1d		 jae	 SHORT $LN9@Init

; 5643 : 					Copy::destroy(p++);

  0010e	8b 45 f0	 mov	 eax, DWORD PTR _p$3[ebp]
  00111	89 45 e4	 mov	 DWORD PTR tv140[ebp], eax
  00114	8b 4d f0	 mov	 ecx, DWORD PTR _p$3[ebp]
  00117	83 c1 08	 add	 ecx, 8
  0011a	89 4d f0	 mov	 DWORD PTR _p$3[ebp], ecx
  0011d	8b 55 e4	 mov	 edx, DWORD PTR tv140[ebp]
  00120	52		 push	 edx
  00121	e8 00 00 00 00	 call	 ?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ; ATL::_Copy<tagCONNECTDATA>::destroy
  00126	83 c4 04	 add	 esp, 4
  00129	eb d8		 jmp	 SHORT $LN8@Init
$LN9@Init:

; 5644 : 				delete [] m_begin;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00131	89 4d e8	 mov	 DWORD PTR $T1[ebp], ecx
  00134	8b 55 e8	 mov	 edx, DWORD PTR $T1[ebp]
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0013d	83 c4 04	 add	 esp, 4

; 5645 : 				m_begin = m_end = m_iter = NULL;

  00140	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00143	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00154	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00157	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 5646 : 				return hr;

  0015e	8b 45 f4	 mov	 eax, DWORD PTR _hr$4[ebp]
  00161	eb 66		 jmp	 SHORT $LN1@Init
$LN13@Init:

; 5647 : 			}
; 5648 : 			m_iter++;

  00163	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00166	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00169	83 c1 08	 add	 ecx, 8
  0016c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0016f	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 5649 : 		}

  00172	e9 43 ff ff ff	 jmp	 $LN5@Init
$LN6@Init:

; 5650 : 		m_end = m_begin + (end-begin);

  00177	8b 45 0c	 mov	 eax, DWORD PTR _end$[ebp]
  0017a	2b 45 08	 sub	 eax, DWORD PTR _begin$[ebp]
  0017d	c1 f8 03	 sar	 eax, 3
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00186	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00189	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 5651 : 	}

  0018f	eb 12		 jmp	 SHORT $LN11@Init
$LN10@Init:

; 5652 : 	else
; 5653 : 	{
; 5654 : 		m_begin = begin;

  00191	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00194	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  00197	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 5655 : 		m_end = end;

  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	8b 55 0c	 mov	 edx, DWORD PTR _end$[ebp]
  001a0	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
$LN11@Init:

; 5656 : 	}
; 5657 : 	m_spUnk = pUnk;

  001a3	8b 45 10	 mov	 eax, DWORD PTR _pUnk$[ebp]
  001a6	50		 push	 eax
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	83 c1 04	 add	 ecx, 4
  001ad	e8 00 00 00 00	 call	 ??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z ; ATL::CComPtr<IUnknown>::operator=

; 5658 : 	m_iter = m_begin;

  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001b8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001bb	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5659 : 	m_dwFlags = flags;

  001be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c1	8b 55 14	 mov	 edx, DWORD PTR _flags$[ebp]
  001c4	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 5660 : 	return S_OK;

  001c7	33 c0		 xor	 eax, eax
$LN1@Init:

; 5661 : }

  001c9	83 c4 1c	 add	 esp, 28			; 0000001cH
  001cc	3b ec		 cmp	 ebp, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 10 00	 ret	 16			; 00000010H
?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
_TEXT	SEGMENT
tv163 = -44						; size = 4
tv128 = -40						; size = 4
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_p$6 = -12						; size = 4
_hRes$ = -4						; size = 4
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone, COMDAT

; 5596 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 5597 : 	typedef CComObject<CComEnum<Base, piid, T, Copy> > _class;
; 5598 : 	HRESULT hRes = E_POINTER;

  0001e	c7 45 fc 03 40
	00 80		 mov	 DWORD PTR _hRes$[ebp], -2147467261 ; 80004003H

; 5599 : 	if (ppEnum != NULL)

  00025	83 7d 0c 00	 cmp	 DWORD PTR _ppEnum$[ebp], 0
  00029	0f 84 03 01 00
	00		 je	 $LN2@Clone

; 5600 : 	{
; 5601 : 		*ppEnum = NULL;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _ppEnum$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 5602 : 		_class* p;
; 5603 : 		hRes = _class::CreateInstance(&p);

  00038	8d 4d f4	 lea	 ecx, DWORD PTR _p$6[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CreateInstance
  00041	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax

; 5604 : 		if (SUCCEEDED(hRes))

  00044	83 7d fc 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  00048	0f 8c e4 00 00
	00		 jl	 $LN2@Clone

; 5605 : 		{
; 5606 : 			// If this object has ownership of the data then we need to keep it around
; 5607 : 			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitOwn) ? this : m_spUnk);

  0004e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00054	83 e0 02	 and	 eax, 2
  00057	74 15		 je	 SHORT $LN7@Clone
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	51		 push	 ecx
  0005d	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
  00065	83 4d dc 01	 or	 DWORD PTR $T1[ebp], 1
  00069	89 45 d8	 mov	 DWORD PTR tv128[ebp], eax
  0006c	eb 16		 jmp	 SHORT $LN8@Clone
$LN7@Clone:
  0006e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00071	83 c2 04	 add	 edx, 4
  00074	52		 push	 edx
  00075	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@ABV01@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
  0007d	83 4d dc 02	 or	 DWORD PTR $T1[ebp], 2
  00081	89 45 d8	 mov	 DWORD PTR tv128[ebp], eax
$LN8@Clone:
  00084	8b 45 d8	 mov	 eax, DWORD PTR tv128[ebp]
  00087	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  0008a	6a 00		 push	 0
  0008c	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp]
  0008f	e8 00 00 00 00	 call	 ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0009b	52		 push	 edx
  0009c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a2	51		 push	 ecx
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR _p$6[ebp]
  000a6	e8 00 00 00 00	 call	 ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init
  000ab	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax
  000ae	8b 55 dc	 mov	 edx, DWORD PTR $T1[ebp]
  000b1	83 e2 02	 and	 edx, 2
  000b4	74 0c		 je	 SHORT $LN11@Clone
  000b6	83 65 dc fd	 and	 DWORD PTR $T1[ebp], -3	; fffffffdH
  000ba	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  000bd	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
$LN11@Clone:
  000c2	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  000c5	83 e0 01	 and	 eax, 1
  000c8	74 0c		 je	 SHORT $LN12@Clone
  000ca	83 65 dc fe	 and	 DWORD PTR $T1[ebp], -2	; fffffffeH
  000ce	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  000d1	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
$LN12@Clone:

; 5608 : 			if (SUCCEEDED(hRes))

  000d6	83 7d fc 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  000da	7c 20		 jl	 SHORT $LN4@Clone

; 5609 : 			{
; 5610 : 				p->m_iter = m_iter;

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _p$6[ebp]
  000df	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e5	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5611 : 				hRes = p->_InternalQueryInterface(*piid, (void**)ppEnum);

  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppEnum$[ebp]
  000eb	51		 push	 ecx
  000ec	68 00 00 00 00	 push	 OFFSET __GUID_b196b287_bab4_101a_b69c_00aa00341d07
  000f1	8b 4d f4	 mov	 ecx, DWORD PTR _p$6[ebp]
  000f4	e8 00 00 00 00	 call	 ?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_InternalQueryInterface
  000f9	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax
$LN4@Clone:

; 5612 : 			}
; 5613 : 			if (FAILED(hRes))

  000fc	83 7d fc 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  00100	7d 30		 jge	 SHORT $LN2@Clone

; 5614 : 				delete p;

  00102	8b 55 f4	 mov	 edx, DWORD PTR _p$6[ebp]
  00105	89 55 e0	 mov	 DWORD PTR $T2[ebp], edx
  00108	83 7d e0 00	 cmp	 DWORD PTR $T2[ebp], 0
  0010c	74 1d		 je	 SHORT $LN9@Clone
  0010e	8b f4		 mov	 esi, esp
  00110	6a 01		 push	 1
  00112	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00115	8b 10		 mov	 edx, DWORD PTR [eax]
  00117	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp]
  0011a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0011d	ff d0		 call	 eax
  0011f	3b f4		 cmp	 esi, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	89 45 d4	 mov	 DWORD PTR tv163[ebp], eax
  00129	eb 07		 jmp	 SHORT $LN2@Clone
$LN9@Clone:
  0012b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
$LN2@Clone:

; 5615 : 		}
; 5616 : 	}
; 5617 : 
; 5618 : 	return hRes;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _hRes$[ebp]

; 5619 : }

  00135	52		 push	 edx
  00136	8b cd		 mov	 ecx, ebp
  00138	50		 push	 eax
  00139	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@Clone
  0013f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00144	58		 pop	 eax
  00145	5a		 pop	 edx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	83 c4 2c	 add	 esp, 44			; 0000002cH
  0014b	3b ec		 cmp	 ebp, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
$LN15@Clone:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN14@Clone
$LN14@Clone:
  00160	f4 ff ff ff	 DD	 -12			; fffffff4H
  00164	04 00 00 00	 DD	 4
  00168	00 00 00 00	 DD	 $LN13@Clone
$LN13@Clone:
  0016c	70		 DB	 112			; 00000070H
  0016d	00		 DB	 0
?Clone@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Clone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset, COMDAT

; 5512 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5513 : 		m_iter = m_begin;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000c	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 5514 : 		return S_OK;

  0000f	33 c0		 xor	 eax, eax

; 5515 : 	}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?Reset@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJXZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
tv69 = -12						; size = 4
_nSkip$ = -8						; size = 4
_nRem$ = -4						; size = 4
_this$ = 8						; size = 4
_celt$ = 12						; size = 4
?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip, COMDAT

; 5586 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 5587 : 	ULONG nRem = ULONG(m_end - m_iter);

  00017	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00020	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00023	c1 fa 03	 sar	 edx, 3
  00026	89 55 fc	 mov	 DWORD PTR _nRem$[ebp], edx

; 5588 : 	ULONG nSkip = (celt > nRem) ? nRem : celt;

  00029	8b 45 0c	 mov	 eax, DWORD PTR _celt$[ebp]
  0002c	3b 45 fc	 cmp	 eax, DWORD PTR _nRem$[ebp]
  0002f	76 08		 jbe	 SHORT $LN3@Skip
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _nRem$[ebp]
  00034	89 4d f4	 mov	 DWORD PTR tv69[ebp], ecx
  00037	eb 06		 jmp	 SHORT $LN4@Skip
$LN3@Skip:
  00039	8b 55 0c	 mov	 edx, DWORD PTR _celt$[ebp]
  0003c	89 55 f4	 mov	 DWORD PTR tv69[ebp], edx
$LN4@Skip:
  0003f	8b 45 f4	 mov	 eax, DWORD PTR tv69[ebp]
  00042	89 45 f8	 mov	 DWORD PTR _nSkip$[ebp], eax

; 5589 : 	m_iter += nSkip;

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004b	8b 45 f8	 mov	 eax, DWORD PTR _nSkip$[ebp]
  0004e	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  00051	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00054	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 5590 : 	return (celt == nSkip) ? S_OK : S_FALSE;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _celt$[ebp]
  0005a	3b 45 f8	 cmp	 eax, DWORD PTR _nSkip$[ebp]
  0005d	75 09		 jne	 SHORT $LN5@Skip
  0005f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
  00066	eb 07		 jmp	 SHORT $LN6@Skip
$LN5@Skip:
  00068	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
$LN6@Skip:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR tv75[ebp]

; 5591 : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?Skip@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJK@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Skip
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z
_TEXT	SEGMENT
tv92 = -32						; size = 4
tv83 = -28						; size = 4
tv80 = -24						; size = 4
_hr$1 = -20						; size = 4
_pelt$ = -16						; size = 4
_nMin$ = -12						; size = 4
_hRes$ = -8						; size = 4
_nRem$ = -4						; size = 4
_this$ = 8						; size = 4
_celt$ = 12						; size = 4
_rgelt$ = 16						; size = 4
_pceltFetched$ = 20					; size = 4
?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next, COMDAT

; 5552 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 5553 : 	if (pceltFetched != NULL)

  00023	83 7d 14 00	 cmp	 DWORD PTR _pceltFetched$[ebp], 0
  00027	74 09		 je	 SHORT $LN6@Next

; 5554 : 		*pceltFetched = 0;

  00029	8b 45 14	 mov	 eax, DWORD PTR _pceltFetched$[ebp]
  0002c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@Next:

; 5555 : 	if (rgelt == NULL || (celt > 1 && pceltFetched == NULL))

  00032	83 7d 10 00	 cmp	 DWORD PTR _rgelt$[ebp], 0
  00036	74 0c		 je	 SHORT $LN8@Next
  00038	83 7d 0c 01	 cmp	 DWORD PTR _celt$[ebp], 1
  0003c	76 10		 jbe	 SHORT $LN7@Next
  0003e	83 7d 14 00	 cmp	 DWORD PTR _pceltFetched$[ebp], 0
  00042	75 0a		 jne	 SHORT $LN7@Next
$LN8@Next:

; 5556 : 		return E_POINTER;

  00044	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00049	e9 07 01 00 00	 jmp	 $LN1@Next
$LN7@Next:

; 5557 : 	if (m_begin == NULL || m_end == NULL || m_iter == NULL)

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00055	74 12		 je	 SHORT $LN10@Next
  00057	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0005e	74 09		 je	 SHORT $LN10@Next
  00060	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00067	75 0a		 jne	 SHORT $LN9@Next
$LN10@Next:

; 5558 : 		return E_FAIL;

  00069	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0006e	e9 e2 00 00 00	 jmp	 $LN1@Next
$LN9@Next:

; 5559 : 	ULONG nRem = (ULONG)(m_end - m_iter);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0007c	2b 42 10	 sub	 eax, DWORD PTR [edx+16]
  0007f	c1 f8 03	 sar	 eax, 3
  00082	89 45 fc	 mov	 DWORD PTR _nRem$[ebp], eax

; 5560 : 	HRESULT hRes = S_OK;

  00085	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hRes$[ebp], 0

; 5561 : 	if (nRem < celt)

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _nRem$[ebp]
  0008f	3b 4d 0c	 cmp	 ecx, DWORD PTR _celt$[ebp]
  00092	73 07		 jae	 SHORT $LN11@Next

; 5562 : 		hRes = S_FALSE;

  00094	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _hRes$[ebp], 1
$LN11@Next:

; 5563 : 	ULONG nMin = celt < nRem ? celt : nRem ;

  0009b	8b 55 0c	 mov	 edx, DWORD PTR _celt$[ebp]
  0009e	3b 55 fc	 cmp	 edx, DWORD PTR _nRem$[ebp]
  000a1	73 08		 jae	 SHORT $LN16@Next
  000a3	8b 45 0c	 mov	 eax, DWORD PTR _celt$[ebp]
  000a6	89 45 e8	 mov	 DWORD PTR tv80[ebp], eax
  000a9	eb 06		 jmp	 SHORT $LN17@Next
$LN16@Next:
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _nRem$[ebp]
  000ae	89 4d e8	 mov	 DWORD PTR tv80[ebp], ecx
$LN17@Next:
  000b1	8b 55 e8	 mov	 edx, DWORD PTR tv80[ebp]
  000b4	89 55 f4	 mov	 DWORD PTR _nMin$[ebp], edx

; 5564 : 	if (pceltFetched != NULL)

  000b7	83 7d 14 00	 cmp	 DWORD PTR _pceltFetched$[ebp], 0
  000bb	74 08		 je	 SHORT $LN12@Next

; 5565 : 		*pceltFetched = nMin;

  000bd	8b 45 14	 mov	 eax, DWORD PTR _pceltFetched$[ebp]
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR _nMin$[ebp]
  000c3	89 08		 mov	 DWORD PTR [eax], ecx
$LN12@Next:

; 5566 : 	T* pelt = rgelt;

  000c5	8b 55 10	 mov	 edx, DWORD PTR _rgelt$[ebp]
  000c8	89 55 f0	 mov	 DWORD PTR _pelt$[ebp], edx
$LN2@Next:

; 5567 : 	while(nMin--)

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _nMin$[ebp]
  000ce	89 45 e4	 mov	 DWORD PTR tv83[ebp], eax
  000d1	8b 4d f4	 mov	 ecx, DWORD PTR _nMin$[ebp]
  000d4	83 e9 01	 sub	 ecx, 1
  000d7	89 4d f4	 mov	 DWORD PTR _nMin$[ebp], ecx
  000da	83 7d e4 00	 cmp	 DWORD PTR tv83[ebp], 0
  000de	74 72		 je	 SHORT $LN3@Next

; 5568 : 	{
; 5569 : 		HRESULT hr = Copy::copy(pelt, m_iter);

  000e0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000e3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e6	50		 push	 eax
  000e7	8b 4d f0	 mov	 ecx, DWORD PTR _pelt$[ebp]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 ?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ; ATL::_Copy<tagCONNECTDATA>::copy
  000f0	83 c4 08	 add	 esp, 8
  000f3	89 45 ec	 mov	 DWORD PTR _hr$1[ebp], eax

; 5570 : 		if (FAILED(hr))

  000f6	83 7d ec 00	 cmp	 DWORD PTR _hr$1[ebp], 0
  000fa	7d 39		 jge	 SHORT $LN13@Next
$LN4@Next:

; 5571 : 		{
; 5572 : 			while (rgelt < pelt)

  000fc	8b 55 10	 mov	 edx, DWORD PTR _rgelt$[ebp]
  000ff	3b 55 f0	 cmp	 edx, DWORD PTR _pelt$[ebp]
  00102	73 1d		 jae	 SHORT $LN5@Next

; 5573 : 				Copy::destroy(rgelt++);

  00104	8b 45 10	 mov	 eax, DWORD PTR _rgelt$[ebp]
  00107	89 45 e0	 mov	 DWORD PTR tv92[ebp], eax
  0010a	8b 4d 10	 mov	 ecx, DWORD PTR _rgelt$[ebp]
  0010d	83 c1 08	 add	 ecx, 8
  00110	89 4d 10	 mov	 DWORD PTR _rgelt$[ebp], ecx
  00113	8b 55 e0	 mov	 edx, DWORD PTR tv92[ebp]
  00116	52		 push	 edx
  00117	e8 00 00 00 00	 call	 ?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ; ATL::_Copy<tagCONNECTDATA>::destroy
  0011c	83 c4 04	 add	 esp, 4
  0011f	eb db		 jmp	 SHORT $LN4@Next
$LN5@Next:

; 5574 : 			if (pceltFetched != NULL)

  00121	83 7d 14 00	 cmp	 DWORD PTR _pceltFetched$[ebp], 0
  00125	74 09		 je	 SHORT $LN14@Next

; 5575 : 				*pceltFetched = 0;

  00127	8b 45 14	 mov	 eax, DWORD PTR _pceltFetched$[ebp]
  0012a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN14@Next:

; 5576 : 			return hr;

  00130	8b 45 ec	 mov	 eax, DWORD PTR _hr$1[ebp]
  00133	eb 20		 jmp	 SHORT $LN1@Next
$LN13@Next:

; 5577 : 		}
; 5578 : 		pelt++;

  00135	8b 4d f0	 mov	 ecx, DWORD PTR _pelt$[ebp]
  00138	83 c1 08	 add	 ecx, 8
  0013b	89 4d f0	 mov	 DWORD PTR _pelt$[ebp], ecx

; 5579 : 		m_iter++;

  0013e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00141	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00144	83 c0 08	 add	 eax, 8
  00147	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5580 : 	}

  0014d	e9 79 ff ff ff	 jmp	 $LN2@Next
$LN3@Next:

; 5581 : 	return hRes;

  00152	8b 45 f8	 mov	 eax, DWORD PTR _hRes$[ebp]
$LN1@Next:

; 5582 : }

  00155	83 c4 20	 add	 esp, 32			; 00000020H
  00158	3b ec		 cmp	 ebp, esp
  0015a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 10 00	 ret	 16			; 00000010H
?Next@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAGJKPAUtagCONNECTDATA@@PAK@Z ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_p$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >, COMDAT
; _this$ = ecx

; 5538 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5539 : 	if (m_dwFlags & BitOwn)

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00024	83 e1 02	 and	 ecx, 2
  00027	74 42		 je	 SHORT $LN1@CComEnumIm

; 5540 : 	{
; 5541 : 		for (T* p = m_begin; p != m_end; p++)

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	89 45 f8	 mov	 DWORD PTR _p$2[ebp], eax
  00032	eb 09		 jmp	 SHORT $LN4@CComEnumIm
$LN2@CComEnumIm:
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _p$2[ebp]
  00037	83 c1 08	 add	 ecx, 8
  0003a	89 4d f8	 mov	 DWORD PTR _p$2[ebp], ecx
$LN4@CComEnumIm:
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 45 f8	 mov	 eax, DWORD PTR _p$2[ebp]
  00043	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00046	74 0e		 je	 SHORT $LN3@CComEnumIm

; 5542 : 			Copy::destroy(p);

  00048	8b 4d f8	 mov	 ecx, DWORD PTR _p$2[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ; ATL::_Copy<tagCONNECTDATA>::destroy
  00051	83 c4 04	 add	 esp, 4
  00054	eb de		 jmp	 SHORT $LN2@CComEnumIm
$LN3@CComEnumIm:

; 5543 : 		delete [] m_begin;

  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005c	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4
$LN1@CComEnumIm:

; 5544 : 	}
; 5545 : }

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	83 c1 04	 add	 ecx, 4
  00071	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??1?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@UAE@XZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::~CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??0?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAE@XZ PROC ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >, COMDAT
; _this$ = ecx

; 5499 : 	CComEnumImpl()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5500 : 	{

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IEnumConnections@@QAE@XZ
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 04	 add	 ecx, 4
  0001c	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>

; 5501 : 		m_begin = m_end = m_iter = NULL;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 5502 : 		m_dwFlags = 0;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 5503 : 	}

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	83 c4 04	 add	 esp, 4
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??0?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ
text$di	SEGMENT
??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ PROC ; `dynamic initializer for 'ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap'', COMDAT

; 6573 : __declspec(selectany) const ATL::_ATL_CONNMAP_ENTRY* IConnectionPointContainerImpl<T>::pConnMap = T::GetConnMap(NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 ?GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z ; COPOSDeviceMonitor::GetConnMap
  0000a	83 c4 04	 add	 esp, 4
  0000d	a3 00 00 00 00	 mov	 DWORD PTR ?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B, eax ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__E?pConnMap@?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@0PBU_ATL_CONNMAP_ENTRY@2@B@@YAXXZ ENDP ; `dynamic initializer for 'ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::pConnMap''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1_CWNCC@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_CWNCC@@QAE@XZ PROC					; _CWNCC::~_CWNCC, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_CW@@QAE@XZ		; _CW::~_CW
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1_CWNCC@@QAE@XZ ENDP					; _CWNCC::~_CWNCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.h
;	COMDAT ??B_CWNCC@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B_CWNCC@@QAEPA_WXZ PROC				; _CWNCC::operator wchar_t *, COMDAT
; _this$ = ecx

; 260  :         { return (wchar_t*) operator const wchar_t*(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??B_CW@@QAEPB_WXZ	; _CW::operator wchar_t const *
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??B_CWNCC@@QAEPA_WXZ ENDP				; _CWNCC::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.h
;	COMDAT ??0_CWNCC@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pChar$ = 8						; size = 4
??0_CWNCC@@QAE@PBD@Z PROC				; _CWNCC::_CWNCC, COMDAT
; _this$ = ecx

; 240  :     _CWNCC(const char* pChar)               // Construct from char string.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :       : _CW(pChar)          {}

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0_CW@@QAE@PBD@Z	; _CW::_CW
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0_CWNCC@@QAE@PBD@Z ENDP				; _CWNCC::_CWNCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.h
;	COMDAT ??1_CW@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1_CW@@QAE@XZ PROC					; _CW::~_CW, COMDAT
; _this$ = ecx

; 227  :         {   if (m_nDupFlag == 'c')      delete [] m_pChar;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	0f be 48 10	 movsx	 ecx, BYTE PTR [eax+16]
  00025	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00028	75 16		 jne	 SHORT $LN2@CW
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003b	83 c4 04	 add	 esp, 4
  0003e	eb 21		 jmp	 SHORT $LN1@CW
$LN2@CW:

; 228  :             else if (m_nDupFlag == 'w') delete [] m_pWide;

  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	0f be 42 10	 movsx	 eax, BYTE PTR [edx+16]
  00047	83 f8 77	 cmp	 eax, 119		; 00000077H
  0004a	75 15		 jne	 SHORT $LN1@CW
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00052	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
  00055	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0005e	83 c4 04	 add	 esp, 4
$LN1@CW:

; 229  :         }

  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??1_CW@@QAE@XZ ENDP					; _CW::~_CW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.h
;	COMDAT ??B_CW@@QAEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B_CW@@QAEPB_WXZ PROC					; _CW::operator wchar_t const *, COMDAT
; _this$ = ecx

; 213  :         {   // If pointer not init, then duplicate.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 214  :             if (m_pWide == (wchar_t*)-1) DupWide();

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00015	75 08		 jne	 SHORT $LN2@operator
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?DupWide@_CW@@AAEXXZ	; _CW::DupWide
$LN2@operator:

; 215  :             return m_pWide;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 216  :         }

  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??B_CW@@QAEPB_WXZ ENDP					; _CW::operator wchar_t const *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.h
;	COMDAT ??0_CW@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pWide$ = 8						; size = 4
??0_CW@@QAE@PB_W@Z PROC					; _CW::_CW, COMDAT
; _this$ = ecx

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pWide$[ebp]
  0001d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 196  :       : m_pChar((char*)-1),       m_nDupFlag(0),

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 197  :         m_pWide((wchar_t*)pWide), m_nCharsWide(-1)      {}

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0_CW@@QAE@PB_W@Z ENDP					; _CW::_CW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\CWString.h
;	COMDAT ??0_CW@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pChar$ = 8						; size = 4
??0_CW@@QAE@PBD@Z PROC					; _CW::_CW, COMDAT
; _this$ = ecx

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pChar$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 182  :         : m_pChar((char*)pChar), m_nChars(-1),

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 183  :           m_pWide((wchar_t*)-1), m_nDupFlag(0)          {}

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0_CW@@QAE@PBD@Z ENDP					; _CW::_CW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 4
_hRC$ = -64						; size = 4
_Vars$ = -52						; size = 48
_this$ = 8						; size = 4
_DeviceID$ = 12						; size = 4
_pValue$ = 16						; size = 4
_pRC$ = 20						; size = 4
?GetDeviceValue@COPOSDeviceMonitor@@UAGJPA_WPAJ1@Z PROC	; COPOSDeviceMonitor::GetDeviceValue

; 1320 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000a	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1321 :     OposVariant Vars[2];

  00016	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  0001b	6a 02		 push	 2
  0001d	6a 18		 push	 24			; 00000018H
  0001f	8d 45 cc	 lea	 eax, DWORD PTR _Vars$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 1322 :     HRESULT hRC = S_OK;

  00028	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1323 :     Vars[1].SetBSTR( DeviceID, hRC );

  0002f	8d 4d c0	 lea	 ecx, DWORD PTR _hRC$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 0c	 mov	 edx, DWORD PTR _DeviceID$[ebp]
  00036	52		 push	 edx
  00037	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0003c	c1 e0 00	 shl	 eax, 0
  0003f	8d 4c 05 cc	 lea	 ecx, DWORD PTR _Vars$[ebp+eax]
  00043	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1324 :     Vars[0].SetLONG_Ptr( pValue, hRC );

  00048	8d 4d c0	 lea	 ecx, DWORD PTR _hRC$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 10	 mov	 edx, DWORD PTR _pValue$[ebp]
  0004f	52		 push	 edx
  00050	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00055	6b c8 00	 imul	 ecx, eax, 0
  00058	8d 4c 0d cc	 lea	 ecx, DWORD PTR _Vars$[ebp+ecx]
  0005c	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 1325 :     return DoInvoke( DEBUGPARAM("GetDeviceValue") hRC, Vars, 2, nDIGetDeviceValue, pRC );

  00061	6a 01		 push	 1
  00063	8b 55 14	 mov	 edx, DWORD PTR _pRC$[ebp]
  00066	52		 push	 edx
  00067	6a 15		 push	 21			; 00000015H
  00069	6a 02		 push	 2
  0006b	8d 45 cc	 lea	 eax, DWORD PTR _Vars$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d c0	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00072	51		 push	 ecx
  00073	68 00 00 00 00	 push	 OFFSET $SG194121
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00080	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00083	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00088	6a 02		 push	 2
  0008a	6a 18		 push	 24			; 00000018H
  0008c	8d 55 cc	 lea	 edx, DWORD PTR _Vars$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00095	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]

; 1326 : }

  00098	52		 push	 edx
  00099	8b cd		 mov	 ecx, ebp
  0009b	50		 push	 eax
  0009c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@GetDeviceV
  000a2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a7	58		 pop	 eax
  000a8	5a		 pop	 edx
  000a9	5f		 pop	 edi
  000aa	83 c4 48	 add	 esp, 72			; 00000048H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 10 00	 ret	 16			; 00000010H
  000ba	66 90		 npad	 2
$LN6@GetDeviceV:
  000bc	02 00 00 00	 DD	 2
  000c0	00 00 00 00	 DD	 $LN5@GetDeviceV
$LN5@GetDeviceV:
  000c4	cc ff ff ff	 DD	 -52			; ffffffccH
  000c8	30 00 00 00	 DD	 48			; 00000030H
  000cc	00 00 00 00	 DD	 $LN3@GetDeviceV
  000d0	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN4@GetDeviceV
$LN4@GetDeviceV:
  000dc	68		 DB	 104			; 00000068H
  000dd	52		 DB	 82			; 00000052H
  000de	43		 DB	 67			; 00000043H
  000df	00		 DB	 0
$LN3@GetDeviceV:
  000e0	56		 DB	 86			; 00000056H
  000e1	61		 DB	 97			; 00000061H
  000e2	72		 DB	 114			; 00000072H
  000e3	73		 DB	 115			; 00000073H
  000e4	00		 DB	 0
?GetDeviceValue@COPOSDeviceMonitor@@UAGJPA_WPAJ1@Z ENDP	; COPOSDeviceMonitor::GetDeviceValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
_hRC$ = -40						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_DeviceID$ = 12						; size = 4
_pRC$ = 16						; size = 4
?DeleteMonitoringDevice@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z PROC ; COPOSDeviceMonitor::DeleteMonitoringDevice

; 1307 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1308 :     OposVariant Var;

  00016	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00019	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1309 :     HRESULT hRC = S_OK;

  0001e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1310 :     Var.SetBSTR( DeviceID, hRC );

  00025	8d 45 d8	 lea	 eax, DWORD PTR _hRC$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _DeviceID$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00030	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1311 :     return DoInvoke( DEBUGPARAM("DeleteMonitoringDevice") hRC, &Var, 1, nDIDeleteMonitoringDevice, pRC );

  00035	6a 01		 push	 1
  00037	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0003a	52		 push	 edx
  0003b	6a 14		 push	 20			; 00000014H
  0003d	6a 01		 push	 1
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00042	50		 push	 eax
  00043	8b 4d d8	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00046	51		 push	 ecx
  00047	68 00 00 00 00	 push	 OFFSET $SG194108
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00054	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  00057	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0005f	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]

; 1312 : }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@DeleteMoni
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 30	 add	 esp, 48			; 00000030H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN6@DeleteMoni:
  00084	02 00 00 00	 DD	 2
  00088	00 00 00 00	 DD	 $LN5@DeleteMoni
$LN5@DeleteMoni:
  0008c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00090	18 00 00 00	 DD	 24			; 00000018H
  00094	00 00 00 00	 DD	 $LN3@DeleteMoni
  00098	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN4@DeleteMoni
$LN4@DeleteMoni:
  000a4	68		 DB	 104			; 00000068H
  000a5	52		 DB	 82			; 00000052H
  000a6	43		 DB	 67			; 00000043H
  000a7	00		 DB	 0
$LN3@DeleteMoni:
  000a8	56		 DB	 86			; 00000056H
  000a9	61		 DB	 97			; 00000061H
  000aa	72		 DB	 114			; 00000072H
  000ab	00		 DB	 0
?DeleteMonitoringDevice@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ENDP ; COPOSDeviceMonitor::DeleteMonitoringDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ClearMonitoringDevice@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::ClearMonitoringDevice

; 1298 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1299 :     return DoInvoke( DEBUGPARAM("ClearMonitoringDevice") S_OK, NULL, 0, nDIClearMonitoringDevice, pRC );

  00003	6a 01		 push	 1
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  00008	50		 push	 eax
  00009	6a 13		 push	 19			; 00000013H
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	68 00 00 00 00	 push	 OFFSET $SG194098
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1300 : }

  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?ClearMonitoringDevice@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::ClearMonitoringDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -148						; size = 4
_hRC$ = -140						; size = 4
_Vars$ = -128						; size = 120
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_DeviceID$ = 12						; size = 4
_MonitoringMode$ = 16					; size = 4
_Boundary$ = 20						; size = 4
_SubBoundary$ = 24					; size = 4
_IntervalTime$ = 28					; size = 4
_pRC$ = 32						; size = 4
?AddMonitoringDevice@COPOSDeviceMonitor@@UAGJPA_WJJJJPAJ@Z PROC ; COPOSDeviceMonitor::AddMonitoringDevice

; 1283 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	57		 push	 edi
  0000a	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00010	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1284 :     OposVariant Vars[5];

  00026	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  0002b	6a 05		 push	 5
  0002d	6a 18		 push	 24			; 00000018H
  0002f	8d 45 80	 lea	 eax, DWORD PTR _Vars$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 1285 :     HRESULT hRC = S_OK;

  00038	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hRC$[ebp], 0

; 1286 :     Vars[4].SetBSTR( DeviceID, hRC );

  00042	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _hRC$[ebp]
  00048	51		 push	 ecx
  00049	8b 55 0c	 mov	 edx, DWORD PTR _DeviceID$[ebp]
  0004c	52		 push	 edx
  0004d	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00052	c1 e0 02	 shl	 eax, 2
  00055	8d 4c 05 80	 lea	 ecx, DWORD PTR _Vars$[ebp+eax]
  00059	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1287 :     Vars[3].SetLONG( MonitoringMode );

  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _MonitoringMode$[ebp]
  00061	51		 push	 ecx
  00062	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00067	6b c2 03	 imul	 eax, edx, 3
  0006a	8d 4c 05 80	 lea	 ecx, DWORD PTR _Vars$[ebp+eax]
  0006e	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1288 :     Vars[2].SetLONG( Boundary );

  00073	8b 4d 14	 mov	 ecx, DWORD PTR _Boundary$[ebp]
  00076	51		 push	 ecx
  00077	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0007c	d1 e2		 shl	 edx, 1
  0007e	8d 4c 15 80	 lea	 ecx, DWORD PTR _Vars$[ebp+edx]
  00082	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1289 :     Vars[1].SetLONG( SubBoundary );

  00087	8b 45 18	 mov	 eax, DWORD PTR _SubBoundary$[ebp]
  0008a	50		 push	 eax
  0008b	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00090	c1 e1 00	 shl	 ecx, 0
  00093	8d 4c 0d 80	 lea	 ecx, DWORD PTR _Vars$[ebp+ecx]
  00097	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1290 :     Vars[0].SetLONG( IntervalTime );

  0009c	8b 55 1c	 mov	 edx, DWORD PTR _IntervalTime$[ebp]
  0009f	52		 push	 edx
  000a0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	8d 4c 0d 80	 lea	 ecx, DWORD PTR _Vars$[ebp+ecx]
  000ac	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1291 :     return DoInvoke( DEBUGPARAM("AddMonitoringDevice") hRC, Vars, 5, nDIAddMonitoringDevice, pRC );

  000b1	6a 01		 push	 1
  000b3	8b 55 20	 mov	 edx, DWORD PTR _pRC$[ebp]
  000b6	52		 push	 edx
  000b7	6a 12		 push	 18			; 00000012H
  000b9	6a 05		 push	 5
  000bb	8d 45 80	 lea	 eax, DWORD PTR _Vars$[ebp]
  000be	50		 push	 eax
  000bf	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _hRC$[ebp]
  000c5	51		 push	 ecx
  000c6	68 00 00 00 00	 push	 OFFSET $SG194092
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  000d3	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000d9	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  000de	6a 05		 push	 5
  000e0	6a 18		 push	 24			; 00000018H
  000e2	8d 55 80	 lea	 edx, DWORD PTR _Vars$[ebp]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  000eb	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 1292 : }

  000f1	52		 push	 edx
  000f2	8b cd		 mov	 ecx, ebp
  000f4	50		 push	 eax
  000f5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@AddMonitor
  000fb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00100	58		 pop	 eax
  00101	5a		 pop	 edx
  00102	5f		 pop	 edi
  00103	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00106	33 cd		 xor	 ecx, ebp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 1c 00	 ret	 28			; 0000001cH
$LN6@AddMonitor:
  00120	02 00 00 00	 DD	 2
  00124	00 00 00 00	 DD	 $LN5@AddMonitor
$LN5@AddMonitor:
  00128	80 ff ff ff	 DD	 -128			; ffffff80H
  0012c	78 00 00 00	 DD	 120			; 00000078H
  00130	00 00 00 00	 DD	 $LN3@AddMonitor
  00134	74 ff ff ff	 DD	 -140			; ffffff74H
  00138	04 00 00 00	 DD	 4
  0013c	00 00 00 00	 DD	 $LN4@AddMonitor
$LN4@AddMonitor:
  00140	68		 DB	 104			; 00000068H
  00141	52		 DB	 82			; 00000052H
  00142	43		 DB	 67			; 00000043H
  00143	00		 DB	 0
$LN3@AddMonitor:
  00144	56		 DB	 86			; 00000056H
  00145	61		 DB	 97			; 00000061H
  00146	72		 DB	 114			; 00000072H
  00147	73		 DB	 115			; 00000073H
  00148	00		 DB	 0
?AddMonitoringDevice@COPOSDeviceMonitor@@UAGJPA_WJJJJPAJ@Z ENDP ; COPOSDeviceMonitor::AddMonitoringDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pMonitoringDeviceList$ = 12				; size = 4
?get_MonitoringDeviceList@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC ; COPOSDeviceMonitor::get_MonitoringDeviceList

; 1639 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1640 :     return GetOposProp( DEBUGPARAM("MonitoringDeviceList") PIDXDmon_MonitoringDeviceList, pMonitoringDeviceList, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pMonitoringDeviceList$[ebp]
  00008	50		 push	 eax
  00009	68 cb d2 0f 00	 push	 1037003			; 000fd2cbH
  0000e	68 00 00 00 00	 push	 OFFSET $SG194313
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1641 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_MonitoringDeviceList@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP ; COPOSDeviceMonitor::get_MonitoringDeviceList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceList$ = 12					; size = 4
?get_DeviceList@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC	; COPOSDeviceMonitor::get_DeviceList

; 1632 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1633 :     return GetOposProp( DEBUGPARAM("DeviceList") PIDXDmon_DeviceList, pDeviceList, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDeviceList$[ebp]
  00008	50		 push	 eax
  00009	68 ca d2 0f 00	 push	 1037002			; 000fd2caH
  0000e	68 00 00 00 00	 push	 OFFSET $SG194308
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1634 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_DeviceList@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP	; COPOSDeviceMonitor::get_DeviceList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceData$ = 12					; size = 4
?get_DeviceData@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC	; COPOSDeviceMonitor::get_DeviceData

; 1625 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1626 :     return GetOposProp( DEBUGPARAM("DeviceData") PIDXDmon_DeviceData, pDeviceData, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDeviceData$[ebp]
  00008	50		 push	 eax
  00009	68 c9 d2 0f 00	 push	 1037001			; 000fd2c9H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194303
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1627 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_DeviceData@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP	; COPOSDeviceMonitor::get_DeviceData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ClearInputProperties@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::ClearInputProperties

; 1270 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1271 :     return DoInvoke( DEBUGPARAM("ClearInputProperties") S_OK, NULL, 0, nDIClearInputProperties, pRC );

  00003	6a 01		 push	 1
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  00008	50		 push	 eax
  00009	6a 11		 push	 17			; 00000011H
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	68 00 00 00 00	 push	 OFFSET $SG194076
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1272 : }

  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?ClearInputProperties@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::ClearInputProperties
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
_hRC$ = -40						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_FirmwareFileName$ = 12					; size = 4
_pRC$ = 16						; size = 4
?UpdateFirmware@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z PROC	; COPOSDeviceMonitor::UpdateFirmware

; 1259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1260 :     OposVariant Var;

  00016	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00019	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1261 :     HRESULT hRC = S_OK;

  0001e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1262 :     Var.SetBSTR( FirmwareFileName, hRC );

  00025	8d 45 d8	 lea	 eax, DWORD PTR _hRC$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _FirmwareFileName$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00030	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1263 :     return DoInvoke( DEBUGPARAM("UpdateFirmware") hRC, &Var, 1, nDIUpdateFirmware, pRC );

  00035	6a 01		 push	 1
  00037	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0003a	52		 push	 edx
  0003b	6a 10		 push	 16			; 00000010H
  0003d	6a 01		 push	 1
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00042	50		 push	 eax
  00043	8b 4d d8	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00046	51		 push	 ecx
  00047	68 00 00 00 00	 push	 OFFSET $SG194070
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00054	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  00057	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0005f	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]

; 1264 : }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@UpdateFirm
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 30	 add	 esp, 48			; 00000030H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN6@UpdateFirm:
  00084	02 00 00 00	 DD	 2
  00088	00 00 00 00	 DD	 $LN5@UpdateFirm
$LN5@UpdateFirm:
  0008c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00090	18 00 00 00	 DD	 24			; 00000018H
  00094	00 00 00 00	 DD	 $LN3@UpdateFirm
  00098	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN4@UpdateFirm
$LN4@UpdateFirm:
  000a4	68		 DB	 104			; 00000068H
  000a5	52		 DB	 82			; 00000052H
  000a6	43		 DB	 67			; 00000043H
  000a7	00		 DB	 0
$LN3@UpdateFirm:
  000a8	56		 DB	 86			; 00000056H
  000a9	61		 DB	 97			; 00000061H
  000aa	72		 DB	 114			; 00000072H
  000ab	00		 DB	 0
?UpdateFirmware@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ENDP	; COPOSDeviceMonitor::UpdateFirmware
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 4
_hRC$ = -64						; size = 4
_Vars$ = -52						; size = 48
_this$ = 8						; size = 4
_FirmwareFileName$ = 12					; size = 4
_pResult$ = 16						; size = 4
_pRC$ = 20						; size = 4
?CompareFirmwareVersion@COPOSDeviceMonitor@@UAGJPA_WPAJ1@Z PROC ; COPOSDeviceMonitor::CompareFirmwareVersion

; 1246 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000a	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1247 :     OposVariant Vars[2];

  00016	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  0001b	6a 02		 push	 2
  0001d	6a 18		 push	 24			; 00000018H
  0001f	8d 45 cc	 lea	 eax, DWORD PTR _Vars$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 1248 :     HRESULT hRC = S_OK;

  00028	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1249 :     Vars[1].SetBSTR( FirmwareFileName, hRC );

  0002f	8d 4d c0	 lea	 ecx, DWORD PTR _hRC$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 0c	 mov	 edx, DWORD PTR _FirmwareFileName$[ebp]
  00036	52		 push	 edx
  00037	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0003c	c1 e0 00	 shl	 eax, 0
  0003f	8d 4c 05 cc	 lea	 ecx, DWORD PTR _Vars$[ebp+eax]
  00043	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1250 :     Vars[0].SetLONG_Ptr( pResult, hRC );

  00048	8d 4d c0	 lea	 ecx, DWORD PTR _hRC$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 10	 mov	 edx, DWORD PTR _pResult$[ebp]
  0004f	52		 push	 edx
  00050	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00055	6b c8 00	 imul	 ecx, eax, 0
  00058	8d 4c 0d cc	 lea	 ecx, DWORD PTR _Vars$[ebp+ecx]
  0005c	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 1251 :     return DoInvoke( DEBUGPARAM("CompareFirmwareVersion") hRC, Vars, 2, nDICompareFirmwareVersion, pRC );

  00061	6a 01		 push	 1
  00063	8b 55 14	 mov	 edx, DWORD PTR _pRC$[ebp]
  00066	52		 push	 edx
  00067	6a 0f		 push	 15			; 0000000fH
  00069	6a 02		 push	 2
  0006b	8d 45 cc	 lea	 eax, DWORD PTR _Vars$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d c0	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00072	51		 push	 ecx
  00073	68 00 00 00 00	 push	 OFFSET $SG194060
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00080	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  00083	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00088	6a 02		 push	 2
  0008a	6a 18		 push	 24			; 00000018H
  0008c	8d 55 cc	 lea	 edx, DWORD PTR _Vars$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00095	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]

; 1252 : }

  00098	52		 push	 edx
  00099	8b cd		 mov	 ecx, ebp
  0009b	50		 push	 eax
  0009c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@CompareFir
  000a2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a7	58		 pop	 eax
  000a8	5a		 pop	 edx
  000a9	5f		 pop	 edi
  000aa	83 c4 48	 add	 esp, 72			; 00000048H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 10 00	 ret	 16			; 00000010H
  000ba	66 90		 npad	 2
$LN6@CompareFir:
  000bc	02 00 00 00	 DD	 2
  000c0	00 00 00 00	 DD	 $LN5@CompareFir
$LN5@CompareFir:
  000c4	cc ff ff ff	 DD	 -52			; ffffffccH
  000c8	30 00 00 00	 DD	 48			; 00000030H
  000cc	00 00 00 00	 DD	 $LN3@CompareFir
  000d0	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN4@CompareFir
$LN4@CompareFir:
  000dc	68		 DB	 104			; 00000068H
  000dd	52		 DB	 82			; 00000052H
  000de	43		 DB	 67			; 00000043H
  000df	00		 DB	 0
$LN3@CompareFir:
  000e0	56		 DB	 86			; 00000056H
  000e1	61		 DB	 97			; 00000061H
  000e2	72		 DB	 114			; 00000072H
  000e3	73		 DB	 115			; 00000073H
  000e4	00		 DB	 0
?CompareFirmwareVersion@COPOSDeviceMonitor@@UAGJPA_WPAJ1@Z ENDP ; COPOSDeviceMonitor::CompareFirmwareVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
_hRC$ = -40						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_StatisticsBuffer$ = 12					; size = 4
_pRC$ = 16						; size = 4
?UpdateStatistics@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z PROC ; COPOSDeviceMonitor::UpdateStatistics

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1234 :     OposVariant Var;

  00016	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00019	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1235 :     HRESULT hRC = S_OK;

  0001e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1236 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00025	8d 45 d8	 lea	 eax, DWORD PTR _hRC$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _StatisticsBuffer$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00030	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1237 :     return DoInvoke( DEBUGPARAM("UpdateStatistics") hRC, &Var, 1, nDIUpdateStatistics, pRC );

  00035	6a 01		 push	 1
  00037	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0003a	52		 push	 edx
  0003b	6a 0e		 push	 14			; 0000000eH
  0003d	6a 01		 push	 1
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00042	50		 push	 eax
  00043	8b 4d d8	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00046	51		 push	 ecx
  00047	68 00 00 00 00	 push	 OFFSET $SG194047
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00054	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  00057	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0005f	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]

; 1238 : }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@UpdateStat
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 30	 add	 esp, 48			; 00000030H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN6@UpdateStat:
  00084	02 00 00 00	 DD	 2
  00088	00 00 00 00	 DD	 $LN5@UpdateStat
$LN5@UpdateStat:
  0008c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00090	18 00 00 00	 DD	 24			; 00000018H
  00094	00 00 00 00	 DD	 $LN3@UpdateStat
  00098	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN4@UpdateStat
$LN4@UpdateStat:
  000a4	68		 DB	 104			; 00000068H
  000a5	52		 DB	 82			; 00000052H
  000a6	43		 DB	 67			; 00000043H
  000a7	00		 DB	 0
$LN3@UpdateStat:
  000a8	56		 DB	 86			; 00000056H
  000a9	61		 DB	 97			; 00000061H
  000aa	72		 DB	 114			; 00000072H
  000ab	00		 DB	 0
?UpdateStatistics@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ENDP ; COPOSDeviceMonitor::UpdateStatistics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
_hRC$ = -40						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_pStatisticsBuffer$ = 12				; size = 4
_pRC$ = 16						; size = 4
?RetrieveStatistics@COPOSDeviceMonitor@@UAGJPAPA_WPAJ@Z PROC ; COPOSDeviceMonitor::RetrieveStatistics

; 1221 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1222 :     OposVariant Var;

  00016	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00019	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1223 :     HRESULT hRC = S_OK;

  0001e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1224 :     Var.SetBSTR_InOutPtr( pStatisticsBuffer, hRC );

  00025	8d 45 d8	 lea	 eax, DWORD PTR _hRC$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _pStatisticsBuffer$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00030	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 1225 :     return DoInvoke( DEBUGPARAM("RetrieveStatistics") hRC, &Var, 1, nDIRetrieveStatistics, pRC );

  00035	6a 01		 push	 1
  00037	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0003a	52		 push	 edx
  0003b	6a 0d		 push	 13			; 0000000dH
  0003d	6a 01		 push	 1
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00042	50		 push	 eax
  00043	8b 4d d8	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00046	51		 push	 ecx
  00047	68 00 00 00 00	 push	 OFFSET $SG194037
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00054	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  00057	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0005f	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]

; 1226 : }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@RetrieveSt
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 30	 add	 esp, 48			; 00000030H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN6@RetrieveSt:
  00084	02 00 00 00	 DD	 2
  00088	00 00 00 00	 DD	 $LN5@RetrieveSt
$LN5@RetrieveSt:
  0008c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00090	18 00 00 00	 DD	 24			; 00000018H
  00094	00 00 00 00	 DD	 $LN3@RetrieveSt
  00098	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN4@RetrieveSt
$LN4@RetrieveSt:
  000a4	68		 DB	 104			; 00000068H
  000a5	52		 DB	 82			; 00000052H
  000a6	43		 DB	 67			; 00000043H
  000a7	00		 DB	 0
$LN3@RetrieveSt:
  000a8	56		 DB	 86			; 00000056H
  000a9	61		 DB	 97			; 00000061H
  000aa	72		 DB	 114			; 00000072H
  000ab	00		 DB	 0
?RetrieveStatistics@COPOSDeviceMonitor@@UAGJPAPA_WPAJ@Z ENDP ; COPOSDeviceMonitor::RetrieveStatistics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
_hRC$ = -40						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_StatisticsBuffer$ = 12					; size = 4
_pRC$ = 16						; size = 4
?ResetStatistics@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z PROC	; COPOSDeviceMonitor::ResetStatistics

; 1209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1210 :     OposVariant Var;

  00016	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00019	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1211 :     HRESULT hRC = S_OK;

  0001e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1212 :     Var.SetBSTR( StatisticsBuffer, hRC );

  00025	8d 45 d8	 lea	 eax, DWORD PTR _hRC$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _StatisticsBuffer$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00030	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 1213 :     return DoInvoke( DEBUGPARAM("ResetStatistics") hRC, &Var, 1, nDIResetStatistics, pRC );

  00035	6a 01		 push	 1
  00037	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0003a	52		 push	 edx
  0003b	6a 0c		 push	 12			; 0000000cH
  0003d	6a 01		 push	 1
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00042	50		 push	 eax
  00043	8b 4d d8	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00046	51		 push	 ecx
  00047	68 00 00 00 00	 push	 OFFSET $SG194027
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00054	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  00057	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0005f	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]

; 1214 : }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ResetStati
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 30	 add	 esp, 48			; 00000030H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN6@ResetStati:
  00084	02 00 00 00	 DD	 2
  00088	00 00 00 00	 DD	 $LN5@ResetStati
$LN5@ResetStati:
  0008c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00090	18 00 00 00	 DD	 24			; 00000018H
  00094	00 00 00 00	 DD	 $LN3@ResetStati
  00098	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN4@ResetStati
$LN4@ResetStati:
  000a4	68		 DB	 104			; 00000068H
  000a5	52		 DB	 82			; 00000052H
  000a6	43		 DB	 67			; 00000043H
  000a7	00		 DB	 0
$LN3@ResetStati:
  000a8	56		 DB	 86			; 00000056H
  000a9	61		 DB	 97			; 00000061H
  000aa	72		 DB	 114			; 00000072H
  000ab	00		 DB	 0
?ResetStatistics@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ENDP	; COPOSDeviceMonitor::ResetStatistics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ReleaseDevice@COPOSDeviceMonitor@@UAGJPAJ@Z PROC	; COPOSDeviceMonitor::ReleaseDevice

; 1134 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1135 :     SetRC();

  00003	6a ff		 push	 -1
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00008	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 1136 : 
; 1137 :     // If not opened, set return code.
; 1138 :     if ( ! _bOpened )

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  00017	85 c9		 test	 ecx, ecx
  00019	75 1e		 jne	 SHORT $LN2@ReleaseDev

; 1139 :     {
; 1140 :         *pRC = OPOS_E_CLOSED;

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _pRC$[ebp]
  0001e	c7 02 65 00 00
	00		 mov	 DWORD PTR [edx], 101	; 00000065H

; 1141 :         DOTRACEV( ( _T("*ReleaseDevice [Function] -- Closed") ) );

  00024	68 00 00 00 00	 push	 OFFSET $SG193981
  00029	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00032	83 c4 08	 add	 esp, 8

; 1142 :         return S_OK;

  00035	33 c0		 xor	 eax, eax
  00037	eb 23		 jmp	 SHORT $LN1@ReleaseDev
$LN2@ReleaseDev:

; 1143 :     }
; 1144 : 
; 1145 :     // Events are no longer legal.
; 1146 :     EventPreCloseRelease();

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?EventPreCloseRelease@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventPreCloseRelease

; 1147 : 
; 1148 :     // Call down into the Service Object to execute this method.
; 1149 :     return DoInvoke( DEBUGPARAM("ReleaseDevice") S_OK, NULL, 0, nDIReleaseDevice, pRC, false );

  00041	6a 00		 push	 0
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00046	51		 push	 ecx
  00047	6a 0b		 push	 11			; 0000000bH
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	68 00 00 00 00	 push	 OFFSET $SG193982
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
$LN1@ReleaseDev:

; 1150 : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?ReleaseDevice@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP	; COPOSDeviceMonitor::ReleaseDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv166 = -2092						; size = 4
$T1 = -2088						; size = 4
$T2 = -2084						; size = 4
$T3 = -2080						; size = 4
$T4 = -2076						; size = 4
$T5 = -2072						; size = 4
$T6 = -2068						; size = 20
$T7 = -2048						; size = 20
$T8 = -2028						; size = 20
$T9 = -2008						; size = 4
$T10 = -2004						; size = 4
$T11 = -2000						; size = 20
$T12 = -1977						; size = 1
_nReqMethodIndex$13 = -1976				; size = 4
_nSOVersion$ = -1968					; size = 4
_bBadSO$ = -1957					; size = 1
_bstrSOInfo$ = -1952					; size = 4
_hRCTmp$14 = -1940					; size = 4
_Disp$15 = -1928					; size = 16
_VarResult$16 = -1904					; size = 24
_DispID$17 = -1872					; size = 4
_pMN$18 = -1860						; size = 4
_Vars$ = -1848						; size = 72
_pDispatch$ = -1768					; size = 4
_pMN$19 = -1756						; size = 4
_MN$20 = -1744						; size = 20
_nAllMethods$ = -1720					; size = 4
_pMN$21 = -1712						; size = 4
_MN$22 = -1700						; size = 20
_nMethodCount$ = -1676					; size = 4
_pUnknown$ = -1668					; size = 4
_SOClassID$ = -1656					; size = 16
_sSOProgID$ = -1632					; size = 512
_nRegStat$ = -1116					; size = 4
_hServiceKey$ = -1108					; size = 4
_dwSize$ = -1096					; size = 4
_dwType$ = -1084					; size = 4
_szPhysicalDeviceName$ = -1072				; size = 512
_hBaseKey$ = -552					; size = 4
_szBaseKey$ = -540					; size = 512
_nDeviceNameLen$ = -24					; size = 4
_nError$ = -20						; size = 4
_hRC$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_DeviceName$ = 12					; size = 4
_pRC$ = 16						; size = 4
?Open@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z PROC		; COPOSDeviceMonitor::Open

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 08 00
	00		 sub	 esp, 2092		; 0000082cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd d4 f7 ff
	ff		 lea	 edi, DWORD PTR [ebp-2092]
  00011	b9 0b 02 00 00	 mov	 ecx, 523		; 0000020bH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	c7 85 d8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 687  :     HRESULT hRC;
; 688  :     LONG nError;
; 689  : 
; 690  :     DOTRACE( ( _T("*Open [Function]: DeviceName <%ls>"), DeviceName ) );

  00031	8b 45 0c	 mov	 eax, DWORD PTR _DeviceName$[ebp]
  00034	50		 push	 eax
  00035	68 00 00 00 00	 push	 OFFSET $SG193850
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 691  : 
; 692  :     // If already open, return error.
; 693  :     if ( _bOpened )

  00046	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00049	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  00050	85 c0		 test	 eax, eax
  00052	74 44		 je	 SHORT $LN6@Open

; 694  :     {
; 695  :         *pRC = SetRC( OPOS_E_ILLEGAL );

  00054	6a 6a		 push	 106			; 0000006aH
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 696  :         _nOpenResult = OPOS_OR_ALREADYOPEN;

  00063	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00066	c7 82 e8 00 00
	00 2d 01 00 00	 mov	 DWORD PTR [edx+232], 301 ; 0000012dH

; 697  :         DOTRACE( ( _T("-  Failed: CCO already open (%d/%d)"), *pRC, _nOpenResult ) );

  00070	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00079	51		 push	 ecx
  0007a	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0007d	8b 02		 mov	 eax, DWORD PTR [edx]
  0007f	50		 push	 eax
  00080	68 00 00 00 00	 push	 OFFSET $SG193852
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 698  :         return S_OK;

  00091	33 c0		 xor	 eax, eax
  00093	e9 46 0f 00 00	 jmp	 $LN50@Open
$LN6@Open:

; 699  :     }
; 700  : 
; 701  :     // Initialize ResultCode and OpenResult for possible returns below.
; 702  :     *pRC = SetRC( OPOS_E_NOEXIST );

  00098	6a 6d		 push	 109			; 0000006dH
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
  000a2	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  000a5	89 02		 mov	 DWORD PTR [edx], eax

; 703  :     _nOpenResult = OPOS_OR_REGBADNAME;

  000a7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 80 e8 00 00
	00 2e 01 00 00	 mov	 DWORD PTR [eax+232], 302 ; 0000012eH

; 704  : 
; 705  :     // Check the DeviceName length...
; 706  :     UINT nDeviceNameLen = ::SysStringLen( DeviceName );

  000b4	8b f4		 mov	 esi, esp
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _DeviceName$[ebp]
  000b9	51		 push	 ecx
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringLen@4
  000c0	3b f4		 cmp	 esi, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	89 45 e8	 mov	 DWORD PTR _nDeviceNameLen$[ebp], eax

; 707  : 
; 708  :     //  - Ensure that the DeviceName is not an empty string.
; 709  :     if ( nDeviceNameLen == 0 )

  000ca	83 7d e8 00	 cmp	 DWORD PTR _nDeviceNameLen$[ebp], 0
  000ce	75 28		 jne	 SHORT $LN7@Open

; 710  :     {
; 711  :         DOTRACE( ( _T("-  Failed: Empty device name (%d/%d)"), *pRC, _nOpenResult ) );

  000d0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  000d9	50		 push	 eax
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  000dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000df	52		 push	 edx
  000e0	68 00 00 00 00	 push	 OFFSET $SG193854
  000e5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 712  :         return S_OK;

  000f1	33 c0		 xor	 eax, eax
  000f3	e9 e6 0e 00 00	 jmp	 $LN50@Open
$LN7@Open:

; 713  :     }
; 714  : 
; 715  :     //  - Ensure that the DeviceName is not unreasonably long.
; 716  :     //     Otherwise it may overrun this line below: wcscpy( szPhysicalDeviceName, DeviceName )
; 717  :     if ( nDeviceNameLen >= MAX_REGBUFFER_SIZE )

  000f8	81 7d e8 00 01
	00 00		 cmp	 DWORD PTR _nDeviceNameLen$[ebp], 256 ; 00000100H
  000ff	72 28		 jb	 SHORT $LN8@Open

; 718  :     {
; 719  :         DOTRACE( ( _T("-  Failed: Device name too big (%d/%d)"), *pRC, _nOpenResult ) );

  00101	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  0010a	52		 push	 edx
  0010b	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	68 00 00 00 00	 push	 OFFSET $SG193856
  00116	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0011f	83 c4 10	 add	 esp, 16			; 00000010H

; 720  :         return S_OK;

  00122	33 c0		 xor	 eax, eax
  00124	e9 b5 0e 00 00	 jmp	 $LN50@Open
$LN8@Open:

; 721  :     }
; 722  : 
; 723  :     // Form and open the base key.
; 724  :     TCHAR szBaseKey[ MAX_REGBUFFER_SIZE ];
; 725  :     HKEY hBaseKey;
; 726  :     cw_strcpy( szBaseKey, OPOS_ROOTKEY "\\" OPOS_CLASSKEY_DMON );

  00129	68 00 00 00 00	 push	 OFFSET $SG193857
  0012e	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _szBaseKey$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?cw_strcpy@@YAHPA_WPBD@Z ; cw_strcpy
  0013a	83 c4 08	 add	 esp, 8

; 727  :     nError = RegOpenKeyEx(

  0013d	8b f4		 mov	 esi, esp
  0013f	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _hBaseKey$[ebp]
  00145	51		 push	 ecx
  00146	68 19 00 02 00	 push	 131097			; 00020019H
  0014b	6a 00		 push	 0
  0014d	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _szBaseKey$[ebp]
  00153	52		 push	 edx
  00154	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExW@20
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00166	89 45 ec	 mov	 DWORD PTR _nError$[ebp], eax

; 728  :             HKEY_LOCAL_MACHINE,         // Handle to open key
; 729  :             szBaseKey,                  // Address of name of subkey to open
; 730  :             0,                          // Reserved
; 731  :             KEY_READ,                   // Security access mask
; 732  :             &hBaseKey );                // Address of handle to open key
; 733  :     if ( ERROR_SUCCESS != nError )

  00169	83 7d ec 00	 cmp	 DWORD PTR _nError$[ebp], 0
  0016d	74 40		 je	 SHORT $LN9@Open

; 734  :     {
; 735  :         DOTRACE( ( _T("-  Failed: Cannot open registry key <%s> (%d/%d)"), szBaseKey, *pRC, _nOpenResult ) );

  0016f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00172	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00178	51		 push	 ecx
  00179	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0017c	8b 02		 mov	 eax, DWORD PTR [edx]
  0017e	50		 push	 eax
  0017f	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _szBaseKey$[ebp]
  00185	51		 push	 ecx
  00186	68 00 00 00 00	 push	 OFFSET $SG193859
  0018b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00194	83 c4 14	 add	 esp, 20			; 00000014H

; 736  :         DOTRACEERR( _T("    RegOpenKeyEx error %d\n    %s"), nError );

  00197	8b 45 ec	 mov	 eax, DWORD PTR _nError$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET $SG193860
  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 737  :         return S_OK;

  001a8	33 c0		 xor	 eax, eax
  001aa	e9 2f 0e 00 00	 jmp	 $LN50@Open
$LN9@Open:

; 738  :     }
; 739  :     DOTRACE( ( _T("    Opened registry key HKLM\\%s"), szBaseKey ) );

  001af	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _szBaseKey$[ebp]
  001b5	51		 push	 ecx
  001b6	68 00 00 00 00	 push	 OFFSET $SG193861
  001bb	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 740  : 
; 741  :     // If the DeviceName parameter is a string value in the base key,
; 742  :     //   then a logical name was specified:
; 743  :     //   Use the value's data as the physical device name.
; 744  :     // Else the name is the physical device name.
; 745  :     TCHAR szPhysicalDeviceName[ MAX_REGBUFFER_SIZE ];
; 746  :     DWORD dwType;
; 747  :     DWORD dwSize = sizeof( szPhysicalDeviceName );

  001c7	c7 85 b8 fb ff
	ff 00 02 00 00	 mov	 DWORD PTR _dwSize$[ebp], 512 ; 00000200H

; 748  :     if ( ERROR_SUCCESS !=
; 749  :          RegQueryValueEx(
; 750  :             hBaseKey,                   // Handle to key to query
; 751  :             _CW(DeviceName),            // Address of name of value to query
; 752  :             0,                          // Reserved
; 753  :             &dwType,                    // Address of buffer for value type
; 754  :             (LPBYTE) szPhysicalDeviceName, // Address of data buffer
; 755  :             &dwSize ) ||                // Address of data buffer size

  001d1	8b f4		 mov	 esi, esp
  001d3	8d 85 b8 fb ff
	ff		 lea	 eax, DWORD PTR _dwSize$[ebp]
  001d9	50		 push	 eax
  001da	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPhysicalDeviceName$[ebp]
  001e0	51		 push	 ecx
  001e1	8d 95 c4 fb ff
	ff		 lea	 edx, DWORD PTR _dwType$[ebp]
  001e7	52		 push	 edx
  001e8	6a 00		 push	 0
  001ea	8b 45 0c	 mov	 eax, DWORD PTR _DeviceName$[ebp]
  001ed	50		 push	 eax
  001ee	8d 8d 30 f8 ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  001f4	e8 00 00 00 00	 call	 ??0_CW@@QAE@PB_W@Z	; _CW::_CW
  001f9	83 8d d8 f7 ff
	ff 01		 or	 DWORD PTR $T1[ebp], 1
  00200	8b c8		 mov	 ecx, eax
  00202	e8 00 00 00 00	 call	 ??B_CW@@QAEPB_WXZ	; _CW::operator wchar_t const *
  00207	50		 push	 eax
  00208	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _hBaseKey$[ebp]
  0020e	51		 push	 ecx
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24
  00215	3b f4		 cmp	 esi, esp
  00217	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021c	85 c0		 test	 eax, eax
  0021e	75 15		 jne	 SHORT $LN51@Open
  00220	83 bd c4 fb ff
	ff 01		 cmp	 DWORD PTR _dwType$[ebp], 1
  00227	75 0c		 jne	 SHORT $LN51@Open
  00229	c7 85 d4 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
  00233	eb 0a		 jmp	 SHORT $LN52@Open
$LN51@Open:
  00235	c7 85 d4 f7 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv166[ebp], 1
$LN52@Open:
  0023f	8a 95 d4 f7 ff
	ff		 mov	 dl, BYTE PTR tv166[ebp]
  00245	88 95 47 f8 ff
	ff		 mov	 BYTE PTR $T12[ebp], dl
  0024b	8b 85 d8 f7 ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00251	83 e0 01	 and	 eax, 1
  00254	74 12		 je	 SHORT $LN58@Open
  00256	83 a5 d8 f7 ff
	ff fe		 and	 DWORD PTR $T1[ebp], -2	; fffffffeH
  0025d	8d 8d 30 f8 ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00263	e8 00 00 00 00	 call	 ??1_CW@@QAE@XZ		; _CW::~_CW
$LN58@Open:
  00268	0f b6 8d 47 f8
	ff ff		 movzx	 ecx, BYTE PTR $T12[ebp]
  0026f	85 c9		 test	 ecx, ecx
  00271	74 26		 je	 SHORT $LN10@Open

; 756  :          dwType != REG_SZ
; 757  :        )
; 758  :     {
; 759  :         wcscpy( szPhysicalDeviceName, DeviceName );

  00273	8b 55 0c	 mov	 edx, DWORD PTR _DeviceName$[ebp]
  00276	52		 push	 edx
  00277	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _szPhysicalDeviceName$[ebp]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _wcscpy
  00283	83 c4 08	 add	 esp, 8

; 760  :         DOTRACE( ( _T("    DeviceName is not a LogicalName; treating as PhysicalName") ) );

  00286	68 00 00 00 00	 push	 OFFSET $SG193865
  0028b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00294	83 c4 08	 add	 esp, 8

; 761  :     }

  00297	eb 4c		 jmp	 SHORT $LN11@Open
$LN10@Open:

; 762  :     else
; 763  :     {
; 764  :         NULTERMINATE(szPhysicalDeviceName);

  00299	ba 02 00 00 00	 mov	 edx, 2
  0029e	69 c2 ff 00 00
	00		 imul	 eax, edx, 255
  002a4	89 85 2c f8 ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  002aa	81 bd 2c f8 ff
	ff 00 02 00 00	 cmp	 DWORD PTR $T10[ebp], 512 ; 00000200H
  002b4	73 02		 jae	 SHORT $LN53@Open
  002b6	eb 05		 jmp	 SHORT $LN54@Open
$LN53@Open:
  002b8	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN54@Open:
  002bd	33 c9		 xor	 ecx, ecx
  002bf	8b 95 2c f8 ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
  002c5	66 89 8c 15 d0
	fb ff ff	 mov	 WORD PTR _szPhysicalDeviceName$[ebp+edx], cx

; 765  :         DOTRACE( ( _T("    DeviceName is a LogicalName; converted to PhysicalName <%s>"), szPhysicalDeviceName ) );

  002cd	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _szPhysicalDeviceName$[ebp]
  002d3	50		 push	 eax
  002d4	68 00 00 00 00	 push	 OFFSET $SG193866
  002d9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	51		 push	 ecx
  002dd	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  002e2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@Open:

; 766  :     }
; 767  : 
; 768  :     // Open the physical registry entry. Close the base key.
; 769  :     //   If fails, then return error.
; 770  :     HKEY hServiceKey;
; 771  :     LONG nRegStat = RegOpenKeyEx(

  002e5	8b f4		 mov	 esi, esp
  002e7	8d 95 ac fb ff
	ff		 lea	 edx, DWORD PTR _hServiceKey$[ebp]
  002ed	52		 push	 edx
  002ee	68 19 00 02 00	 push	 131097			; 00020019H
  002f3	6a 00		 push	 0
  002f5	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _szPhysicalDeviceName$[ebp]
  002fb	50		 push	 eax
  002fc	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _hBaseKey$[ebp]
  00302	51		 push	 ecx
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExW@20
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00310	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _nRegStat$[ebp], eax

; 772  :             hBaseKey,                   // handle to open key
; 773  :             szPhysicalDeviceName,       // address of name of subkey to open
; 774  :             0,                          // reserved
; 775  :             KEY_READ,                   // security access mask
; 776  :             &hServiceKey );             // address of handle to open key
; 777  :     RegCloseKey( hBaseKey );

  00316	8b f4		 mov	 esi, esp
  00318	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _hBaseKey$[ebp]
  0031e	52		 push	 edx
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  00325	3b f4		 cmp	 esi, esp
  00327	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 778  :     if ( ERROR_SUCCESS != nRegStat )

  0032c	83 bd a4 fb ff
	ff 00		 cmp	 DWORD PTR _nRegStat$[ebp], 0
  00333	74 3c		 je	 SHORT $LN12@Open

; 779  :     {
; 780  :         DOTRACE( ( _T("-  Failed: Cannot open DeviceName subkey (%d/%d)"), *pRC, _nOpenResult ) );

  00335	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00338	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  0033e	51		 push	 ecx
  0033f	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  00342	8b 02		 mov	 eax, DWORD PTR [edx]
  00344	50		 push	 eax
  00345	68 00 00 00 00	 push	 OFFSET $SG193868
  0034a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0034d	51		 push	 ecx
  0034e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00353	83 c4 10	 add	 esp, 16			; 00000010H

; 781  :         DOTRACEERR( _T("    RegOpenKeyEx error %d\n    %s"), nRegStat );

  00356	8b 95 a4 fb ff
	ff		 mov	 edx, DWORD PTR _nRegStat$[ebp]
  0035c	52		 push	 edx
  0035d	68 00 00 00 00	 push	 OFFSET $SG193869
  00362	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00365	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 782  :         return S_OK;

  0036a	33 c0		 xor	 eax, eax
  0036c	e9 6d 0c 00 00	 jmp	 $LN50@Open
$LN12@Open:

; 783  :     }
; 784  :     DOTRACE( ( _T("    Opened DeviceName subkey") ) );

  00371	68 00 00 00 00	 push	 OFFSET $SG193870
  00376	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00379	50		 push	 eax
  0037a	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0037f	83 c4 08	 add	 esp, 8

; 785  : 
; 786  :     // Initialize ResultCode and OpenResult for possible returns below.
; 787  :     *pRC = SetRC( OPOS_E_NOSERVICE );

  00382	6a 68		 push	 104			; 00000068H
  00384	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00387	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
  0038c	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  0038f	89 01		 mov	 DWORD PTR [ecx], eax

; 788  :     _nOpenResult = OPOS_OR_REGPROGID;

  00391	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00394	c7 82 e8 00 00
	00 2f 01 00 00	 mov	 DWORD PTR [edx+232], 303 ; 0000012fH

; 789  : 
; 790  :     // Now get the Service Object's ProgID, which is the default value's data for the device's key.
; 791  :     //   If fails, then return error.
; 792  :     TCHAR sSOProgID[ MAX_REGBUFFER_SIZE ];
; 793  :     dwSize = sizeof( sSOProgID );

  0039e	c7 85 b8 fb ff
	ff 00 02 00 00	 mov	 DWORD PTR _dwSize$[ebp], 512 ; 00000200H

; 794  :     nRegStat = RegQueryValueEx(

  003a8	8b f4		 mov	 esi, esp
  003aa	8d 85 b8 fb ff
	ff		 lea	 eax, DWORD PTR _dwSize$[ebp]
  003b0	50		 push	 eax
  003b1	8d 8d a0 f9 ff
	ff		 lea	 ecx, DWORD PTR _sSOProgID$[ebp]
  003b7	51		 push	 ecx
  003b8	8d 95 c4 fb ff
	ff		 lea	 edx, DWORD PTR _dwType$[ebp]
  003be	52		 push	 edx
  003bf	6a 00		 push	 0
  003c1	6a 00		 push	 0
  003c3	8b 85 ac fb ff
	ff		 mov	 eax, DWORD PTR _hServiceKey$[ebp]
  003c9	50		 push	 eax
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExW@24
  003d0	3b f4		 cmp	 esi, esp
  003d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d7	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _nRegStat$[ebp], eax

; 795  :             hServiceKey,                // Handle to key to query
; 796  :             0,                          // Address of name of value to query
; 797  :             0,                          // Reserved
; 798  :             &dwType,                    // Address of buffer for value type
; 799  :             (LPBYTE) sSOProgID,         // Address of data buffer
; 800  :             &dwSize );                  // Address of data buffer size
; 801  :     RegCloseKey( hServiceKey );

  003dd	8b f4		 mov	 esi, esp
  003df	8b 8d ac fb ff
	ff		 mov	 ecx, DWORD PTR _hServiceKey$[ebp]
  003e5	51		 push	 ecx
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  003ec	3b f4		 cmp	 esi, esp
  003ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 802  :     if ( ERROR_SUCCESS != nRegStat || dwType != REG_SZ )

  003f3	83 bd a4 fb ff
	ff 00		 cmp	 DWORD PTR _nRegStat$[ebp], 0
  003fa	75 09		 jne	 SHORT $LN14@Open
  003fc	83 bd c4 fb ff
	ff 01		 cmp	 DWORD PTR _dwType$[ebp], 1
  00403	74 3c		 je	 SHORT $LN13@Open
$LN14@Open:

; 803  :     {
; 804  :         DOTRACE( ( _T("-  Failed: Cannot get ProgID from registry (%d/%d)"), *pRC, _nOpenResult ) );

  00405	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00408	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0040e	50		 push	 eax
  0040f	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00412	8b 11		 mov	 edx, DWORD PTR [ecx]
  00414	52		 push	 edx
  00415	68 00 00 00 00	 push	 OFFSET $SG193873
  0041a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00423	83 c4 10	 add	 esp, 16			; 00000010H

; 805  :         DOTRACEERR( _T("    RegOpenKeyEx error %d\n    %s"), nRegStat );

  00426	8b 8d a4 fb ff
	ff		 mov	 ecx, DWORD PTR _nRegStat$[ebp]
  0042c	51		 push	 ecx
  0042d	68 00 00 00 00	 push	 OFFSET $SG193874
  00432	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00435	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 806  :         return S_OK;

  0043a	33 c0		 xor	 eax, eax
  0043c	e9 9d 0b 00 00	 jmp	 $LN50@Open
$LN13@Open:

; 807  :     }
; 808  :     NULTERMINATE(sSOProgID);

  00441	ba 02 00 00 00	 mov	 edx, 2
  00446	69 c2 ff 00 00
	00		 imul	 eax, edx, 255
  0044c	89 85 28 f8 ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00452	81 bd 28 f8 ff
	ff 00 02 00 00	 cmp	 DWORD PTR $T9[ebp], 512	; 00000200H
  0045c	73 02		 jae	 SHORT $LN55@Open
  0045e	eb 05		 jmp	 SHORT $LN56@Open
$LN55@Open:
  00460	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN56@Open:
  00465	33 c9		 xor	 ecx, ecx
  00467	8b 95 28 f8 ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
  0046d	66 89 8c 15 a0
	f9 ff ff	 mov	 WORD PTR _sSOProgID$[ebp+edx], cx

; 809  :     DOTRACE( ( _T("    DeviceName mapped to ProgID <%s>"), sSOProgID ) );

  00475	8d 85 a0 f9 ff
	ff		 lea	 eax, DWORD PTR _sSOProgID$[ebp]
  0047b	50		 push	 eax
  0047c	68 00 00 00 00	 push	 OFFSET $SG193875
  00481	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00484	51		 push	 ecx
  00485	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0048a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 810  : 
; 811  :     // Convert the ProgID to a CLSID.
; 812  :     CLSID SOClassID;
; 813  :     hRC = CLSIDFromProgID(

  0048d	8b f4		 mov	 esi, esp
  0048f	8d 95 88 f9 ff
	ff		 lea	 edx, DWORD PTR _SOClassID$[ebp]
  00495	52		 push	 edx
  00496	8d 85 a0 f9 ff
	ff		 lea	 eax, DWORD PTR _sSOProgID$[ebp]
  0049c	50		 push	 eax
  0049d	8d 8d 14 f8 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  004a3	e8 00 00 00 00	 call	 ??0_CW@@QAE@PB_W@Z	; _CW::_CW
  004a8	8b c8		 mov	 ecx, eax
  004aa	e8 00 00 00 00	 call	 ??B_CW@@QAEPB_WXZ	; _CW::operator wchar_t const *
  004af	50		 push	 eax
  004b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CLSIDFromProgID@8
  004b6	3b f4		 cmp	 esi, esp
  004b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004bd	89 45 f4	 mov	 DWORD PTR _hRC$[ebp], eax
  004c0	8d 8d 14 f8 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  004c6	e8 00 00 00 00	 call	 ??1_CW@@QAE@XZ		; _CW::~_CW

; 814  :             _CW(sSOProgID),             // Pointer to the ProgID
; 815  :             &SOClassID );               // Pointer to the CLSID
; 816  :     if ( S_OK != hRC )

  004cb	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  004cf	74 39		 je	 SHORT $LN15@Open

; 817  :     {
; 818  :         DOTRACE( ( _T("-  Failed: Cannot convert ProgID to ClassID (%d/%d)"), *pRC, _nOpenResult ) );

  004d1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  004d4	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  004da	52		 push	 edx
  004db	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  004de	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e0	51		 push	 ecx
  004e1	68 00 00 00 00	 push	 OFFSET $SG193877
  004e6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  004e9	52		 push	 edx
  004ea	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  004ef	83 c4 10	 add	 esp, 16			; 00000010H

; 819  :         DOTRACEERR( _T("    CLSIDFromProgID error 0x%X\n    %s"), hRC );

  004f2	8b 45 f4	 mov	 eax, DWORD PTR _hRC$[ebp]
  004f5	50		 push	 eax
  004f6	68 00 00 00 00	 push	 OFFSET $SG193878
  004fb	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  004fe	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 820  :         return S_OK;

  00503	33 c0		 xor	 eax, eax
  00505	e9 d4 0a 00 00	 jmp	 $LN50@Open
$LN15@Open:

; 821  :     }
; 822  :     DOTRACE( ( _T("    ProgID mapped to ClassID") ) );

  0050a	68 00 00 00 00	 push	 OFFSET $SG193879
  0050f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00512	51		 push	 ecx
  00513	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00518	83 c4 08	 add	 esp, 8

; 823  : 
; 824  :     // Make the connection to the Service Object.
; 825  :     //   We create an instance, get the IDispatch pointer, then release the IUnknown pointer.
; 826  :     IUnknown* pUnknown;
; 827  :     hRC = CoCreateInstance(

  0051b	8b f4		 mov	 esi, esp
  0051d	8d 95 7c f9 ff
	ff		 lea	 edx, DWORD PTR _pUnknown$[ebp]
  00523	52		 push	 edx
  00524	68 00 00 00 00	 push	 OFFSET _IID_IUnknown
  00529	6a 17		 push	 23			; 00000017H
  0052b	6a 00		 push	 0
  0052d	8d 85 88 f9 ff
	ff		 lea	 eax, DWORD PTR _SOClassID$[ebp]
  00533	50		 push	 eax
  00534	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  0053a	3b f4		 cmp	 esi, esp
  0053c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00541	89 45 f4	 mov	 DWORD PTR _hRC$[ebp], eax

; 828  :             SOClassID,                  // Class identifier (CLSID) of the object
; 829  :             0,                          // Pointer to whether object is or isn't part of an aggregate
; 830  :             CLSCTX_ALL,                 // Context for running executable code
; 831  :             IID_IUnknown,               // Reference to the identifier of the interface
; 832  :             (void**) &pUnknown);        // Address of output variable that receives the interface pointer requested in riid
; 833  :     if ( S_OK != hRC )

  00544	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00548	74 46		 je	 SHORT $LN16@Open

; 834  :     {
; 835  :         _nOpenResult = OPOS_OR_CREATE;

  0054a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0054d	c7 81 e8 00 00
	00 30 01 00 00	 mov	 DWORD PTR [ecx+232], 304 ; 00000130H

; 836  :         DOTRACE( ( _T("-  Failed: Cannot create Service Object (%d/%d)"), *pRC, _nOpenResult ) );

  00557	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0055a	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00560	50		 push	 eax
  00561	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00564	8b 11		 mov	 edx, DWORD PTR [ecx]
  00566	52		 push	 edx
  00567	68 00 00 00 00	 push	 OFFSET $SG193881
  0056c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00575	83 c4 10	 add	 esp, 16			; 00000010H

; 837  :         DOTRACEERR( _T("    CoCreateInstance error 0x%X\n    %s"), hRC );

  00578	8b 4d f4	 mov	 ecx, DWORD PTR _hRC$[ebp]
  0057b	51		 push	 ecx
  0057c	68 00 00 00 00	 push	 OFFSET $SG193882
  00581	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00584	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 838  :         return S_OK;

  00589	33 c0		 xor	 eax, eax
  0058b	e9 4e 0a 00 00	 jmp	 $LN50@Open
$LN16@Open:

; 839  :     }
; 840  :     DOTRACE( ( _T("    Created Service Object") ) );

  00590	68 00 00 00 00	 push	 OFFSET $SG193883
  00595	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00598	52		 push	 edx
  00599	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0059e	83 c4 08	 add	 esp, 8

; 841  : 
; 842  :     hRC = pUnknown->QueryInterface(

  005a1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  005a4	05 f8 00 00 00	 add	 eax, 248		; 000000f8H
  005a9	8b f4		 mov	 esi, esp
  005ab	50		 push	 eax
  005ac	68 00 00 00 00	 push	 OFFSET _IID_IDispatch
  005b1	8b 8d 7c f9 ff
	ff		 mov	 ecx, DWORD PTR _pUnknown$[ebp]
  005b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  005b9	8b 85 7c f9 ff
	ff		 mov	 eax, DWORD PTR _pUnknown$[ebp]
  005bf	50		 push	 eax
  005c0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005c2	ff d1		 call	 ecx
  005c4	3b f4		 cmp	 esi, esp
  005c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005cb	89 45 f4	 mov	 DWORD PTR _hRC$[ebp], eax

; 843  :             IID_IDispatch,              // Identifier of the requested interface
; 844  :             (void**) &_pService );      // Address of output variable that receives the interface pointer requested in iid
; 845  :     pUnknown->Release();                // Done with original pointer.

  005ce	8b 95 7c f9 ff
	ff		 mov	 edx, DWORD PTR _pUnknown$[ebp]
  005d4	8b 02		 mov	 eax, DWORD PTR [edx]
  005d6	8b f4		 mov	 esi, esp
  005d8	8b 8d 7c f9 ff
	ff		 mov	 ecx, DWORD PTR _pUnknown$[ebp]
  005de	51		 push	 ecx
  005df	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  005e2	ff d2		 call	 edx
  005e4	3b f4		 cmp	 esi, esp
  005e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 846  :     if ( S_OK != hRC )

  005eb	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  005ef	74 46		 je	 SHORT $LN17@Open

; 847  :     {
; 848  :         _nOpenResult = OPOS_OR_CREATE;

  005f1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  005f4	c7 80 e8 00 00
	00 30 01 00 00	 mov	 DWORD PTR [eax+232], 304 ; 00000130H

; 849  :         DOTRACE( ( _T("-  Failed: Cannot get Service Object's Dispatch pointer (%d/%d)"), *pRC, _nOpenResult ) );

  005fe	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00601	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  00607	52		 push	 edx
  00608	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  0060b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0060d	51		 push	 ecx
  0060e	68 00 00 00 00	 push	 OFFSET $SG193885
  00613	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00616	52		 push	 edx
  00617	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0061c	83 c4 10	 add	 esp, 16			; 00000010H

; 850  :         DOTRACEERR( _T("    QueryInterface error 0x%X\n    %s"), hRC );

  0061f	8b 45 f4	 mov	 eax, DWORD PTR _hRC$[ebp]
  00622	50		 push	 eax
  00623	68 00 00 00 00	 push	 OFFSET $SG193886
  00628	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0062b	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 851  :         return S_OK;

  00630	33 c0		 xor	 eax, eax
  00632	e9 a7 09 00 00	 jmp	 $LN50@Open
$LN17@Open:

; 852  :     }
; 853  :     DOTRACE( ( _T("    Acquired Service Object's dispatch pointer") ) );

  00637	68 00 00 00 00	 push	 OFFSET $SG193887
  0063c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0063f	51		 push	 ecx
  00640	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00645	83 c4 08	 add	 esp, 8

; 854  : 
; 855  :     // Get the dispatch IDs for the methods supported by the Service Object.
; 856  :     //   Stop when we can't get one or when all are acquired.
; 857  :     int nMethodCount = 0;

  00648	c7 85 74 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _nMethodCount$[ebp], 0
$LN2@Open:

; 858  :     while ( s_SOMethodNames[nMethodCount] != 0 )

  00652	8b 95 74 f9 ff
	ff		 mov	 edx, DWORD PTR _nMethodCount$[ebp]
  00658	83 3c 95 00 00
	00 00 00	 cmp	 DWORD PTR ?s_SOMethodNames@@3PAPADA[edx*4], 0
  00660	0f 84 3c 01 00
	00		 je	 $LN3@Open

; 859  :     {
; 860  :         _CWNCC MN( s_SOMethodNames[nMethodCount] ); // Init for conversion.

  00666	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR _nMethodCount$[ebp]
  0066c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?s_SOMethodNames@@3PAPADA[eax*4]
  00673	51		 push	 ecx
  00674	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$22[ebp]
  0067a	e8 00 00 00 00	 call	 ??0_CWNCC@@QAE@PBD@Z	; _CWNCC::_CWNCC

; 861  :         OLECHAR* pMN = MN;                          // Assign pointer, converting to wide if needed.

  0067f	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$22[ebp]
  00685	e8 00 00 00 00	 call	 ??B_CWNCC@@QAEPA_WXZ	; _CWNCC::operator wchar_t *
  0068a	89 85 50 f9 ff
	ff		 mov	 DWORD PTR _pMN$21[ebp], eax

; 862  :         if ( S_OK !=

  00690	8b 95 74 f9 ff
	ff		 mov	 edx, DWORD PTR _nMethodCount$[ebp]
  00696	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00699	8d 8c 90 08 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx*4+264]
  006a0	8b f4		 mov	 esi, esp
  006a2	51		 push	 ecx
  006a3	68 00 08 00 00	 push	 2048			; 00000800H
  006a8	6a 01		 push	 1
  006aa	8d 95 50 f9 ff
	ff		 lea	 edx, DWORD PTR _pMN$21[ebp]
  006b0	52		 push	 edx
  006b1	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  006b6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  006b9	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  006bf	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  006c2	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  006c8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  006ca	50		 push	 eax
  006cb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  006ce	ff d2		 call	 edx
  006d0	3b f4		 cmp	 esi, esp
  006d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006d7	85 c0		 test	 eax, eax
  006d9	0f 84 a4 00 00
	00		 je	 $LN18@Open

; 863  :              _pService->GetIDsOfNames(
; 864  :                 IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nMethodCount] )
; 865  :            )
; 866  :         {
; 867  :             // If failed, do special cases:
; 868  :             //  - If we failed the newer CloseService, then try Close before failing.
; 869  :             if ( nMethodCount == nDICloseService )

  006df	83 bd 74 f9 ff
	ff 09		 cmp	 DWORD PTR _nMethodCount$[ebp], 9
  006e6	75 0c		 jne	 SHORT $LN19@Open

; 870  :                 pMN = L"Close";

  006e8	c7 85 50 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$21[ebp], OFFSET $SG193891
  006f2	eb 37		 jmp	 SHORT $LN20@Open
$LN19@Open:

; 871  :             //  - If we failed the newer COM-friendly name ClaimDevice or ReleaseDevice,
; 872  :             //    then try the original name Claim or Release before failing.
; 873  :             else if ( nMethodCount == nDIClaimDevice )

  006f4	83 bd 74 f9 ff
	ff 07		 cmp	 DWORD PTR _nMethodCount$[ebp], 7
  006fb	75 0c		 jne	 SHORT $LN21@Open

; 874  :                 pMN = L"Claim";

  006fd	c7 85 50 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$21[ebp], OFFSET $SG193894
  00707	eb 22		 jmp	 SHORT $LN20@Open
$LN21@Open:

; 875  :             else if ( nMethodCount == nDIReleaseDevice )

  00709	83 bd 74 f9 ff
	ff 0b		 cmp	 DWORD PTR _nMethodCount$[ebp], 11 ; 0000000bH
  00710	75 0c		 jne	 SHORT $LN23@Open

; 876  :                 pMN = L"Release";

  00712	c7 85 50 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$21[ebp], OFFSET $SG193897
  0071c	eb 0d		 jmp	 SHORT $LN20@Open
$LN23@Open:

; 877  :             else                        // If not special case,
; 878  :                 break;                  //   stop.

  0071e	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$22[ebp]
  00724	e8 00 00 00 00	 call	 ??1_CWNCC@@QAE@XZ
  00729	eb 77		 jmp	 SHORT $LN3@Open
$LN20@Open:

; 879  :             if ( S_OK !=

  0072b	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR _nMethodCount$[ebp]
  00731	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00734	8d 94 81 08 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax*4+264]
  0073b	8b f4		 mov	 esi, esp
  0073d	52		 push	 edx
  0073e	68 00 08 00 00	 push	 2048			; 00000800H
  00743	6a 01		 push	 1
  00745	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _pMN$21[ebp]
  0074b	50		 push	 eax
  0074c	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00751	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00754	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  0075a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0075d	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00763	8b 12		 mov	 edx, DWORD PTR [edx]
  00765	51		 push	 ecx
  00766	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00769	ff d0		 call	 eax
  0076b	3b f4		 cmp	 esi, esp
  0076d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00772	85 c0		 test	 eax, eax
  00774	74 0d		 je	 SHORT $LN18@Open

; 880  :                  _pService->GetIDsOfNames(
; 881  :                     IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nMethodCount] )
; 882  :                )
; 883  :                 break;                  // If special case but still not found, stop.

  00776	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$22[ebp]
  0077c	e8 00 00 00 00	 call	 ??1_CWNCC@@QAE@XZ
  00781	eb 1f		 jmp	 SHORT $LN3@Open
$LN18@Open:

; 884  :         }
; 885  :         nMethodCount++;

  00783	8b 8d 74 f9 ff
	ff		 mov	 ecx, DWORD PTR _nMethodCount$[ebp]
  00789	83 c1 01	 add	 ecx, 1
  0078c	89 8d 74 f9 ff
	ff		 mov	 DWORD PTR _nMethodCount$[ebp], ecx

; 886  :     }

  00792	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$22[ebp]
  00798	e8 00 00 00 00	 call	 ??1_CWNCC@@QAE@XZ
  0079d	e9 b0 fe ff ff	 jmp	 $LN2@Open
$LN3@Open:

; 887  : 
; 888  :     // When debug mode, repeat above trying to get all methods, for later tracing.
; 889  :     #ifdef _DEBUG
; 890  :     int nAllMethods = nMethodCount;

  007a2	8b 95 74 f9 ff
	ff		 mov	 edx, DWORD PTR _nMethodCount$[ebp]
  007a8	89 95 48 f9 ff
	ff		 mov	 DWORD PTR _nAllMethods$[ebp], edx
$LN4@Open:

; 891  :     while ( s_SOMethodNames[nAllMethods] != 0 )

  007ae	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _nAllMethods$[ebp]
  007b4	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?s_SOMethodNames@@3PAPADA[eax*4], 0
  007bc	0f 84 5d 01 00
	00		 je	 $LN5@Open

; 892  :     {
; 893  :         _CWNCC MN( s_SOMethodNames[nAllMethods] );  // Init for conversion.

  007c2	8b 8d 48 f9 ff
	ff		 mov	 ecx, DWORD PTR _nAllMethods$[ebp]
  007c8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?s_SOMethodNames@@3PAPADA[ecx*4]
  007cf	52		 push	 edx
  007d0	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$20[ebp]
  007d6	e8 00 00 00 00	 call	 ??0_CWNCC@@QAE@PBD@Z	; _CWNCC::_CWNCC

; 894  :         OLECHAR* pMN = MN;                          // Assign pointer, converting to wide if needed.

  007db	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$20[ebp]
  007e1	e8 00 00 00 00	 call	 ??B_CWNCC@@QAEPA_WXZ	; _CWNCC::operator wchar_t *
  007e6	89 85 24 f9 ff
	ff		 mov	 DWORD PTR _pMN$19[ebp], eax

; 895  :         if ( S_OK !=

  007ec	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _nAllMethods$[ebp]
  007f2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  007f5	8d 94 81 08 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax*4+264]
  007fc	8b f4		 mov	 esi, esp
  007fe	52		 push	 edx
  007ff	68 00 08 00 00	 push	 2048			; 00000800H
  00804	6a 01		 push	 1
  00806	8d 85 24 f9 ff
	ff		 lea	 eax, DWORD PTR _pMN$19[ebp]
  0080c	50		 push	 eax
  0080d	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00812	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00815	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  0081b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0081e	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00824	8b 12		 mov	 edx, DWORD PTR [edx]
  00826	51		 push	 ecx
  00827	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0082a	ff d0		 call	 eax
  0082c	3b f4		 cmp	 esi, esp
  0082e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00833	85 c0		 test	 eax, eax
  00835	0f 84 c5 00 00
	00		 je	 $LN26@Open

; 896  :              _pService->GetIDsOfNames(
; 897  :                 IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nAllMethods] )
; 898  :            )
; 899  :         {
; 900  :             pMN = 0;

  0083b	c7 85 24 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$19[ebp], 0

; 901  :             // If failed, do special cases:
; 902  :             //  - If we failed the newer CloseService, then try Close before failing.
; 903  :             if ( nAllMethods == nDICloseService )

  00845	83 bd 48 f9 ff
	ff 09		 cmp	 DWORD PTR _nAllMethods$[ebp], 9
  0084c	75 0c		 jne	 SHORT $LN27@Open

; 904  :                 pMN = L"Close";

  0084e	c7 85 24 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$19[ebp], OFFSET $SG193902
  00858	eb 3e		 jmp	 SHORT $LN28@Open
$LN27@Open:

; 905  :             //  - If we failed the newer COM-friendly name ClaimDevice or ReleaseDevice,
; 906  :             //    then try the original name Claim or Release before failing.
; 907  :             else if ( nAllMethods == nDIClaimDevice )

  0085a	83 bd 48 f9 ff
	ff 07		 cmp	 DWORD PTR _nAllMethods$[ebp], 7
  00861	75 0c		 jne	 SHORT $LN29@Open

; 908  :                 pMN = L"Claim";

  00863	c7 85 24 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$19[ebp], OFFSET $SG193905
  0086d	eb 29		 jmp	 SHORT $LN28@Open
$LN29@Open:

; 909  :             else if ( nAllMethods == nDIReleaseDevice )

  0086f	83 bd 48 f9 ff
	ff 0b		 cmp	 DWORD PTR _nAllMethods$[ebp], 11 ; 0000000bH
  00876	75 0c		 jne	 SHORT $LN31@Open

; 910  :                 pMN = L"Release";

  00878	c7 85 24 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$19[ebp], OFFSET $SG193908
  00882	eb 14		 jmp	 SHORT $LN28@Open
$LN31@Open:

; 911  :             else                                // If not special case,
; 912  :                 _DispIDs[nAllMethods] = -123;   //   mark.

  00884	8b 8d 48 f9 ff
	ff		 mov	 ecx, DWORD PTR _nAllMethods$[ebp]
  0088a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0088d	c7 84 8a 08 01
	00 00 85 ff ff
	ff		 mov	 DWORD PTR [edx+ecx*4+264], -123 ; ffffff85H
$LN28@Open:

; 913  :             if ( pMN != 0 && S_OK !=

  00898	83 bd 24 f9 ff
	ff 00		 cmp	 DWORD PTR _pMN$19[ebp], 0
  0089f	74 5f		 je	 SHORT $LN26@Open
  008a1	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _nAllMethods$[ebp]
  008a7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  008aa	8d 94 81 08 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax*4+264]
  008b1	8b f4		 mov	 esi, esp
  008b3	52		 push	 edx
  008b4	68 00 08 00 00	 push	 2048			; 00000800H
  008b9	6a 01		 push	 1
  008bb	8d 85 24 f9 ff
	ff		 lea	 eax, DWORD PTR _pMN$19[ebp]
  008c1	50		 push	 eax
  008c2	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  008c7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  008ca	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  008d0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  008d3	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  008d9	8b 12		 mov	 edx, DWORD PTR [edx]
  008db	51		 push	 ecx
  008dc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008df	ff d0		 call	 eax
  008e1	3b f4		 cmp	 esi, esp
  008e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008e8	85 c0		 test	 eax, eax
  008ea	74 14		 je	 SHORT $LN26@Open

; 914  :                  _pService->GetIDsOfNames(
; 915  :                     IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &_DispIDs[nAllMethods] )
; 916  :                )
; 917  :                 _DispIDs[nAllMethods] = -123;   // If special case but still not found, mark.

  008ec	8b 8d 48 f9 ff
	ff		 mov	 ecx, DWORD PTR _nAllMethods$[ebp]
  008f2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  008f5	c7 84 8a 08 01
	00 00 85 ff ff
	ff		 mov	 DWORD PTR [edx+ecx*4+264], -123 ; ffffff85H
$LN26@Open:

; 918  :         }
; 919  :         nAllMethods++;

  00900	8b 85 48 f9 ff
	ff		 mov	 eax, DWORD PTR _nAllMethods$[ebp]
  00906	83 c0 01	 add	 eax, 1
  00909	89 85 48 f9 ff
	ff		 mov	 DWORD PTR _nAllMethods$[ebp], eax

; 920  :     }

  0090f	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR _MN$20[ebp]
  00915	e8 00 00 00 00	 call	 ??1_CWNCC@@QAE@XZ
  0091a	e9 8f fe ff ff	 jmp	 $LN4@Open
$LN5@Open:

; 921  :     #endif
; 922  : 
; 923  :     // The SO must at least support all of the initial release's methods,
; 924  :     //   or we won't continue.
; 925  :     if ( nMethodCount < s_RequiredMethodsPerRelease[0] )

  0091f	b9 04 00 00 00	 mov	 ecx, 4
  00924	6b d1 00	 imul	 edx, ecx, 0
  00927	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR _nMethodCount$[ebp]
  0092d	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR ?s_RequiredMethodsPerRelease@@3PAHA[edx]
  00933	7d 79		 jge	 SHORT $LN34@Open

; 926  :     {
; 927  :         _nOpenResult = OPOS_OR_BADIF;

  00935	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00938	c7 81 e8 00 00
	00 31 01 00 00	 mov	 DWORD PTR [ecx+232], 305 ; 00000131H

; 928  :         _pService->Release();

  00942	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00945	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  0094b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0094e	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00954	8b 00		 mov	 eax, DWORD PTR [eax]
  00956	8b f4		 mov	 esi, esp
  00958	52		 push	 edx
  00959	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0095c	ff d1		 call	 ecx
  0095e	3b f4		 cmp	 esi, esp
  00960	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 929  :         DOTRACE( ( _T("-  Failed: Doesn't support all of initial release's methods (%d/%d)"), *pRC, _nOpenResult ) );

  00965	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00968	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0096e	50		 push	 eax
  0096f	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00972	8b 11		 mov	 edx, DWORD PTR [ecx]
  00974	52		 push	 edx
  00975	68 00 00 00 00	 push	 OFFSET $SG193911
  0097a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0097d	50		 push	 eax
  0097e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00983	83 c4 10	 add	 esp, 16			; 00000010H

; 930  :         DOTRACEMETHODS( _DispIDs, s_RequiredMethodsPerRelease[0] );

  00986	b9 04 00 00 00	 mov	 ecx, 4
  0098b	6b d1 00	 imul	 edx, ecx, 0
  0098e	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?s_RequiredMethodsPerRelease@@3PAHA[edx]
  00994	50		 push	 eax
  00995	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00998	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  0099e	51		 push	 ecx
  0099f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  009a2	e8 00 00 00 00	 call	 ?WriteTraceMethods@COPOSDeviceMonitor@@QAEXPAJH@Z ; COPOSDeviceMonitor::WriteTraceMethods

; 931  :         return S_OK;

  009a7	33 c0		 xor	 eax, eax
  009a9	e9 30 06 00 00	 jmp	 $LN50@Open
$LN34@Open:

; 932  :     }
; 933  : 
; 934  :     // Get our own dispatch pointer.
; 935  :     //   Immediately release it -- saves releasing later,
; 936  :     //   since it is just another reference to us.
; 937  :     IDispatch* pDispatch = 0;

  009ae	c7 85 18 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pDispatch$[ebp], 0

; 938  :     CMVERIFY( S_OK == QueryInterface( IID_IDispatch, (void**) &pDispatch ) );

  009b8	8b f4		 mov	 esi, esp
  009ba	8d 95 18 f9 ff
	ff		 lea	 edx, DWORD PTR _pDispatch$[ebp]
  009c0	52		 push	 edx
  009c1	68 00 00 00 00	 push	 OFFSET _IID_IDispatch
  009c6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  009c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  009cb	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  009ce	52		 push	 edx
  009cf	8b 01		 mov	 eax, DWORD PTR [ecx]
  009d1	ff d0		 call	 eax
  009d3	3b f4		 cmp	 esi, esp
  009d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009da	85 c0		 test	 eax, eax
  009dc	74 17		 je	 SHORT $LN57@Open
  009de	68 aa 03 00 00	 push	 938			; 000003aaH
  009e3	68 00 00 00 00	 push	 OFFSET $SG193912
  009e8	68 00 00 00 00	 push	 OFFSET $SG193913
  009ed	e8 00 00 00 00	 call	 ?_assert@@YAXPB_W0I@Z	; _assert
  009f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@Open:

; 939  :     if ( pDispatch != 0 )

  009f5	83 bd 18 f9 ff
	ff 00		 cmp	 DWORD PTR _pDispatch$[ebp], 0
  009fc	74 1d		 je	 SHORT $LN35@Open

; 940  :         pDispatch->Release();

  009fe	8b 95 18 f9 ff
	ff		 mov	 edx, DWORD PTR _pDispatch$[ebp]
  00a04	8b 02		 mov	 eax, DWORD PTR [edx]
  00a06	8b f4		 mov	 esi, esp
  00a08	8b 8d 18 f9 ff
	ff		 mov	 ecx, DWORD PTR _pDispatch$[ebp]
  00a0e	51		 push	 ecx
  00a0f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00a12	ff d2		 call	 edx
  00a14	3b f4		 cmp	 esi, esp
  00a16	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN35@Open:

; 941  : 
; 942  :     // Now call the Service Object's OpenService method.
; 943  :     OposVariant Vars[3];

  00a1b	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  00a20	6a 03		 push	 3
  00a22	6a 18		 push	 24			; 00000018H
  00a24	8d 85 c8 f8 ff
	ff		 lea	 eax, DWORD PTR _Vars$[ebp]
  00a2a	50		 push	 eax
  00a2b	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 944  :     Vars[2].SetString( _CW(OPOS_CLASSKEY_DMON), hRC );

  00a30	8d 4d f4	 lea	 ecx, DWORD PTR _hRC$[ebp]
  00a33	51		 push	 ecx
  00a34	68 00 00 00 00	 push	 OFFSET $SG193915
  00a39	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00a3f	e8 00 00 00 00	 call	 ??0_CW@@QAE@PBD@Z	; _CW::_CW
  00a44	8b c8		 mov	 ecx, eax
  00a46	e8 00 00 00 00	 call	 ??B_CW@@QAEPB_WXZ	; _CW::operator wchar_t const *
  00a4b	50		 push	 eax
  00a4c	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00a51	d1 e2		 shl	 edx, 1
  00a53	8d 8c 15 c8 f8
	ff ff		 lea	 ecx, DWORD PTR _Vars$[ebp+edx]
  00a5a	e8 00 00 00 00	 call	 ?SetString@OposVariant@@QAEXPB_WAAJ@Z ; OposVariant::SetString
  00a5f	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00a65	e8 00 00 00 00	 call	 ??1_CW@@QAE@XZ		; _CW::~_CW

; 945  :     Vars[1].SetString( _CW(szPhysicalDeviceName), hRC );

  00a6a	8d 45 f4	 lea	 eax, DWORD PTR _hRC$[ebp]
  00a6d	50		 push	 eax
  00a6e	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPhysicalDeviceName$[ebp]
  00a74	51		 push	 ecx
  00a75	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00a7b	e8 00 00 00 00	 call	 ??0_CW@@QAE@PB_W@Z	; _CW::_CW
  00a80	8b c8		 mov	 ecx, eax
  00a82	e8 00 00 00 00	 call	 ??B_CW@@QAEPB_WXZ	; _CW::operator wchar_t const *
  00a87	50		 push	 eax
  00a88	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00a8d	c1 e2 00	 shl	 edx, 0
  00a90	8d 8c 15 c8 f8
	ff ff		 lea	 ecx, DWORD PTR _Vars$[ebp+edx]
  00a97	e8 00 00 00 00	 call	 ?SetString@OposVariant@@QAEXPB_WAAJ@Z ; OposVariant::SetString
  00a9c	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00aa2	e8 00 00 00 00	 call	 ??1_CW@@QAE@XZ		; _CW::~_CW

; 946  :     Vars[0].SetDispatch_Ptr( pDispatch, hRC );

  00aa7	8d 45 f4	 lea	 eax, DWORD PTR _hRC$[ebp]
  00aaa	50		 push	 eax
  00aab	8b 8d 18 f9 ff
	ff		 mov	 ecx, DWORD PTR _pDispatch$[ebp]
  00ab1	51		 push	 ecx
  00ab2	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00ab7	6b c2 00	 imul	 eax, edx, 0
  00aba	8d 8c 05 c8 f8
	ff ff		 lea	 ecx, DWORD PTR _Vars$[ebp+eax]
  00ac1	e8 00 00 00 00	 call	 ?SetDispatch_Ptr@OposVariant@@QAEXPAUIDispatch@@AAJ@Z ; OposVariant::SetDispatch_Ptr

; 947  :     if ( FAILED(hRC) )

  00ac6	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00aca	7d 5d		 jge	 SHORT $LN36@Open

; 948  :     {
; 949  :         _pService->Release();

  00acc	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00acf	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00ad5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00ad8	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00ade	8b 12		 mov	 edx, DWORD PTR [edx]
  00ae0	8b f4		 mov	 esi, esp
  00ae2	51		 push	 ecx
  00ae3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00ae6	ff d0		 call	 eax
  00ae8	3b f4		 cmp	 esi, esp
  00aea	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 950  :         DOTRACEERR( _T("-  Failed: Setup for OpenService call 0x%X\n    %s"), hRC );

  00aef	8b 4d f4	 mov	 ecx, DWORD PTR _hRC$[ebp]
  00af2	51		 push	 ecx
  00af3	68 00 00 00 00	 push	 OFFSET $SG193917
  00af8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00afb	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 951  :         return hRC;

  00b00	8b 55 f4	 mov	 edx, DWORD PTR _hRC$[ebp]
  00b03	89 95 e8 f7 ff
	ff		 mov	 DWORD PTR $T5[ebp], edx
  00b09	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00b0e	6a 03		 push	 3
  00b10	6a 18		 push	 24			; 00000018H
  00b12	8d 85 c8 f8 ff
	ff		 lea	 eax, DWORD PTR _Vars$[ebp]
  00b18	50		 push	 eax
  00b19	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00b1e	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00b24	e9 b5 04 00 00	 jmp	 $LN50@Open
$LN36@Open:

; 952  :     }
; 953  :     hRC = DoInvoke( DEBUGPARAM("Open-OpenService") S_OK, Vars, 3, nDIOpenService, pRC, false );

  00b29	6a 00		 push	 0
  00b2b	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00b2e	51		 push	 ecx
  00b2f	6a 05		 push	 5
  00b31	6a 03		 push	 3
  00b33	8d 95 c8 f8 ff
	ff		 lea	 edx, DWORD PTR _Vars$[ebp]
  00b39	52		 push	 edx
  00b3a	6a 00		 push	 0
  00b3c	68 00 00 00 00	 push	 OFFSET $SG193919
  00b41	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00b44	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00b49	89 45 f4	 mov	 DWORD PTR _hRC$[ebp], eax

; 954  : 
; 955  :     // If the OpenService fails, then set result code and return.
; 956  :     if ( hRC != S_OK || *pRC != OPOS_SUCCESS )

  00b4c	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00b50	75 0c		 jne	 SHORT $LN38@Open
  00b52	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  00b55	83 38 00	 cmp	 DWORD PTR [eax], 0
  00b58	0f 84 8a 01 00
	00		 je	 $LN37@Open
$LN38@Open:

; 957  :     {
; 958  :         // Set the default open result code.
; 959  :         _nOpenResult = OPOS_OR_FAILEDOPEN;

  00b5e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00b61	c7 81 e8 00 00
	00 32 01 00 00	 mov	 DWORD PTR [ecx+232], 306 ; 00000132H

; 960  :         // If not a COM error, and the SO supports the GetOpenResult method,
; 961  :         //   then call it to get the open result code.
; 962  :         if ( hRC == S_OK )

  00b6b	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00b6f	0f 85 f5 00 00
	00		 jne	 $LN39@Open

; 963  :         {
; 964  :             // Try to get DispID of the method.
; 965  :             OLECHAR* pMN = L"GetOpenResult";

  00b75	c7 85 bc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMN$18[ebp], OFFSET $SG193923

; 966  :             DISPID DispID;
; 967  :             if ( S_OK ==

  00b7f	8b f4		 mov	 esi, esp
  00b81	8d 95 b0 f8 ff
	ff		 lea	 edx, DWORD PTR _DispID$17[ebp]
  00b87	52		 push	 edx
  00b88	68 00 08 00 00	 push	 2048			; 00000800H
  00b8d	6a 01		 push	 1
  00b8f	8d 85 bc f8 ff
	ff		 lea	 eax, DWORD PTR _pMN$18[ebp]
  00b95	50		 push	 eax
  00b96	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00b9b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00b9e	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00ba4	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00ba7	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00bad	8b 12		 mov	 edx, DWORD PTR [edx]
  00baf	51		 push	 ecx
  00bb0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00bb3	ff d0		 call	 eax
  00bb5	3b f4		 cmp	 esi, esp
  00bb7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bbc	85 c0		 test	 eax, eax
  00bbe	0f 85 a6 00 00
	00		 jne	 $LN39@Open

; 968  :                  _pService->GetIDsOfNames(
; 969  :                     IID_NULL, &pMN, 1, LOCALE_SYSTEM_DEFAULT, &DispID )
; 970  :                )
; 971  :             {
; 972  :                 // If method exists, set up and call the SO's get property open result method.
; 973  :                 OposVariantResult VarResult;

  00bc4	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR _VarResult$16[ebp]
  00bca	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 974  :                 DISPPARAMS Disp = { NULL, NULL, 0, 0 };

  00bcf	c7 85 78 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Disp$15[ebp], 0
  00bd9	c7 85 7c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Disp$15[ebp+4], 0
  00be3	c7 85 80 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Disp$15[ebp+8], 0
  00bed	c7 85 84 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Disp$15[ebp+12], 0

; 975  :                 if ( S_OK == _pService->Invoke(

  00bf7	8b f4		 mov	 esi, esp
  00bf9	6a 00		 push	 0
  00bfb	6a 00		 push	 0
  00bfd	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR _VarResult$16[ebp]
  00c03	51		 push	 ecx
  00c04	8d 95 78 f8 ff
	ff		 lea	 edx, DWORD PTR _Disp$15[ebp]
  00c0a	52		 push	 edx
  00c0b	6a 01		 push	 1
  00c0d	68 00 04 00 00	 push	 1024			; 00000400H
  00c12	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00c17	8b 85 b0 f8 ff
	ff		 mov	 eax, DWORD PTR _DispID$17[ebp]
  00c1d	50		 push	 eax
  00c1e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00c21	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00c27	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00c2a	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00c30	8b 12		 mov	 edx, DWORD PTR [edx]
  00c32	51		 push	 ecx
  00c33	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00c36	ff d0		 call	 eax
  00c38	3b f4		 cmp	 esi, esp
  00c3a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c3f	85 c0		 test	 eax, eax
  00c41	75 1c		 jne	 SHORT $LN41@Open

; 976  :                         DispID, IID_NULL, LOCALE_USER_DEFAULT,
; 977  :                         DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL )
; 978  :                    )
; 979  :                 {
; 980  :                     // If method succeeds, convert (if needed) to long and set open result code.
; 981  :                     HRESULT hRCTmp;
; 982  :                     VarResult.ChangeLONG( &_nOpenResult, hRCTmp );

  00c43	8d 8d 6c f8 ff
	ff		 lea	 ecx, DWORD PTR _hRCTmp$14[ebp]
  00c49	51		 push	 ecx
  00c4a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00c4d	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  00c53	52		 push	 edx
  00c54	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR _VarResult$16[ebp]
  00c5a	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::ChangeLONG
$LN41@Open:

; 983  :                 }
; 984  :             }

  00c5f	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR _VarResult$16[ebp]
  00c65	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
$LN39@Open:

; 985  :         }
; 986  :         // Release the SO and return its OpenService HRESULT.
; 987  :         _pService->Release();

  00c6a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00c6d	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00c73	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00c76	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  00c7c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00c7e	8b f4		 mov	 esi, esp
  00c80	50		 push	 eax
  00c81	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00c84	ff d2		 call	 edx
  00c86	3b f4		 cmp	 esi, esp
  00c88	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 988  :         DOTRACE( ( _T("-  Failed: Service Object's OpenService reported failure (%d/%d)"), *pRC, _nOpenResult ) );

  00c8d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00c90	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00c96	51		 push	 ecx
  00c97	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  00c9a	8b 02		 mov	 eax, DWORD PTR [edx]
  00c9c	50		 push	 eax
  00c9d	68 00 00 00 00	 push	 OFFSET $SG193926
  00ca2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca5	51		 push	 ecx
  00ca6	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00cab	83 c4 10	 add	 esp, 16			; 00000010H

; 989  :         DOTRACEERR( _T("    Invoke error 0x%X\n    %s"), hRC );

  00cae	8b 55 f4	 mov	 edx, DWORD PTR _hRC$[ebp]
  00cb1	52		 push	 edx
  00cb2	68 00 00 00 00	 push	 OFFSET $SG193927
  00cb7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00cba	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 990  :         return hRC;

  00cbf	8b 45 f4	 mov	 eax, DWORD PTR _hRC$[ebp]
  00cc2	89 85 e4 f7 ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00cc8	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00ccd	6a 03		 push	 3
  00ccf	6a 18		 push	 24			; 00000018H
  00cd1	8d 8d c8 f8 ff
	ff		 lea	 ecx, DWORD PTR _Vars$[ebp]
  00cd7	51		 push	 ecx
  00cd8	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00cdd	8b 85 e4 f7 ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00ce3	e9 f6 02 00 00	 jmp	 $LN50@Open
$LN37@Open:

; 991  :     }
; 992  :     DOTRACE( ( _T("    Service Object's OpenService succeeded") ) );

  00ce8	68 00 00 00 00	 push	 OFFSET $SG193929
  00ced	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00cf0	52		 push	 edx
  00cf1	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00cf6	83 c4 08	 add	 esp, 8

; 993  : 
; 994  :     // Prepare for events.
; 995  :     EventOpen();

  00cf9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00cfc	e8 00 00 00 00	 call	 ?EventOpen@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventOpen

; 996  : 
; 997  :     // The CO and SO are now open.
; 998  :     _bOpened = true;

  00d01	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00d04	c6 80 e4 00 00
	00 01		 mov	 BYTE PTR [eax+228], 1

; 999  : 
; 1000 :     // Trace some service object information, and initialize debug data.
; 1001 :     #ifdef _DEBUG
; 1002 :     DOTRACE( ( _T("    <Start> Service Object Properties.") ) );

  00d0b	68 00 00 00 00	 push	 OFFSET $SG193930
  00d10	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00d13	51		 push	 ecx
  00d14	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00d19	83 c4 08	 add	 esp, 8

; 1003 :     BSTR bstrSOInfo;
; 1004 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectDescription") PIDX_ServiceObjectDescription, &bstrSOInfo, 0 );

  00d1c	6a 00		 push	 0
  00d1e	8d 95 60 f8 ff
	ff		 lea	 edx, DWORD PTR _bstrSOInfo$[ebp]
  00d24	52		 push	 edx
  00d25	68 44 42 0f 00	 push	 1000004			; 000f4244H
  00d2a	68 00 00 00 00	 push	 OFFSET $SG193931
  00d2f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00d32	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1005 :     SysFreeString(bstrSOInfo);

  00d37	8b f4		 mov	 esi, esp
  00d39	8b 85 60 f8 ff
	ff		 mov	 eax, DWORD PTR _bstrSOInfo$[ebp]
  00d3f	50		 push	 eax
  00d40	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00d46	3b f4		 cmp	 esi, esp
  00d48	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1006 :     GetOposProp( DEBUGPARAM("Open-DeviceDescription") PIDX_DeviceDescription, &bstrSOInfo, 0 );

  00d4d	6a 00		 push	 0
  00d4f	8d 8d 60 f8 ff
	ff		 lea	 ecx, DWORD PTR _bstrSOInfo$[ebp]
  00d55	51		 push	 ecx
  00d56	68 42 42 0f 00	 push	 1000002			; 000f4242H
  00d5b	68 00 00 00 00	 push	 OFFSET $SG193932
  00d60	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00d63	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1007 :     SysFreeString(bstrSOInfo);

  00d68	8b f4		 mov	 esi, esp
  00d6a	8b 95 60 f8 ff
	ff		 mov	 edx, DWORD PTR _bstrSOInfo$[ebp]
  00d70	52		 push	 edx
  00d71	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00d77	3b f4		 cmp	 esi, esp
  00d79	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1008 :     GetOposProp( DEBUGPARAM("Open-DeviceName") PIDX_DeviceName, &bstrSOInfo, 0 );

  00d7e	6a 00		 push	 0
  00d80	8d 85 60 f8 ff
	ff		 lea	 eax, DWORD PTR _bstrSOInfo$[ebp]
  00d86	50		 push	 eax
  00d87	68 43 42 0f 00	 push	 1000003			; 000f4243H
  00d8c	68 00 00 00 00	 push	 OFFSET $SG193933
  00d91	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00d94	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1009 :     SysFreeString(bstrSOInfo);

  00d99	8b f4		 mov	 esi, esp
  00d9b	8b 8d 60 f8 ff
	ff		 mov	 ecx, DWORD PTR _bstrSOInfo$[ebp]
  00da1	51		 push	 ecx
  00da2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00da8	3b f4		 cmp	 esi, esp
  00daa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1010 :     DOTRACE( ( _T("    <End> Service Object Properties.") ) );

  00daf	68 00 00 00 00	 push	 OFFSET $SG193934
  00db4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00db7	52		 push	 edx
  00db8	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00dbd	83 c4 08	 add	 esp, 8

; 1011 :     #endif
; 1012 : 
; 1013 :     // Now do some versioning support checks...
; 1014 :     bool bBadSO = false;

  00dc0	c6 85 5b f8 ff
	ff 00		 mov	 BYTE PTR _bBadSO$[ebp], 0

; 1015 : 
; 1016 :     //  - Get the SO's version, and determine the major and minor version.
; 1017 :     long nSOVersion;
; 1018 :     GetOposProp( DEBUGPARAM("Open-ServiceObjectVersion") PIDX_ServiceObjectVersion, &nSOVersion, 0 );

  00dc7	6a 00		 push	 0
  00dc9	8d 85 50 f8 ff
	ff		 lea	 eax, DWORD PTR _nSOVersion$[ebp]
  00dcf	50		 push	 eax
  00dd0	6a 08		 push	 8
  00dd2	68 00 00 00 00	 push	 OFFSET $SG193935
  00dd7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00dda	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1019 :     _nSOMajor = nSOVersion / 1000000;

  00ddf	8b 85 50 f8 ff
	ff		 mov	 eax, DWORD PTR _nSOVersion$[ebp]
  00de5	99		 cdq
  00de6	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00deb	f7 f9		 idiv	 ecx
  00ded	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00df0	89 82 ec 00 00
	00		 mov	 DWORD PTR [edx+236], eax

; 1020 :     _nSOMinor = ( nSOVersion / 1000 ) % 1000;

  00df6	8b 85 50 f8 ff
	ff		 mov	 eax, DWORD PTR _nSOVersion$[ebp]
  00dfc	99		 cdq
  00dfd	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00e02	f7 f9		 idiv	 ecx
  00e04	99		 cdq
  00e05	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00e0a	f7 f9		 idiv	 ecx
  00e0c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00e0f	89 90 f0 00 00
	00		 mov	 DWORD PTR [eax+240], edx

; 1021 : 
; 1022 :     //  - If major version is not 1, then bad SO.
; 1023 :     if ( _nSOMajor != 1 )

  00e15	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00e18	83 b9 ec 00 00
	00 01		 cmp	 DWORD PTR [ecx+236], 1
  00e1f	74 36		 je	 SHORT $LN42@Open

; 1024 :     {
; 1025 :         _nOpenResult = OPOS_OR_BADVERSION;

  00e21	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00e24	c7 82 e8 00 00
	00 33 01 00 00	 mov	 DWORD PTR [edx+232], 307 ; 00000133H

; 1026 :         bBadSO = true;

  00e2e	c6 85 5b f8 ff
	ff 01		 mov	 BYTE PTR _bBadSO$[ebp], 1

; 1027 :         DOTRACE( ( _T("-  Failed: Service Object's major version is not 1 (%d/%d)"), OPOS_E_NOSERVICE, _nOpenResult ) );

  00e35	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00e38	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00e3e	51		 push	 ecx
  00e3f	6a 68		 push	 104			; 00000068H
  00e41	68 00 00 00 00	 push	 OFFSET $SG193938
  00e46	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00e49	52		 push	 edx
  00e4a	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00e4f	83 c4 10	 add	 esp, 16			; 00000010H

; 1028 :     }

  00e52	e9 bc 00 00 00	 jmp	 $LN43@Open
$LN42@Open:

; 1029 : 
; 1030 :     //  - If SO doesn't support enough methods, then bad SO.
; 1031 :     else
; 1032 :     {
; 1033 :         long nReqMethodIndex = sizeof(s_RequiredMethodsPerRelease)/sizeof(int) - 1;

  00e57	c7 85 48 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _nReqMethodIndex$13[ebp], 0

; 1034 :         // Shouldn't have SO with release below control's first release, but check anyway.
; 1035 :         if ( _nSOMinor < MinorReleaseInitial )

  00e61	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00e64	83 b8 f0 00 00
	00 10		 cmp	 DWORD PTR [eax+240], 16	; 00000010H
  00e6b	7d 0c		 jge	 SHORT $LN44@Open

; 1036 :             nReqMethodIndex = 0;

  00e6d	c7 85 48 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _nReqMethodIndex$13[ebp], 0
  00e77	eb 26		 jmp	 SHORT $LN45@Open
$LN44@Open:

; 1037 :         // If SO release is below that supported by this control, use its release's methods.
; 1038 :         else if ( nReqMethodIndex > _nSOMinor - MinorReleaseInitial )

  00e79	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00e7c	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  00e82	83 ea 10	 sub	 edx, 16			; 00000010H
  00e85	39 95 48 f8 ff
	ff		 cmp	 DWORD PTR _nReqMethodIndex$13[ebp], edx
  00e8b	7e 12		 jle	 SHORT $LN45@Open

; 1039 :             nReqMethodIndex = _nSOMinor - MinorReleaseInitial;

  00e8d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00e90	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00e96	83 e9 10	 sub	 ecx, 16			; 00000010H
  00e99	89 8d 48 f8 ff
	ff		 mov	 DWORD PTR _nReqMethodIndex$13[ebp], ecx
$LN45@Open:

; 1040 :         // Set the maximum method index.
; 1041 :         _nMaxMethod = s_RequiredMethodsPerRelease[ nReqMethodIndex ];

  00e9f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00ea2	8b 85 48 f8 ff
	ff		 mov	 eax, DWORD PTR _nReqMethodIndex$13[ebp]
  00ea8	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?s_RequiredMethodsPerRelease@@3PAHA[eax*4]
  00eaf	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx

; 1042 :         // Ensure that the SO supports the methods that it claims to support.
; 1043 :         if ( nMethodCount < _nMaxMethod )

  00eb5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00eb8	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR _nMethodCount$[ebp]
  00ebe	3b 82 04 01 00
	00		 cmp	 eax, DWORD PTR [edx+260]
  00ec4	7d 4d		 jge	 SHORT $LN43@Open

; 1044 :         {
; 1045 :             _nOpenResult = OPOS_OR_BADIF;

  00ec6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00ec9	c7 81 e8 00 00
	00 31 01 00 00	 mov	 DWORD PTR [ecx+232], 305 ; 00000131H

; 1046 :             bBadSO = true;

  00ed3	c6 85 5b f8 ff
	ff 01		 mov	 BYTE PTR _bBadSO$[ebp], 1

; 1047 :             DOTRACE( ( _T("-  Failed: Doesn't support all of its release's methods (%d/%d)"), OPOS_E_NOSERVICE, _nOpenResult ) );

  00eda	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00edd	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00ee3	50		 push	 eax
  00ee4	6a 68		 push	 104			; 00000068H
  00ee6	68 00 00 00 00	 push	 OFFSET $SG193943
  00eeb	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00eee	51		 push	 ecx
  00eef	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00ef4	83 c4 10	 add	 esp, 16			; 00000010H

; 1048 :             DOTRACEMETHODS( _DispIDs, _nMaxMethod );

  00ef7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00efa	8b 82 04 01 00
	00		 mov	 eax, DWORD PTR [edx+260]
  00f00	50		 push	 eax
  00f01	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f04	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00f0a	51		 push	 ecx
  00f0b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f0e	e8 00 00 00 00	 call	 ?WriteTraceMethods@COPOSDeviceMonitor@@QAEXPAJH@Z ; COPOSDeviceMonitor::WriteTraceMethods
$LN43@Open:

; 1049 :         }
; 1050 :     }
; 1051 : 
; 1052 :     // If bad SO, then fail the open.
; 1053 :     if ( bBadSO )

  00f13	0f b6 95 5b f8
	ff ff		 movzx	 edx, BYTE PTR _bBadSO$[ebp]
  00f1a	85 d2		 test	 edx, edx
  00f1c	74 54		 je	 SHORT $LN48@Open

; 1054 :     {
; 1055 :         Close( pRC );

  00f1e	8b f4		 mov	 esi, esp
  00f20	8b 45 10	 mov	 eax, DWORD PTR _pRC$[ebp]
  00f23	50		 push	 eax
  00f24	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f27	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f29	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00f2c	50		 push	 eax
  00f2d	8b 8a bc 00 00
	00		 mov	 ecx, DWORD PTR [edx+188]
  00f33	ff d1		 call	 ecx
  00f35	3b f4		 cmp	 esi, esp
  00f37	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1056 :         *pRC = SetRC( OPOS_E_NOSERVICE );

  00f3c	6a 68		 push	 104			; 00000068H
  00f3e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f41	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
  00f46	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  00f49	89 02		 mov	 DWORD PTR [edx], eax

; 1057 :         return S_OK;

  00f4b	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
  00f55	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00f5a	6a 03		 push	 3
  00f5c	6a 18		 push	 24			; 00000018H
  00f5e	8d 85 c8 f8 ff
	ff		 lea	 eax, DWORD PTR _Vars$[ebp]
  00f64	50		 push	 eax
  00f65	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00f6a	8b 85 e0 f7 ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00f70	eb 6c		 jmp	 SHORT $LN50@Open
$LN48@Open:

; 1058 :     }
; 1059 : 
; 1060 :     // If CO OnFreezeEvents(TRUE) method has been called before open then freeze
; 1061 :     //   events in the SO at this time.
; 1062 :     if ( _nCOFreezeEventCount )

  00f72	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f75	83 b9 fc 00 00
	00 00		 cmp	 DWORD PTR [ecx+252], 0
  00f7c	74 0a		 je	 SHORT $LN49@Open

; 1063 :         SetCOFreezeEvents( TRUE );

  00f7e	6a 01		 push	 1
  00f80	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f83	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSDeviceMonitor@@IAEXF@Z ; COPOSDeviceMonitor::SetCOFreezeEvents
$LN49@Open:

; 1064 : 
; 1065 :     // Everything went okay, so return success.
; 1066 :     SetRC();

  00f88	6a ff		 push	 -1
  00f8a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00f8d	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 1067 :     *pRC = OPOS_SUCCESS;

  00f92	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  00f95	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1068 :     _nOpenResult = OPOS_SUCCESS;

  00f9b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00f9e	c7 80 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+232], 0

; 1069 :     DOTRACE( ( _T("-  Success (0/0)") ) );

  00fa8	68 00 00 00 00	 push	 OFFSET $SG193947
  00fad	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00fb0	51		 push	 ecx
  00fb1	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00fb6	83 c4 08	 add	 esp, 8

; 1070 :     return S_OK;

  00fb9	c7 85 dc f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  00fc3	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00fc8	6a 03		 push	 3
  00fca	6a 18		 push	 24			; 00000018H
  00fcc	8d 95 c8 f8 ff
	ff		 lea	 edx, DWORD PTR _Vars$[ebp]
  00fd2	52		 push	 edx
  00fd3	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00fd8	8b 85 dc f7 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN50@Open:

; 1071 : }

  00fde	52		 push	 edx
  00fdf	8b cd		 mov	 ecx, ebp
  00fe1	50		 push	 eax
  00fe2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN83@Open
  00fe8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00fed	58		 pop	 eax
  00fee	5a		 pop	 edx
  00fef	5f		 pop	 edi
  00ff0	5e		 pop	 esi
  00ff1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ff4	33 cd		 xor	 ecx, ebp
  00ff6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ffb	81 c4 2c 08 00
	00		 add	 esp, 2092		; 0000082cH
  01001	3b ec		 cmp	 ebp, esp
  01003	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01008	8b e5		 mov	 esp, ebp
  0100a	5d		 pop	 ebp
  0100b	c2 0c 00	 ret	 12			; 0000000cH
  0100e	66 90		 npad	 2
$LN83@Open:
  01010	17 00 00 00	 DD	 23			; 00000017H
  01014	00 00 00 00	 DD	 $LN82@Open
$LN82@Open:
  01018	f4 ff ff ff	 DD	 -12			; fffffff4H
  0101c	04 00 00 00	 DD	 4
  01020	00 00 00 00	 DD	 $LN59@Open
  01024	e4 fd ff ff	 DD	 -540			; fffffde4H
  01028	00 02 00 00	 DD	 512			; 00000200H
  0102c	00 00 00 00	 DD	 $LN60@Open
  01030	d8 fd ff ff	 DD	 -552			; fffffdd8H
  01034	04 00 00 00	 DD	 4
  01038	00 00 00 00	 DD	 $LN61@Open
  0103c	d0 fb ff ff	 DD	 -1072			; fffffbd0H
  01040	00 02 00 00	 DD	 512			; 00000200H
  01044	00 00 00 00	 DD	 $LN62@Open
  01048	c4 fb ff ff	 DD	 -1084			; fffffbc4H
  0104c	04 00 00 00	 DD	 4
  01050	00 00 00 00	 DD	 $LN63@Open
  01054	b8 fb ff ff	 DD	 -1096			; fffffbb8H
  01058	04 00 00 00	 DD	 4
  0105c	00 00 00 00	 DD	 $LN64@Open
  01060	ac fb ff ff	 DD	 -1108			; fffffbacH
  01064	04 00 00 00	 DD	 4
  01068	00 00 00 00	 DD	 $LN65@Open
  0106c	a0 f9 ff ff	 DD	 -1632			; fffff9a0H
  01070	00 02 00 00	 DD	 512			; 00000200H
  01074	00 00 00 00	 DD	 $LN66@Open
  01078	88 f9 ff ff	 DD	 -1656			; fffff988H
  0107c	10 00 00 00	 DD	 16			; 00000010H
  01080	00 00 00 00	 DD	 $LN67@Open
  01084	7c f9 ff ff	 DD	 -1668			; fffff97cH
  01088	04 00 00 00	 DD	 4
  0108c	00 00 00 00	 DD	 $LN68@Open
  01090	5c f9 ff ff	 DD	 -1700			; fffff95cH
  01094	14 00 00 00	 DD	 20			; 00000014H
  01098	00 00 00 00	 DD	 $LN69@Open
  0109c	50 f9 ff ff	 DD	 -1712			; fffff950H
  010a0	04 00 00 00	 DD	 4
  010a4	00 00 00 00	 DD	 $LN70@Open
  010a8	30 f9 ff ff	 DD	 -1744			; fffff930H
  010ac	14 00 00 00	 DD	 20			; 00000014H
  010b0	00 00 00 00	 DD	 $LN71@Open
  010b4	24 f9 ff ff	 DD	 -1756			; fffff924H
  010b8	04 00 00 00	 DD	 4
  010bc	00 00 00 00	 DD	 $LN72@Open
  010c0	18 f9 ff ff	 DD	 -1768			; fffff918H
  010c4	04 00 00 00	 DD	 4
  010c8	00 00 00 00	 DD	 $LN73@Open
  010cc	c8 f8 ff ff	 DD	 -1848			; fffff8c8H
  010d0	48 00 00 00	 DD	 72			; 00000048H
  010d4	00 00 00 00	 DD	 $LN74@Open
  010d8	bc f8 ff ff	 DD	 -1860			; fffff8bcH
  010dc	04 00 00 00	 DD	 4
  010e0	00 00 00 00	 DD	 $LN75@Open
  010e4	b0 f8 ff ff	 DD	 -1872			; fffff8b0H
  010e8	04 00 00 00	 DD	 4
  010ec	00 00 00 00	 DD	 $LN76@Open
  010f0	90 f8 ff ff	 DD	 -1904			; fffff890H
  010f4	18 00 00 00	 DD	 24			; 00000018H
  010f8	00 00 00 00	 DD	 $LN77@Open
  010fc	78 f8 ff ff	 DD	 -1928			; fffff878H
  01100	10 00 00 00	 DD	 16			; 00000010H
  01104	00 00 00 00	 DD	 $LN78@Open
  01108	6c f8 ff ff	 DD	 -1940			; fffff86cH
  0110c	04 00 00 00	 DD	 4
  01110	00 00 00 00	 DD	 $LN79@Open
  01114	60 f8 ff ff	 DD	 -1952			; fffff860H
  01118	04 00 00 00	 DD	 4
  0111c	00 00 00 00	 DD	 $LN80@Open
  01120	50 f8 ff ff	 DD	 -1968			; fffff850H
  01124	04 00 00 00	 DD	 4
  01128	00 00 00 00	 DD	 $LN81@Open
$LN81@Open:
  0112c	6e		 DB	 110			; 0000006eH
  0112d	53		 DB	 83			; 00000053H
  0112e	4f		 DB	 79			; 0000004fH
  0112f	56		 DB	 86			; 00000056H
  01130	65		 DB	 101			; 00000065H
  01131	72		 DB	 114			; 00000072H
  01132	73		 DB	 115			; 00000073H
  01133	69		 DB	 105			; 00000069H
  01134	6f		 DB	 111			; 0000006fH
  01135	6e		 DB	 110			; 0000006eH
  01136	00		 DB	 0
$LN80@Open:
  01137	62		 DB	 98			; 00000062H
  01138	73		 DB	 115			; 00000073H
  01139	74		 DB	 116			; 00000074H
  0113a	72		 DB	 114			; 00000072H
  0113b	53		 DB	 83			; 00000053H
  0113c	4f		 DB	 79			; 0000004fH
  0113d	49		 DB	 73			; 00000049H
  0113e	6e		 DB	 110			; 0000006eH
  0113f	66		 DB	 102			; 00000066H
  01140	6f		 DB	 111			; 0000006fH
  01141	00		 DB	 0
$LN79@Open:
  01142	68		 DB	 104			; 00000068H
  01143	52		 DB	 82			; 00000052H
  01144	43		 DB	 67			; 00000043H
  01145	54		 DB	 84			; 00000054H
  01146	6d		 DB	 109			; 0000006dH
  01147	70		 DB	 112			; 00000070H
  01148	00		 DB	 0
$LN78@Open:
  01149	44		 DB	 68			; 00000044H
  0114a	69		 DB	 105			; 00000069H
  0114b	73		 DB	 115			; 00000073H
  0114c	70		 DB	 112			; 00000070H
  0114d	00		 DB	 0
$LN77@Open:
  0114e	56		 DB	 86			; 00000056H
  0114f	61		 DB	 97			; 00000061H
  01150	72		 DB	 114			; 00000072H
  01151	52		 DB	 82			; 00000052H
  01152	65		 DB	 101			; 00000065H
  01153	73		 DB	 115			; 00000073H
  01154	75		 DB	 117			; 00000075H
  01155	6c		 DB	 108			; 0000006cH
  01156	74		 DB	 116			; 00000074H
  01157	00		 DB	 0
$LN76@Open:
  01158	44		 DB	 68			; 00000044H
  01159	69		 DB	 105			; 00000069H
  0115a	73		 DB	 115			; 00000073H
  0115b	70		 DB	 112			; 00000070H
  0115c	49		 DB	 73			; 00000049H
  0115d	44		 DB	 68			; 00000044H
  0115e	00		 DB	 0
$LN75@Open:
  0115f	70		 DB	 112			; 00000070H
  01160	4d		 DB	 77			; 0000004dH
  01161	4e		 DB	 78			; 0000004eH
  01162	00		 DB	 0
$LN74@Open:
  01163	56		 DB	 86			; 00000056H
  01164	61		 DB	 97			; 00000061H
  01165	72		 DB	 114			; 00000072H
  01166	73		 DB	 115			; 00000073H
  01167	00		 DB	 0
$LN73@Open:
  01168	70		 DB	 112			; 00000070H
  01169	44		 DB	 68			; 00000044H
  0116a	69		 DB	 105			; 00000069H
  0116b	73		 DB	 115			; 00000073H
  0116c	70		 DB	 112			; 00000070H
  0116d	61		 DB	 97			; 00000061H
  0116e	74		 DB	 116			; 00000074H
  0116f	63		 DB	 99			; 00000063H
  01170	68		 DB	 104			; 00000068H
  01171	00		 DB	 0
$LN72@Open:
  01172	70		 DB	 112			; 00000070H
  01173	4d		 DB	 77			; 0000004dH
  01174	4e		 DB	 78			; 0000004eH
  01175	00		 DB	 0
$LN71@Open:
  01176	4d		 DB	 77			; 0000004dH
  01177	4e		 DB	 78			; 0000004eH
  01178	00		 DB	 0
$LN70@Open:
  01179	70		 DB	 112			; 00000070H
  0117a	4d		 DB	 77			; 0000004dH
  0117b	4e		 DB	 78			; 0000004eH
  0117c	00		 DB	 0
$LN69@Open:
  0117d	4d		 DB	 77			; 0000004dH
  0117e	4e		 DB	 78			; 0000004eH
  0117f	00		 DB	 0
$LN68@Open:
  01180	70		 DB	 112			; 00000070H
  01181	55		 DB	 85			; 00000055H
  01182	6e		 DB	 110			; 0000006eH
  01183	6b		 DB	 107			; 0000006bH
  01184	6e		 DB	 110			; 0000006eH
  01185	6f		 DB	 111			; 0000006fH
  01186	77		 DB	 119			; 00000077H
  01187	6e		 DB	 110			; 0000006eH
  01188	00		 DB	 0
$LN67@Open:
  01189	53		 DB	 83			; 00000053H
  0118a	4f		 DB	 79			; 0000004fH
  0118b	43		 DB	 67			; 00000043H
  0118c	6c		 DB	 108			; 0000006cH
  0118d	61		 DB	 97			; 00000061H
  0118e	73		 DB	 115			; 00000073H
  0118f	73		 DB	 115			; 00000073H
  01190	49		 DB	 73			; 00000049H
  01191	44		 DB	 68			; 00000044H
  01192	00		 DB	 0
$LN66@Open:
  01193	73		 DB	 115			; 00000073H
  01194	53		 DB	 83			; 00000053H
  01195	4f		 DB	 79			; 0000004fH
  01196	50		 DB	 80			; 00000050H
  01197	72		 DB	 114			; 00000072H
  01198	6f		 DB	 111			; 0000006fH
  01199	67		 DB	 103			; 00000067H
  0119a	49		 DB	 73			; 00000049H
  0119b	44		 DB	 68			; 00000044H
  0119c	00		 DB	 0
$LN65@Open:
  0119d	68		 DB	 104			; 00000068H
  0119e	53		 DB	 83			; 00000053H
  0119f	65		 DB	 101			; 00000065H
  011a0	72		 DB	 114			; 00000072H
  011a1	76		 DB	 118			; 00000076H
  011a2	69		 DB	 105			; 00000069H
  011a3	63		 DB	 99			; 00000063H
  011a4	65		 DB	 101			; 00000065H
  011a5	4b		 DB	 75			; 0000004bH
  011a6	65		 DB	 101			; 00000065H
  011a7	79		 DB	 121			; 00000079H
  011a8	00		 DB	 0
$LN64@Open:
  011a9	64		 DB	 100			; 00000064H
  011aa	77		 DB	 119			; 00000077H
  011ab	53		 DB	 83			; 00000053H
  011ac	69		 DB	 105			; 00000069H
  011ad	7a		 DB	 122			; 0000007aH
  011ae	65		 DB	 101			; 00000065H
  011af	00		 DB	 0
$LN63@Open:
  011b0	64		 DB	 100			; 00000064H
  011b1	77		 DB	 119			; 00000077H
  011b2	54		 DB	 84			; 00000054H
  011b3	79		 DB	 121			; 00000079H
  011b4	70		 DB	 112			; 00000070H
  011b5	65		 DB	 101			; 00000065H
  011b6	00		 DB	 0
$LN62@Open:
  011b7	73		 DB	 115			; 00000073H
  011b8	7a		 DB	 122			; 0000007aH
  011b9	50		 DB	 80			; 00000050H
  011ba	68		 DB	 104			; 00000068H
  011bb	79		 DB	 121			; 00000079H
  011bc	73		 DB	 115			; 00000073H
  011bd	69		 DB	 105			; 00000069H
  011be	63		 DB	 99			; 00000063H
  011bf	61		 DB	 97			; 00000061H
  011c0	6c		 DB	 108			; 0000006cH
  011c1	44		 DB	 68			; 00000044H
  011c2	65		 DB	 101			; 00000065H
  011c3	76		 DB	 118			; 00000076H
  011c4	69		 DB	 105			; 00000069H
  011c5	63		 DB	 99			; 00000063H
  011c6	65		 DB	 101			; 00000065H
  011c7	4e		 DB	 78			; 0000004eH
  011c8	61		 DB	 97			; 00000061H
  011c9	6d		 DB	 109			; 0000006dH
  011ca	65		 DB	 101			; 00000065H
  011cb	00		 DB	 0
$LN61@Open:
  011cc	68		 DB	 104			; 00000068H
  011cd	42		 DB	 66			; 00000042H
  011ce	61		 DB	 97			; 00000061H
  011cf	73		 DB	 115			; 00000073H
  011d0	65		 DB	 101			; 00000065H
  011d1	4b		 DB	 75			; 0000004bH
  011d2	65		 DB	 101			; 00000065H
  011d3	79		 DB	 121			; 00000079H
  011d4	00		 DB	 0
$LN60@Open:
  011d5	73		 DB	 115			; 00000073H
  011d6	7a		 DB	 122			; 0000007aH
  011d7	42		 DB	 66			; 00000042H
  011d8	61		 DB	 97			; 00000061H
  011d9	73		 DB	 115			; 00000073H
  011da	65		 DB	 101			; 00000065H
  011db	4b		 DB	 75			; 0000004bH
  011dc	65		 DB	 101			; 00000065H
  011dd	79		 DB	 121			; 00000079H
  011de	00		 DB	 0
$LN59@Open:
  011df	68		 DB	 104			; 00000068H
  011e0	52		 DB	 82			; 00000052H
  011e1	43		 DB	 67			; 00000043H
  011e2	00		 DB	 0
?Open@COPOSDeviceMonitor@@UAGJPA_WPAJ@Z ENDP		; COPOSDeviceMonitor::Open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -100						; size = 4
_hRC$ = -92						; size = 4
_Vars$ = -80						; size = 72
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_Command$ = 12						; size = 4
_pData$ = 16						; size = 4
_pString$ = 20						; size = 4
_pRC$ = 24						; size = 4
?DirectIO@COPOSDeviceMonitor@@UAGJJPAJPAPA_W0@Z PROC	; COPOSDeviceMonitor::DirectIO

; 1195 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	57		 push	 edi
  00007	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000a	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1196 :     OposVariant Vars[3];

  00020	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  00025	6a 03		 push	 3
  00027	6a 18		 push	 24			; 00000018H
  00029	8d 45 b0	 lea	 eax, DWORD PTR _Vars$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 1197 :     HRESULT hRC = S_OK;

  00032	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 1198 :     Vars[2].SetLONG( Command );

  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _Command$[ebp]
  0003c	51		 push	 ecx
  0003d	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00042	d1 e2		 shl	 edx, 1
  00044	8d 4c 15 b0	 lea	 ecx, DWORD PTR _Vars$[ebp+edx]
  00048	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1199 :     Vars[1].SetLONG_Ptr( pData, hRC );

  0004d	8d 45 a4	 lea	 eax, DWORD PTR _hRC$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 10	 mov	 ecx, DWORD PTR _pData$[ebp]
  00054	51		 push	 ecx
  00055	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0005a	c1 e2 00	 shl	 edx, 0
  0005d	8d 4c 15 b0	 lea	 ecx, DWORD PTR _Vars$[ebp+edx]
  00061	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 1200 :     Vars[0].SetBSTR_InOutPtr( pString, hRC );

  00066	8d 45 a4	 lea	 eax, DWORD PTR _hRC$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d 14	 mov	 ecx, DWORD PTR _pString$[ebp]
  0006d	51		 push	 ecx
  0006e	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00073	6b c2 00	 imul	 eax, edx, 0
  00076	8d 4c 05 b0	 lea	 ecx, DWORD PTR _Vars$[ebp+eax]
  0007a	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 1201 :     return DoInvoke( DEBUGPARAM("DirectIO") hRC, Vars, 3, nDIDirectIO, pRC );

  0007f	6a 01		 push	 1
  00081	8b 4d 18	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00084	51		 push	 ecx
  00085	6a 0a		 push	 10			; 0000000aH
  00087	6a 03		 push	 3
  00089	8d 55 b0	 lea	 edx, DWORD PTR _Vars$[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 a4	 mov	 eax, DWORD PTR _hRC$[ebp]
  00090	50		 push	 eax
  00091	68 00 00 00 00	 push	 OFFSET $SG194017
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0009e	89 45 9c	 mov	 DWORD PTR $T1[ebp], eax
  000a1	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  000a6	6a 03		 push	 3
  000a8	6a 18		 push	 24			; 00000018H
  000aa	8d 4d b0	 lea	 ecx, DWORD PTR _Vars$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  000b3	8b 45 9c	 mov	 eax, DWORD PTR $T1[ebp]

; 1202 : }

  000b6	52		 push	 edx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	50		 push	 eax
  000ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@DirectIO
  000c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c5	58		 pop	 eax
  000c6	5a		 pop	 edx
  000c7	5f		 pop	 edi
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	83 c4 64	 add	 esp, 100		; 00000064H
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 14 00	 ret	 20			; 00000014H
  000e2	66 90		 npad	 2
$LN6@DirectIO:
  000e4	02 00 00 00	 DD	 2
  000e8	00 00 00 00	 DD	 $LN5@DirectIO
$LN5@DirectIO:
  000ec	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000f0	48 00 00 00	 DD	 72			; 00000048H
  000f4	00 00 00 00	 DD	 $LN3@DirectIO
  000f8	a4 ff ff ff	 DD	 -92			; ffffffa4H
  000fc	04 00 00 00	 DD	 4
  00100	00 00 00 00	 DD	 $LN4@DirectIO
$LN4@DirectIO:
  00104	68		 DB	 104			; 00000068H
  00105	52		 DB	 82			; 00000052H
  00106	43		 DB	 67			; 00000043H
  00107	00		 DB	 0
$LN3@DirectIO:
  00108	56		 DB	 86			; 00000056H
  00109	61		 DB	 97			; 00000061H
  0010a	72		 DB	 114			; 00000072H
  0010b	73		 DB	 115			; 00000073H
  0010c	00		 DB	 0
?DirectIO@COPOSDeviceMonitor@@UAGJJPAJPAPA_W0@Z ENDP	; COPOSDeviceMonitor::DirectIO
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_hRC$ = -4						; size = 4
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?Close@COPOSDeviceMonitor@@UAGJPAJ@Z PROC		; COPOSDeviceMonitor::Close

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1077 :     SetRC();

  0000c	6a ff		 push	 -1
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 1078 : 
; 1079 :     // If not opened, set return code.
; 1080 :     if ( ! _bOpened )

  00016	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00019	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  00020	85 c9		 test	 ecx, ecx
  00022	75 24		 jne	 SHORT $LN2@Close

; 1081 :     {
; 1082 :         *pRC = OPOS_E_CLOSED;

  00024	8b 55 0c	 mov	 edx, DWORD PTR _pRC$[ebp]
  00027	c7 02 65 00 00
	00		 mov	 DWORD PTR [edx], 101	; 00000065H

; 1083 :         DOTRACE( ( _T("*Close [Function]  RC=%d"), *pRC ) );

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	51		 push	 ecx
  00033	68 00 00 00 00	 push	 OFFSET $SG193959
  00038	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1084 :         return S_OK;

  00044	33 c0		 xor	 eax, eax
  00046	eb 75		 jmp	 SHORT $LN1@Close
$LN2@Close:

; 1085 :     }
; 1086 : 
; 1087 :     // Events are no longer legal.
; 1088 :     EventPreCloseRelease();

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?EventPreCloseRelease@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventPreCloseRelease

; 1089 : 
; 1090 :     // Call down into Service Object to close the control.
; 1091 :     HRESULT hRC = DoInvoke( DEBUGPARAM("Close-CloseService") S_OK, NULL, 0, nDICloseService, pRC, false );

  00050	6a 00		 push	 0
  00052	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  00055	50		 push	 eax
  00056	6a 09		 push	 9
  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	68 00 00 00 00	 push	 OFFSET $SG193960
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  0006b	89 45 fc	 mov	 DWORD PTR _hRC$[ebp], eax

; 1092 : 
; 1093 :     // Release the connection to the Service Object.
; 1094 :     _pService->Release();

  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00077	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  00080	8b 12		 mov	 edx, DWORD PTR [edx]
  00082	8b f4		 mov	 esi, esp
  00084	51		 push	 ecx
  00085	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00088	ff d0		 call	 eax
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1095 : 
; 1096 :     // Close down events.
; 1097 :     EventClose();

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?EventClose@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventClose

; 1098 : 
; 1099 :     // We are now closed.
; 1100 :     _bOpened = false;

  00099	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	c6 81 e4 00 00
	00 00		 mov	 BYTE PTR [ecx+228], 0

; 1101 : 
; 1102 :     DOTRACE( ( _T("*Close [Function]  RC=%d"), *pRC ) );

  000a3	8b 55 0c	 mov	 edx, DWORD PTR _pRC$[ebp]
  000a6	8b 02		 mov	 eax, DWORD PTR [edx]
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET $SG193961
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1103 :     return hRC;

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _hRC$[ebp]
$LN1@Close:

; 1104 : }

  000bd	5e		 pop	 esi
  000be	83 c4 04	 add	 esp, 4
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
?Close@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP		; COPOSDeviceMonitor::Close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pRC$ = 12						; size = 4
?ClearInput@COPOSDeviceMonitor@@UAGJPAJ@Z PROC		; COPOSDeviceMonitor::ClearInput

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1185 :     return DoInvoke( DEBUGPARAM("ClearInput") S_OK, NULL, 0, nDIClearInput, pRC );

  00003	6a 01		 push	 1
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pRC$[ebp]
  00008	50		 push	 eax
  00009	6a 08		 push	 8
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	68 00 00 00 00	 push	 OFFSET $SG194003
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke

; 1186 : }

  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?ClearInput@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP		; COPOSDeviceMonitor::ClearInput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_Timeout$ = 12						; size = 4
_pRC$ = 16						; size = 4
?ClaimDevice@COPOSDeviceMonitor@@UAGJJPAJ@Z PROC	; COPOSDeviceMonitor::ClaimDevice

; 1111 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1112 :     SetRC();

  00026	6a ff		 push	 -1
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 1113 : 
; 1114 :     // If not opened, set return code.
; 1115 :     if ( ! _bOpened )

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  0003a	85 c9		 test	 ecx, ecx
  0003c	75 1e		 jne	 SHORT $LN2@ClaimDevic

; 1116 :     {
; 1117 :         *pRC = OPOS_E_CLOSED;

  0003e	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  00041	c7 02 65 00 00
	00		 mov	 DWORD PTR [edx], 101	; 00000065H

; 1118 :         DOTRACEV( ( _T("*ClaimDevice [Function] -- Closed") ) );

  00047	68 00 00 00 00	 push	 OFFSET $SG193971
  0004c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00055	83 c4 08	 add	 esp, 8

; 1119 :         return S_OK;

  00058	33 c0		 xor	 eax, eax
  0005a	eb 47		 jmp	 SHORT $LN1@ClaimDevic
$LN2@ClaimDevic:

; 1120 :     }
; 1121 : 
; 1122 :     // Initialize so that events are allowed.
; 1123 :     EventClaim();

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?EventClaim@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventClaim

; 1124 : 
; 1125 :     // Call down into the Service Object to execute this method.
; 1126 :     OposVariant Var;

  00064	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00067	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1127 :     Var.SetLONG( Timeout );

  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _Timeout$[ebp]
  0006f	51		 push	 ecx
  00070	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00073	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1128 :     return DoInvoke( DEBUGPARAM("ClaimDevice") S_OK, &Var, 1, nDIClaimDevice, pRC, false );

  00078	6a 00		 push	 0
  0007a	8b 55 10	 mov	 edx, DWORD PTR _pRC$[ebp]
  0007d	52		 push	 edx
  0007e	6a 07		 push	 7
  00080	6a 01		 push	 1
  00082	8d 45 e4	 lea	 eax, DWORD PTR _Var$[ebp]
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	68 00 00 00 00	 push	 OFFSET $SG193973
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00095	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
  00098	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0009b	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  000a0	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
$LN1@ClaimDevic:

; 1129 : }

  000a3	52		 push	 edx
  000a4	8b cd		 mov	 ecx, ebp
  000a6	50		 push	 eax
  000a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ClaimDevic
  000ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b2	58		 pop	 eax
  000b3	5a		 pop	 edx
  000b4	83 c4 24	 add	 esp, 36			; 00000024H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 0c 00	 ret	 12			; 0000000cH
$LN6@ClaimDevic:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN5@ClaimDevic
$LN5@ClaimDevic:
  000cc	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000d0	18 00 00 00	 DD	 24			; 00000018H
  000d4	00 00 00 00	 DD	 $LN4@ClaimDevic
$LN4@ClaimDevic:
  000d8	56		 DB	 86			; 00000056H
  000d9	61		 DB	 97			; 00000061H
  000da	72		 DB	 114			; 00000072H
  000db	00		 DB	 0
?ClaimDevice@COPOSDeviceMonitor@@UAGJJPAJ@Z ENDP	; COPOSDeviceMonitor::ClaimDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 4
_Var$ = -28						; size = 24
_this$ = 8						; size = 4
_Level$ = 12						; size = 4
_pRC$ = 16						; size = 4
?CheckHealth@COPOSDeviceMonitor@@UAGJJPAJ@Z PROC	; COPOSDeviceMonitor::CheckHealth

; 1174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1175 :     OposVariant Var;

  00026	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00029	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 1176 :     Var.SetLONG( Level );

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _Level$[ebp]
  00031	50		 push	 eax
  00032	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  00035	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 1177 :     return DoInvoke( DEBUGPARAM("CheckHealth") S_OK, &Var, 1, nDICheckHealth, pRC );

  0003a	6a 01		 push	 1
  0003c	8b 4d 10	 mov	 ecx, DWORD PTR _pRC$[ebp]
  0003f	51		 push	 ecx
  00040	6a 06		 push	 6
  00042	6a 01		 push	 1
  00044	8d 55 e4	 lea	 edx, DWORD PTR _Var$[ebp]
  00047	52		 push	 edx
  00048	6a 00		 push	 0
  0004a	68 00 00 00 00	 push	 OFFSET $SG193997
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ; COPOSDeviceMonitor::DoInvoke
  00057	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
  0005a	8d 4d e4	 lea	 ecx, DWORD PTR _Var$[ebp]
  0005d	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  00062	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]

; 1178 : }

  00065	52		 push	 edx
  00066	8b cd		 mov	 ecx, ebp
  00068	50		 push	 eax
  00069	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@CheckHealt
  0006f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00074	58		 pop	 eax
  00075	5a		 pop	 edx
  00076	83 c4 24	 add	 esp, 36			; 00000024H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
  00086	66 90		 npad	 2
$LN5@CheckHealt:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@CheckHealt
$LN4@CheckHealt:
  00090	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00094	18 00 00 00	 DD	 24			; 00000018H
  00098	00 00 00 00	 DD	 $LN3@CheckHealt
$LN3@CheckHealt:
  0009c	56		 DB	 86			; 00000056H
  0009d	61		 DB	 97			; 00000061H
  0009e	72		 DB	 114			; 00000072H
  0009f	00		 DB	 0
?CheckHealth@COPOSDeviceMonitor@@UAGJJPAJ@Z ENDP	; COPOSDeviceMonitor::CheckHealth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapUpdateFirmware$ = 12				; size = 4
?get_CapUpdateFirmware@COPOSDeviceMonitor@@UAGJPAF@Z PROC ; COPOSDeviceMonitor::get_CapUpdateFirmware

; 1618 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :     return GetOposProp( DEBUGPARAM("CapUpdateFirmware") PIDX_CapUpdateFirmware, pCapUpdateFirmware, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pCapUpdateFirmware$[ebp]
  00008	50		 push	 eax
  00009	68 f9 01 00 00	 push	 505			; 000001f9H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194298
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1620 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_CapUpdateFirmware@COPOSDeviceMonitor@@UAGJPAF@Z ENDP ; COPOSDeviceMonitor::get_CapUpdateFirmware
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapCompareFirmwareVersion$ = 12			; size = 4
?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UAGJPAF@Z PROC ; COPOSDeviceMonitor::get_CapCompareFirmwareVersion

; 1611 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :     return GetOposProp( DEBUGPARAM("CapCompareFirmwareVersion") PIDX_CapCompareFirmwareVersion, pCapCompareFirmwareVersion, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pCapCompareFirmwareVersion$[ebp]
  00008	50		 push	 eax
  00009	68 f8 01 00 00	 push	 504			; 000001f8H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194293
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1613 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_CapCompareFirmwareVersion@COPOSDeviceMonitor@@UAGJPAF@Z ENDP ; COPOSDeviceMonitor::get_CapCompareFirmwareVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapUpdateStatistics$ = 12				; size = 4
?get_CapUpdateStatistics@COPOSDeviceMonitor@@UAGJPAF@Z PROC ; COPOSDeviceMonitor::get_CapUpdateStatistics

; 1604 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1605 :     return GetOposProp( DEBUGPARAM("CapUpdateStatistics") PIDX_CapUpdateStatistics, pCapUpdateStatistics, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pCapUpdateStatistics$[ebp]
  00008	50		 push	 eax
  00009	68 f7 01 00 00	 push	 503			; 000001f7H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194288
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1606 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_CapUpdateStatistics@COPOSDeviceMonitor@@UAGJPAF@Z ENDP ; COPOSDeviceMonitor::get_CapUpdateStatistics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapStatisticsReporting$ = 12				; size = 4
?get_CapStatisticsReporting@COPOSDeviceMonitor@@UAGJPAF@Z PROC ; COPOSDeviceMonitor::get_CapStatisticsReporting

; 1597 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1598 :     return GetOposProp( DEBUGPARAM("CapStatisticsReporting") PIDX_CapStatisticsReporting, pCapStatisticsReporting, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pCapStatisticsReporting$[ebp]
  00008	50		 push	 eax
  00009	68 f6 01 00 00	 push	 502			; 000001f6H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194283
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1599 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_CapStatisticsReporting@COPOSDeviceMonitor@@UAGJPAF@Z ENDP ; COPOSDeviceMonitor::get_CapStatisticsReporting
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceName$ = 12					; size = 4
?get_DeviceName@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC	; COPOSDeviceMonitor::get_DeviceName

; 1590 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1591 :     return GetOposProp( DEBUGPARAM("DeviceName") PIDX_DeviceName, pDeviceName, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDeviceName$[ebp]
  00008	50		 push	 eax
  00009	68 43 42 0f 00	 push	 1000003			; 000f4243H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194278
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1592 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_DeviceName@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP	; COPOSDeviceMonitor::get_DeviceName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceDescription$ = 12				; size = 4
?get_DeviceDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC ; COPOSDeviceMonitor::get_DeviceDescription

; 1583 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1584 :     return GetOposProp( DEBUGPARAM("DeviceDescription") PIDX_DeviceDescription, pDeviceDescription, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDeviceDescription$[ebp]
  00008	50		 push	 eax
  00009	68 42 42 0f 00	 push	 1000002			; 000f4242H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194273
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1585 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_DeviceDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP ; COPOSDeviceMonitor::get_DeviceDescription
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pServiceObjectVersion$ = 12				; size = 4
?get_ServiceObjectVersion@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::get_ServiceObjectVersion

; 1576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1577 :     return GetOposProp( DEBUGPARAM("ServiceObjectVersion") PIDX_ServiceObjectVersion, pServiceObjectVersion, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pServiceObjectVersion$[ebp]
  00008	50		 push	 eax
  00009	6a 08		 push	 8
  0000b	68 00 00 00 00	 push	 OFFSET $SG194268
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1578 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_ServiceObjectVersion@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::get_ServiceObjectVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pServiceObjectDescription$ = 12			; size = 4
?get_ServiceObjectDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC ; COPOSDeviceMonitor::get_ServiceObjectDescription

; 1569 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1570 :     return GetOposProp( DEBUGPARAM("ServiceObjectDescription") PIDX_ServiceObjectDescription, pServiceObjectDescription, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pServiceObjectDescription$[ebp]
  00008	50		 push	 eax
  00009	68 44 42 0f 00	 push	 1000004			; 000f4244H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194263
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1571 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_ServiceObjectDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP ; COPOSDeviceMonitor::get_ServiceObjectDescription
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pControlObjectVersion$ = 12				; size = 4
?get_ControlObjectVersion@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::get_ControlObjectVersion

; 1431 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1432 :     *pControlObjectVersion = g_ControlVersion;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pControlObjectVersion$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_ControlVersion@@3JA ; g_ControlVersion
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 1433 :     DOTRACEV( ( _T("*ControlObjectVersion [Get]: %d"), g_ControlVersion ) );

  0000e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_ControlVersion@@3JA ; g_ControlVersion
  00014	52		 push	 edx
  00015	68 00 00 00 00	 push	 OFFSET $SG194172
  0001a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1434 :     return S_OK;

  00026	33 c0		 xor	 eax, eax

; 1435 : }

  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?get_ControlObjectVersion@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::get_ControlObjectVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 20
_this$ = 8						; size = 4
_pControlObjectDescription$ = 12			; size = 4
?get_ControlObjectDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC ; COPOSDeviceMonitor::get_ControlObjectDescription

; 1422 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1423 :     *pControlObjectDescription = ::SysAllocString( _CW(g_ControlDescription) );

  0001b	68 00 00 00 00	 push	 OFFSET ?g_ControlDescription@@3PADA ; g_ControlDescription
  00020	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  00023	e8 00 00 00 00	 call	 ??0_CW@@QAE@PBD@Z	; _CW::_CW
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ??B_CW@@QAEPB_WXZ	; _CW::operator wchar_t const *
  0002f	8b f4		 mov	 esi, esp
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocString@4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _pControlObjectDescription$[ebp]
  00042	89 01		 mov	 DWORD PTR [ecx], eax
  00044	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  00047	e8 00 00 00 00	 call	 ??1_CW@@QAE@XZ		; _CW::~_CW

; 1424 :     DOTRACEV( ( _T("*ControlObjectDescription [Get]: <%hs>"), g_ControlDescription ) );

  0004c	68 00 00 00 00	 push	 OFFSET ?g_ControlDescription@@3PADA ; g_ControlDescription
  00051	68 00 00 00 00	 push	 OFFSET $SG194166
  00056	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1425 :     return S_OK;

  00062	33 c0		 xor	 eax, eax

; 1426 : }

  00064	5e		 pop	 esi
  00065	83 c4 14	 add	 esp, 20			; 00000014H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?get_ControlObjectDescription@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP ; COPOSDeviceMonitor::get_ControlObjectDescription
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pState$ = 12						; size = 4
?get_State@COPOSDeviceMonitor@@UAGJPAJ@Z PROC		; COPOSDeviceMonitor::get_State

; 1407 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1408 :     if ( ! _bOpened )                           // If not open,

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  0000d	85 c9		 test	 ecx, ecx
  0000f	75 1c		 jne	 SHORT $LN2@get_State

; 1409 :     {
; 1410 :         *pState = OPOS_S_CLOSED;                //   then return "closed".

  00011	8b 55 0c	 mov	 edx, DWORD PTR _pState$[ebp]
  00014	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 1411 :         DOTRACEV( ( _T("*State [Get] -- Closed") ) );

  0001a	68 00 00 00 00	 push	 OFFSET $SG194158
  0001f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00028	83 c4 08	 add	 esp, 8

; 1412 :     }

  0002b	eb 15		 jmp	 SHORT $LN3@get_State
$LN2@get_State:

; 1413 :     else
; 1414 :         GetOposProp( DEBUGPARAM("State") PIDX_State, pState ); // Otherwise go to SO.

  0002d	6a 00		 push	 0
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _pState$[ebp]
  00032	51		 push	 ecx
  00033	6a 09		 push	 9
  00035	68 00 00 00 00	 push	 OFFSET $SG194159
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp
$LN3@get_State:

; 1415 : 
; 1416 :     return S_OK;

  00042	33 c0		 xor	 eax, eax

; 1417 : }

  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?get_State@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP		; COPOSDeviceMonitor::get_State
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pResultCodeExtended$ = 12				; size = 4
?get_ResultCodeExtended@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::get_ResultCodeExtended

; 1562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1563 :     return GetOposProp( DEBUGPARAM("ResultCodeExtended") PIDX_ResultCodeExtended, pResultCodeExtended, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pResultCodeExtended$[ebp]
  00008	50		 push	 eax
  00009	6a 07		 push	 7
  0000b	68 00 00 00 00	 push	 OFFSET $SG194258
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1564 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_ResultCodeExtended@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::get_ResultCodeExtended
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pResultCode$ = 12					; size = 4
?get_ResultCode@COPOSDeviceMonitor@@UAGJPAJ@Z PROC	; COPOSDeviceMonitor::get_ResultCode

; 1387 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1388 :     if ( ! _bOpened )                               // If not open,

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  0000d	85 c9		 test	 ecx, ecx
  0000f	75 1c		 jne	 SHORT $LN2@get_Result

; 1389 :     {
; 1390 :         *pResultCode = OPOS_E_CLOSED;               //   then return "closed".

  00011	8b 55 0c	 mov	 edx, DWORD PTR _pResultCode$[ebp]
  00014	c7 02 65 00 00
	00		 mov	 DWORD PTR [edx], 101	; 00000065H

; 1391 :         DOTRACEV( ( _T("*ResultCode [Get] -- Closed") ) );

  0001a	68 00 00 00 00	 push	 OFFSET $SG194146
  0001f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00028	83 c4 08	 add	 esp, 8

; 1392 :     }

  0002b	eb 4c		 jmp	 SHORT $LN3@get_Result
$LN2@get_Result:

; 1393 :     else if ( _nCOResultCode != -1 )                // If the control object has to report a status,

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 b9 f4 00 00
	00 ff		 cmp	 DWORD PTR [ecx+244], -1
  00037	74 2b		 je	 SHORT $LN4@get_Result

; 1394 :     {
; 1395 :         *pResultCode = _nCOResultCode;              //   then return it.

  00039	8b 55 0c	 mov	 edx, DWORD PTR _pResultCode$[ebp]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  00045	89 0a		 mov	 DWORD PTR [edx], ecx

; 1396 :         DOTRACEV( ( _T("*ResultCode [Get]: %d -- from CO"), _nCOResultCode ) );

  00047	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 82 f4 00 00
	00		 mov	 eax, DWORD PTR [edx+244]
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET $SG194149
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1397 :     }

  00062	eb 15		 jmp	 SHORT $LN3@get_Result
$LN4@get_Result:

; 1398 :     else
; 1399 :         GetOposProp( DEBUGPARAM("ResultCode") PIDX_ResultCode, pResultCode );// Otherwise go to SO.

  00064	6a 00		 push	 0
  00066	8b 55 0c	 mov	 edx, DWORD PTR _pResultCode$[ebp]
  00069	52		 push	 edx
  0006a	6a 06		 push	 6
  0006c	68 00 00 00 00	 push	 OFFSET $SG194150
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp
$LN3@get_Result:

; 1400 : 
; 1401 :     return S_OK;

  00079	33 c0		 xor	 eax, eax

; 1402 : }

  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
?get_ResultCode@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP	; COPOSDeviceMonitor::get_ResultCode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pPowerState$ = 12					; size = 4
?get_PowerState@COPOSDeviceMonitor@@UAGJPAJ@Z PROC	; COPOSDeviceMonitor::get_PowerState

; 1555 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1556 :     return GetOposProp( DEBUGPARAM("PowerState") PIDX_PowerState, pPowerState, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pPowerState$[ebp]
  00008	50		 push	 eax
  00009	6a 0e		 push	 14			; 0000000eH
  0000b	68 00 00 00 00	 push	 OFFSET $SG194253
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1557 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_PowerState@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP	; COPOSDeviceMonitor::get_PowerState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_PowerNotify$ = 12					; size = 4
?put_PowerNotify@COPOSDeviceMonitor@@UAGJJ@Z PROC	; COPOSDeviceMonitor::put_PowerNotify

; 1548 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1549 :     return SetOposProp( DEBUGPARAM("PowerNotify") PIDX_PowerNotify, PowerNotify, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _PowerNotify$[ebp]
  00008	50		 push	 eax
  00009	6a 0d		 push	 13			; 0000000dH
  0000b	68 00 00 00 00	 push	 OFFSET $SG194248
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJJJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1550 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?put_PowerNotify@COPOSDeviceMonitor@@UAGJJ@Z ENDP	; COPOSDeviceMonitor::put_PowerNotify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pPowerNotify$ = 12					; size = 4
?get_PowerNotify@COPOSDeviceMonitor@@UAGJPAJ@Z PROC	; COPOSDeviceMonitor::get_PowerNotify

; 1541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1542 :     return GetOposProp( DEBUGPARAM("PowerNotify") PIDX_PowerNotify, pPowerNotify, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pPowerNotify$[ebp]
  00008	50		 push	 eax
  00009	6a 0d		 push	 13			; 0000000dH
  0000b	68 00 00 00 00	 push	 OFFSET $SG194243
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1543 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_PowerNotify@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP	; COPOSDeviceMonitor::get_PowerNotify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_FreezeEvents$ = 12					; size = 2
?put_FreezeEvents@COPOSDeviceMonitor@@UAGJF@Z PROC	; COPOSDeviceMonitor::put_FreezeEvents

; 1356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1357 :     SetRC();

  00003	6a ff		 push	 -1
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00008	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 1358 : 
; 1359 :     // If not opened, do nothing.
; 1360 :     if ( ! _bOpened )

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  00017	85 c9		 test	 ecx, ecx
  00019	75 15		 jne	 SHORT $LN2@put_Freeze

; 1361 :     {
; 1362 :         DOTRACEV( ( _T("*FreezeEvents [Set] -- Closed") ) );

  0001b	68 00 00 00 00	 push	 OFFSET $SG194134
  00020	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00029	83 c4 08	 add	 esp, 8

; 1363 :         return S_OK;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 4c		 jmp	 SHORT $LN1@put_Freeze
$LN2@put_Freeze:

; 1364 :     }
; 1365 : 
; 1366 :     if ( FreezeEvents )

  00030	0f bf 45 0c	 movsx	 eax, WORD PTR _FreezeEvents$[ebp]
  00034	85 c0		 test	 eax, eax
  00036	74 22		 je	 SHORT $LN3@put_Freeze

; 1367 :     {
; 1368 :         // Call down into the Service Object first to set the property value.
; 1369 :         SetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, FreezeEvents ); // First tell the SO the new state.

  00038	6a 00		 push	 0
  0003a	0f b7 4d 0c	 movzx	 ecx, WORD PTR _FreezeEvents$[ebp]
  0003e	51		 push	 ecx
  0003f	6a 04		 push	 4
  00041	68 00 00 00 00	 push	 OFFSET $SG194137
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1370 :         _bFreezeState = true;                           // Then update ours.

  0004e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00051	c6 82 00 01 00
	00 01		 mov	 BYTE PTR [edx+256], 1

; 1371 :     }

  00058	eb 20		 jmp	 SHORT $LN4@put_Freeze
$LN3@put_Freeze:

; 1372 :     else
; 1373 :     {
; 1374 :         // Update our state first, then tell the SO.
; 1375 :         // This avoids a lockup in the event firing object's DoEvent() routine
; 1376 :         //   that would occur if the SO calls an event from its property update method.
; 1377 :         _bFreezeState = false;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 1378 :         SetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, FreezeEvents );

  00064	6a 00		 push	 0
  00066	0f b7 4d 0c	 movzx	 ecx, WORD PTR _FreezeEvents$[ebp]
  0006a	51		 push	 ecx
  0006b	6a 04		 push	 4
  0006d	68 00 00 00 00	 push	 OFFSET $SG194138
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z ; COPOSDeviceMonitor::SetOposProp
$LN4@put_Freeze:

; 1379 :     }
; 1380 : 
; 1381 :     return S_OK;

  0007a	33 c0		 xor	 eax, eax
$LN1@put_Freeze:

; 1382 : }

  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?put_FreezeEvents@COPOSDeviceMonitor@@UAGJF@Z ENDP	; COPOSDeviceMonitor::put_FreezeEvents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pFreezeEvents$ = 12					; size = 4
?get_FreezeEvents@COPOSDeviceMonitor@@UAGJPAF@Z PROC	; COPOSDeviceMonitor::get_FreezeEvents

; 1349 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1350 :     return GetOposProp( DEBUGPARAM("FreezeEvents") PIDX_FreezeEvents, pFreezeEvents );

  00003	6a 00		 push	 0
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pFreezeEvents$[ebp]
  00008	50		 push	 eax
  00009	6a 04		 push	 4
  0000b	68 00 00 00 00	 push	 OFFSET $SG194126
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1351 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_FreezeEvents@COPOSDeviceMonitor@@UAGJPAF@Z ENDP	; COPOSDeviceMonitor::get_FreezeEvents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_DeviceEnabled$ = 12					; size = 2
?put_DeviceEnabled@COPOSDeviceMonitor@@UAGJF@Z PROC	; COPOSDeviceMonitor::put_DeviceEnabled

; 1534 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1535 :     return SetOposProp( DEBUGPARAM("DeviceEnabled") PIDX_DeviceEnabled, DeviceEnabled, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	0f b7 45 0c	 movzx	 eax, WORD PTR _DeviceEnabled$[ebp]
  00009	50		 push	 eax
  0000a	6a 03		 push	 3
  0000c	68 00 00 00 00	 push	 OFFSET $SG194238
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1536 : }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?put_DeviceEnabled@COPOSDeviceMonitor@@UAGJF@Z ENDP	; COPOSDeviceMonitor::put_DeviceEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDeviceEnabled$ = 12					; size = 4
?get_DeviceEnabled@COPOSDeviceMonitor@@UAGJPAF@Z PROC	; COPOSDeviceMonitor::get_DeviceEnabled

; 1527 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 :     return GetOposProp( DEBUGPARAM("DeviceEnabled") PIDX_DeviceEnabled, pDeviceEnabled, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDeviceEnabled$[ebp]
  00008	50		 push	 eax
  00009	6a 03		 push	 3
  0000b	68 00 00 00 00	 push	 OFFSET $SG194233
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1529 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_DeviceEnabled@COPOSDeviceMonitor@@UAGJPAF@Z ENDP	; COPOSDeviceMonitor::get_DeviceEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_DataEventEnabled$ = 12					; size = 2
?put_DataEventEnabled@COPOSDeviceMonitor@@UAGJF@Z PROC	; COPOSDeviceMonitor::put_DataEventEnabled

; 1520 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1521 :     return SetOposProp( DEBUGPARAM("DataEventEnabled") PIDX_DataEventEnabled, DataEventEnabled, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	0f b7 45 0c	 movzx	 eax, WORD PTR _DataEventEnabled$[ebp]
  00009	50		 push	 eax
  0000a	6a 02		 push	 2
  0000c	68 00 00 00 00	 push	 OFFSET $SG194228
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1522 : }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?put_DataEventEnabled@COPOSDeviceMonitor@@UAGJF@Z ENDP	; COPOSDeviceMonitor::put_DataEventEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDataEventEnabled$ = 12				; size = 4
?get_DataEventEnabled@COPOSDeviceMonitor@@UAGJPAF@Z PROC ; COPOSDeviceMonitor::get_DataEventEnabled

; 1513 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1514 :     return GetOposProp( DEBUGPARAM("DataEventEnabled") PIDX_DataEventEnabled, pDataEventEnabled, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDataEventEnabled$[ebp]
  00008	50		 push	 eax
  00009	6a 02		 push	 2
  0000b	68 00 00 00 00	 push	 OFFSET $SG194223
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1515 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_DataEventEnabled@COPOSDeviceMonitor@@UAGJPAF@Z ENDP ; COPOSDeviceMonitor::get_DataEventEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDataCount$ = 12					; size = 4
?get_DataCount@COPOSDeviceMonitor@@UAGJPAJ@Z PROC	; COPOSDeviceMonitor::get_DataCount

; 1506 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1507 :     return GetOposProp( DEBUGPARAM("DataCount") PIDX_DataCount, pDataCount, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pDataCount$[ebp]
  00008	50		 push	 eax
  00009	6a 0c		 push	 12			; 0000000cH
  0000b	68 00 00 00 00	 push	 OFFSET $SG194218
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1508 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_DataCount@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP	; COPOSDeviceMonitor::get_DataCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pClaimed$ = 12						; size = 4
?get_Claimed@COPOSDeviceMonitor@@UAGJPAF@Z PROC		; COPOSDeviceMonitor::get_Claimed

; 1499 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1500 :     return GetOposProp( DEBUGPARAM("Claimed") PIDX_Claimed, pClaimed, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClaimed$[ebp]
  00008	50		 push	 eax
  00009	6a 01		 push	 1
  0000b	68 00 00 00 00	 push	 OFFSET $SG194213
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1501 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_Claimed@COPOSDeviceMonitor@@UAGJPAF@Z ENDP		; COPOSDeviceMonitor::get_Claimed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCheckHealthText$ = 12					; size = 4
?get_CheckHealthText@COPOSDeviceMonitor@@UAGJPAPA_W@Z PROC ; COPOSDeviceMonitor::get_CheckHealthText

; 1492 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1493 :     return GetOposProp( DEBUGPARAM("CheckHealthText") PIDX_CheckHealthText, pCheckHealthText, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pCheckHealthText$[ebp]
  00008	50		 push	 eax
  00009	68 41 42 0f 00	 push	 1000001			; 000f4241H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194208
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1494 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_CheckHealthText@COPOSDeviceMonitor@@UAGJPAPA_W@Z ENDP ; COPOSDeviceMonitor::get_CheckHealthText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pCapPowerReporting$ = 12				; size = 4
?get_CapPowerReporting@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::get_CapPowerReporting

; 1485 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1486 :     return GetOposProp( DEBUGPARAM("CapPowerReporting") PIDX_CapPowerReporting, pCapPowerReporting, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pCapPowerReporting$[ebp]
  00008	50		 push	 eax
  00009	68 f5 01 00 00	 push	 501			; 000001f5H
  0000e	68 00 00 00 00	 push	 OFFSET $SG194203
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1487 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?get_CapPowerReporting@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::get_CapPowerReporting
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_BinaryConversion$ = 12					; size = 4
?put_BinaryConversion@COPOSDeviceMonitor@@UAGJJ@Z PROC	; COPOSDeviceMonitor::put_BinaryConversion

; 1477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1478 :     IFDEBUG( _nBinaryConversion = BinaryConversion);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _BinaryConversion$[ebp]
  00009	89 88 64 01 00
	00		 mov	 DWORD PTR [eax+356], ecx

; 1479 :     return SetOposProp( DEBUGPARAM("BinaryConversion") PIDX_BinaryConversion, BinaryConversion, 16 /*MinorVersion*/ );

  0000f	6a 10		 push	 16			; 00000010H
  00011	8b 55 0c	 mov	 edx, DWORD PTR _BinaryConversion$[ebp]
  00014	52		 push	 edx
  00015	6a 0b		 push	 11			; 0000000bH
  00017	68 00 00 00 00	 push	 OFFSET $SG194198
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJJJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1480 : }

  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?put_BinaryConversion@COPOSDeviceMonitor@@UAGJJ@Z ENDP	; COPOSDeviceMonitor::put_BinaryConversion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pBinaryConversion$ = 12				; size = 4
?get_BinaryConversion@COPOSDeviceMonitor@@UAGJPAJ@Z PROC ; COPOSDeviceMonitor::get_BinaryConversion

; 1470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1471 :     return GetOposProp( DEBUGPARAM("BinaryConversion") PIDX_BinaryConversion, pBinaryConversion, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pBinaryConversion$[ebp]
  00008	50		 push	 eax
  00009	6a 0b		 push	 11			; 0000000bH
  0000b	68 00 00 00 00	 push	 OFFSET $SG194193
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1472 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_BinaryConversion@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP ; COPOSDeviceMonitor::get_BinaryConversion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_AutoDisable$ = 12					; size = 2
?put_AutoDisable@COPOSDeviceMonitor@@UAGJF@Z PROC	; COPOSDeviceMonitor::put_AutoDisable

; 1463 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1464 :     return SetOposProp( DEBUGPARAM("AutoDisable") PIDX_AutoDisable, AutoDisable, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	0f b7 45 0c	 movzx	 eax, WORD PTR _AutoDisable$[ebp]
  00009	50		 push	 eax
  0000a	6a 0a		 push	 10			; 0000000aH
  0000c	68 00 00 00 00	 push	 OFFSET $SG194188
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z ; COPOSDeviceMonitor::SetOposProp

; 1465 : }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?put_AutoDisable@COPOSDeviceMonitor@@UAGJF@Z ENDP	; COPOSDeviceMonitor::put_AutoDisable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pAutoDisable$ = 12					; size = 4
?get_AutoDisable@COPOSDeviceMonitor@@UAGJPAF@Z PROC	; COPOSDeviceMonitor::get_AutoDisable

; 1456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1457 :     return GetOposProp( DEBUGPARAM("AutoDisable") PIDX_AutoDisable, pAutoDisable, 16 /*MinorVersion*/ );

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pAutoDisable$[ebp]
  00008	50		 push	 eax
  00009	6a 0a		 push	 10			; 0000000aH
  0000b	68 00 00 00 00	 push	 OFFSET $SG194183
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ; COPOSDeviceMonitor::GetOposProp

; 1458 : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?get_AutoDisable@COPOSDeviceMonitor@@UAGJPAF@Z ENDP	; COPOSDeviceMonitor::get_AutoDisable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pOpenResult$ = 12					; size = 4
?get_OpenResult@COPOSDeviceMonitor@@UAGJPAJ@Z PROC	; COPOSDeviceMonitor::get_OpenResult

; 1440 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1441 :     *pOpenResult = _nOpenResult;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pOpenResult$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 1442 :     DOTRACEV( ( _T("*OpenResult [Get]: %d"), _nOpenResult ) );

  00011	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  0001a	51		 push	 ecx
  0001b	68 00 00 00 00	 push	 OFFSET $SG194178
  00020	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1443 :     return S_OK;

  0002c	33 c0		 xor	 eax, eax

; 1444 : }

  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?get_OpenResult@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP	; COPOSDeviceMonitor::get_OpenResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pProcessID$ = 12					; size = 4
?SOProcessID@COPOSDeviceMonitor@@UAGJPAJ@Z PROC		; COPOSDeviceMonitor::SOProcessID

; 1157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1158 :     *pProcessID = GetCurrentProcessId();

  00004	8b f4		 mov	 esi, esp
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  0000c	3b f4		 cmp	 esi, esp
  0000e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _pProcessID$[ebp]
  00016	89 01		 mov	 DWORD PTR [ecx], eax

; 1159 :     DOTRACEV( ( _T("*SOProcessID: 0x%X"), *pProcessID ) );

  00018	8b 55 0c	 mov	 edx, DWORD PTR _pProcessID$[ebp]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET $SG193988
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1160 :     return S_OK;

  0002f	33 c0		 xor	 eax, eax

; 1161 : }

  00031	5e		 pop	 esi
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?SOProcessID@COPOSDeviceMonitor@@UAGJPAJ@Z ENDP		; COPOSDeviceMonitor::SOProcessID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ PROC	; COPOSDeviceMonitor::FireEventCleanup, COMDAT
; _this$ = ecx

; 630  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 631  :         // Clear event in progress flag, set delivered flag, and set completion event.
; 632  :         _Event_bEventInProgress = false;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 80 6e 01 00
	00 00		 mov	 BYTE PTR [eax+366], 0

; 633  :         _Event_bEventDelivered = true;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c6 81 6f 01 00
	00 01		 mov	 BYTE PTR [ecx+367], 1

; 634  :         ::SetEvent( _Event_FiringDoneEvent );

  00023	8b f4		 mov	 esi, esp
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 635  :     }

  0003c	5e		 pop	 esi
  0003d	83 c4 04	 add	 esp, 4
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ ENDP	; COPOSDeviceMonitor::FireEventCleanup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ PROC	; COPOSDeviceMonitor::FireEventSetup, COMDAT
; _this$ = ecx

; 606  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 607  :         // If events are not legal (open/claim not done for exclusive, or open
; 608  :         //   not done for shared device), then return without firing.
; 609  :         if ( ! _Event_bEventsLegal ||
; 610  :         // If events are frozen, then return without firing.
; 611  :              _bFreezeState || _nCOFreezeEventCount != 0 )

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	0f b6 88 6d 01
	00 00		 movzx	 ecx, BYTE PTR [eax+365]
  00019	85 c9		 test	 ecx, ecx
  0001b	74 1a		 je	 SHORT $LN3@FireEventS
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR [edx+256]
  00027	85 c0		 test	 eax, eax
  00029	75 0c		 jne	 SHORT $LN3@FireEventS
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 b9 fc 00 00
	00 00		 cmp	 DWORD PTR [ecx+252], 0
  00035	74 1d		 je	 SHORT $LN2@FireEventS
$LN3@FireEventS:

; 612  :         {
; 613  :             ::SetEvent( _Event_FiringDoneEvent );

  00037	8b f4		 mov	 esi, esp
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  00042	50		 push	 eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 614  :             return false;

  00050	32 c0		 xor	 al, al
  00052	eb 0c		 jmp	 SHORT $LN1@FireEventS
$LN2@FireEventS:

; 615  :         }
; 616  : 
; 617  :         // If events are legal and not frozen,
; 618  :         //   set event in progress flag, and return true.
; 619  :         _Event_bEventInProgress = true;

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	c6 81 6e 01 00
	00 01		 mov	 BYTE PTR [ecx+366], 1

; 620  :         return true;

  0005e	b0 01		 mov	 al, 1
$LN1@FireEventS:

; 621  :     }

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ ENDP	; COPOSDeviceMonitor::FireEventSetup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventWindowProc@COPOSDeviceMonitor@@IAGJIIJ@Z
_TEXT	SEGMENT
tv64 = -8						; size = 4
_bProcessed$ = -1					; size = 1
_this$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?EventWindowProc@COPOSDeviceMonitor@@IAGJIIJ@Z PROC	; COPOSDeviceMonitor::EventWindowProc, COMDAT

; 536  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 537  :         bool bProcessed = true;

  00014	c6 45 ff 01	 mov	 BYTE PTR _bProcessed$[ebp], 1

; 538  : 
; 539  :         switch ( uMsg )

  00018	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0001b	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  00021	81 e9 64 04 00
	00		 sub	 ecx, 1124		; 00000464H
  00027	89 4d f8	 mov	 DWORD PTR tv64[ebp], ecx
  0002a	83 7d f8 04	 cmp	 DWORD PTR tv64[ebp], 4
  0002e	0f 87 26 01 00
	00		 ja	 $LN12@EventWindo
  00034	8b 55 f8	 mov	 edx, DWORD PTR tv64[ebp]
  00037	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN14@EventWindo[edx*4]
$LN4@EventWindo:

; 540  :         {
; 541  :         case WMU_DATA_EVENT:
; 542  :             {
; 543  :                 if ( FireEventSetup() )

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ ; COPOSDeviceMonitor::FireEventSetup
  00046	0f b6 c0	 movzx	 eax, al
  00049	85 c0		 test	 eax, eax
  0004b	74 2b		 je	 SHORT $LN5@EventWindo

; 544  :                 {
; 545  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DataEvent") ) );

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@DCPEEBJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0005b	83 c4 08	 add	 esp, 8

; 546  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_DataEvent(

  0005e	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  00061	52		 push	 edx
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  0006b	e8 00 00 00 00	 call	 ?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent

; 547  :                         (long) wParam );
; 548  :                     FireEventCleanup();

  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::FireEventCleanup
$LN5@EventWindo:

; 549  :                 }
; 550  :                 break;

  00078	e9 e1 00 00 00	 jmp	 $LN2@EventWindo
$LN6@EventWindo:

; 551  :             }
; 552  : 
; 553  :         case WMU_DIRECT_IO_EVENT:
; 554  :             {
; 555  :                 if ( FireEventSetup() )

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ ; COPOSDeviceMonitor::FireEventSetup
  00085	0f b6 c0	 movzx	 eax, al
  00088	85 c0		 test	 eax, eax
  0008a	74 39		 je	 SHORT $LN7@EventWindo

; 556  :                 {
; 557  :                     DOTRACEV( ( _T("*EventWindowProc: Firing DirectIOEvent") ) );

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@JKFBLFHJ@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0009a	83 c4 08	 add	 esp, 8

; 558  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_DirectIOEvent(

  0009d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  000a6	50		 push	 eax
  000a7	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  000ae	52		 push	 edx
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  000b8	e8 00 00 00 00	 call	 ?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJPAJPAPA_W@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent

; 559  :                         (long) wParam, (long*) lParam, _Event_DIO_pString );
; 560  :                     FireEventCleanup();

  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	e8 00 00 00 00	 call	 ?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::FireEventCleanup
$LN7@EventWindo:

; 561  :                 }
; 562  :                 break;

  000c5	e9 94 00 00 00	 jmp	 $LN2@EventWindo
$LN8@EventWindo:

; 563  :             }
; 564  : 
; 565  :         case WMU_ERROR_EVENT:
; 566  :             {
; 567  :                 if ( FireEventSetup() )

  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ ; COPOSDeviceMonitor::FireEventSetup
  000d2	0f b6 c0	 movzx	 eax, al
  000d5	85 c0		 test	 eax, eax
  000d7	74 43		 je	 SHORT $LN9@EventWindo

; 568  :                 {
; 569  :                     DOTRACEV( ( _T("*EventWindowProc: Firing ErrorEvent") ) );

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@OGEHNNLE@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  000e7	83 c4 08	 add	 esp, 8

; 570  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_ErrorEvent (

  000ea	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	8b 82 84 01 00
	00		 mov	 eax, DWORD PTR [edx+388]
  000f3	50		 push	 eax
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	8b 91 80 01 00
	00		 mov	 edx, DWORD PTR [ecx+384]
  000fd	52		 push	 edx
  000fe	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00101	50		 push	 eax
  00102	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00105	51		 push	 ecx
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  0010f	e8 00 00 00 00	 call	 ?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJJJPAJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent

; 571  :                         (long) wParam, (long) lParam, _Event_Err_ErrorLocus, _Event_Err_pErrorResponse );
; 572  :                     FireEventCleanup();

  00114	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::FireEventCleanup
$LN9@EventWindo:

; 573  :                 }
; 574  :                 break;

  0011c	eb 40		 jmp	 SHORT $LN2@EventWindo
$LN10@EventWindo:

; 575  :             }
; 576  : 
; 577  :         case WMU_STATUS_UPDATE_EVENT:
; 578  :             {
; 579  :                 if ( FireEventSetup() )

  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	e8 00 00 00 00	 call	 ?FireEventSetup@COPOSDeviceMonitor@@IAE_NXZ ; COPOSDeviceMonitor::FireEventSetup
  00126	0f b6 d0	 movzx	 edx, al
  00129	85 d2		 test	 edx, edx
  0012b	74 2b		 je	 SHORT $LN11@EventWindo

; 580  :                 {
; 581  :                     DOTRACEV( ( _T("*EventWindowProc: Firing StatusUpdateEvent") ) );

  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@KGPDBNHF@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAP?$AAr?$AAo@
  00132	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0013b	83 c4 08	 add	 esp, 8

; 582  :                     CProxy_IOPOSEvents< COPOSDeviceMonitor >::Fire_StatusUpdateEvent(

  0013e	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00141	51		 push	 ecx
  00142	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  0014b	e8 00 00 00 00	 call	 ?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent

; 583  :                         (long) wParam );
; 584  :                     FireEventCleanup();

  00150	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	e8 00 00 00 00	 call	 ?FireEventCleanup@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::FireEventCleanup
$LN11@EventWindo:

; 585  :                 }
; 586  :                 break;

  00158	eb 04		 jmp	 SHORT $LN2@EventWindo
$LN12@EventWindo:

; 587  :             }
; 588  : 
; 589  :         default:
; 590  :             {
; 591  :                 bProcessed = false;

  0015a	c6 45 ff 00	 mov	 BYTE PTR _bProcessed$[ebp], 0
$LN2@EventWindo:

; 592  :                 break;
; 593  :             }
; 594  :         }
; 595  : 
; 596  :         return bProcessed;

  0015e	0f b6 45 ff	 movzx	 eax, BYTE PTR _bProcessed$[ebp]

; 597  :     }

  00162	83 c4 08	 add	 esp, 8
  00165	3b ec		 cmp	 ebp, esp
  00167	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 10 00	 ret	 16			; 00000010H
  00172	66 90		 npad	 2
$LN14@EventWindo:
  00174	00 00 00 00	 DD	 $LN4@EventWindo
  00178	00 00 00 00	 DD	 $LN6@EventWindo
  0017c	00 00 00 00	 DD	 $LN8@EventWindo
  00180	00 00 00 00	 DD	 $LN12@EventWindo
  00184	00 00 00 00	 DD	 $LN10@EventWindo
?EventWindowProc@COPOSDeviceMonitor@@IAGJIIJ@Z ENDP	; COPOSDeviceMonitor::EventWindowProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?s_EventWindowProc@COPOSDeviceMonitor@@KGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_pThis$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?s_EventWindowProc@COPOSDeviceMonitor@@KGJPAUHWND__@@IIJ@Z PROC ; COPOSDeviceMonitor::s_EventWindowProc, COMDAT

; 497  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 498  :         COPOSDeviceMonitor* pThis;
; 499  : 
; 500  :         // On window creation, save our window instance into user window space.
; 501  :         if ( uMsg == WM_CREATE )

  0000c	83 7d 0c 01	 cmp	 DWORD PTR _uMsg$[ebp], 1
  00010	75 1c		 jne	 SHORT $LN2@s_EventWin

; 502  :         {
; 503  :             pThis = (COPOSDeviceMonitor*) ((LPCREATESTRUCT) lParam)->lpCreateParams;

  00012	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	89 4d fc	 mov	 DWORD PTR _pThis$[ebp], ecx

; 504  :             ::SetWindowLongPtr( hwnd, 0, (LONG_PTR) pThis );

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _pThis$[ebp]
  0001d	52		 push	 edx
  0001e	6a 00		 push	 0
  00020	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?SetWindowLongPtrW@@YAJPAUHWND__@@HJ@Z ; SetWindowLongPtrW
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  :         }

  0002c	eb 34		 jmp	 SHORT $LN3@s_EventWin
$LN2@s_EventWin:

; 506  : 
; 507  :         // If other message, give our class a chance to handle.
; 508  :         else
; 509  :         {
; 510  :             pThis = (COPOSDeviceMonitor*) ::GetWindowLongPtr( hwnd, 0 );

  0002e	6a 00		 push	 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?GetWindowLongPtrW@@YAJPAUHWND__@@H@Z ; GetWindowLongPtrW
  00039	83 c4 08	 add	 esp, 8
  0003c	89 45 fc	 mov	 DWORD PTR _pThis$[ebp], eax

; 511  :             if ( pThis != 0 &&

  0003f	83 7d fc 00	 cmp	 DWORD PTR _pThis$[ebp], 0
  00043	74 1d		 je	 SHORT $LN3@s_EventWin
  00045	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00048	52		 push	 edx
  00049	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _uMsg$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 fc	 mov	 edx, DWORD PTR _pThis$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?EventWindowProc@COPOSDeviceMonitor@@IAGJIIJ@Z ; COPOSDeviceMonitor::EventWindowProc
  0005a	85 c0		 test	 eax, eax
  0005c	74 04		 je	 SHORT $LN3@s_EventWin

; 512  :                  pThis->EventWindowProc( uMsg, wParam, lParam ) )
; 513  :                     return 0;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 1f		 jmp	 SHORT $LN1@s_EventWin
$LN3@s_EventWin:

; 514  :         }
; 515  : 
; 516  :         // Unless handled by our class method, pass on to default processing.
; 517  :         return ::DefWindowProc( hwnd, uMsg, wParam, lParam );

  00062	8b f4		 mov	 esi, esp
  00064	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00067	50		 push	 eax
  00068	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  0006f	52		 push	 edx
  00070	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcW@16
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@s_EventWin:

; 518  :     }

  00081	5e		 pop	 esi
  00082	83 c4 04	 add	 esp, 4
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 10 00	 ret	 16			; 00000010H
?s_EventWindowProc@COPOSDeviceMonitor@@KGJPAUHWND__@@IIJ@Z ENDP ; COPOSDeviceMonitor::s_EventWindowProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventUninit@COPOSDeviceMonitor@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EventUninit@COPOSDeviceMonitor@@IAEXXZ PROC		; COPOSDeviceMonitor::EventUninit, COMDAT
; _this$ = ecx

; 268  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  :         if ( _Event_hEventWnd != 0 )

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  00019	74 34		 je	 SHORT $LN2@EventUnini

; 270  :             CMVERIFY( ::DestroyWindow( _Event_hEventWnd ) != 0 );

  0001b	8b f4		 mov	 esi, esp
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 91 78 01 00
	00		 mov	 edx, DWORD PTR [ecx+376]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	85 c0		 test	 eax, eax
  00036	75 17		 jne	 SHORT $LN2@EventUnini
  00038	68 0e 01 00 00	 push	 270			; 0000010eH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1FC@INBMHOIJ@?$AA?3?$AA?3?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@
  00047	e8 00 00 00 00	 call	 ?_assert@@YAXPB_W0I@Z	; _assert
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@EventUnini:

; 271  : 
; 272  :         // If last instance of this CO being destroyed, then
; 273  :         //   unregister the hidden window class.
; 274  :         if ( s_nInstances == 0 )

  0004f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA, 0 ; COPOSDeviceMonitor::s_nInstances
  00056	75 3a		 jne	 SHORT $LN3@EventUnini

; 275  :             CMVERIFY( ::UnregisterClass( g_WindowName, _Module.GetModuleInstance() ) != 0 );

  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?_Module@@3VCComModule@ATL@@A ; _Module
  0005d	e8 00 00 00 00	 call	 ?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CComModule::GetModuleInstance
  00062	8b f4		 mov	 esi, esp
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET ?g_WindowName@@3PA_WA ; g_WindowName
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassW@8
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	85 c0		 test	 eax, eax
  00079	75 17		 jne	 SHORT $LN3@EventUnini
  0007b	68 13 01 00 00	 push	 275			; 00000113H
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@JGLBMEDC@?$AA?3?$AA?3?$AAU?$AAn?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAC?$AAl?$AAa@
  0008a	e8 00 00 00 00	 call	 ?_assert@@YAXPB_W0I@Z	; _assert
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@EventUnini:

; 276  : 
; 277  :         if ( _Event_FiringDoneEvent != 0 )

  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	83 ba 70 01 00
	00 00		 cmp	 DWORD PTR [edx+368], 0
  0009c	74 34		 je	 SHORT $LN4@EventUnini

; 278  :             CMVERIFY( ::CloseHandle( _Event_FiringDoneEvent ) != 0 );

  0009e	8b f4		 mov	 esi, esp
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  000a9	51		 push	 ecx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	85 c0		 test	 eax, eax
  000b9	75 17		 jne	 SHORT $LN4@EventUnini
  000bb	68 16 01 00 00	 push	 278			; 00000116H
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@NNNDFBMJ@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@
  000ca	e8 00 00 00 00	 call	 ?_assert@@YAXPB_W0I@Z	; _assert
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@EventUnini:

; 279  :         if ( _Event_DoEventMutex != 0 )

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  000dc	74 34		 je	 SHORT $LN1@EventUnini

; 280  :             CMVERIFY( ::CloseHandle( _Event_DoEventMutex ) != 0 );

  000de	8b f4		 mov	 esi, esp
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	8b 91 74 01 00
	00		 mov	 edx, DWORD PTR [ecx+372]
  000e9	52		 push	 edx
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000f0	3b f4		 cmp	 esi, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	85 c0		 test	 eax, eax
  000f9	75 17		 jne	 SHORT $LN1@EventUnini
  000fb	68 18 01 00 00	 push	 280			; 00000118H
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@CAEAEALH@?$AA?3?$AA?3?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$CI?$AA?5@
  0010a	e8 00 00 00 00	 call	 ?_assert@@YAXPB_W0I@Z	; _assert
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@EventUnini:

; 281  :     }

  00112	5e		 pop	 esi
  00113	83 c4 04	 add	 esp, 4
  00116	3b ec		 cmp	 ebp, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
?EventUninit@COPOSDeviceMonitor@@IAEXXZ ENDP		; COPOSDeviceMonitor::EventUninit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventClose@COPOSDeviceMonitor@@IAEXXZ
_TEXT	SEGMENT
_msg$ = -36						; size = 28
_this$ = -4						; size = 4
?EventClose@COPOSDeviceMonitor@@IAEXXZ PROC		; COPOSDeviceMonitor::EventClose, COMDAT
; _this$ = ecx

; 246  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  :         DOTRACEV( ( _T("*EventClose") ) );

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_1BI@IOGKIMIM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAo?$AAs?$AAe@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0002a	83 c4 08	 add	 esp, 8

; 248  : 
; 249  :         _Event_bOpen = false;

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	c6 81 6c 01 00
	00 00		 mov	 BYTE PTR [ecx+364], 0
$LN2@EventClose:

; 250  :         // Just in case any undelivered event messages are queued for our window, toss them.
; 251  :         MSG msg;
; 252  :         while ( 0 != ::PeekMessage(

  00037	8b f4		 mov	 esi, esp
  00039	6a 01		 push	 1
  0003b	68 ff 7f 00 00	 push	 32767			; 00007fffH
  00040	68 00 04 00 00	 push	 1024			; 00000400H
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  0004e	50		 push	 eax
  0004f	8d 4d dc	 lea	 ecx, DWORD PTR _msg$[ebp]
  00052	51		 push	 ecx
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageW@20
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	85 c0		 test	 eax, eax
  00062	74 02		 je	 SHORT $LN1@EventClose

; 253  :                   &msg,                     // pointer to structure for message
; 254  :                   _Event_hEventWnd,         // handle to window
; 255  :                   WM_USER, 0x7FFF,          // message filtering: retrieve user messages
; 256  :                   PM_REMOVE )               // removal flags
; 257  :               )
; 258  :             ;

  00064	eb d1		 jmp	 SHORT $LN2@EventClose
$LN1@EventClose:

; 259  :     }

  00066	52		 push	 edx
  00067	8b cd		 mov	 ecx, ebp
  00069	50		 push	 eax
  0006a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@EventClose
  00070	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00075	58		 pop	 eax
  00076	5a		 pop	 edx
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	83 c4 28	 add	 esp, 40			; 00000028H
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
  00087	90		 npad	 1
$LN7@EventClose:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN6@EventClose
$LN6@EventClose:
  00090	dc ff ff ff	 DD	 -36			; ffffffdcH
  00094	1c 00 00 00	 DD	 28			; 0000001cH
  00098	00 00 00 00	 DD	 $LN5@EventClose
$LN5@EventClose:
  0009c	6d		 DB	 109			; 0000006dH
  0009d	73		 DB	 115			; 00000073H
  0009e	67		 DB	 103			; 00000067H
  0009f	00		 DB	 0
?EventClose@COPOSDeviceMonitor@@IAEXXZ ENDP		; COPOSDeviceMonitor::EventClose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventPreCloseRelease@COPOSDeviceMonitor@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EventPreCloseRelease@COPOSDeviceMonitor@@IAEXXZ PROC	; COPOSDeviceMonitor::EventPreCloseRelease, COMDAT
; _this$ = ecx

; 221  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 222  :         DOTRACEV( ( _T("*EventPreCloseRelease") ) );

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_1CM@JMADAJDC@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AAR@
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0001d	83 c4 08	 add	 esp, 8

; 223  : 
; 224  :         // The following two items must be in this order to avoid race
; 225  :         //   condition for breaking out of "DoEvent":
; 226  :         //  - Events are no longer legal.
; 227  :         _Event_bEventsLegal = false;

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c6 81 6d 01 00
	00 00		 mov	 BYTE PTR [ecx+365], 0

; 228  :         //  - In case an OPOS event is being fired, set Win32 event to cause
; 229  :         //    "DoEvent" to break out of its wait.
; 230  :         ::SetEvent( _Event_FiringDoneEvent );

  0002a	8b f4		 mov	 esi, esp
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 231  : 
; 232  :         // If an event is in progress when this is called, flag an app bug.
; 233  :         //   (This can only occur if the Close or Release is called from a thread
; 234  :         //    other than the main app thread, or if it is called from the
; 235  :         //    event handler.)
; 236  :         CMASSERT( ! _Event_bEventInProgress );

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	0f b6 91 6e 01
	00 00		 movzx	 edx, BYTE PTR [ecx+366]
  0004d	85 d2		 test	 edx, edx
  0004f	74 17		 je	 SHORT $LN1@EventPreCl
  00051	68 ec 00 00 00	 push	 236			; 000000ecH
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@GKFDAPNO@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1DE@EPLGDCDL@?$AA?$CB?$AA?5?$AA_?$AAE?$AAv?$AAe?$AAn?$AAt?$AA_?$AAb?$AAE?$AAv?$AAe?$AAn?$AAt@
  00060	e8 00 00 00 00	 call	 ?_assert@@YAXPB_W0I@Z	; _assert
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@EventPreCl:

; 237  :     }

  00068	5e		 pop	 esi
  00069	83 c4 04	 add	 esp, 4
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?EventPreCloseRelease@COPOSDeviceMonitor@@IAEXXZ ENDP	; COPOSDeviceMonitor::EventPreCloseRelease
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventClaim@COPOSDeviceMonitor@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EventClaim@COPOSDeviceMonitor@@IAEXXZ PROC		; COPOSDeviceMonitor::EventClaim, COMDAT
; _this$ = ecx

; 205  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 206  :         DOTRACEV( ( _T("*EventClaim") ) );

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_1BI@PMBJJHKM@?$AA?$CK?$AAE?$AAv?$AAe?$AAn?$AAt?$AAC?$AAl?$AAa?$AAi?$AAm@
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0001c	83 c4 08	 add	 esp, 8

; 207  : 
; 208  :         // Initialize so that events are allowed.
; 209  :         //   (Do in "Claim" in case a call to "Release" disabled events.
; 210  :         //    We now need to reenable.)
; 211  :         _Event_bEventsLegal = true;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c6 81 6d 01 00
	00 01		 mov	 BYTE PTR [ecx+365], 1

; 212  :     }

  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?EventClaim@COPOSDeviceMonitor@@IAEXXZ ENDP		; COPOSDeviceMonitor::EventClaim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventOpen@COPOSDeviceMonitor@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EventOpen@COPOSDeviceMonitor@@IAEXXZ PROC		; COPOSDeviceMonitor::EventOpen, COMDAT
; _this$ = ecx

; 189  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 190  :         // Initialize so that events are allowed.
; 191  :         _Event_bEventsLegal = true;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c6 80 6d 01 00
	00 01		 mov	 BYTE PTR [eax+365], 1

; 192  :         _Event_bEventInProgress = false;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c6 81 6e 01 00
	00 00		 mov	 BYTE PTR [ecx+366], 0

; 193  :         _bFreezeState = false;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c6 82 00 01 00
	00 00		 mov	 BYTE PTR [edx+256], 0

; 194  :         _Event_bOpen = true;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c6 80 6c 01 00
	00 01		 mov	 BYTE PTR [eax+364], 1

; 195  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?EventOpen@COPOSDeviceMonitor@@IAEXXZ ENDP		; COPOSDeviceMonitor::EventOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorEvent.h
;	COMDAT ?EventInit@COPOSDeviceMonitor@@IAEJXZ
_TEXT	SEGMENT
tv143 = -60						; size = 4
tv136 = -56						; size = 4
_WndClass$1 = -48					; size = 40
_this$ = -4						; size = 4
?EventInit@COPOSDeviceMonitor@@IAEJXZ PROC		; COPOSDeviceMonitor::EventInit, COMDAT
; _this$ = ecx

; 106  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000c	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 107  :         _Event_bOpen = false;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c6 80 6c 01 00
	00 00		 mov	 BYTE PTR [eax+364], 0

; 108  : 
; 109  :         // This function must be called by the thread that creates the OCX.
; 110  :         // Then these functions will ensure that events from the SO are fired
; 111  :         //   on the thread that creates the OCX.
; 112  :         _Event_ControlThreadID = ::GetCurrentThreadId();

  00026	8b f4		 mov	 esi, esp
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 81 68 01 00
	00		 mov	 DWORD PTR [ecx+360], eax

; 113  : 
; 114  :         // Perform some initialization in case of a failure below,
; 115  :         //   so that EventUninit will not fail.
; 116  :         _Event_hEventWnd = 0;

  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	c7 82 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+376], 0

; 117  :         _Event_FiringDoneEvent = 0;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 80 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+368], 0

; 118  :         _Event_DoEventMutex = 0;

  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	c7 81 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+372], 0

; 119  : 
; 120  :         // If first instance of this CO being created, then
; 121  :         //   register a class for our hidden window.
; 122  :         if ( s_nInstances == 0 )

  00065	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA, 0 ; COPOSDeviceMonitor::s_nInstances
  0006c	0f 85 8d 00 00
	00		 jne	 $LN2@EventInit

; 123  :         {
; 124  :             WNDCLASS WndClass =
; 125  :             {
; 126  :                 0,                              // style

  00072	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp], 0

; 127  :                 s_EventWindowProc,              // lpfnWndProc

  00079	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+4], OFFSET ?s_EventWindowProc@COPOSDeviceMonitor@@KGJPAUHWND__@@IIJ@Z ; COPOSDeviceMonitor::s_EventWindowProc

; 128  :                 0,                              // cbClsExtra

  00080	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+8], 0

; 129  :                 sizeof( void* ),                // cbWndExtra

  00087	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+12], 4

; 130  :                 _Module.GetModuleInstance(),    // hInstance

  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?_Module@@3VCComModule@ATL@@A ; _Module
  00093	e8 00 00 00 00	 call	 ?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CComModule::GetModuleInstance
  00098	89 45 e0	 mov	 DWORD PTR _WndClass$1[ebp+16], eax

; 131  :                 NULL,                           // hIcon

  0009b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+20], 0

; 132  :                 NULL,                           // hCursor

  000a2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+24], 0

; 133  :                 NULL,                           // hbrBackground

  000a9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+28], 0

; 134  :                 NULL,                           // lpszMenuName

  000b0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+32], 0

; 135  :                 g_WindowName                    // lpszClassName

  000b7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _WndClass$1[ebp+36], OFFSET ?g_WindowName@@3PA_WA ; g_WindowName

; 136  :             };
; 137  :             if ( 0 == ::RegisterClass( &WndClass ) )

  000be	8b f4		 mov	 esi, esp
  000c0	8d 55 d0	 lea	 edx, DWORD PTR _WndClass$1[ebp]
  000c3	52		 push	 edx
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassW@4
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	0f b7 c0	 movzx	 eax, ax
  000d4	85 c0		 test	 eax, eax
  000d6	75 27		 jne	 SHORT $LN2@EventInit

; 138  :             {
; 139  :                 DOTRACEERR( _T("  EventInit: Failed RegisterClass %lu\n    %s"), ::GetLastError() );

  000d8	8b f4		 mov	 esi, esp
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	50		 push	 eax
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@EJDCNMFO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 140  :                 return E_UNEXPECTED;

  000f5	b8 ff ff 00 80	 mov	 eax, -2147418113	; 8000ffffH
  000fa	e9 ed 00 00 00	 jmp	 $LN1@EventInit
$LN2@EventInit:

; 141  :             }
; 142  :         }
; 143  : 
; 144  :         // Create the hidden window for event handling.
; 145  :         _Event_hEventWnd = CreateWindowEx(

  000ff	8b f4		 mov	 esi, esp
  00101	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	51		 push	 ecx
  00105	b9 00 00 00 00	 mov	 ecx, OFFSET ?_Module@@3VCComModule@ATL@@A ; _Module
  0010a	e8 00 00 00 00	 call	 ?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CComModule::GetModuleInstance
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	6a 00		 push	 0
  00114	6a 00		 push	 0
  00116	6a 00		 push	 0
  00118	6a 00		 push	 0
  0011a	6a 00		 push	 0
  0011c	6a 00		 push	 0
  0011e	68 00 00 00 00	 push	 OFFSET ?g_WindowName@@3PA_WA ; g_WindowName
  00123	68 00 00 00 00	 push	 OFFSET ?g_WindowName@@3PA_WA ; g_WindowName
  00128	6a 00		 push	 0
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExW@48
  00130	3b f4		 cmp	 esi, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013a	89 82 78 01 00
	00		 mov	 DWORD PTR [edx+376], eax

; 146  :             0,                              // extended window style
; 147  :             g_WindowName,                   // pointer to registered class name
; 148  :             g_WindowName,                   // pointer to window name
; 149  :             0,                              // window style
; 150  :             0,                              // horizontal position of window
; 151  :             0,                              // vertical position of window
; 152  :             0,                              // window width
; 153  :             0,                              // window height
; 154  :             NULL,                           // handle to parent or owner window
; 155  :             0,                              // handle to menu, or child-window identifier
; 156  :             _Module.GetModuleInstance(),    // handle to application instance
; 157  :             this );                         // pointer to window-creation data
; 158  :         if ( 0 == _Event_hEventWnd )

  00140	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00143	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  0014a	75 24		 jne	 SHORT $LN4@EventInit

; 159  :         {
; 160  :             DOTRACEERR( _T("  EventInit: Failed CreateWindowEx %lu\n    %s"), ::GetLastError() );

  0014c	8b f4		 mov	 esi, esp
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00154	3b f4		 cmp	 esi, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	50		 push	 eax
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_1FM@GHFMGGAO@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@
  00161	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 161  :             return E_UNEXPECTED;

  00169	b8 ff ff 00 80	 mov	 eax, -2147418113	; 8000ffffH
  0016e	eb 7c		 jmp	 SHORT $LN1@EventInit
$LN4@EventInit:

; 162  :         }
; 163  : 
; 164  :         // Create synchronization objects.
; 165  :         if ( 0 == ( _Event_FiringDoneEvent = CreateEvent(
; 166  :                         0,                  // pointer to security attributes
; 167  :                         TRUE,               // flag for manual-reset event
; 168  :                         FALSE,              // flag for initial state
; 169  :                         0 ) ) ||            // pointer to event-object name

  00170	8b f4		 mov	 esi, esp
  00172	6a 00		 push	 0
  00174	6a 00		 push	 0
  00176	6a 01		 push	 1
  00178	6a 00		 push	 0
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16
  00180	3b f4		 cmp	 esi, esp
  00182	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00187	89 45 c8	 mov	 DWORD PTR tv136[ebp], eax
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	8b 55 c8	 mov	 edx, DWORD PTR tv136[ebp]
  00190	89 91 70 01 00
	00		 mov	 DWORD PTR [ecx+368], edx
  00196	83 7d c8 00	 cmp	 DWORD PTR tv136[ebp], 0
  0019a	74 2a		 je	 SHORT $LN6@EventInit
  0019c	8b f4		 mov	 esi, esp
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexW@12
  001aa	3b f4		 cmp	 esi, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b1	89 45 c4	 mov	 DWORD PTR tv143[ebp], eax
  001b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b7	8b 4d c4	 mov	 ecx, DWORD PTR tv143[ebp]
  001ba	89 88 74 01 00
	00		 mov	 DWORD PTR [eax+372], ecx
  001c0	83 7d c4 00	 cmp	 DWORD PTR tv143[ebp], 0
  001c4	75 24		 jne	 SHORT $LN5@EventInit
$LN6@EventInit:

; 170  :              0 == ( _Event_DoEventMutex = CreateMutex(
; 171  :                         0,                  // pointer to security attributes
; 172  :                         FALSE,              // flag for initial ownership
; 173  :                         0 ) ) )             // pointer to mutex-object name
; 174  :         {
; 175  :             DOTRACEERR( _T("  EventInit: Failed CreateEvent/Mutex %lu\n    %s"), ::GetLastError() );

  001c6	8b f4		 mov	 esi, esp
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001ce	3b f4		 cmp	 esi, esp
  001d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d5	50		 push	 eax
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@FLDBIEFG@?$AA?5?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa@
  001db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001de	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 176  :             return E_UNEXPECTED;

  001e3	b8 ff ff 00 80	 mov	 eax, -2147418113	; 8000ffffH
  001e8	eb 02		 jmp	 SHORT $LN1@EventInit
$LN5@EventInit:

; 177  :         }
; 178  : 
; 179  :         return S_OK;

  001ea	33 c0		 xor	 eax, eax
$LN1@EventInit:

; 180  :     }

  001ec	52		 push	 edx
  001ed	8b cd		 mov	 ecx, ebp
  001ef	50		 push	 eax
  001f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@EventInit
  001f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001fb	58		 pop	 eax
  001fc	5a		 pop	 edx
  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi
  001ff	83 c4 3c	 add	 esp, 60			; 0000003cH
  00202	3b ec		 cmp	 ebp, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
  0020d	0f 1f 00	 npad	 3
$LN10@EventInit:
  00210	01 00 00 00	 DD	 1
  00214	00 00 00 00	 DD	 $LN9@EventInit
$LN9@EventInit:
  00218	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0021c	28 00 00 00	 DD	 40			; 00000028H
  00220	00 00 00 00	 DD	 $LN8@EventInit
$LN8@EventInit:
  00224	57		 DB	 87			; 00000057H
  00225	6e		 DB	 110			; 0000006eH
  00226	64		 DB	 100			; 00000064H
  00227	43		 DB	 67			; 00000043H
  00228	6c		 DB	 108			; 0000006cH
  00229	61		 DB	 97			; 00000061H
  0022a	73		 DB	 115			; 00000073H
  0022b	73		 DB	 115			; 00000073H
  0022c	00		 DB	 0
?EventInit@COPOSDeviceMonitor@@IAEJXZ ENDP		; COPOSDeviceMonitor::EventInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
;	COMDAT ?GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z
_TEXT	SEGMENT
tv128 = -16						; size = 4
tv89 = -12						; size = 4
tv81 = -8						; size = 4
tv74 = -4						; size = 4
_pnEntries$ = 8						; size = 4
?GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z PROC ; COPOSDeviceMonitor::GetConnMap, COMDAT

; 267  : BEGIN_CONNECTION_POINT_MAP(COPOSDeviceMonitor)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0001c	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00023	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  0002b	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00031	0f 8e d9 00 00
	00		 jle	 $LN2@GetConnMap
  00037	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  0003c	e8 00 00 00 00	 call	 __Init_thread_header
  00041	83 c4 04	 add	 esp, 4
  00044	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA, -1 ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  0004b	0f 85 bf 00 00
	00		 jne	 $LN2@GetConnMap

; 268  :     CONNECTION_POINT_ENTRY(IID_IPropertyNotifySink)

  00051	b9 08 00 00 00	 mov	 ecx, 8
  00056	85 c9		 test	 ecx, ecx
  00058	74 10		 je	 SHORT $LN5@GetConnMap
  0005a	ba 08 00 00 00	 mov	 edx, 8
  0005f	81 c2 a8 00 00
	00		 add	 edx, 168		; 000000a8H
  00065	89 55 fc	 mov	 DWORD PTR tv74[ebp], edx
  00068	eb 07		 jmp	 SHORT $LN6@GetConnMap
$LN5@GetConnMap:
  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN6@GetConnMap:
  00071	b8 08 00 00 00	 mov	 eax, 8
  00076	85 c0		 test	 eax, eax
  00078	74 10		 je	 SHORT $LN7@GetConnMap
  0007a	b9 08 00 00 00	 mov	 ecx, 8
  0007f	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00085	89 4d f8	 mov	 DWORD PTR tv81[ebp], ecx
  00088	eb 07		 jmp	 SHORT $LN8@GetConnMap
$LN7@GetConnMap:
  0008a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN8@GetConnMap:
  00091	8b 55 fc	 mov	 edx, DWORD PTR tv74[ebp]
  00094	83 ea 08	 sub	 edx, 8
  00097	8b 45 f8	 mov	 eax, DWORD PTR tv81[ebp]
  0009a	83 e8 08	 sub	 eax, 8
  0009d	2b d0		 sub	 edx, eax
  0009f	89 15 00 00 00
	00		 mov	 DWORD PTR ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B, edx

; 269  :     CONNECTION_POINT_ENTRY(DIID__IOPOSDeviceMonitorEvents)

  000a5	b9 08 00 00 00	 mov	 ecx, 8
  000aa	85 c9		 test	 ecx, ecx
  000ac	74 10		 je	 SHORT $LN9@GetConnMap
  000ae	ba 08 00 00 00	 mov	 edx, 8
  000b3	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  000b9	89 55 f4	 mov	 DWORD PTR tv89[ebp], edx
  000bc	eb 07		 jmp	 SHORT $LN10@GetConnMap
$LN9@GetConnMap:
  000be	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN10@GetConnMap:
  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	85 c0		 test	 eax, eax
  000cc	74 10		 je	 SHORT $LN11@GetConnMap
  000ce	b9 08 00 00 00	 mov	 ecx, 8
  000d3	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  000d9	89 4d f0	 mov	 DWORD PTR tv128[ebp], ecx
  000dc	eb 07		 jmp	 SHORT $LN12@GetConnMap
$LN11@GetConnMap:
  000de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN12@GetConnMap:
  000e5	8b 55 f4	 mov	 edx, DWORD PTR tv89[ebp]
  000e8	83 ea 08	 sub	 edx, 8
  000eb	8b 45 f0	 mov	 eax, DWORD PTR tv128[ebp]
  000ee	83 e8 08	 sub	 eax, 8
  000f1	2b d0		 sub	 edx, eax
  000f3	89 15 04 00 00
	00		 mov	 DWORD PTR ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B+4, edx

; 270  : END_CONNECTION_POINT_MAP()

  000f9	c7 05 08 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B+8, -1
  00103	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4HA ; `COPOSDeviceMonitor::GetConnMap'::`2'::$TSS0
  00108	e8 00 00 00 00	 call	 __Init_thread_footer
  0010d	83 c4 04	 add	 esp, 4
$LN2@GetConnMap:
  00110	83 7d 08 00	 cmp	 DWORD PTR _pnEntries$[ebp], 0
  00114	74 09		 je	 SHORT $LN3@GetConnMap
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _pnEntries$[ebp]
  00119	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN3@GetConnMap:
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ?_entries@?1??GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z@4QBU34@B ; `COPOSDeviceMonitor::GetConnMap'::`2'::_entries
  00124	83 c4 10	 add	 esp, 16			; 00000010H
  00127	3b ec		 cmp	 ebp, esp
  00129	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
?GetConnMap@COPOSDeviceMonitor@@SAPBU_ATL_CONNMAP_ENTRY@ATL@@PAH@Z ENDP ; COPOSDeviceMonitor::GetConnMap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv132 = -60						; size = 4
tv91 = -56						; size = 4
_hOldBitmap$ = -52					; size = 4
_hMemDC$ = -48						; size = 4
_bmp$ = -40						; size = 24
_hBitmap$ = -12						; size = 4
_rc$ = -8						; size = 4
_this$ = -4						; size = 4
_di$ = 8						; size = 4
?OnDraw@COPOSDeviceMonitor@@MAEJAAUATL_DRAWINFO@@@Z PROC ; COPOSDeviceMonitor::OnDraw
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000c	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 237  :     RECT& rc = *(RECT*)di.prcBounds;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _di$[ebp]
  0001f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00022	89 4d f8	 mov	 DWORD PTR _rc$[ebp], ecx

; 238  : 
; 239  :     // Draw our bitmap...
; 240  :     //  - Load bitmap and get info
; 241  :     HBITMAP hBitmap = LoadBitmap(

  00025	8b f4		 mov	 esi, esp
  00027	68 c9 00 00 00	 push	 201			; 000000c9H
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?_Module@@3VCComModule@ATL@@A ; _Module
  00031	e8 00 00 00 00	 call	 ?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CComModule::GetModuleInstance
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapW@8
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	89 45 f4	 mov	 DWORD PTR _hBitmap$[ebp], eax

; 242  :         _Module.GetModuleInstance(),            // handle of the instance containing the image
; 243  :         MAKEINTRESOURCE(IDB_OPOSDEVICEMONITOR2) ); // bitmap resource name
; 244  :     BITMAP bmp;
; 245  :     GetObject(

  00047	8b f4		 mov	 esi, esp
  00049	8d 55 d8	 lea	 edx, DWORD PTR _bmp$[ebp]
  0004c	52		 push	 edx
  0004d	6a 18		 push	 24			; 00000018H
  0004f	8b 45 f4	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectW@12
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 246  :         hBitmap,                                // handle to graphics object of interest
; 247  :         sizeof(BITMAP),                         // size of buffer for object information
; 248  :         &bmp );                                 // pointer to buffer for object information
; 249  :     //  - Create a compatible memory DC and select bitmap into it
; 250  :     HDC hMemDC = CreateCompatibleDC(

  00060	8b f4		 mov	 esi, esp
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _di$[ebp]
  00065	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00068	52		 push	 edx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	89 45 d0	 mov	 DWORD PTR _hMemDC$[ebp], eax

; 251  :         di.hdcDraw );                           // handle to the device context
; 252  :     HBITMAP hOldBitmap =

  00079	8b f4		 mov	 esi, esp
  0007b	8b 45 f4	 mov	 eax, DWORD PTR _hBitmap$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d d0	 mov	 ecx, DWORD PTR _hMemDC$[ebp]
  00082	51		 push	 ecx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00089	3b f4		 cmp	 esi, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	89 45 cc	 mov	 DWORD PTR _hOldBitmap$[ebp], eax

; 253  :         (HBITMAP) SelectObject(
; 254  :             hMemDC,                             // handle to device context
; 255  :             hBitmap );                          // handle to object
; 256  :     //  - Copy bitmap from memory DC to screen DC
; 257  :     BitBlt(

  00093	8b 55 f8	 mov	 edx, DWORD PTR _rc$[ebp]
  00096	8b 45 f8	 mov	 eax, DWORD PTR _rc$[ebp]
  00099	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0009c	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0009f	39 4d e0	 cmp	 DWORD PTR _bmp$[ebp+8], ecx
  000a2	7d 08		 jge	 SHORT $LN3@OnDraw
  000a4	8b 55 e0	 mov	 edx, DWORD PTR _bmp$[ebp+8]
  000a7	89 55 c8	 mov	 DWORD PTR tv91[ebp], edx
  000aa	eb 0f		 jmp	 SHORT $LN4@OnDraw
$LN3@OnDraw:
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _rc$[ebp]
  000af	8b 4d f8	 mov	 ecx, DWORD PTR _rc$[ebp]
  000b2	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000b5	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  000b8	89 55 c8	 mov	 DWORD PTR tv91[ebp], edx
$LN4@OnDraw:
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _rc$[ebp]
  000be	8b 4d f8	 mov	 ecx, DWORD PTR _rc$[ebp]
  000c1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c4	2b 11		 sub	 edx, DWORD PTR [ecx]
  000c6	39 55 dc	 cmp	 DWORD PTR _bmp$[ebp+4], edx
  000c9	7d 08		 jge	 SHORT $LN5@OnDraw
  000cb	8b 45 dc	 mov	 eax, DWORD PTR _bmp$[ebp+4]
  000ce	89 45 c4	 mov	 DWORD PTR tv132[ebp], eax
  000d1	eb 0e		 jmp	 SHORT $LN6@OnDraw
$LN5@OnDraw:
  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _rc$[ebp]
  000d6	8b 55 f8	 mov	 edx, DWORD PTR _rc$[ebp]
  000d9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000dc	2b 02		 sub	 eax, DWORD PTR [edx]
  000de	89 45 c4	 mov	 DWORD PTR tv132[ebp], eax
$LN6@OnDraw:
  000e1	8b f4		 mov	 esi, esp
  000e3	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  000e8	6a 00		 push	 0
  000ea	6a 00		 push	 0
  000ec	8b 4d d0	 mov	 ecx, DWORD PTR _hMemDC$[ebp]
  000ef	51		 push	 ecx
  000f0	8b 55 c8	 mov	 edx, DWORD PTR tv91[ebp]
  000f3	52		 push	 edx
  000f4	8b 45 c4	 mov	 eax, DWORD PTR tv132[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d f8	 mov	 ecx, DWORD PTR _rc$[ebp]
  000fb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000fe	52		 push	 edx
  000ff	8b 45 f8	 mov	 eax, DWORD PTR _rc$[ebp]
  00102	8b 08		 mov	 ecx, DWORD PTR [eax]
  00104	51		 push	 ecx
  00105	8b 55 08	 mov	 edx, DWORD PTR _di$[ebp]
  00108	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36
  00112	3b f4		 cmp	 esi, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 258  :       di.hdcDraw,                               // handle to destination device context
; 259  :       rc.left,                                  // x-coordinate of destination rectangle's upper-left corner
; 260  :       rc.top,                                   // y-coordinate of destination rectangle's upper-left corner
; 261  :       min( bmp.bmWidth, rc.right - rc.left ),   // width of destination rectangle
; 262  :       min( bmp.bmHeight, rc.bottom - rc.top ),  // height of destination rectangle
; 263  :       hMemDC,                                   // handle to source device context
; 264  :       0,                                        // x-coordinate of source rectangle's upper-left corner
; 265  :       0,                                        // y-coordinate of source rectangle's upper-left corner
; 266  :       SRCCOPY );                                // raster operation code
; 267  : 
; 268  :     // Cleanup
; 269  :     SelectObject( hMemDC, hOldBitmap );

  00119	8b f4		 mov	 esi, esp
  0011b	8b 4d cc	 mov	 ecx, DWORD PTR _hOldBitmap$[ebp]
  0011e	51		 push	 ecx
  0011f	8b 55 d0	 mov	 edx, DWORD PTR _hMemDC$[ebp]
  00122	52		 push	 edx
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 270  :     DeleteObject( hMemDC );

  00130	8b f4		 mov	 esi, esp
  00132	8b 45 d0	 mov	 eax, DWORD PTR _hMemDC$[ebp]
  00135	50		 push	 eax
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  0013c	3b f4		 cmp	 esi, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 271  :     DeleteObject( hBitmap );

  00143	8b f4		 mov	 esi, esp
  00145	8b 4d f4	 mov	 ecx, DWORD PTR _hBitmap$[ebp]
  00148	51		 push	 ecx
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 272  : 
; 273  :     return S_OK;

  00156	33 c0		 xor	 eax, eax

; 274  : }

  00158	52		 push	 edx
  00159	8b cd		 mov	 ecx, ebp
  0015b	50		 push	 eax
  0015c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@OnDraw
  00162	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00167	58		 pop	 eax
  00168	5a		 pop	 edx
  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	83 c4 3c	 add	 esp, 60			; 0000003cH
  0016e	3b ec		 cmp	 ebp, esp
  00170	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 04 00	 ret	 4
  0017b	90		 npad	 1
$LN9@OnDraw:
  0017c	01 00 00 00	 DD	 1
  00180	00 00 00 00	 DD	 $LN8@OnDraw
$LN8@OnDraw:
  00184	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00188	18 00 00 00	 DD	 24			; 00000018H
  0018c	00 00 00 00	 DD	 $LN7@OnDraw
$LN7@OnDraw:
  00190	62		 DB	 98			; 00000062H
  00191	6d		 DB	 109			; 0000006dH
  00192	70		 DB	 112			; 00000070H
  00193	00		 DB	 0
?OnDraw@COPOSDeviceMonitor@@MAEJAAUATL_DRAWINFO@@@Z ENDP ; COPOSDeviceMonitor::OnDraw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bFreeze$ = 12						; size = 4
?FreezeEvents@COPOSDeviceMonitor@@MAGJH@Z PROC		; COPOSDeviceMonitor::FreezeEvents

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  :     // If requesting events to be frozen...
; 209  :     if ( bFreeze )

  00003	83 7d 0c 00	 cmp	 DWORD PTR _bFreeze$[ebp], 0
  00007	74 59		 je	 SHORT $LN2@FreezeEven

; 210  :     {
; 211  :         DOTRACEV( ( _T("*FreezeEvents: Freezing %d"), _nCOFreezeEventCount ) );

  00009	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00012	51		 push	 ecx
  00013	68 00 00 00 00	 push	 OFFSET $SG193377
  00018	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	83 ea 74	 sub	 edx, 116		; 00000074H
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 212  :         if ( _nCOFreezeEventCount == 0 &&   // If events are not currently frozen and

  00027	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  00031	75 18		 jne	 SHORT $LN4@FreezeEven
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	0f b6 51 70	 movzx	 edx, BYTE PTR [ecx+112]
  0003a	85 d2		 test	 edx, edx
  0003c	74 0d		 je	 SHORT $LN4@FreezeEven

; 213  :              _bOpened )                     //   SO is opened,
; 214  :             SetCOFreezeEvents( TRUE );      //   then freeze events in the SO.

  0003e	6a 01		 push	 1
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 e9 74	 sub	 ecx, 116		; 00000074H
  00046	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSDeviceMonitor@@IAEXF@Z ; COPOSDeviceMonitor::SetCOFreezeEvents
$LN4@FreezeEven:

; 215  :         _nCOFreezeEventCount++;             // Increment freeze count. Must do after informing SO.

  0004b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00054	83 c1 01	 add	 ecx, 1
  00057	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 216  :     }

  00060	eb 57		 jmp	 SHORT $LN3@FreezeEven
$LN2@FreezeEven:

; 217  :     // Else requesting events to be unfrozen...
; 218  :     else
; 219  :     {
; 220  :         _nCOFreezeEventCount--;             // Decrement freeze count. Must do before informing SO.

  00062	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0006b	83 e9 01	 sub	 ecx, 1
  0006e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00071	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 221  :         DOTRACEV( ( _T("*FreezeEvents: Unfreezing %d"), _nCOFreezeEventCount ) );

  00077	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET $SG193379
  00086	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00089	83 ea 74	 sub	 edx, 116		; 00000074H
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 222  :         if ( _nCOFreezeEventCount == 0 &&   // If events have become unfrozen and

  00095	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00098	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  0009f	75 18		 jne	 SHORT $LN3@FreezeEven
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	0f b6 51 70	 movzx	 edx, BYTE PTR [ecx+112]
  000a8	85 d2		 test	 edx, edx
  000aa	74 0d		 je	 SHORT $LN3@FreezeEven

; 223  :              _bOpened )                     //   SO is opened,
; 224  :             SetCOFreezeEvents( FALSE );     //   then unfreeze events in the SO.

  000ac	6a 00		 push	 0
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	83 e9 74	 sub	 ecx, 116		; 00000074H
  000b4	e8 00 00 00 00	 call	 ?SetCOFreezeEvents@COPOSDeviceMonitor@@IAEXF@Z ; COPOSDeviceMonitor::SetCOFreezeEvents
$LN3@FreezeEven:

; 225  :     }
; 226  : 
; 227  :     // Just in case anyone cares ... keep the CComControlBase one in sync.
; 228  :     m_nFreezeEvents = _nCOFreezeEventCount;

  000b9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  000c5	89 50 d0	 mov	 DWORD PTR [eax-48], edx

; 229  :     return S_OK;

  000c8	33 c0		 xor	 eax, eax

; 230  : }

  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	5d		 pop	 ebp
  000d2	c2 08 00	 ret	 8
?FreezeEvents@COPOSDeviceMonitor@@MAGJH@Z ENDP		; COPOSDeviceMonitor::FreezeEvents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_Disp$1 = -88						; size = 16
_VarResult$2 = -64					; size = 24
_Var$3 = -32						; size = 24
_this$ = -4						; size = 4
_bFreeze$ = 8						; size = 2
?SetCOFreezeEvents@COPOSDeviceMonitor@@IAEXF@Z PROC	; COPOSDeviceMonitor::SetCOFreezeEvents
; _this$ = ecx

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000c	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 656  :     // If open...
; 657  :     if ( _bOpened )

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  00026	85 c9		 test	 ecx, ecx
  00028	0f 84 ac 00 00
	00		 je	 $LN1@SetCOFreez

; 658  :     {
; 659  :         DOTRACEV( ( _T("*SetCOFreezeEvents: 0x%X"), bFreeze ) );

  0002e	0f bf 55 08	 movsx	 edx, WORD PTR _bFreeze$[ebp]
  00032	52		 push	 edx
  00033	68 00 00 00 00	 push	 OFFSET $SG193722
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 660  : 
; 661  :         // Set up and call the method to inform the SO of container freeze/unfreeze.
; 662  :         OposVariant Var;

  00044	8d 4d e0	 lea	 ecx, DWORD PTR _Var$3[ebp]
  00047	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 663  :         OposVariantResult VarResult;

  0004c	8d 4d c0	 lea	 ecx, DWORD PTR _VarResult$2[ebp]
  0004f	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 664  :         Var.SetVARIANT_BOOL( bFreeze );

  00054	0f b7 4d 08	 movzx	 ecx, WORD PTR _bFreeze$[ebp]
  00058	51		 push	 ecx
  00059	8d 4d e0	 lea	 ecx, DWORD PTR _Var$3[ebp]
  0005c	e8 00 00 00 00	 call	 ?SetVARIANT_BOOL@OposVariant@@QAEXF@Z ; OposVariant::SetVARIANT_BOOL

; 665  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };

  00061	8d 55 e0	 lea	 edx, DWORD PTR _Var$3[ebp]
  00064	89 55 a8	 mov	 DWORD PTR _Disp$1[ebp], edx
  00067	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _Disp$1[ebp+4], 0
  0006e	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _Disp$1[ebp+8], 1
  00075	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _Disp$1[ebp+12], 0

; 666  :         _pService->Invoke(

  0007c	8b f4		 mov	 esi, esp
  0007e	6a 00		 push	 0
  00080	6a 00		 push	 0
  00082	8d 45 c0	 lea	 eax, DWORD PTR _VarResult$2[ebp]
  00085	50		 push	 eax
  00086	8d 4d a8	 lea	 ecx, DWORD PTR _Disp$1[ebp]
  00089	51		 push	 ecx
  0008a	6a 01		 push	 1
  0008c	68 00 04 00 00	 push	 1024			; 00000400H
  00091	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	6b c2 00	 imul	 eax, edx, 0
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 94 01 08 01
	00 00		 mov	 edx, DWORD PTR [ecx+eax+264]
  000a8	52		 push	 edx
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  000bb	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000bd	50		 push	 eax
  000be	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000c1	ff d2		 call	 edx
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 667  :                 _DispIDs[nDICOFreezeEvents], IID_NULL, LOCALE_USER_DEFAULT,
; 668  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 669  :     }

  000ca	8d 4d c0	 lea	 ecx, DWORD PTR _VarResult$2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
  000d2	8d 4d e0	 lea	 ecx, DWORD PTR _Var$3[ebp]
  000d5	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
$LN1@SetCOFreez:

; 670  : }

  000da	52		 push	 edx
  000db	8b cd		 mov	 ecx, ebp
  000dd	50		 push	 eax
  000de	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@SetCOFreez
  000e4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e9	58		 pop	 eax
  000ea	5a		 pop	 edx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	83 c4 5c	 add	 esp, 92			; 0000005cH
  000f0	3b ec		 cmp	 ebp, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
  000fd	0f 1f 00	 npad	 3
$LN8@SetCOFreez:
  00100	03 00 00 00	 DD	 3
  00104	00 00 00 00	 DD	 $LN7@SetCOFreez
$LN7@SetCOFreez:
  00108	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0010c	18 00 00 00	 DD	 24			; 00000018H
  00110	00 00 00 00	 DD	 $LN4@SetCOFreez
  00114	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00118	18 00 00 00	 DD	 24			; 00000018H
  0011c	00 00 00 00	 DD	 $LN5@SetCOFreez
  00120	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00124	10 00 00 00	 DD	 16			; 00000010H
  00128	00 00 00 00	 DD	 $LN6@SetCOFreez
$LN6@SetCOFreez:
  0012c	44		 DB	 68			; 00000044H
  0012d	69		 DB	 105			; 00000069H
  0012e	73		 DB	 115			; 00000073H
  0012f	70		 DB	 112			; 00000070H
  00130	00		 DB	 0
$LN5@SetCOFreez:
  00131	56		 DB	 86			; 00000056H
  00132	61		 DB	 97			; 00000061H
  00133	72		 DB	 114			; 00000072H
  00134	52		 DB	 82			; 00000052H
  00135	65		 DB	 101			; 00000065H
  00136	73		 DB	 115			; 00000073H
  00137	75		 DB	 117			; 00000075H
  00138	6c		 DB	 108			; 0000006cH
  00139	74		 DB	 116			; 00000074H
  0013a	00		 DB	 0
$LN4@SetCOFreez:
  0013b	56		 DB	 86			; 00000056H
  0013c	61		 DB	 97			; 00000061H
  0013d	72		 DB	 114			; 00000072H
  0013e	00		 DB	 0
?SetCOFreezeEvents@COPOSDeviceMonitor@@IAEXF@Z ENDP	; COPOSDeviceMonitor::SetCOFreezeEvents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv471 = -532						; size = 4
tv374 = -528						; size = 4
tv337 = -524						; size = 4
tv278 = -520						; size = 4
tv144 = -516						; size = 4
tv89 = -512						; size = 4
tv86 = -508						; size = 4
$T1 = -504						; size = 4
$T2 = -500						; size = 4
$T3 = -496						; size = 4
$T4 = -492						; size = 4
$T5 = -488						; size = 4
$T6 = -484						; size = 4
$T7 = -480						; size = 4
$T8 = -476						; size = 4
$T9 = -472						; size = 4
$T10 = -468						; size = 4
_pStrRef$11 = -464					; size = 4
_nStrRefLen$12 = -460					; size = 4
_szHR$ = -452						; size = 100
_pszInfo$ = -348					; size = 4
_Disp$13 = -340						; size = 16
_VarResult$14 = -316					; size = 24
_hRCTmp$15 = -284					; size = 4
_u$ = -276						; size = 4
_pStrRefs$ = -272					; size = 4
_szPrefix$ = -264					; size = 200
_szParmNum$ = -56					; size = 40
_pVar$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pFuncName$ = 8						; size = 4
_hRC$ = 12						; size = 4
_pParms$ = 16						; size = 4
_nParms$ = 20						; size = 4
_nDispIDIndex$ = 24					; size = 4
_pRC$ = 28						; size = 4
_bOpenCheck$ = 32					; size = 1
?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z PROC ; COPOSDeviceMonitor::DoInvoke
; _this$ = ecx

; 514  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd ec fd ff
	ff		 lea	 edi, DWORD PTR [ebp-532]
  00012	b9 85 00 00 00	 mov	 ecx, 133		; 00000085H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 515  :     // Trace incoming function and parameters.
; 516  : #ifdef _DEBUG
; 517  :     OposVariant* pVar;
; 518  :     TCHAR szParmNum[20];
; 519  :     TCHAR szPrefix[100];
; 520  :     OposVariant* pStrRefs = new OposVariant[nParms];

  0002c	8b 45 14	 mov	 eax, DWORD PTR _nParms$[ebp]
  0002f	89 85 2c fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  00035	33 c9		 xor	 ecx, ecx
  00037	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  0003d	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00042	f7 e2		 mul	 edx
  00044	0f 90 c1	 seto	 cl
  00047	f7 d9		 neg	 ecx
  00049	0b c8		 or	 ecx, eax
  0004b	33 c0		 xor	 eax, eax
  0004d	83 c1 04	 add	 ecx, 4
  00050	0f 92 c0	 setb	 al
  00053	f7 d8		 neg	 eax
  00055	0b c1		 or	 eax, ecx
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005d	83 c4 04	 add	 esp, 4
  00060	89 85 28 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00066	83 bd 28 fe ff
	ff 00		 cmp	 DWORD PTR $T9[ebp], 0
  0006d	74 3c		 je	 SHORT $LN39@DoInvoke
  0006f	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
  00075	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
  0007b	89 11		 mov	 DWORD PTR [ecx], edx
  0007d	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  00082	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  00088	50		 push	 eax
  00089	6a 18		 push	 24			; 00000018H
  0008b	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
  00091	83 c1 04	 add	 ecx, 4
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z
  0009a	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
  000a0	83 c2 04	 add	 edx, 4
  000a3	89 95 04 fe ff
	ff		 mov	 DWORD PTR tv86[ebp], edx
  000a9	eb 0a		 jmp	 SHORT $LN40@DoInvoke
$LN39@DoInvoke:
  000ab	c7 85 04 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN40@DoInvoke:
  000b5	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  000bb	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _pStrRefs$[ebp], eax

; 521  : 
; 522  :     DOTRACEV( ( _T("+%hs [Function]  %u parameter%s"), pFuncName, nParms, nParms == 1 ? _T("") : _T("s") ) );

  000c1	83 7d 14 01	 cmp	 DWORD PTR _nParms$[ebp], 1
  000c5	75 0c		 jne	 SHORT $LN41@DoInvoke
  000c7	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], OFFSET $SG193650
  000d1	eb 0a		 jmp	 SHORT $LN42@DoInvoke
$LN41@DoInvoke:
  000d3	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], OFFSET $SG193651
$LN42@DoInvoke:
  000dd	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  000e3	51		 push	 ecx
  000e4	8b 55 14	 mov	 edx, DWORD PTR _nParms$[ebp]
  000e7	52		 push	 edx
  000e8	8b 45 08	 mov	 eax, DWORD PTR _pFuncName$[ebp]
  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET $SG193652
  000f1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  000fa	83 c4 14	 add	 esp, 20			; 00000014H

; 523  :     unsigned u;
; 524  :     for ( u = 0; ++u <= nParms; )

  000fd	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _u$[ebp], 0
$LN4@DoInvoke:
  00107	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _u$[ebp]
  0010d	83 c2 01	 add	 edx, 1
  00110	89 95 ec fe ff
	ff		 mov	 DWORD PTR _u$[ebp], edx
  00116	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _u$[ebp]
  0011c	3b 45 14	 cmp	 eax, DWORD PTR _nParms$[ebp]
  0011f	0f 87 af 02 00
	00		 ja	 $LN3@DoInvoke

; 525  :     {
; 526  :         HRESULT hRCTmp;
; 527  :         pVar = &pParms[ nParms - u ];

  00125	8b 4d 14	 mov	 ecx, DWORD PTR _nParms$[ebp]
  00128	2b 8d ec fe ff
	ff		 sub	 ecx, DWORD PTR _u$[ebp]
  0012e	6b d1 18	 imul	 edx, ecx, 24
  00131	03 55 10	 add	 edx, DWORD PTR _pParms$[ebp]
  00134	89 55 f4	 mov	 DWORD PTR _pVar$[ebp], edx

; 528  :         _sntprintf( szParmNum, TSIZEOF(szParmNum), _T("    #%u: "), u );

  00137	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _u$[ebp]
  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET $SG193653
  00143	6a 14		 push	 20			; 00000014H
  00145	8d 4d c8	 lea	 ecx, DWORD PTR _szParmNum$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 __snwprintf
  0014e	83 c4 10	 add	 esp, 16			; 00000010H

; 529  :         NULTERMINATE(szParmNum);

  00151	ba 02 00 00 00	 mov	 edx, 2
  00156	6b c2 13	 imul	 eax, edx, 19
  00159	89 85 24 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  0015f	83 bd 24 fe ff
	ff 28		 cmp	 DWORD PTR $T8[ebp], 40	; 00000028H
  00166	73 02		 jae	 SHORT $LN43@DoInvoke
  00168	eb 05		 jmp	 SHORT $LN44@DoInvoke
$LN43@DoInvoke:
  0016a	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN44@DoInvoke:
  0016f	33 c9		 xor	 ecx, ecx
  00171	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR $T8[ebp]
  00177	66 89 4c 15 c8	 mov	 WORD PTR _szParmNum$[ebp+edx], cx

; 530  :         switch ( pVar->vt )

  0017c	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  0017f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00182	89 8d fc fd ff
	ff		 mov	 DWORD PTR tv144[ebp], ecx
  00188	83 bd fc fd ff
	ff 0b		 cmp	 DWORD PTR tv144[ebp], 11 ; 0000000bH
  0018f	7f 2a		 jg	 SHORT $LN49@DoInvoke
  00191	83 bd fc fd ff
	ff 0b		 cmp	 DWORD PTR tv144[ebp], 11 ; 0000000bH
  00198	74 6c		 je	 SHORT $LN13@DoInvoke
  0019a	83 bd fc fd ff
	ff 09		 cmp	 DWORD PTR tv144[ebp], 9
  001a1	0f 87 0c 02 00
	00		 ja	 $LN20@DoInvoke
  001a7	8b 95 fc fd ff
	ff		 mov	 edx, DWORD PTR tv144[ebp]
  001ad	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN62@DoInvoke[edx]
  001b4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN63@DoInvoke[eax*4]
$LN49@DoInvoke:
  001bb	81 bd fc fd ff
	ff 03 40 00 00	 cmp	 DWORD PTR tv144[ebp], 16387 ; 00004003H
  001c5	0f 84 a9 00 00
	00		 je	 $LN16@DoInvoke
  001cb	81 bd fc fd ff
	ff 08 40 00 00	 cmp	 DWORD PTR tv144[ebp], 16392 ; 00004008H
  001d5	0f 84 4c 01 00
	00		 je	 $LN19@DoInvoke
  001db	81 bd fc fd ff
	ff 0b 40 00 00	 cmp	 DWORD PTR tv144[ebp], 16395 ; 0000400bH
  001e5	74 41		 je	 SHORT $LN14@DoInvoke
  001e7	e9 c7 01 00 00	 jmp	 $LN20@DoInvoke
$LN12@DoInvoke:

; 531  :         {
; 532  :         case VT_EMPTY: DOTRACEV( ( _T("%sEMPTY"), szParmNum ) ); break;

  001ec	8d 4d c8	 lea	 ecx, DWORD PTR _szParmNum$[ebp]
  001ef	51		 push	 ecx
  001f0	68 00 00 00 00	 push	 OFFSET $SG193655
  001f5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001f8	52		 push	 edx
  001f9	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00201	e9 c9 01 00 00	 jmp	 $LN5@DoInvoke
$LN13@DoInvoke:

; 533  :         case VT_BOOL: DOTRACEV( ( _T("%sBOOL 0x%X"), szParmNum, pVar->boolVal ) ); break;

  00206	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  00209	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0020d	51		 push	 ecx
  0020e	8d 55 c8	 lea	 edx, DWORD PTR _szParmNum$[ebp]
  00211	52		 push	 edx
  00212	68 00 00 00 00	 push	 OFFSET $SG193657
  00217	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00220	83 c4 10	 add	 esp, 16			; 00000010H
  00223	e9 a7 01 00 00	 jmp	 $LN5@DoInvoke
$LN14@DoInvoke:

; 534  :         case VT_BYREF|VT_BOOL: DOTRACEV( ( _T("%sBOOL* 0x%X"), szParmNum, *pVar->pboolVal ) ); break;

  00228	8b 4d f4	 mov	 ecx, DWORD PTR _pVar$[ebp]
  0022b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0022e	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00231	50		 push	 eax
  00232	8d 4d c8	 lea	 ecx, DWORD PTR _szParmNum$[ebp]
  00235	51		 push	 ecx
  00236	68 00 00 00 00	 push	 OFFSET $SG193659
  0023b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0023e	52		 push	 edx
  0023f	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00244	83 c4 10	 add	 esp, 16			; 00000010H
  00247	e9 83 01 00 00	 jmp	 $LN5@DoInvoke
$LN15@DoInvoke:

; 535  :         case VT_I4: DOTRACEV( ( _T("%sLONG %d (0x%X)"), szParmNum, pVar->lVal, pVar->lVal ) ); break;

  0024c	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  0024f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00252	51		 push	 ecx
  00253	8b 55 f4	 mov	 edx, DWORD PTR _pVar$[ebp]
  00256	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00259	50		 push	 eax
  0025a	8d 4d c8	 lea	 ecx, DWORD PTR _szParmNum$[ebp]
  0025d	51		 push	 ecx
  0025e	68 00 00 00 00	 push	 OFFSET $SG193661
  00263	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00266	52		 push	 edx
  00267	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0026c	83 c4 14	 add	 esp, 20			; 00000014H
  0026f	e9 5b 01 00 00	 jmp	 $LN5@DoInvoke
$LN16@DoInvoke:

; 536  :         case VT_BYREF|VT_I4: DOTRACEV( ( _T("%sLONG* %d (0x%X)"), szParmNum, *pVar->plVal, *pVar->plVal ) ); break;

  00274	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  00277	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0027a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027c	52		 push	 edx
  0027d	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  00280	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00283	8b 11		 mov	 edx, DWORD PTR [ecx]
  00285	52		 push	 edx
  00286	8d 45 c8	 lea	 eax, DWORD PTR _szParmNum$[ebp]
  00289	50		 push	 eax
  0028a	68 00 00 00 00	 push	 OFFSET $SG193663
  0028f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	51		 push	 ecx
  00293	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00298	83 c4 14	 add	 esp, 20			; 00000014H
  0029b	e9 2f 01 00 00	 jmp	 $LN5@DoInvoke
$LN17@DoInvoke:

; 537  :         case VT_DISPATCH: DOTRACEV( ( _T("%sDISPATCH 0x%X"), szParmNum, pVar->pdispVal ) ); break;

  002a0	8b 55 f4	 mov	 edx, DWORD PTR _pVar$[ebp]
  002a3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002a6	50		 push	 eax
  002a7	8d 4d c8	 lea	 ecx, DWORD PTR _szParmNum$[ebp]
  002aa	51		 push	 ecx
  002ab	68 00 00 00 00	 push	 OFFSET $SG193665
  002b0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002b3	52		 push	 edx
  002b4	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  002b9	83 c4 10	 add	 esp, 16			; 00000010H
  002bc	e9 0e 01 00 00	 jmp	 $LN5@DoInvoke
$LN18@DoInvoke:

; 538  :         case VT_BSTR:
; 539  :             _sntprintf( szPrefix, TSIZEOF(szPrefix), _T("%sSTRING;"), szParmNum );

  002c1	8d 45 c8	 lea	 eax, DWORD PTR _szParmNum$[ebp]
  002c4	50		 push	 eax
  002c5	68 00 00 00 00	 push	 OFFSET $SG193667
  002ca	6a 64		 push	 100			; 00000064H
  002cc	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szPrefix$[ebp]
  002d2	51		 push	 ecx
  002d3	e8 00 00 00 00	 call	 __snwprintf
  002d8	83 c4 10	 add	 esp, 16			; 00000010H

; 540  :             NULTERMINATE(szPrefix);

  002db	ba 02 00 00 00	 mov	 edx, 2
  002e0	6b c2 63	 imul	 eax, edx, 99
  002e3	89 85 20 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  002e9	81 bd 20 fe ff
	ff c8 00 00 00	 cmp	 DWORD PTR $T7[ebp], 200	; 000000c8H
  002f3	73 02		 jae	 SHORT $LN45@DoInvoke
  002f5	eb 05		 jmp	 SHORT $LN46@DoInvoke
$LN45@DoInvoke:
  002f7	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN46@DoInvoke:
  002fc	33 c9		 xor	 ecx, ecx
  002fe	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR $T7[ebp]
  00304	66 89 8c 15 f8
	fe ff ff	 mov	 WORD PTR _szPrefix$[ebp+edx], cx

; 541  :             DOTRACESTRINGV( szPrefix, pVar->bstrVal );

  0030c	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  0030f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00312	51		 push	 ecx
  00313	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szPrefix$[ebp]
  00319	52		 push	 edx
  0031a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0031d	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ; COPOSDeviceMonitor::WriteTraceString

; 542  :             break;

  00322	e9 a8 00 00 00	 jmp	 $LN5@DoInvoke
$LN19@DoInvoke:

; 543  :         case VT_BYREF|VT_BSTR:
; 544  :             pStrRefs[u-1].SetBSTR_Copy( *pVar->pbstrVal, hRCTmp );

  00327	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _hRCTmp$15[ebp]
  0032d	50		 push	 eax
  0032e	8b 4d f4	 mov	 ecx, DWORD PTR _pVar$[ebp]
  00331	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00334	8b 02		 mov	 eax, DWORD PTR [edx]
  00336	50		 push	 eax
  00337	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _u$[ebp]
  0033d	83 e9 01	 sub	 ecx, 1
  00340	6b c9 18	 imul	 ecx, ecx, 24
  00343	03 8d f0 fe ff
	ff		 add	 ecx, DWORD PTR _pStrRefs$[ebp]
  00349	e8 00 00 00 00	 call	 ?SetBSTR_Copy@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR_Copy

; 545  :             _sntprintf( szPrefix, TSIZEOF(szPrefix), _T("%sSTRING*;"), szParmNum );

  0034e	8d 55 c8	 lea	 edx, DWORD PTR _szParmNum$[ebp]
  00351	52		 push	 edx
  00352	68 00 00 00 00	 push	 OFFSET $SG193669
  00357	6a 64		 push	 100			; 00000064H
  00359	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szPrefix$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 __snwprintf
  00365	83 c4 10	 add	 esp, 16			; 00000010H

; 546  :             NULTERMINATE(szPrefix);

  00368	b9 02 00 00 00	 mov	 ecx, 2
  0036d	6b d1 63	 imul	 edx, ecx, 99
  00370	89 95 1c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], edx
  00376	81 bd 1c fe ff
	ff c8 00 00 00	 cmp	 DWORD PTR $T6[ebp], 200	; 000000c8H
  00380	73 02		 jae	 SHORT $LN47@DoInvoke
  00382	eb 05		 jmp	 SHORT $LN48@DoInvoke
$LN47@DoInvoke:
  00384	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN48@DoInvoke:
  00389	33 c0		 xor	 eax, eax
  0038b	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  00391	66 89 84 0d f8
	fe ff ff	 mov	 WORD PTR _szPrefix$[ebp+ecx], ax

; 547  :             DOTRACESTRINGV( szPrefix, *pVar->pbstrVal );

  00399	8b 55 f4	 mov	 edx, DWORD PTR _pVar$[ebp]
  0039c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0039f	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a1	51		 push	 ecx
  003a2	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szPrefix$[ebp]
  003a8	52		 push	 edx
  003a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003ac	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ; COPOSDeviceMonitor::WriteTraceString

; 548  :             break;

  003b1	eb 1c		 jmp	 SHORT $LN5@DoInvoke
$LN20@DoInvoke:

; 549  :         default: DOTRACEV( ( _T("%sUnknown (VarType=0x%X)"), szParmNum, pVar->vt ) ); break;

  003b3	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  003b6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  003b9	51		 push	 ecx
  003ba	8d 55 c8	 lea	 edx, DWORD PTR _szParmNum$[ebp]
  003bd	52		 push	 edx
  003be	68 00 00 00 00	 push	 OFFSET $SG193671
  003c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003c6	50		 push	 eax
  003c7	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  003cc	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@DoInvoke:

; 550  :         }
; 551  :     }

  003cf	e9 33 fd ff ff	 jmp	 $LN4@DoInvoke
$LN3@DoInvoke:

; 552  : 
; 553  :     // If bad ResultCode pointer, then HRESULT.
; 554  :     if ( pRC == 0 )

  003d4	83 7d 1c 00	 cmp	 DWORD PTR _pRC$[ebp], 0
  003d8	75 07		 jne	 SHORT $LN21@DoInvoke

; 555  :         hRC = E_POINTER;

  003da	c7 45 0c 03 40
	00 80		 mov	 DWORD PTR _hRC$[ebp], -2147467261 ; 80004003H
$LN21@DoInvoke:

; 556  : 
; 557  :     // If bad HRESULT (either due to incoming value or bad ResultCode pointer), then return now.
; 558  :     if ( FAILED(hRC) )

  003e1	83 7d 0c 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  003e5	7d 4d		 jge	 SHORT $LN22@DoInvoke

; 559  :     {
; 560  :         DOTRACEERR( _T("-  Failed: Parameter error 0x%X\n    %s"), hRC );

  003e7	8b 4d 0c	 mov	 ecx, DWORD PTR _hRC$[ebp]
  003ea	51		 push	 ecx
  003eb	68 00 00 00 00	 push	 OFFSET $SG193674
  003f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f3	e8 00 00 00 00	 call	 ?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ; COPOSDeviceMonitor::WriteTraceError

; 561  :         delete [] pStrRefs;

  003f8	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _pStrRefs$[ebp]
  003fe	89 95 18 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], edx
  00404	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR $T5[ebp], 0
  0040b	74 15		 je	 SHORT $LN50@DoInvoke
  0040d	6a 03		 push	 3
  0040f	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  00415	e8 00 00 00 00	 call	 ??_EOposVariant@@QAEPAXI@Z
  0041a	89 85 f8 fd ff
	ff		 mov	 DWORD PTR tv278[ebp], eax
  00420	eb 0a		 jmp	 SHORT $LN51@DoInvoke
$LN50@DoInvoke:
  00422	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN51@DoInvoke:

; 562  :         return hRC;

  0042c	8b 45 0c	 mov	 eax, DWORD PTR _hRC$[ebp]
  0042f	e9 23 04 00 00	 jmp	 $LN38@DoInvoke
$LN22@DoInvoke:

; 563  :     }
; 564  : #endif
; 565  : 
; 566  :     hRC = -1;

  00434	c7 45 0c ff ff
	ff ff		 mov	 DWORD PTR _hRC$[ebp], -1

; 567  : 
; 568  :     // Clear the CO result code.
; 569  :     SetRC();

  0043b	6a ff		 push	 -1
  0043d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00440	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 570  : 
; 571  :     // If the SO must be open...
; 572  :     if ( bOpenCheck )

  00445	0f b6 45 20	 movzx	 eax, BYTE PTR _bOpenCheck$[ebp]
  00449	85 c0		 test	 eax, eax
  0044b	74 44		 je	 SHORT $LN23@DoInvoke

; 573  :     {
; 574  :         // If not opened, set error code and return....
; 575  :         if ( ! _bOpened )

  0044d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00450	0f b6 91 e4 00
	00 00		 movzx	 edx, BYTE PTR [ecx+228]
  00457	85 d2		 test	 edx, edx
  00459	75 12		 jne	 SHORT $LN24@DoInvoke

; 576  :         {
; 577  :             *pRC = OPOS_E_CLOSED;

  0045b	8b 45 1c	 mov	 eax, DWORD PTR _pRC$[ebp]
  0045e	c7 00 65 00 00
	00		 mov	 DWORD PTR [eax], 101	; 00000065H

; 578  :             hRC = S_OK;

  00464	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 579  :         }

  0046b	eb 24		 jmp	 SHORT $LN23@DoInvoke
$LN24@DoInvoke:

; 580  :         // If the SO's release level doesn't support this method, then return error.
; 581  :         else if ( nDispIDIndex >= _nMaxMethod )

  0046d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00470	8b 55 18	 mov	 edx, DWORD PTR _nDispIDIndex$[ebp]
  00473	3b 91 04 01 00
	00		 cmp	 edx, DWORD PTR [ecx+260]
  00479	7c 16		 jl	 SHORT $LN23@DoInvoke

; 582  :         {
; 583  :             *pRC = SetRC( OPOS_E_NOSERVICE );

  0047b	6a 68		 push	 104			; 00000068H
  0047d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00480	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
  00485	8b 4d 1c	 mov	 ecx, DWORD PTR _pRC$[ebp]
  00488	89 01		 mov	 DWORD PTR [ecx], eax

; 584  :             hRC = S_OK;

  0048a	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0
$LN23@DoInvoke:

; 585  :         }
; 586  :     }
; 587  : 
; 588  :     // Complete setup for Invoke call.
; 589  :     if ( hRC == -1 )

  00491	83 7d 0c ff	 cmp	 DWORD PTR _hRC$[ebp], -1
  00495	0f 85 ba 00 00
	00		 jne	 $LN27@DoInvoke

; 590  :     {
; 591  :         OposVariantResult VarResult;

  0049b	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _VarResult$14[ebp]
  004a1	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 592  :         OposDispParms Disp( pParms, nParms );

  004a6	8b 55 14	 mov	 edx, DWORD PTR _nParms$[ebp]
  004a9	52		 push	 edx
  004aa	8b 45 10	 mov	 eax, DWORD PTR _pParms$[ebp]
  004ad	50		 push	 eax
  004ae	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _Disp$13[ebp]
  004b4	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 593  : 
; 594  :         // Invoke the SO method.
; 595  :         hRC = _pService->Invoke(

  004b9	8b f4		 mov	 esi, esp
  004bb	6a 00		 push	 0
  004bd	6a 00		 push	 0
  004bf	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _VarResult$14[ebp]
  004c5	51		 push	 ecx
  004c6	8d 95 ac fe ff
	ff		 lea	 edx, DWORD PTR _Disp$13[ebp]
  004cc	52		 push	 edx
  004cd	6a 01		 push	 1
  004cf	68 00 04 00 00	 push	 1024			; 00000400H
  004d4	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  004d9	8b 45 18	 mov	 eax, DWORD PTR _nDispIDIndex$[ebp]
  004dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004df	8b 94 81 08 01
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+264]
  004e6	52		 push	 edx
  004e7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ea	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  004f0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004f3	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  004f9	8b 09		 mov	 ecx, DWORD PTR [ecx]
  004fb	50		 push	 eax
  004fc	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004ff	ff d2		 call	 edx
  00501	3b f4		 cmp	 esi, esp
  00503	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00508	89 45 0c	 mov	 DWORD PTR _hRC$[ebp], eax

; 596  :                 _DispIDs[nDispIDIndex], IID_NULL, LOCALE_USER_DEFAULT,
; 597  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 598  : 
; 599  :         // Set OPOS result code to SO method value if Invoke succeeded,
; 600  :         //   else flag that we failed to get to the SO.
; 601  :         *pRC = (hRC == S_OK) ? VarResult.GetLONG() : SetRC( OPOS_E_NOSERVICE );

  0050b	83 7d 0c 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  0050f	75 13		 jne	 SHORT $LN52@DoInvoke
  00511	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _VarResult$14[ebp]
  00517	e8 00 00 00 00	 call	 ?GetLONG@OposVariant@@QAEJXZ ; OposVariant::GetLONG
  0051c	89 85 f4 fd ff
	ff		 mov	 DWORD PTR tv337[ebp], eax
  00522	eb 10		 jmp	 SHORT $LN53@DoInvoke
$LN52@DoInvoke:
  00524	6a 68		 push	 104			; 00000068H
  00526	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00529	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
  0052e	89 85 f4 fd ff
	ff		 mov	 DWORD PTR tv337[ebp], eax
$LN53@DoInvoke:
  00534	8b 45 1c	 mov	 eax, DWORD PTR _pRC$[ebp]
  00537	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR tv337[ebp]
  0053d	89 08		 mov	 DWORD PTR [eax], ecx

; 602  :     }

  0053f	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _Disp$13[ebp]
  00545	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
  0054a	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _VarResult$14[ebp]
  00550	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
$LN27@DoInvoke:

; 603  : 
; 604  :     // Trace result and outgoing parameters.
; 605  : #ifdef _DEBUG
; 606  :     LPCTSTR pszInfo = _T("");

  00555	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193680

; 607  :     TCHAR szHR[50];
; 608  :     if ( !_bOpened )

  0055f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00562	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  00569	85 c0		 test	 eax, eax
  0056b	75 0c		 jne	 SHORT $LN28@DoInvoke

; 609  :         pszInfo = _T(" -- Closed");

  0056d	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193683
  00577	eb 74		 jmp	 SHORT $LN29@DoInvoke
$LN28@DoInvoke:

; 610  :     else if ( nDispIDIndex >= _nMaxMethod )

  00579	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0057c	8b 55 18	 mov	 edx, DWORD PTR _nDispIDIndex$[ebp]
  0057f	3b 91 04 01 00
	00		 cmp	 edx, DWORD PTR [ecx+260]
  00585	7c 0c		 jl	 SHORT $LN30@DoInvoke

; 611  :         pszInfo = _T(" -- Not supported by SO");

  00587	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193686
  00591	eb 5a		 jmp	 SHORT $LN29@DoInvoke
$LN30@DoInvoke:

; 612  :     else if ( hRC != 0 )

  00593	83 7d 0c 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00597	74 54		 je	 SHORT $LN29@DoInvoke

; 613  :     {
; 614  :         _sntprintf( szHR, TSIZEOF(szHR), _T(" -- COM error: HR = 0x%X"), hRC );

  00599	8b 45 0c	 mov	 eax, DWORD PTR _hRC$[ebp]
  0059c	50		 push	 eax
  0059d	68 00 00 00 00	 push	 OFFSET $SG193688
  005a2	6a 32		 push	 50			; 00000032H
  005a4	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR _szHR$[ebp]
  005aa	51		 push	 ecx
  005ab	e8 00 00 00 00	 call	 __snwprintf
  005b0	83 c4 10	 add	 esp, 16			; 00000010H

; 615  :         NULTERMINATE(szHR);

  005b3	ba 02 00 00 00	 mov	 edx, 2
  005b8	6b c2 31	 imul	 eax, edx, 49
  005bb	89 85 14 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  005c1	83 bd 14 fe ff
	ff 64		 cmp	 DWORD PTR $T4[ebp], 100	; 00000064H
  005c8	73 02		 jae	 SHORT $LN54@DoInvoke
  005ca	eb 05		 jmp	 SHORT $LN55@DoInvoke
$LN54@DoInvoke:
  005cc	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN55@DoInvoke:
  005d1	33 c9		 xor	 ecx, ecx
  005d3	8b 95 14 fe ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  005d9	66 89 8c 15 3c
	fe ff ff	 mov	 WORD PTR _szHR$[ebp+edx], cx

; 616  :         pszInfo = szHR;

  005e1	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _szHR$[ebp]
  005e7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _pszInfo$[ebp], eax
$LN29@DoInvoke:

; 617  :     }
; 618  : 
; 619  :     DOTRACEV( ( _T("-%hs [Function]  RC=%d%s"), pFuncName, *pRC, pszInfo ) );

  005ed	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pszInfo$[ebp]
  005f3	51		 push	 ecx
  005f4	8b 55 1c	 mov	 edx, DWORD PTR _pRC$[ebp]
  005f7	8b 02		 mov	 eax, DWORD PTR [edx]
  005f9	50		 push	 eax
  005fa	8b 4d 08	 mov	 ecx, DWORD PTR _pFuncName$[ebp]
  005fd	51		 push	 ecx
  005fe	68 00 00 00 00	 push	 OFFSET $SG193689
  00603	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00606	52		 push	 edx
  00607	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0060c	83 c4 14	 add	 esp, 20			; 00000014H

; 620  :     for ( u = 0; ++u <= nParms; )

  0060f	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _u$[ebp], 0
$LN9@DoInvoke:
  00619	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _u$[ebp]
  0061f	83 c0 01	 add	 eax, 1
  00622	89 85 ec fe ff
	ff		 mov	 DWORD PTR _u$[ebp], eax
  00628	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _u$[ebp]
  0062e	3b 4d 14	 cmp	 ecx, DWORD PTR _nParms$[ebp]
  00631	0f 87 e9 01 00
	00		 ja	 $LN8@DoInvoke

; 621  :     {
; 622  :         pVar = &pParms[ nParms - u ];

  00637	8b 55 14	 mov	 edx, DWORD PTR _nParms$[ebp]
  0063a	2b 95 ec fe ff
	ff		 sub	 edx, DWORD PTR _u$[ebp]
  00640	6b c2 18	 imul	 eax, edx, 24
  00643	03 45 10	 add	 eax, DWORD PTR _pParms$[ebp]
  00646	89 45 f4	 mov	 DWORD PTR _pVar$[ebp], eax

; 623  :         _sntprintf( szParmNum, TSIZEOF(szParmNum), _T("    #%u: "), u );

  00649	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _u$[ebp]
  0064f	51		 push	 ecx
  00650	68 00 00 00 00	 push	 OFFSET $SG193690
  00655	6a 14		 push	 20			; 00000014H
  00657	8d 55 c8	 lea	 edx, DWORD PTR _szParmNum$[ebp]
  0065a	52		 push	 edx
  0065b	e8 00 00 00 00	 call	 __snwprintf
  00660	83 c4 10	 add	 esp, 16			; 00000010H

; 624  :         NULTERMINATE(szParmNum);

  00663	b8 02 00 00 00	 mov	 eax, 2
  00668	6b c8 13	 imul	 ecx, eax, 19
  0066b	89 8d 10 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00671	83 bd 10 fe ff
	ff 28		 cmp	 DWORD PTR $T3[ebp], 40	; 00000028H
  00678	73 02		 jae	 SHORT $LN56@DoInvoke
  0067a	eb 05		 jmp	 SHORT $LN57@DoInvoke
$LN56@DoInvoke:
  0067c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN57@DoInvoke:
  00681	33 d2		 xor	 edx, edx
  00683	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00689	66 89 54 05 c8	 mov	 WORD PTR _szParmNum$[ebp+eax], dx

; 625  :         switch ( pVar->vt )

  0068e	8b 4d f4	 mov	 ecx, DWORD PTR _pVar$[ebp]
  00691	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00694	89 95 f0 fd ff
	ff		 mov	 DWORD PTR tv374[ebp], edx
  0069a	81 bd f0 fd ff
	ff 03 40 00 00	 cmp	 DWORD PTR tv374[ebp], 16387 ; 00004003H
  006a4	74 41		 je	 SHORT $LN34@DoInvoke
  006a6	81 bd f0 fd ff
	ff 08 40 00 00	 cmp	 DWORD PTR tv374[ebp], 16392 ; 00004008H
  006b0	74 61		 je	 SHORT $LN35@DoInvoke
  006b2	81 bd f0 fd ff
	ff 0b 40 00 00	 cmp	 DWORD PTR tv374[ebp], 16395 ; 0000400bH
  006bc	74 05		 je	 SHORT $LN33@DoInvoke
  006be	e9 58 01 00 00	 jmp	 $LN10@DoInvoke
$LN33@DoInvoke:

; 626  :         {
; 627  :         case VT_BYREF|VT_BOOL: DOTRACEV( ( _T("%sBOOL* 0x%X"), szParmNum, *pVar->pboolVal ) ); break;

  006c3	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  006c6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  006c9	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  006cc	52		 push	 edx
  006cd	8d 45 c8	 lea	 eax, DWORD PTR _szParmNum$[ebp]
  006d0	50		 push	 eax
  006d1	68 00 00 00 00	 push	 OFFSET $SG193692
  006d6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006d9	51		 push	 ecx
  006da	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  006df	83 c4 10	 add	 esp, 16			; 00000010H
  006e2	e9 34 01 00 00	 jmp	 $LN10@DoInvoke
$LN34@DoInvoke:

; 628  :         case VT_BYREF|VT_I4: DOTRACEV( ( _T("%sLONG* %d (0x%X)"), szParmNum, *pVar->plVal, *pVar->plVal ) ); break;

  006e7	8b 55 f4	 mov	 edx, DWORD PTR _pVar$[ebp]
  006ea	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  006ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  006ef	51		 push	 ecx
  006f0	8b 55 f4	 mov	 edx, DWORD PTR _pVar$[ebp]
  006f3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  006f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f8	51		 push	 ecx
  006f9	8d 55 c8	 lea	 edx, DWORD PTR _szParmNum$[ebp]
  006fc	52		 push	 edx
  006fd	68 00 00 00 00	 push	 OFFSET $SG193694
  00702	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00705	50		 push	 eax
  00706	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0070b	83 c4 14	 add	 esp, 20			; 00000014H
  0070e	e9 08 01 00 00	 jmp	 $LN10@DoInvoke
$LN35@DoInvoke:

; 629  :         case VT_BYREF|VT_BSTR:
; 630  :             {
; 631  :                 _sntprintf( szPrefix, TSIZEOF(szPrefix), _T("%sSTRING*;"), szParmNum );

  00713	8d 4d c8	 lea	 ecx, DWORD PTR _szParmNum$[ebp]
  00716	51		 push	 ecx
  00717	68 00 00 00 00	 push	 OFFSET $SG193696
  0071c	6a 64		 push	 100			; 00000064H
  0071e	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szPrefix$[ebp]
  00724	52		 push	 edx
  00725	e8 00 00 00 00	 call	 __snwprintf
  0072a	83 c4 10	 add	 esp, 16			; 00000010H

; 632  :                 NULTERMINATE(szPrefix);

  0072d	b8 02 00 00 00	 mov	 eax, 2
  00732	6b c8 63	 imul	 ecx, eax, 99
  00735	89 8d 0c fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0073b	81 bd 0c fe ff
	ff c8 00 00 00	 cmp	 DWORD PTR $T2[ebp], 200	; 000000c8H
  00745	73 02		 jae	 SHORT $LN58@DoInvoke
  00747	eb 05		 jmp	 SHORT $LN59@DoInvoke
$LN58@DoInvoke:
  00749	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN59@DoInvoke:
  0074e	33 d2		 xor	 edx, edx
  00750	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00756	66 89 94 05 f8
	fe ff ff	 mov	 WORD PTR _szPrefix$[ebp+eax], dx

; 633  :                 UINT nStrRefLen;
; 634  :                 OposVariant* pStrRef = &pStrRefs[u-1];

  0075e	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _u$[ebp]
  00764	83 e9 01	 sub	 ecx, 1
  00767	6b d1 18	 imul	 edx, ecx, 24
  0076a	03 95 f0 fe ff
	ff		 add	 edx, DWORD PTR _pStrRefs$[ebp]
  00770	89 95 30 fe ff
	ff		 mov	 DWORD PTR _pStrRef$11[ebp], edx

; 635  :                 if ( pStrRef->vt == VT_BSTR &&
; 636  :                      ( nStrRefLen = ::SysStringByteLen( pStrRef->bstrVal ) ) == ::SysStringByteLen( *pVar->pbstrVal ) &&

  00776	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _pStrRef$11[ebp]
  0077c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0077f	83 f9 08	 cmp	 ecx, 8
  00782	75 7f		 jne	 SHORT $LN36@DoInvoke
  00784	8b f4		 mov	 esi, esp
  00786	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _pStrRef$11[ebp]
  0078c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0078f	50		 push	 eax
  00790	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringByteLen@4
  00796	3b f4		 cmp	 esi, esp
  00798	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0079d	89 85 34 fe ff
	ff		 mov	 DWORD PTR _nStrRefLen$12[ebp], eax
  007a3	8b 4d f4	 mov	 ecx, DWORD PTR _pVar$[ebp]
  007a6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  007a9	8b f4		 mov	 esi, esp
  007ab	8b 02		 mov	 eax, DWORD PTR [edx]
  007ad	50		 push	 eax
  007ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringByteLen@4
  007b4	3b f4		 cmp	 esi, esp
  007b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007bb	39 85 34 fe ff
	ff		 cmp	 DWORD PTR _nStrRefLen$12[ebp], eax
  007c1	75 40		 jne	 SHORT $LN36@DoInvoke
  007c3	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR _nStrRefLen$12[ebp]
  007c9	51		 push	 ecx
  007ca	8b 55 f4	 mov	 edx, DWORD PTR _pVar$[ebp]
  007cd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  007d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  007d2	51		 push	 ecx
  007d3	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR _pStrRef$11[ebp]
  007d9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  007dc	50		 push	 eax
  007dd	e8 00 00 00 00	 call	 _memcmp
  007e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  007e5	85 c0		 test	 eax, eax
  007e7	75 1a		 jne	 SHORT $LN36@DoInvoke

; 637  :                       0 == ::memcmp( pStrRef->bstrVal, *pVar->pbstrVal, nStrRefLen ) )
; 638  :                     DOTRACEV( ( _T("%s Unchanged"), szPrefix ) );

  007e9	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szPrefix$[ebp]
  007ef	51		 push	 ecx
  007f0	68 00 00 00 00	 push	 OFFSET $SG193699
  007f5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  007f8	52		 push	 edx
  007f9	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  007fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00801	eb 18		 jmp	 SHORT $LN10@DoInvoke
$LN36@DoInvoke:

; 639  :                 else
; 640  :                     DOTRACESTRINGV( szPrefix, *pVar->pbstrVal );

  00803	8b 45 f4	 mov	 eax, DWORD PTR _pVar$[ebp]
  00806	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00809	8b 11		 mov	 edx, DWORD PTR [ecx]
  0080b	52		 push	 edx
  0080c	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szPrefix$[ebp]
  00812	50		 push	 eax
  00813	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00816	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ; COPOSDeviceMonitor::WriteTraceString
$LN10@DoInvoke:

; 641  :                 break;
; 642  :             }
; 643  :         }
; 644  :     }

  0081b	e9 f9 fd ff ff	 jmp	 $LN9@DoInvoke
$LN8@DoInvoke:

; 645  : 
; 646  :     delete [] pStrRefs;

  00820	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pStrRefs$[ebp]
  00826	89 8d 08 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0082c	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR $T1[ebp], 0
  00833	74 15		 je	 SHORT $LN60@DoInvoke
  00835	6a 03		 push	 3
  00837	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0083d	e8 00 00 00 00	 call	 ??_EOposVariant@@QAEPAXI@Z
  00842	89 85 ec fd ff
	ff		 mov	 DWORD PTR tv471[ebp], eax
  00848	eb 0a		 jmp	 SHORT $LN61@DoInvoke
$LN60@DoInvoke:
  0084a	c7 85 ec fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv471[ebp], 0
$LN61@DoInvoke:

; 647  : #endif
; 648  : 
; 649  :     return hRC;

  00854	8b 45 0c	 mov	 eax, DWORD PTR _hRC$[ebp]
$LN38@DoInvoke:

; 650  : }

  00857	52		 push	 edx
  00858	8b cd		 mov	 ecx, ebp
  0085a	50		 push	 eax
  0085b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN71@DoInvoke
  00861	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00866	58		 pop	 eax
  00867	5a		 pop	 edx
  00868	5f		 pop	 edi
  00869	5e		 pop	 esi
  0086a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0086d	33 cd		 xor	 ecx, ebp
  0086f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00874	81 c4 14 02 00
	00		 add	 esp, 532		; 00000214H
  0087a	3b ec		 cmp	 ebp, esp
  0087c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00881	8b e5		 mov	 esp, ebp
  00883	5d		 pop	 ebp
  00884	c2 1c 00	 ret	 28			; 0000001cH
  00887	90		 npad	 1
$LN71@DoInvoke:
  00888	06 00 00 00	 DD	 6
  0088c	00 00 00 00	 DD	 $LN70@DoInvoke
$LN70@DoInvoke:
  00890	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00894	28 00 00 00	 DD	 40			; 00000028H
  00898	00 00 00 00	 DD	 $LN64@DoInvoke
  0089c	f8 fe ff ff	 DD	 -264			; fffffef8H
  008a0	c8 00 00 00	 DD	 200			; 000000c8H
  008a4	00 00 00 00	 DD	 $LN65@DoInvoke
  008a8	e4 fe ff ff	 DD	 -284			; fffffee4H
  008ac	04 00 00 00	 DD	 4
  008b0	00 00 00 00	 DD	 $LN66@DoInvoke
  008b4	c4 fe ff ff	 DD	 -316			; fffffec4H
  008b8	18 00 00 00	 DD	 24			; 00000018H
  008bc	00 00 00 00	 DD	 $LN67@DoInvoke
  008c0	ac fe ff ff	 DD	 -340			; fffffeacH
  008c4	10 00 00 00	 DD	 16			; 00000010H
  008c8	00 00 00 00	 DD	 $LN68@DoInvoke
  008cc	3c fe ff ff	 DD	 -452			; fffffe3cH
  008d0	64 00 00 00	 DD	 100			; 00000064H
  008d4	00 00 00 00	 DD	 $LN69@DoInvoke
$LN69@DoInvoke:
  008d8	73		 DB	 115			; 00000073H
  008d9	7a		 DB	 122			; 0000007aH
  008da	48		 DB	 72			; 00000048H
  008db	52		 DB	 82			; 00000052H
  008dc	00		 DB	 0
$LN68@DoInvoke:
  008dd	44		 DB	 68			; 00000044H
  008de	69		 DB	 105			; 00000069H
  008df	73		 DB	 115			; 00000073H
  008e0	70		 DB	 112			; 00000070H
  008e1	00		 DB	 0
$LN67@DoInvoke:
  008e2	56		 DB	 86			; 00000056H
  008e3	61		 DB	 97			; 00000061H
  008e4	72		 DB	 114			; 00000072H
  008e5	52		 DB	 82			; 00000052H
  008e6	65		 DB	 101			; 00000065H
  008e7	73		 DB	 115			; 00000073H
  008e8	75		 DB	 117			; 00000075H
  008e9	6c		 DB	 108			; 0000006cH
  008ea	74		 DB	 116			; 00000074H
  008eb	00		 DB	 0
$LN66@DoInvoke:
  008ec	68		 DB	 104			; 00000068H
  008ed	52		 DB	 82			; 00000052H
  008ee	43		 DB	 67			; 00000043H
  008ef	54		 DB	 84			; 00000054H
  008f0	6d		 DB	 109			; 0000006dH
  008f1	70		 DB	 112			; 00000070H
  008f2	00		 DB	 0
$LN65@DoInvoke:
  008f3	73		 DB	 115			; 00000073H
  008f4	7a		 DB	 122			; 0000007aH
  008f5	50		 DB	 80			; 00000050H
  008f6	72		 DB	 114			; 00000072H
  008f7	65		 DB	 101			; 00000065H
  008f8	66		 DB	 102			; 00000066H
  008f9	69		 DB	 105			; 00000069H
  008fa	78		 DB	 120			; 00000078H
  008fb	00		 DB	 0
$LN64@DoInvoke:
  008fc	73		 DB	 115			; 00000073H
  008fd	7a		 DB	 122			; 0000007aH
  008fe	50		 DB	 80			; 00000050H
  008ff	61		 DB	 97			; 00000061H
  00900	72		 DB	 114			; 00000072H
  00901	6d		 DB	 109			; 0000006dH
  00902	4e		 DB	 78			; 0000004eH
  00903	75		 DB	 117			; 00000075H
  00904	6d		 DB	 109			; 0000006dH
  00905	00		 DB	 0
  00906	66 90		 npad	 2
$LN63@DoInvoke:
  00908	00 00 00 00	 DD	 $LN12@DoInvoke
  0090c	00 00 00 00	 DD	 $LN15@DoInvoke
  00910	00 00 00 00	 DD	 $LN18@DoInvoke
  00914	00 00 00 00	 DD	 $LN17@DoInvoke
  00918	00 00 00 00	 DD	 $LN20@DoInvoke
$LN62@DoInvoke:
  0091c	00		 DB	 0
  0091d	04		 DB	 4
  0091e	04		 DB	 4
  0091f	01		 DB	 1
  00920	04		 DB	 4
  00921	04		 DB	 4
  00922	04		 DB	 4
  00923	04		 DB	 4
  00924	02		 DB	 2
  00925	03		 DB	 3
?DoInvoke@COPOSDeviceMonitor@@IAEJPBDJPAVOposVariant@@IHPAJ_N@Z ENDP ; COPOSDeviceMonitor::DoInvoke
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -460						; size = 4
$T2 = -456						; size = 4
_szHR$ = -448						; size = 100
_pszInfo$ = -344					; size = 4
_Disp$3 = -336						; size = 16
_VarResult$4 = -312					; size = 24
_Vars$5 = -280						; size = 48
_hRC$ = -224						; size = 4
_szPrefix$ = -212					; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pPropName$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_sValue$ = 16						; size = 4
_nMinor$ = 20						; size = 4
?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJPA_WJ@Z PROC	; COPOSDeviceMonitor::SetOposProp
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 34 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-460]
  00012	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 460  : #ifdef _DEBUG
; 461  :     TCHAR szPrefix[100];
; 462  :     _sntprintf( szPrefix, TSIZEOF(szPrefix), _T("+%hs [Set]."), pPropName );

  0002c	8b 45 08	 mov	 eax, DWORD PTR _pPropName$[ebp]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET $SG193567
  00035	6a 64		 push	 100			; 00000064H
  00037	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _szPrefix$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __snwprintf
  00043	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :     NULTERMINATE(szPrefix);

  00046	ba 02 00 00 00	 mov	 edx, 2
  0004b	6b c2 63	 imul	 eax, edx, 99
  0004e	89 85 38 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00054	81 bd 38 fe ff
	ff c8 00 00 00	 cmp	 DWORD PTR $T2[ebp], 200	; 000000c8H
  0005e	73 02		 jae	 SHORT $LN12@SetOposPro
  00060	eb 05		 jmp	 SHORT $LN13@SetOposPro
$LN12@SetOposPro:
  00062	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN13@SetOposPro:
  00067	33 c9		 xor	 ecx, ecx
  00069	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0006f	66 89 8c 15 2c
	ff ff ff	 mov	 WORD PTR _szPrefix$[ebp+edx], cx

; 464  :     DOTRACESTRINGV( szPrefix, sValue );

  00077	8b 45 10	 mov	 eax, DWORD PTR _sValue$[ebp]
  0007a	50		 push	 eax
  0007b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _szPrefix$[ebp]
  00081	51		 push	 ecx
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ; COPOSDeviceMonitor::WriteTraceString

; 465  : #endif
; 466  :     HRESULT hRC = S_OK;

  0008a	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hRC$[ebp], 0

; 467  : 
; 468  :     SetRC();                            // Clear COResultCode.

  00094	6a ff		 push	 -1
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 469  : 
; 470  :     // If open and SO version support's property...
; 471  :     if ( _bOpened && _nSOMinor >= nMinor )

  0009e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 0d 01 00
	00		 je	 $LN2@SetOposPro
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  000b9	3b 55 14	 cmp	 edx, DWORD PTR _nMinor$[ebp]
  000bc	0f 8c fb 00 00
	00		 jl	 $LN2@SetOposPro

; 472  :     {
; 473  :         // Set up and call the SO's set property number method.
; 474  :         OposVariant Vars[2];

  000c2	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  000c7	6a 02		 push	 2
  000c9	6a 18		 push	 24			; 00000018H
  000cb	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _Vars$5[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 475  :         OposVariantResult VarResult;

  000d7	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _VarResult$4[ebp]
  000dd	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 476  :         Vars[1].SetLONG( nIndex );

  000e2	8b 4d 0c	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  000e5	51		 push	 ecx
  000e6	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000eb	c1 e2 00	 shl	 edx, 0
  000ee	8d 8c 15 e8 fe
	ff ff		 lea	 ecx, DWORD PTR _Vars$5[ebp+edx]
  000f5	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 477  :         Vars[0].SetBSTR( sValue, hRC );

  000fa	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _hRC$[ebp]
  00100	50		 push	 eax
  00101	8b 4d 10	 mov	 ecx, DWORD PTR _sValue$[ebp]
  00104	51		 push	 ecx
  00105	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0010a	6b c2 00	 imul	 eax, edx, 0
  0010d	8d 8c 05 e8 fe
	ff ff		 lea	 ecx, DWORD PTR _Vars$5[ebp+eax]
  00114	e8 00 00 00 00	 call	 ?SetBSTR@OposVariant@@QAEXPA_WAAJ@Z ; OposVariant::SetBSTR

; 478  :         OposDispParms Disp( Vars, 2 );

  00119	6a 02		 push	 2
  0011b	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Vars$5[ebp]
  00121	51		 push	 ecx
  00122	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _Disp$3[ebp]
  00128	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 479  :         if ( hRC == S_OK )

  0012d	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _hRC$[ebp], 0
  00134	75 5a		 jne	 SHORT $LN4@SetOposPro

; 480  :             hRC = _pService->Invoke(

  00136	8b f4		 mov	 esi, esp
  00138	6a 00		 push	 0
  0013a	6a 00		 push	 0
  0013c	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _VarResult$4[ebp]
  00142	52		 push	 edx
  00143	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _Disp$3[ebp]
  00149	50		 push	 eax
  0014a	6a 01		 push	 1
  0014c	68 00 04 00 00	 push	 1024			; 00000400H
  00151	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	c1 e1 02	 shl	 ecx, 2
  0015e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00161	8b 84 0a 08 01
	00 00		 mov	 eax, DWORD PTR [edx+ecx+264]
  00168	50		 push	 eax
  00169	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00172	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00175	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  0017b	8b 12		 mov	 edx, DWORD PTR [edx]
  0017d	51		 push	 ecx
  0017e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00181	ff d0		 call	 eax
  00183	3b f4		 cmp	 esi, esp
  00185	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018a	89 85 20 ff ff
	ff		 mov	 DWORD PTR _hRC$[ebp], eax
$LN4@SetOposPro:

; 481  :                 _DispIDs[nDISetPropertyString], IID_NULL, LOCALE_USER_DEFAULT,
; 482  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 483  :     }

  00190	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _Disp$3[ebp]
  00196	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
  0019b	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _VarResult$4[ebp]
  001a1	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
  001a6	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  001ab	6a 02		 push	 2
  001ad	6a 18		 push	 24			; 00000018H
  001af	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Vars$5[ebp]
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  001bb	eb 18		 jmp	 SHORT $LN3@SetOposPro
$LN2@SetOposPro:

; 484  : 
; 485  :     // Handle error.
; 486  :     else if ( _bOpened )                // If open but not supported,

  001bd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c0	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  001c7	85 c0		 test	 eax, eax
  001c9	74 0a		 je	 SHORT $LN3@SetOposPro

; 487  :         SetRC( OPOS_E_NOSERVICE );      //   set COResultCode.

  001cb	6a 68		 push	 104			; 00000068H
  001cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d0	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
$LN3@SetOposPro:

; 488  : 
; 489  :     // Trace result.
; 490  : #ifdef _DEBUG
; 491  :     LPCTSTR pszInfo = _T("");

  001d5	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193572

; 492  :     TCHAR szHR[50];
; 493  :     if ( !_bOpened )

  001df	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e2	0f b6 91 e4 00
	00 00		 movzx	 edx, BYTE PTR [ecx+228]
  001e9	85 d2		 test	 edx, edx
  001eb	75 0c		 jne	 SHORT $LN6@SetOposPro

; 494  :         pszInfo = _T(" -- Closed");

  001ed	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193575
  001f7	eb 7a		 jmp	 SHORT $LN7@SetOposPro
$LN6@SetOposPro:

; 495  :     else if ( _nSOMinor < nMinor )

  001f9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001fc	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00202	3b 4d 14	 cmp	 ecx, DWORD PTR _nMinor$[ebp]
  00205	7d 0c		 jge	 SHORT $LN8@SetOposPro

; 496  :         pszInfo = _T(" -- Not supported by SO");

  00207	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193578
  00211	eb 60		 jmp	 SHORT $LN7@SetOposPro
$LN8@SetOposPro:

; 497  :     else if ( hRC != 0 )

  00213	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _hRC$[ebp], 0
  0021a	74 57		 je	 SHORT $LN7@SetOposPro

; 498  :     {
; 499  :         _sntprintf( szHR, TSIZEOF(szHR), _T(" -- COM error: HR = 0x%X"), hRC );

  0021c	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _hRC$[ebp]
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET $SG193580
  00228	6a 32		 push	 50			; 00000032H
  0022a	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szHR$[ebp]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 __snwprintf
  00236	83 c4 10	 add	 esp, 16			; 00000010H

; 500  :         NULTERMINATE(szHR);

  00239	b9 02 00 00 00	 mov	 ecx, 2
  0023e	6b d1 31	 imul	 edx, ecx, 49
  00241	89 95 34 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00247	83 bd 34 fe ff
	ff 64		 cmp	 DWORD PTR $T1[ebp], 100	; 00000064H
  0024e	73 02		 jae	 SHORT $LN14@SetOposPro
  00250	eb 05		 jmp	 SHORT $LN15@SetOposPro
$LN14@SetOposPro:
  00252	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN15@SetOposPro:
  00257	33 c0		 xor	 eax, eax
  00259	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0025f	66 89 84 0d 40
	fe ff ff	 mov	 WORD PTR _szHR$[ebp+ecx], ax

; 501  :         pszInfo = szHR;

  00267	8d 95 40 fe ff
	ff		 lea	 edx, DWORD PTR _szHR$[ebp]
  0026d	89 95 a8 fe ff
	ff		 mov	 DWORD PTR _pszInfo$[ebp], edx
$LN7@SetOposPro:

; 502  :     }
; 503  : 
; 504  :     DOTRACEV( ( _T("-%hs [Set]%s"), pPropName, pszInfo ) );

  00273	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _pszInfo$[ebp]
  00279	50		 push	 eax
  0027a	8b 4d 08	 mov	 ecx, DWORD PTR _pPropName$[ebp]
  0027d	51		 push	 ecx
  0027e	68 00 00 00 00	 push	 OFFSET $SG193581
  00283	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00286	52		 push	 edx
  00287	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0028c	83 c4 10	 add	 esp, 16			; 00000010H

; 505  : #endif
; 506  : 
; 507  :     return hRC;

  0028f	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _hRC$[ebp]
$LN11@SetOposPro:

; 508  : }

  00295	52		 push	 edx
  00296	8b cd		 mov	 ecx, ebp
  00298	50		 push	 eax
  00299	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN23@SetOposPro
  0029f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002a4	58		 pop	 eax
  002a5	5a		 pop	 edx
  002a6	5f		 pop	 edi
  002a7	5e		 pop	 esi
  002a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ab	33 cd		 xor	 ecx, ebp
  002ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b2	81 c4 cc 01 00
	00		 add	 esp, 460		; 000001ccH
  002b8	3b ec		 cmp	 ebp, esp
  002ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c2 10 00	 ret	 16			; 00000010H
  002c5	0f 1f 00	 npad	 3
$LN23@SetOposPro:
  002c8	06 00 00 00	 DD	 6
  002cc	00 00 00 00	 DD	 $LN22@SetOposPro
$LN22@SetOposPro:
  002d0	2c ff ff ff	 DD	 -212			; ffffff2cH
  002d4	c8 00 00 00	 DD	 200			; 000000c8H
  002d8	00 00 00 00	 DD	 $LN16@SetOposPro
  002dc	20 ff ff ff	 DD	 -224			; ffffff20H
  002e0	04 00 00 00	 DD	 4
  002e4	00 00 00 00	 DD	 $LN17@SetOposPro
  002e8	e8 fe ff ff	 DD	 -280			; fffffee8H
  002ec	30 00 00 00	 DD	 48			; 00000030H
  002f0	00 00 00 00	 DD	 $LN18@SetOposPro
  002f4	c8 fe ff ff	 DD	 -312			; fffffec8H
  002f8	18 00 00 00	 DD	 24			; 00000018H
  002fc	00 00 00 00	 DD	 $LN19@SetOposPro
  00300	b0 fe ff ff	 DD	 -336			; fffffeb0H
  00304	10 00 00 00	 DD	 16			; 00000010H
  00308	00 00 00 00	 DD	 $LN20@SetOposPro
  0030c	40 fe ff ff	 DD	 -448			; fffffe40H
  00310	64 00 00 00	 DD	 100			; 00000064H
  00314	00 00 00 00	 DD	 $LN21@SetOposPro
$LN21@SetOposPro:
  00318	73		 DB	 115			; 00000073H
  00319	7a		 DB	 122			; 0000007aH
  0031a	48		 DB	 72			; 00000048H
  0031b	52		 DB	 82			; 00000052H
  0031c	00		 DB	 0
$LN20@SetOposPro:
  0031d	44		 DB	 68			; 00000044H
  0031e	69		 DB	 105			; 00000069H
  0031f	73		 DB	 115			; 00000073H
  00320	70		 DB	 112			; 00000070H
  00321	00		 DB	 0
$LN19@SetOposPro:
  00322	56		 DB	 86			; 00000056H
  00323	61		 DB	 97			; 00000061H
  00324	72		 DB	 114			; 00000072H
  00325	52		 DB	 82			; 00000052H
  00326	65		 DB	 101			; 00000065H
  00327	73		 DB	 115			; 00000073H
  00328	75		 DB	 117			; 00000075H
  00329	6c		 DB	 108			; 0000006cH
  0032a	74		 DB	 116			; 00000074H
  0032b	00		 DB	 0
$LN18@SetOposPro:
  0032c	56		 DB	 86			; 00000056H
  0032d	61		 DB	 97			; 00000061H
  0032e	72		 DB	 114			; 00000072H
  0032f	73		 DB	 115			; 00000073H
  00330	00		 DB	 0
$LN17@SetOposPro:
  00331	68		 DB	 104			; 00000068H
  00332	52		 DB	 82			; 00000052H
  00333	43		 DB	 67			; 00000043H
  00334	00		 DB	 0
$LN16@SetOposPro:
  00335	73		 DB	 115			; 00000073H
  00336	7a		 DB	 122			; 0000007aH
  00337	50		 DB	 80			; 00000050H
  00338	72		 DB	 114			; 00000072H
  00339	65		 DB	 101			; 00000065H
  0033a	66		 DB	 102			; 00000066H
  0033b	69		 DB	 105			; 00000069H
  0033c	78		 DB	 120			; 00000078H
  0033d	00		 DB	 0
?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJPA_WJ@Z ENDP	; COPOSDeviceMonitor::SetOposProp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -324						; size = 4
_szPrefix$ = -316					; size = 200
_pszFormat$ = -112					; size = 4
_Disp$2 = -104						; size = 16
_VarResult$3 = -80					; size = 24
_Var$4 = -48						; size = 24
_hRC$ = -16						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pPropName$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_psValue$ = 16						; size = 4
_nMinor$ = 20						; size = 4
?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z PROC	; COPOSDeviceMonitor::GetOposProp
; _this$ = ecx

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-324]
  00012	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 411  :     DOTRACEV( ( _T("+%hs [Get]"), pPropName ) );

  0002c	8b 45 08	 mov	 eax, DWORD PTR _pPropName$[ebp]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET $SG193522
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 
; 413  :     // Initialize return value.
; 414  :     HRESULT hRC = S_OK;

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 415  : 
; 416  :     // If open and SO version support's property...
; 417  :     if ( _bOpened && _nSOMinor >= nMinor )

  00048	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  00052	85 c0		 test	 eax, eax
  00054	0f 84 c2 00 00
	00		 je	 $LN2@GetOposPro
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  00063	3b 55 14	 cmp	 edx, DWORD PTR _nMinor$[ebp]
  00066	0f 8c b0 00 00
	00		 jl	 $LN2@GetOposPro

; 418  :     {
; 419  :         // Set up and call the SO's get property number method.
; 420  :         OposVariant Var;

  0006c	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  0006f	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 421  :         OposVariantResult VarResult;

  00074	8d 4d b0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  00077	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 422  :         Var.SetLONG( nIndex );

  0007c	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0007f	50		 push	 eax
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  00083	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 423  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };

  00088	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  0008b	89 4d 98	 mov	 DWORD PTR _Disp$2[ebp], ecx
  0008e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _Disp$2[ebp+4], 0
  00095	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR _Disp$2[ebp+8], 1
  0009c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _Disp$2[ebp+12], 0

; 424  :         hRC = _pService->Invoke(

  000a3	8b f4		 mov	 esi, esp
  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	8d 55 b0	 lea	 edx, DWORD PTR _VarResult$3[ebp]
  000ac	52		 push	 edx
  000ad	8d 45 98	 lea	 eax, DWORD PTR _Disp$2[ebp]
  000b0	50		 push	 eax
  000b1	6a 01		 push	 1
  000b3	68 00 04 00 00	 push	 1024			; 00000400H
  000b8	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  000bd	b9 04 00 00 00	 mov	 ecx, 4
  000c2	6b d1 03	 imul	 edx, ecx, 3
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c8	8b 8c 10 08 01
	00 00		 mov	 ecx, DWORD PTR [eax+edx+264]
  000cf	51		 push	 ecx
  000d0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  000e2	8b 00		 mov	 eax, DWORD PTR [eax]
  000e4	52		 push	 edx
  000e5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000e8	ff d1		 call	 ecx
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	89 45 f0	 mov	 DWORD PTR _hRC$[ebp], eax

; 425  :                 _DispIDs[nDIGetPropertyString], IID_NULL, LOCALE_USER_DEFAULT,
; 426  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 427  : 
; 428  :         // If succeeds, then return result.
; 429  :         if ( hRC == S_OK )

  000f4	83 7d f0 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  000f8	75 10		 jne	 SHORT $LN4@GetOposPro

; 430  :             VarResult.ChangeBSTR( psValue, hRC );

  000fa	8d 55 f0	 lea	 edx, DWORD PTR _hRC$[ebp]
  000fd	52		 push	 edx
  000fe	8b 45 10	 mov	 eax, DWORD PTR _psValue$[ebp]
  00101	50		 push	 eax
  00102	8d 4d b0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  00105	e8 00 00 00 00	 call	 ?ChangeBSTR@OposVariant@@QAEXPAPA_WAAJ@Z ; OposVariant::ChangeBSTR
$LN4@GetOposPro:

; 431  :     }

  0010a	8d 4d b0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  0010d	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
  00112	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  00115	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0011a	eb 19		 jmp	 SHORT $LN3@GetOposPro
$LN2@GetOposPro:

; 432  :     // Else return default string.
; 433  :     else
; 434  :         *psValue = ::SysAllocString( L"[Error]" );

  0011c	8b f4		 mov	 esi, esp
  0011e	68 00 00 00 00	 push	 OFFSET $SG193526
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocString@4
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b 4d 10	 mov	 ecx, DWORD PTR _psValue$[ebp]
  00133	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@GetOposPro:

; 435  : 
; 436  :     // Trace result.
; 437  : #ifdef _DEBUG
; 438  :     LPCTSTR pszFormat = _T("-%hs [Get].");

  00135	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszFormat$[ebp], OFFSET $SG193527

; 439  :     if ( !_bOpened )

  0013c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  00146	85 c0		 test	 eax, eax
  00148	75 09		 jne	 SHORT $LN5@GetOposPro

; 440  :         pszFormat = _T("-%hs [Get] -- Closed.");

  0014a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszFormat$[ebp], OFFSET $SG193530
  00151	eb 24		 jmp	 SHORT $LN6@GetOposPro
$LN5@GetOposPro:

; 441  :     else if ( _nSOMinor < nMinor )

  00153	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  0015c	3b 55 14	 cmp	 edx, DWORD PTR _nMinor$[ebp]
  0015f	7d 09		 jge	 SHORT $LN7@GetOposPro

; 442  :         pszFormat = _T("-%hs [Get] -- Not supported by SO.");

  00161	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszFormat$[ebp], OFFSET $SG193533
  00168	eb 0d		 jmp	 SHORT $LN6@GetOposPro
$LN7@GetOposPro:

; 443  :     else if ( hRC != 0 )

  0016a	83 7d f0 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  0016e	74 07		 je	 SHORT $LN6@GetOposPro

; 444  :         pszFormat = _T("-%hs [Get] -- COM error: HR = 0x%X");

  00170	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszFormat$[ebp], OFFSET $SG193535
$LN6@GetOposPro:

; 445  : 
; 446  :     TCHAR szPrefix[100];
; 447  :     _sntprintf( szPrefix, TSIZEOF(szPrefix), pszFormat, pPropName, hRC );

  00177	8b 45 f0	 mov	 eax, DWORD PTR _hRC$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _pPropName$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 90	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  00182	52		 push	 edx
  00183	6a 64		 push	 100			; 00000064H
  00185	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _szPrefix$[ebp]
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 __snwprintf
  00191	83 c4 14	 add	 esp, 20			; 00000014H

; 448  :     NULTERMINATE(szPrefix);

  00194	b9 02 00 00 00	 mov	 ecx, 2
  00199	6b d1 63	 imul	 edx, ecx, 99
  0019c	89 95 bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  001a2	81 bd bc fe ff
	ff c8 00 00 00	 cmp	 DWORD PTR $T1[ebp], 200	; 000000c8H
  001ac	73 02		 jae	 SHORT $LN11@GetOposPro
  001ae	eb 05		 jmp	 SHORT $LN12@GetOposPro
$LN11@GetOposPro:
  001b0	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN12@GetOposPro:
  001b5	33 c0		 xor	 eax, eax
  001b7	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  001bd	66 89 84 0d c4
	fe ff ff	 mov	 WORD PTR _szPrefix$[ebp+ecx], ax

; 449  :     DOTRACESTRINGV( szPrefix, *psValue );

  001c5	8b 55 10	 mov	 edx, DWORD PTR _psValue$[ebp]
  001c8	8b 02		 mov	 eax, DWORD PTR [edx]
  001ca	50		 push	 eax
  001cb	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _szPrefix$[ebp]
  001d1	51		 push	 ecx
  001d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d5	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ; COPOSDeviceMonitor::WriteTraceString

; 450  : #endif
; 451  : 
; 452  :     return hRC;

  001da	8b 45 f0	 mov	 eax, DWORD PTR _hRC$[ebp]
$LN10@GetOposPro:

; 453  : }

  001dd	52		 push	 edx
  001de	8b cd		 mov	 ecx, ebp
  001e0	50		 push	 eax
  001e1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@GetOposPro
  001e7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ec	58		 pop	 eax
  001ed	5a		 pop	 edx
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fa	81 c4 44 01 00
	00		 add	 esp, 324		; 00000144H
  00200	3b ec		 cmp	 ebp, esp
  00202	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c2 10 00	 ret	 16			; 00000010H
  0020d	0f 1f 00	 npad	 3
$LN19@GetOposPro:
  00210	05 00 00 00	 DD	 5
  00214	00 00 00 00	 DD	 $LN18@GetOposPro
$LN18@GetOposPro:
  00218	f0 ff ff ff	 DD	 -16			; fffffff0H
  0021c	04 00 00 00	 DD	 4
  00220	00 00 00 00	 DD	 $LN13@GetOposPro
  00224	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00228	18 00 00 00	 DD	 24			; 00000018H
  0022c	00 00 00 00	 DD	 $LN14@GetOposPro
  00230	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00234	18 00 00 00	 DD	 24			; 00000018H
  00238	00 00 00 00	 DD	 $LN15@GetOposPro
  0023c	98 ff ff ff	 DD	 -104			; ffffff98H
  00240	10 00 00 00	 DD	 16			; 00000010H
  00244	00 00 00 00	 DD	 $LN16@GetOposPro
  00248	c4 fe ff ff	 DD	 -316			; fffffec4H
  0024c	c8 00 00 00	 DD	 200			; 000000c8H
  00250	00 00 00 00	 DD	 $LN17@GetOposPro
$LN17@GetOposPro:
  00254	73		 DB	 115			; 00000073H
  00255	7a		 DB	 122			; 0000007aH
  00256	50		 DB	 80			; 00000050H
  00257	72		 DB	 114			; 00000072H
  00258	65		 DB	 101			; 00000065H
  00259	66		 DB	 102			; 00000066H
  0025a	69		 DB	 105			; 00000069H
  0025b	78		 DB	 120			; 00000078H
  0025c	00		 DB	 0
$LN16@GetOposPro:
  0025d	44		 DB	 68			; 00000044H
  0025e	69		 DB	 105			; 00000069H
  0025f	73		 DB	 115			; 00000073H
  00260	70		 DB	 112			; 00000070H
  00261	00		 DB	 0
$LN15@GetOposPro:
  00262	56		 DB	 86			; 00000056H
  00263	61		 DB	 97			; 00000061H
  00264	72		 DB	 114			; 00000072H
  00265	52		 DB	 82			; 00000052H
  00266	65		 DB	 101			; 00000065H
  00267	73		 DB	 115			; 00000073H
  00268	75		 DB	 117			; 00000075H
  00269	6c		 DB	 108			; 0000006cH
  0026a	74		 DB	 116			; 00000074H
  0026b	00		 DB	 0
$LN14@GetOposPro:
  0026c	56		 DB	 86			; 00000056H
  0026d	61		 DB	 97			; 00000061H
  0026e	72		 DB	 114			; 00000072H
  0026f	00		 DB	 0
$LN13@GetOposPro:
  00270	68		 DB	 104			; 00000068H
  00271	52		 DB	 82			; 00000052H
  00272	43		 DB	 67			; 00000043H
  00273	00		 DB	 0
?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAPA_WJ@Z ENDP	; COPOSDeviceMonitor::GetOposProp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_pPropName$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_nValue$ = 16						; size = 2
_nMinor$ = 20						; size = 4
?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z PROC	; COPOSDeviceMonitor::SetOposProp
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 399  :     // If setting a boolean, then force to use VC++ TRUE or FALSE,
; 400  :     //   since several vendors test specifically against TRUE (1)
; 401  :     //   rather than non-zero.
; 402  :     return SetOposProp( DEBUGPARAM(pPropName)

  00017	0f bf 45 10	 movsx	 eax, WORD PTR _nValue$[ebp]
  0001b	85 c0		 test	 eax, eax
  0001d	74 09		 je	 SHORT $LN3@SetOposPro
  0001f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@SetOposPro
$LN3@SetOposPro:
  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@SetOposPro:
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR _nMinor$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00036	52		 push	 edx
  00037	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _pPropName$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJJJ@Z ; COPOSDeviceMonitor::SetOposProp

; 403  :         nIndex, static_cast<long>(nValue ? TRUE : FALSE), nMinor );
; 404  : }

  00047	83 c4 08	 add	 esp, 8
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 10 00	 ret	 16			; 00000010H
?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJFJ@Z ENDP	; COPOSDeviceMonitor::SetOposProp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv71 = -22						; size = 2
_hRC$ = -20						; size = 4
_nValue$ = -12						; size = 4
_this$ = -4						; size = 4
_pPropName$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_pnValue$ = 16						; size = 4
_nMinor$ = 20						; size = 4
?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z PROC	; COPOSDeviceMonitor::GetOposProp
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 386  :     // If getting a boolean, then force return value to proper VARIANT_BOOL value.
; 387  :     long nValue;
; 388  :     HRESULT hRC = GetOposProp( DEBUGPARAM(pPropName)

  00020	8b 45 14	 mov	 eax, DWORD PTR _nMinor$[ebp]
  00023	50		 push	 eax
  00024	8d 4d f4	 lea	 ecx, DWORD PTR _nValue$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR _nIndex$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _pPropName$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ; COPOSDeviceMonitor::GetOposProp
  00038	89 45 ec	 mov	 DWORD PTR _hRC$[ebp], eax

; 389  :         nIndex, &nValue, nMinor );
; 390  :     *pnValue = nValue ? VARIANT_TRUE : VARIANT_FALSE;

  0003b	83 7d f4 00	 cmp	 DWORD PTR _nValue$[ebp], 0
  0003f	74 09		 je	 SHORT $LN3@GetOposPro
  00041	83 c9 ff	 or	 ecx, -1
  00044	66 89 4d ea	 mov	 WORD PTR tv71[ebp], cx
  00048	eb 06		 jmp	 SHORT $LN4@GetOposPro
$LN3@GetOposPro:
  0004a	33 d2		 xor	 edx, edx
  0004c	66 89 55 ea	 mov	 WORD PTR tv71[ebp], dx
$LN4@GetOposPro:
  00050	8b 45 10	 mov	 eax, DWORD PTR _pnValue$[ebp]
  00053	66 8b 4d ea	 mov	 cx, WORD PTR tv71[ebp]
  00057	66 89 08	 mov	 WORD PTR [eax], cx

; 391  :     return hRC;

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _hRC$[ebp]

; 392  : }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@GetOposPro
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	83 c4 18	 add	 esp, 24			; 00000018H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 10 00	 ret	 16			; 00000010H
  0007e	66 90		 npad	 2
$LN7@GetOposPro:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@GetOposPro
$LN6@GetOposPro:
  00088	f4 ff ff ff	 DD	 -12			; fffffff4H
  0008c	04 00 00 00	 DD	 4
  00090	00 00 00 00	 DD	 $LN5@GetOposPro
$LN5@GetOposPro:
  00094	6e		 DB	 110			; 0000006eH
  00095	56		 DB	 86			; 00000056H
  00096	61		 DB	 97			; 00000061H
  00097	6c		 DB	 108			; 0000006cH
  00098	75		 DB	 117			; 00000075H
  00099	65		 DB	 101			; 00000065H
  0009a	00		 DB	 0
?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAFJ@Z ENDP	; COPOSDeviceMonitor::GetOposProp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -240						; size = 4
_szHR$ = -232						; size = 100
_pszInfo$ = -128					; size = 4
_Disp$2 = -120						; size = 16
_VarResult$3 = -96					; size = 24
_Vars$4 = -64						; size = 48
_hRC$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pPropName$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_nValue$ = 16						; size = 4
_nMinor$ = 20						; size = 4
?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJJJ@Z PROC	; COPOSDeviceMonitor::SetOposProp
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 337  :     DOTRACEV( ( _T("+%hs [Set]: %d (0x%X)"), pPropName, nValue, nValue ) );

  0002c	8b 45 10	 mov	 eax, DWORD PTR _nValue$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 10	 mov	 ecx, DWORD PTR _nValue$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR _pPropName$[ebp]
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET $SG193464
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00046	83 c4 14	 add	 esp, 20			; 00000014H

; 338  :     HRESULT hRC = S_OK;

  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 339  : 
; 340  :     SetRC();                            // Clear COResultCode.

  00050	6a ff		 push	 -1
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC

; 341  : 
; 342  :     // If open and SO version support's property...
; 343  :     if ( _bOpened && _nSOMinor >= nMinor )

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	0f b6 91 e4 00
	00 00		 movzx	 edx, BYTE PTR [ecx+228]
  00064	85 d2		 test	 edx, edx
  00066	0f 84 d8 00 00
	00		 je	 $LN2@SetOposPro
  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00075	3b 4d 14	 cmp	 ecx, DWORD PTR _nMinor$[ebp]
  00078	0f 8c c6 00 00
	00		 jl	 $LN2@SetOposPro

; 344  :     {
; 345  :         // Set up and call the SO's set property number method.
; 346  :         OposVariant Vars[2];

  0007e	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  00083	6a 02		 push	 2
  00085	6a 18		 push	 24			; 00000018H
  00087	8d 55 c0	 lea	 edx, DWORD PTR _Vars$4[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 347  :         OposVariantResult VarResult;

  00090	8d 4d a0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  00093	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 348  :         Vars[1].SetLONG( nIndex );

  00098	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0009b	50		 push	 eax
  0009c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000a1	c1 e1 00	 shl	 ecx, 0
  000a4	8d 4c 0d c0	 lea	 ecx, DWORD PTR _Vars$4[ebp+ecx]
  000a8	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 349  :         Vars[0].SetLONG( nValue );

  000ad	8b 55 10	 mov	 edx, DWORD PTR _nValue$[ebp]
  000b0	52		 push	 edx
  000b1	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000b6	6b c8 00	 imul	 ecx, eax, 0
  000b9	8d 4c 0d c0	 lea	 ecx, DWORD PTR _Vars$4[ebp+ecx]
  000bd	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 350  :         OposDispParms Disp( Vars, 2 );

  000c2	6a 02		 push	 2
  000c4	8d 55 c0	 lea	 edx, DWORD PTR _Vars$4[ebp]
  000c7	52		 push	 edx
  000c8	8d 4d 88	 lea	 ecx, DWORD PTR _Disp$2[ebp]
  000cb	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 351  :         hRC = _pService->Invoke(

  000d0	8b f4		 mov	 esi, esp
  000d2	6a 00		 push	 0
  000d4	6a 00		 push	 0
  000d6	8d 45 a0	 lea	 eax, DWORD PTR _VarResult$3[ebp]
  000d9	50		 push	 eax
  000da	8d 4d 88	 lea	 ecx, DWORD PTR _Disp$2[ebp]
  000dd	51		 push	 ecx
  000de	6a 01		 push	 1
  000e0	68 00 04 00 00	 push	 1024			; 00000400H
  000e5	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  000ea	ba 04 00 00 00	 mov	 edx, 4
  000ef	d1 e2		 shl	 edx, 1
  000f1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 8c 10 08 01
	00 00		 mov	 ecx, DWORD PTR [eax+edx+264]
  000fb	51		 push	 ecx
  000fc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  00105	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  0010e	8b 00		 mov	 eax, DWORD PTR [eax]
  00110	52		 push	 edx
  00111	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00114	ff d1		 call	 ecx
  00116	3b f4		 cmp	 esi, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011d	89 45 f4	 mov	 DWORD PTR _hRC$[ebp], eax

; 352  :                 _DispIDs[nDISetPropertyNumber], IID_NULL, LOCALE_USER_DEFAULT,
; 353  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 354  :     }

  00120	8d 4d 88	 lea	 ecx, DWORD PTR _Disp$2[ebp]
  00123	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
  00128	8d 4d a0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  0012b	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
  00130	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00135	6a 02		 push	 2
  00137	6a 18		 push	 24			; 00000018H
  00139	8d 55 c0	 lea	 edx, DWORD PTR _Vars$4[ebp]
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00142	eb 18		 jmp	 SHORT $LN3@SetOposPro
$LN2@SetOposPro:

; 355  : 
; 356  :     // Handle error.
; 357  :     else if ( _bOpened )                // If open but not supported,

  00144	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00147	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  0014e	85 c9		 test	 ecx, ecx
  00150	74 0a		 je	 SHORT $LN3@SetOposPro

; 358  :         SetRC( OPOS_E_NOSERVICE );      //   set COResultCode.

  00152	6a 68		 push	 104			; 00000068H
  00154	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	e8 00 00 00 00	 call	 ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ; COPOSDeviceMonitor::SetRC
$LN3@SetOposPro:

; 359  : 
; 360  :     // Trace result.
; 361  : #ifdef _DEBUG
; 362  :     LPCTSTR pszInfo = _T("");

  0015c	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193468

; 363  :     TCHAR szHR[50];
; 364  :     if ( !_bOpened )

  00163	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00166	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  0016d	85 c0		 test	 eax, eax
  0016f	75 09		 jne	 SHORT $LN5@SetOposPro

; 365  :         pszInfo = _T(" -- Closed");

  00171	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193471
  00178	eb 6e		 jmp	 SHORT $LN6@SetOposPro
$LN5@SetOposPro:

; 366  :     else if ( _nSOMinor < nMinor )

  0017a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  00183	3b 55 14	 cmp	 edx, DWORD PTR _nMinor$[ebp]
  00186	7d 09		 jge	 SHORT $LN7@SetOposPro

; 367  :         pszInfo = _T(" -- Not supported by SO");

  00188	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193474
  0018f	eb 57		 jmp	 SHORT $LN6@SetOposPro
$LN7@SetOposPro:

; 368  :     else if ( hRC != 0 )

  00191	83 7d f4 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00195	74 51		 je	 SHORT $LN6@SetOposPro

; 369  :     {
; 370  :         _sntprintf( szHR, TSIZEOF(szHR), _T(" -- COM error: HR = 0x%X"), hRC );

  00197	8b 45 f4	 mov	 eax, DWORD PTR _hRC$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET $SG193476
  001a0	6a 32		 push	 50			; 00000032H
  001a2	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _szHR$[ebp]
  001a8	51		 push	 ecx
  001a9	e8 00 00 00 00	 call	 __snwprintf
  001ae	83 c4 10	 add	 esp, 16			; 00000010H

; 371  :         NULTERMINATE(szHR);

  001b1	ba 02 00 00 00	 mov	 edx, 2
  001b6	6b c2 31	 imul	 eax, edx, 49
  001b9	89 85 10 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  001bf	83 bd 10 ff ff
	ff 64		 cmp	 DWORD PTR $T1[ebp], 100	; 00000064H
  001c6	73 02		 jae	 SHORT $LN11@SetOposPro
  001c8	eb 05		 jmp	 SHORT $LN12@SetOposPro
$LN11@SetOposPro:
  001ca	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN12@SetOposPro:
  001cf	33 c9		 xor	 ecx, ecx
  001d1	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  001d7	66 89 8c 15 18
	ff ff ff	 mov	 WORD PTR _szHR$[ebp+edx], cx

; 372  :         pszInfo = szHR;

  001df	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _szHR$[ebp]
  001e5	89 45 80	 mov	 DWORD PTR _pszInfo$[ebp], eax
$LN6@SetOposPro:

; 373  :     }
; 374  : 
; 375  :     DOTRACEV( ( _T("-%hs [Set]%s"), pPropName, pszInfo ) );

  001e8	8b 4d 80	 mov	 ecx, DWORD PTR _pszInfo$[ebp]
  001eb	51		 push	 ecx
  001ec	8b 55 08	 mov	 edx, DWORD PTR _pPropName$[ebp]
  001ef	52		 push	 edx
  001f0	68 00 00 00 00	 push	 OFFSET $SG193477
  001f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  001fe	83 c4 10	 add	 esp, 16			; 00000010H

; 376  : #endif
; 377  : 
; 378  :     return hRC;

  00201	8b 45 f4	 mov	 eax, DWORD PTR _hRC$[ebp]
$LN10@SetOposPro:

; 379  : }

  00204	52		 push	 edx
  00205	8b cd		 mov	 ecx, ebp
  00207	50		 push	 eax
  00208	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@SetOposPro
  0020e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00213	58		 pop	 eax
  00214	5a		 pop	 edx
  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021a	33 cd		 xor	 ecx, ebp
  0021c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00221	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00227	3b ec		 cmp	 ebp, esp
  00229	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 10 00	 ret	 16			; 00000010H
$LN18@SetOposPro:
  00234	04 00 00 00	 DD	 4
  00238	00 00 00 00	 DD	 $LN17@SetOposPro
$LN17@SetOposPro:
  0023c	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00240	30 00 00 00	 DD	 48			; 00000030H
  00244	00 00 00 00	 DD	 $LN13@SetOposPro
  00248	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0024c	18 00 00 00	 DD	 24			; 00000018H
  00250	00 00 00 00	 DD	 $LN14@SetOposPro
  00254	88 ff ff ff	 DD	 -120			; ffffff88H
  00258	10 00 00 00	 DD	 16			; 00000010H
  0025c	00 00 00 00	 DD	 $LN15@SetOposPro
  00260	18 ff ff ff	 DD	 -232			; ffffff18H
  00264	64 00 00 00	 DD	 100			; 00000064H
  00268	00 00 00 00	 DD	 $LN16@SetOposPro
$LN16@SetOposPro:
  0026c	73		 DB	 115			; 00000073H
  0026d	7a		 DB	 122			; 0000007aH
  0026e	48		 DB	 72			; 00000048H
  0026f	52		 DB	 82			; 00000052H
  00270	00		 DB	 0
$LN15@SetOposPro:
  00271	44		 DB	 68			; 00000044H
  00272	69		 DB	 105			; 00000069H
  00273	73		 DB	 115			; 00000073H
  00274	70		 DB	 112			; 00000070H
  00275	00		 DB	 0
$LN14@SetOposPro:
  00276	56		 DB	 86			; 00000056H
  00277	61		 DB	 97			; 00000061H
  00278	72		 DB	 114			; 00000072H
  00279	52		 DB	 82			; 00000052H
  0027a	65		 DB	 101			; 00000065H
  0027b	73		 DB	 115			; 00000073H
  0027c	75		 DB	 117			; 00000075H
  0027d	6c		 DB	 108			; 0000006cH
  0027e	74		 DB	 116			; 00000074H
  0027f	00		 DB	 0
$LN13@SetOposPro:
  00280	56		 DB	 86			; 00000056H
  00281	61		 DB	 97			; 00000061H
  00282	72		 DB	 114			; 00000072H
  00283	73		 DB	 115			; 00000073H
  00284	00		 DB	 0
?SetOposProp@COPOSDeviceMonitor@@IAEJPBDJJJ@Z ENDP	; COPOSDeviceMonitor::SetOposProp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
$T1 = -224						; size = 4
_szHR$ = -216						; size = 100
_pszInfo$ = -112					; size = 4
_Disp$2 = -104						; size = 16
_VarResult$3 = -80					; size = 24
_Var$4 = -48						; size = 24
_hRC$ = -16						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pPropName$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_pnValue$ = 16						; size = 4
_nMinor$ = 20						; size = 4
?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z PROC	; COPOSDeviceMonitor::GetOposProp
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 288  :     DOTRACEV( ( _T("+%hs [Get]"), pPropName ) );

  0002c	8b 45 08	 mov	 eax, DWORD PTR _pPropName$[ebp]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET $SG193423
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 289  : 
; 290  :     // Initialize return value.
; 291  :     HRESULT hRC = S_OK;

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hRC$[ebp], 0

; 292  :     *pnValue = 0;

  00048	8b 55 10	 mov	 edx, DWORD PTR _pnValue$[ebp]
  0004b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 293  : 
; 294  :     // If open and SO version support's property...
; 295  :     if ( _bOpened && _nSOMinor >= nMinor )

  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	0f b6 88 e4 00
	00 00		 movzx	 ecx, BYTE PTR [eax+228]
  0005b	85 c9		 test	 ecx, ecx
  0005d	0f 84 c0 00 00
	00		 je	 $LN2@GetOposPro
  00063	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 82 f0 00 00
	00		 mov	 eax, DWORD PTR [edx+240]
  0006c	3b 45 14	 cmp	 eax, DWORD PTR _nMinor$[ebp]
  0006f	0f 8c ae 00 00
	00		 jl	 $LN2@GetOposPro

; 296  :     {
; 297  :         // Set up and call the SO's get property number method.
; 298  :         OposVariant Var;

  00075	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  00078	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 299  :         OposVariantResult VarResult;

  0007d	8d 4d b0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  00080	e8 00 00 00 00	 call	 ??0OposVariantResult@@QAE@XZ

; 300  :         Var.SetLONG( nIndex );

  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00088	51		 push	 ecx
  00089	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  0008c	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 301  :         DISPPARAMS Disp = { &Var, NULL, 1, 0 };

  00091	8d 55 d0	 lea	 edx, DWORD PTR _Var$4[ebp]
  00094	89 55 98	 mov	 DWORD PTR _Disp$2[ebp], edx
  00097	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _Disp$2[ebp+4], 0
  0009e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR _Disp$2[ebp+8], 1
  000a5	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _Disp$2[ebp+12], 0

; 302  :         hRC = _pService->Invoke(

  000ac	8b f4		 mov	 esi, esp
  000ae	6a 00		 push	 0
  000b0	6a 00		 push	 0
  000b2	8d 45 b0	 lea	 eax, DWORD PTR _VarResult$3[ebp]
  000b5	50		 push	 eax
  000b6	8d 4d 98	 lea	 ecx, DWORD PTR _Disp$2[ebp]
  000b9	51		 push	 ecx
  000ba	6a 01		 push	 1
  000bc	68 00 04 00 00	 push	 1024			; 00000400H
  000c1	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  000c6	ba 04 00 00 00	 mov	 edx, 4
  000cb	c1 e2 00	 shl	 edx, 0
  000ce	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 8c 10 08 01
	00 00		 mov	 ecx, DWORD PTR [eax+edx+264]
  000d8	51		 push	 ecx
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  000eb	8b 00		 mov	 eax, DWORD PTR [eax]
  000ed	52		 push	 edx
  000ee	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f1	ff d1		 call	 ecx
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	89 45 f0	 mov	 DWORD PTR _hRC$[ebp], eax

; 303  :                 _DispIDs[nDIGetPropertyNumber], IID_NULL, LOCALE_USER_DEFAULT,
; 304  :                 DISPATCH_METHOD, &Disp, &VarResult, NULL, NULL );
; 305  : 
; 306  :         // If success, then set return result.
; 307  :         if ( hRC == S_OK )

  000fd	83 7d f0 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  00101	75 10		 jne	 SHORT $LN3@GetOposPro

; 308  :             VarResult.ChangeLONG( pnValue, hRC );

  00103	8d 55 f0	 lea	 edx, DWORD PTR _hRC$[ebp]
  00106	52		 push	 edx
  00107	8b 45 10	 mov	 eax, DWORD PTR _pnValue$[ebp]
  0010a	50		 push	 eax
  0010b	8d 4d b0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  0010e	e8 00 00 00 00	 call	 ?ChangeLONG@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::ChangeLONG
$LN3@GetOposPro:

; 309  :     }

  00113	8d 4d b0	 lea	 ecx, DWORD PTR _VarResult$3[ebp]
  00116	e8 00 00 00 00	 call	 ??1OposVariantResult@@QAE@XZ ; OposVariantResult::~OposVariantResult
  0011b	8d 4d d0	 lea	 ecx, DWORD PTR _Var$4[ebp]
  0011e	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
$LN2@GetOposPro:

; 310  : 
; 311  :     // Trace result.
; 312  : #ifdef _DEBUG
; 313  :     LPCTSTR pszInfo = _T("");

  00123	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193426

; 314  :     TCHAR szHR[50];
; 315  :     if ( !_bOpened )

  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	0f b6 91 e4 00
	00 00		 movzx	 edx, BYTE PTR [ecx+228]
  00134	85 d2		 test	 edx, edx
  00136	75 09		 jne	 SHORT $LN4@GetOposPro

; 316  :         pszInfo = _T(" -- Closed");

  00138	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193429
  0013f	eb 6e		 jmp	 SHORT $LN5@GetOposPro
$LN4@GetOposPro:

; 317  :     else if ( _nSOMinor < nMinor )

  00141	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00144	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  0014a	3b 4d 14	 cmp	 ecx, DWORD PTR _nMinor$[ebp]
  0014d	7d 09		 jge	 SHORT $LN6@GetOposPro

; 318  :         pszInfo = _T(" -- Not supported by SO");

  0014f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _pszInfo$[ebp], OFFSET $SG193432
  00156	eb 57		 jmp	 SHORT $LN5@GetOposPro
$LN6@GetOposPro:

; 319  :     else if ( hRC != 0 )

  00158	83 7d f0 00	 cmp	 DWORD PTR _hRC$[ebp], 0
  0015c	74 51		 je	 SHORT $LN5@GetOposPro

; 320  :     {
; 321  :         _sntprintf( szHR, TSIZEOF(szHR), _T(" -- COM error: HR = 0x%X"), hRC );

  0015e	8b 55 f0	 mov	 edx, DWORD PTR _hRC$[ebp]
  00161	52		 push	 edx
  00162	68 00 00 00 00	 push	 OFFSET $SG193434
  00167	6a 32		 push	 50			; 00000032H
  00169	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _szHR$[ebp]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 __snwprintf
  00175	83 c4 10	 add	 esp, 16			; 00000010H

; 322  :         NULTERMINATE(szHR);

  00178	b9 02 00 00 00	 mov	 ecx, 2
  0017d	6b d1 31	 imul	 edx, ecx, 49
  00180	89 95 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00186	83 bd 20 ff ff
	ff 64		 cmp	 DWORD PTR $T1[ebp], 100	; 00000064H
  0018d	73 02		 jae	 SHORT $LN10@GetOposPro
  0018f	eb 05		 jmp	 SHORT $LN11@GetOposPro
$LN10@GetOposPro:
  00191	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN11@GetOposPro:
  00196	33 c0		 xor	 eax, eax
  00198	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0019e	66 89 84 0d 28
	ff ff ff	 mov	 WORD PTR _szHR$[ebp+ecx], ax

; 323  :         pszInfo = szHR;

  001a6	8d 95 28 ff ff
	ff		 lea	 edx, DWORD PTR _szHR$[ebp]
  001ac	89 55 90	 mov	 DWORD PTR _pszInfo$[ebp], edx
$LN5@GetOposPro:

; 324  :     }
; 325  : 
; 326  :     DOTRACEV( ( _T("-%hs [Get]: %d (0x%X)%s"), pPropName, *pnValue, *pnValue, pszInfo ) );

  001af	8b 45 90	 mov	 eax, DWORD PTR _pszInfo$[ebp]
  001b2	50		 push	 eax
  001b3	8b 4d 10	 mov	 ecx, DWORD PTR _pnValue$[ebp]
  001b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b8	52		 push	 edx
  001b9	8b 45 10	 mov	 eax, DWORD PTR _pnValue$[ebp]
  001bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001be	51		 push	 ecx
  001bf	8b 55 08	 mov	 edx, DWORD PTR _pPropName$[ebp]
  001c2	52		 push	 edx
  001c3	68 00 00 00 00	 push	 OFFSET $SG193435
  001c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  001d1	83 c4 18	 add	 esp, 24			; 00000018H

; 327  : #endif
; 328  : 
; 329  :     return hRC;

  001d4	8b 45 f0	 mov	 eax, DWORD PTR _hRC$[ebp]
$LN9@GetOposPro:

; 330  : }

  001d7	52		 push	 edx
  001d8	8b cd		 mov	 ecx, ebp
  001da	50		 push	 eax
  001db	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@GetOposPro
  001e1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e6	58		 pop	 eax
  001e7	5a		 pop	 edx
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ed	33 cd		 xor	 ecx, ebp
  001ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f4	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  001fa	3b ec		 cmp	 ebp, esp
  001fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 10 00	 ret	 16			; 00000010H
  00207	90		 npad	 1
$LN18@GetOposPro:
  00208	05 00 00 00	 DD	 5
  0020c	00 00 00 00	 DD	 $LN17@GetOposPro
$LN17@GetOposPro:
  00210	f0 ff ff ff	 DD	 -16			; fffffff0H
  00214	04 00 00 00	 DD	 4
  00218	00 00 00 00	 DD	 $LN12@GetOposPro
  0021c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00220	18 00 00 00	 DD	 24			; 00000018H
  00224	00 00 00 00	 DD	 $LN13@GetOposPro
  00228	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0022c	18 00 00 00	 DD	 24			; 00000018H
  00230	00 00 00 00	 DD	 $LN14@GetOposPro
  00234	98 ff ff ff	 DD	 -104			; ffffff98H
  00238	10 00 00 00	 DD	 16			; 00000010H
  0023c	00 00 00 00	 DD	 $LN15@GetOposPro
  00240	28 ff ff ff	 DD	 -216			; ffffff28H
  00244	64 00 00 00	 DD	 100			; 00000064H
  00248	00 00 00 00	 DD	 $LN16@GetOposPro
$LN16@GetOposPro:
  0024c	73		 DB	 115			; 00000073H
  0024d	7a		 DB	 122			; 0000007aH
  0024e	48		 DB	 72			; 00000048H
  0024f	52		 DB	 82			; 00000052H
  00250	00		 DB	 0
$LN15@GetOposPro:
  00251	44		 DB	 68			; 00000044H
  00252	69		 DB	 105			; 00000069H
  00253	73		 DB	 115			; 00000073H
  00254	70		 DB	 112			; 00000070H
  00255	00		 DB	 0
$LN14@GetOposPro:
  00256	56		 DB	 86			; 00000056H
  00257	61		 DB	 97			; 00000061H
  00258	72		 DB	 114			; 00000072H
  00259	52		 DB	 82			; 00000052H
  0025a	65		 DB	 101			; 00000065H
  0025b	73		 DB	 115			; 00000073H
  0025c	75		 DB	 117			; 00000075H
  0025d	6c		 DB	 108			; 0000006cH
  0025e	74		 DB	 116			; 00000074H
  0025f	00		 DB	 0
$LN13@GetOposPro:
  00260	56		 DB	 86			; 00000056H
  00261	61		 DB	 97			; 00000061H
  00262	72		 DB	 114			; 00000072H
  00263	00		 DB	 0
$LN12@GetOposPro:
  00264	68		 DB	 104			; 00000068H
  00265	52		 DB	 82			; 00000052H
  00266	43		 DB	 67			; 00000043H
  00267	00		 DB	 0
?GetOposProp@COPOSDeviceMonitor@@IAEJPBDJPAJJ@Z ENDP	; COPOSDeviceMonitor::GetOposProp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_pDispID$ = 8						; size = 4
_nMethods$ = 12						; size = 4
?WriteTraceMethods@COPOSDeviceMonitor@@QAEXPAJH@Z PROC	; COPOSDeviceMonitor::WriteTraceMethods
; _this$ = ecx

; 1725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1726 :     for ( int i = 0; i < nMethods; i++, pDispID++ )

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001e	eb 12		 jmp	 SHORT $LN4@WriteTrace
$LN2@WriteTrace:
  00020	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _pDispID$[ebp]
  0002c	83 c1 04	 add	 ecx, 4
  0002f	89 4d 08	 mov	 DWORD PTR _pDispID$[ebp], ecx
$LN4@WriteTrace:
  00032	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  00035	3b 55 0c	 cmp	 edx, DWORD PTR _nMethods$[ebp]
  00038	7d 26		 jge	 SHORT $LN1@WriteTrace

; 1727 :         if ( *pDispID == -123 )

  0003a	8b 45 08	 mov	 eax, DWORD PTR _pDispID$[ebp]
  0003d	83 38 85	 cmp	 DWORD PTR [eax], -123	; ffffff85H
  00040	75 1c		 jne	 SHORT $LN5@WriteTrace

; 1728 :             WriteTrace( _T("    %hs"), s_SOMethodNames[i] );

  00042	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  00045	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?s_SOMethodNames@@3PAPADA[ecx*4]
  0004c	52		 push	 edx
  0004d	68 00 00 00 00	 push	 OFFSET $SG194361
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@WriteTrace:
  0005e	eb c0		 jmp	 SHORT $LN2@WriteTrace
$LN1@WriteTrace:

; 1729 : }

  00060	83 c4 08	 add	 esp, 8
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?WriteTraceMethods@COPOSDeviceMonitor@@QAEXPAJH@Z ENDP	; COPOSDeviceMonitor::WriteTraceMethods
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_dwChars$1 = -20					; size = 4
_pMsgBuf$2 = -12					; size = 4
_this$ = -4						; size = 4
_pFormat$ = 8						; size = 4
_dwError$ = 12						; size = 4
?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z PROC	; COPOSDeviceMonitor::WriteTraceError
; _this$ = ecx

; 1698 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1699 :     if ( dwError != 0 )

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _dwError$[ebp], 0
  00022	0f 84 87 00 00
	00		 je	 $LN1@WriteTrace

; 1700 :     {
; 1701 :         // Convert HRESULT to message and display.
; 1702 :         LPTSTR pMsgBuf;
; 1703 :         DWORD dwChars = ::FormatMessage(

  00028	8b f4		 mov	 esi, esp
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	8d 45 f4	 lea	 eax, DWORD PTR _pMsgBuf$2[ebp]
  00031	50		 push	 eax
  00032	68 00 04 00 00	 push	 1024			; 00000400H
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _dwError$[ebp]
  0003a	51		 push	 ecx
  0003b	6a 00		 push	 0
  0003d	68 00 13 00 00	 push	 4864			; 00001300H
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FormatMessageW@28
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	89 45 ec	 mov	 DWORD PTR _dwChars$1[ebp], eax

; 1704 :                 FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 1705 :                 FORMAT_MESSAGE_FROM_SYSTEM |
; 1706 :                 FORMAT_MESSAGE_IGNORE_INSERTS,
; 1707 :                 NULL,
; 1708 :                 dwError,
; 1709 :                 MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
; 1710 :                 (LPTSTR) &pMsgBuf,
; 1711 :                 0,
; 1712 :                 NULL );
; 1713 :         if ( dwChars == 0 )

  00052	83 7d ec 00	 cmp	 DWORD PTR _dwChars$1[ebp], 0
  00056	75 09		 jne	 SHORT $LN3@WriteTrace

; 1714 :             pMsgBuf = _T("[Unknown]");

  00058	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pMsgBuf$2[ebp], OFFSET $SG194348
  0005f	eb 1d		 jmp	 SHORT $LN4@WriteTrace
$LN3@WriteTrace:

; 1715 :         else if ( pMsgBuf[dwChars-1] == '\n' )

  00061	8b 55 ec	 mov	 edx, DWORD PTR _dwChars$1[ebp]
  00064	8b 45 f4	 mov	 eax, DWORD PTR _pMsgBuf$2[ebp]
  00067	0f b7 4c 50 fe	 movzx	 ecx, WORD PTR [eax+edx*2-2]
  0006c	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0006f	75 0d		 jne	 SHORT $LN4@WriteTrace

; 1716 :             pMsgBuf[dwChars-1] = '\0';

  00071	33 d2		 xor	 edx, edx
  00073	8b 45 ec	 mov	 eax, DWORD PTR _dwChars$1[ebp]
  00076	8b 4d f4	 mov	 ecx, DWORD PTR _pMsgBuf$2[ebp]
  00079	66 89 54 41 fe	 mov	 WORD PTR [ecx+eax*2-2], dx
$LN4@WriteTrace:

; 1717 :         WriteTrace( pFormat, dwError, pMsgBuf );

  0007e	8b 55 f4	 mov	 edx, DWORD PTR _pMsgBuf$2[ebp]
  00081	52		 push	 edx
  00082	8b 45 0c	 mov	 eax, DWORD PTR _dwError$[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _pFormat$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00093	83 c4 10	 add	 esp, 16			; 00000010H

; 1718 :         if ( dwChars > 0 )

  00096	83 7d ec 00	 cmp	 DWORD PTR _dwChars$1[ebp], 0
  0009a	76 13		 jbe	 SHORT $LN1@WriteTrace

; 1719 :             ::LocalFree(pMsgBuf);

  0009c	8b f4		 mov	 esi, esp
  0009e	8b 45 f4	 mov	 eax, DWORD PTR _pMsgBuf$2[ebp]
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LocalFree@4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WriteTrace:

; 1720 :     }
; 1721 : }

  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@WriteTrace
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	5e		 pop	 esi
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	3b ec		 cmp	 ebp, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 08 00	 ret	 8
  000d1	0f 1f 00	 npad	 3
$LN10@WriteTrace:
  000d4	01 00 00 00	 DD	 1
  000d8	00 00 00 00	 DD	 $LN9@WriteTrace
$LN9@WriteTrace:
  000dc	f4 ff ff ff	 DD	 -12			; fffffff4H
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN8@WriteTrace
$LN8@WriteTrace:
  000e8	70		 DB	 112			; 00000070H
  000e9	4d		 DB	 77			; 0000004dH
  000ea	73		 DB	 115			; 00000073H
  000eb	67		 DB	 103			; 00000067H
  000ec	42		 DB	 66			; 00000042H
  000ed	75		 DB	 117			; 00000075H
  000ee	66		 DB	 102			; 00000066H
  000ef	00		 DB	 0
?WriteTraceError@COPOSDeviceMonitor@@QAEXPB_WK@Z ENDP	; COPOSDeviceMonitor::WriteTraceError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv65 = -260						; size = 4
$T1 = -256						; size = 4
$T2 = -252						; size = 4
_i$3 = -244						; size = 4
_va$ = -240						; size = 4
_pszPrintfString$ = -236				; size = 4
_szBuffer$ = -228					; size = 220
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pString$ = 12						; size = 4
_nLen$ = 16						; size = 4
_bAscii$ = 20						; size = 4
_nCharSize$ = 24					; size = 4
_pszFormat$ = 28					; size = 4
?WriteTraceString@COPOSDeviceMonitor@@QAAXPAXHHHPB_WZZ PROC ; COPOSDeviceMonitor::WriteTraceString

; 1817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	57		 push	 edi
  0000a	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00010	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1818 :     TCHAR szBuffer[100+10];
; 1819 :     LPCTSTR pszPrintfString = ( nCharSize == 1 ? _T("hs") : _T("ls") );

  00026	83 7d 18 01	 cmp	 DWORD PTR _nCharSize$[ebp], 1
  0002a	75 0c		 jne	 SHORT $LN10@WriteTrace
  0002c	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], OFFSET $SG194438
  00036	eb 0a		 jmp	 SHORT $LN11@WriteTrace
$LN10@WriteTrace:
  00038	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], OFFSET $SG194439
$LN11@WriteTrace:
  00042	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00048	89 85 14 ff ff
	ff		 mov	 DWORD PTR _pszPrintfString$[ebp], eax

; 1820 : 
; 1821 :     // Use the "list of arguments" version of printf.
; 1822 :     va_list va;
; 1823 :     va_start( va, pszFormat );

  0004e	8d 4d 20	 lea	 ecx, DWORD PTR _pszFormat$[ebp+4]
  00051	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _va$[ebp], ecx

; 1824 :     _vsntprintf( szBuffer, 100, pszFormat, va );

  00057	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _va$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 1c	 mov	 eax, DWORD PTR _pszFormat$[ebp]
  00061	50		 push	 eax
  00062	6a 64		 push	 100			; 00000064H
  00064	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 __vsnwprintf
  00070	83 c4 10	 add	 esp, 16			; 00000010H

; 1825 :     va_end(va);

  00073	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _va$[ebp], 0

; 1826 :     NULTERMINATE(szBuffer);

  0007d	ba 02 00 00 00	 mov	 edx, 2
  00082	6b c2 6d	 imul	 eax, edx, 109
  00085	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0008b	81 bd 04 ff ff
	ff dc 00 00 00	 cmp	 DWORD PTR $T2[ebp], 220	; 000000dcH
  00095	73 02		 jae	 SHORT $LN12@WriteTrace
  00097	eb 05		 jmp	 SHORT $LN13@WriteTrace
$LN12@WriteTrace:
  00099	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN13@WriteTrace:
  0009e	33 c9		 xor	 ecx, ecx
  000a0	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  000a6	66 89 8c 15 1c
	ff ff ff	 mov	 WORD PTR _szBuffer$[ebp+edx], cx

; 1827 : 
; 1828 :     // If all ascii, then output.
; 1829 :     if (bAscii)

  000ae	83 7d 14 00	 cmp	 DWORD PTR _bAscii$[ebp], 0
  000b2	0f 84 12 01 00
	00		 je	 $LN5@WriteTrace

; 1830 :     {
; 1831 :         // If less or equal to the maximum length we put out per line, then output on single line.
; 1832 :         if ( nLen <= WTS_LINELEN_MAX * nCharSize )

  000b8	6b 45 18 32	 imul	 eax, DWORD PTR _nCharSize$[ebp], 50
  000bc	39 45 10	 cmp	 DWORD PTR _nLen$[ebp], eax
  000bf	7f 5a		 jg	 SHORT $LN7@WriteTrace

; 1833 :         {
; 1834 :             _tcscat( szBuffer, _T(" <%") );

  000c1	68 00 00 00 00	 push	 OFFSET $SG194444
  000c6	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 _wcscat
  000d2	83 c4 08	 add	 esp, 8

; 1835 :             _tcscat( szBuffer, pszPrintfString );

  000d5	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR _pszPrintfString$[ebp]
  000db	52		 push	 edx
  000dc	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _wcscat
  000e8	83 c4 08	 add	 esp, 8

; 1836 :             _tcscat( szBuffer, _T(">") );

  000eb	68 00 00 00 00	 push	 OFFSET $SG194445
  000f0	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 _wcscat
  000fc	83 c4 08	 add	 esp, 8

; 1837 :             DOTRACEV( ( szBuffer, pString ) );

  000ff	8b 55 0c	 mov	 edx, DWORD PTR _pString$[ebp]
  00102	52		 push	 edx
  00103	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1838 :         }

  00116	e9 ad 00 00 00	 jmp	 $LN8@WriteTrace
$LN7@WriteTrace:

; 1839 :         // If greater than maximum line length, then break into multiple lines.
; 1840 :         else
; 1841 :         {
; 1842 :             DOTRACEV( ( szBuffer, pString ) );

  0011b	8b 55 0c	 mov	 edx, DWORD PTR _pString$[ebp]
  0011e	52		 push	 edx
  0011f	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00125	50		 push	 eax
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1843 :             _sntprintf( szBuffer, TSIZEOF(szBuffer), _T("  <%%.%u%s>"), WTS_LINELEN_MAX, pszPrintfString );

  00132	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR _pszPrintfString$[ebp]
  00138	52		 push	 edx
  00139	6a 32		 push	 50			; 00000032H
  0013b	68 00 00 00 00	 push	 OFFSET $SG194446
  00140	6a 6e		 push	 110			; 0000006eH
  00142	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 __snwprintf
  0014e	83 c4 14	 add	 esp, 20			; 00000014H

; 1844 :             NULTERMINATE(szBuffer);

  00151	b9 02 00 00 00	 mov	 ecx, 2
  00156	6b d1 6d	 imul	 edx, ecx, 109
  00159	89 95 00 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0015f	81 bd 00 ff ff
	ff dc 00 00 00	 cmp	 DWORD PTR $T1[ebp], 220	; 000000dcH
  00169	73 02		 jae	 SHORT $LN14@WriteTrace
  0016b	eb 05		 jmp	 SHORT $LN15@WriteTrace
$LN14@WriteTrace:
  0016d	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN15@WriteTrace:
  00172	33 c0		 xor	 eax, eax
  00174	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0017a	66 89 84 0d 1c
	ff ff ff	 mov	 WORD PTR _szBuffer$[ebp+ecx], ax

; 1845 :             for ( int i = 0; i < nLen; i += WTS_LINELEN_MAX * nCharSize )

  00182	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$3[ebp], 0
  0018c	eb 10		 jmp	 SHORT $LN4@WriteTrace
$LN2@WriteTrace:
  0018e	6b 55 18 32	 imul	 edx, DWORD PTR _nCharSize$[ebp], 50
  00192	03 95 0c ff ff
	ff		 add	 edx, DWORD PTR _i$3[ebp]
  00198	89 95 0c ff ff
	ff		 mov	 DWORD PTR _i$3[ebp], edx
$LN4@WriteTrace:
  0019e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _i$3[ebp]
  001a4	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  001a7	7d 1f		 jge	 SHORT $LN8@WriteTrace

; 1846 :                 DOTRACEV( ( szBuffer, (LPBYTE) pString + i ) );

  001a9	8b 4d 0c	 mov	 ecx, DWORD PTR _pString$[ebp]
  001ac	03 8d 0c ff ff
	ff		 add	 ecx, DWORD PTR _i$3[ebp]
  001b2	51		 push	 ecx
  001b3	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  001b9	52		 push	 edx
  001ba	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c6	eb c6		 jmp	 SHORT $LN2@WriteTrace
$LN8@WriteTrace:

; 1847 :         }
; 1848 :     }

  001c8	eb 18		 jmp	 SHORT $LN9@WriteTrace
$LN5@WriteTrace:

; 1849 : 
; 1850 :     // If non-ascii data, then output.
; 1851 :     else
; 1852 :     {
; 1853 :         DOTRACEV( ( _T("%s [Contains non-ASCII]"), szBuffer ) );

  001ca	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  001d0	51		 push	 ecx
  001d1	68 00 00 00 00	 push	 OFFSET $SG194447
  001d6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001d9	52		 push	 edx
  001da	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@WriteTrace:

; 1854 :         DODUMPV( pString, nLen );
; 1855 :     }
; 1856 : }

  001e2	52		 push	 edx
  001e3	8b cd		 mov	 ecx, ebp
  001e5	50		 push	 eax
  001e6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@WriteTrace
  001ec	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f1	58		 pop	 eax
  001f2	5a		 pop	 edx
  001f3	5f		 pop	 edi
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f7	33 cd		 xor	 ecx, ebp
  001f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fe	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  00204	3b ec		 cmp	 ebp, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c3		 ret	 0
  0020f	90		 npad	 1
$LN18@WriteTrace:
  00210	01 00 00 00	 DD	 1
  00214	00 00 00 00	 DD	 $LN17@WriteTrace
$LN17@WriteTrace:
  00218	1c ff ff ff	 DD	 -228			; ffffff1cH
  0021c	dc 00 00 00	 DD	 220			; 000000dcH
  00220	00 00 00 00	 DD	 $LN16@WriteTrace
$LN16@WriteTrace:
  00224	73		 DB	 115			; 00000073H
  00225	7a		 DB	 122			; 0000007aH
  00226	42		 DB	 66			; 00000042H
  00227	75		 DB	 117			; 00000075H
  00228	66		 DB	 102			; 00000066H
  00229	66		 DB	 102			; 00000066H
  0022a	65		 DB	 101			; 00000065H
  0022b	72		 DB	 114			; 00000072H
  0022c	00		 DB	 0
?WriteTraceString@COPOSDeviceMonitor@@QAAXPAXHHHPB_WZZ ENDP ; COPOSDeviceMonitor::WriteTraceString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
tv226 = -40						; size = 4
tv86 = -36						; size = 4
$T1 = -32						; size = 4
$T2 = -28						; size = 4
_nDestLen$3 = -24					; size = 4
_pDest$4 = -20						; size = 4
_pSource$5 = -16					; size = 4
_i$6 = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_pszPrefix$ = 8						; size = 4
_bstr$ = 12						; size = 4
?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z PROC ; COPOSDeviceMonitor::WriteTraceString
; _this$ = ecx

; 1733 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1734 :     // Get string length.
; 1735 :     int nLen = ::SysStringLen(bstr);

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _bstr$[ebp]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysStringLen@4
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax

; 1736 : 
; 1737 :     // If empty...
; 1738 :     if ( nLen == 0 )

  00032	83 7d f8 00	 cmp	 DWORD PTR _nLen$[ebp], 0
  00036	75 1a		 jne	 SHORT $LN14@WriteTrace

; 1739 :         DOTRACEV( ( _T("%s Length 0 <>"), pszPrefix ) );

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _pszPrefix$[ebp]
  0003b	51		 push	 ecx
  0003c	68 00 00 00 00	 push	 OFFSET $SG194391
  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004d	e9 ff 02 00 00	 jmp	 $LN1@WriteTrace
$LN14@WriteTrace:

; 1740 : 
; 1741 :     // If not empty...
; 1742 :     else
; 1743 :     {
; 1744 :         // Check the BString for non-ascii characters, and output the string.
; 1745 :         int i;
; 1746 :         for ( i = 0; i < nLen; i++ )

  00052	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@WriteTrace
$LN2@WriteTrace:
  0005b	8b 45 f4	 mov	 eax, DWORD PTR _i$6[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f4	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@WriteTrace:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR _i$6[ebp]
  00067	3b 4d f8	 cmp	 ecx, DWORD PTR _nLen$[ebp]
  0006a	7d 22		 jge	 SHORT $LN3@WriteTrace

; 1747 :             if ( bstr[i] < 0x20 || 0x7F < bstr[i] )

  0006c	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _bstr$[ebp]
  00072	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00076	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00079	7c 0f		 jl	 SHORT $LN17@WriteTrace
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _bstr$[ebp]
  00081	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00085	83 f9 7f	 cmp	 ecx, 127		; 0000007fH
  00088	7e 02		 jle	 SHORT $LN16@WriteTrace
$LN17@WriteTrace:

; 1748 :                 break;

  0008a	eb 02		 jmp	 SHORT $LN3@WriteTrace
$LN16@WriteTrace:
  0008c	eb cd		 jmp	 SHORT $LN2@WriteTrace
$LN3@WriteTrace:

; 1749 :         WriteTraceString( bstr, nLen * 2, i == nLen, 2 /*wide string*/,

  0008e	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  00091	3b 55 f8	 cmp	 edx, DWORD PTR _nLen$[ebp]
  00094	75 09		 jne	 SHORT $LN30@WriteTrace
  00096	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  0009d	eb 07		 jmp	 SHORT $LN31@WriteTrace
$LN30@WriteTrace:
  0009f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN31@WriteTrace:
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _pszPrefix$[ebp]
  000ad	51		 push	 ecx
  000ae	68 00 00 00 00	 push	 OFFSET $SG194394
  000b3	6a 02		 push	 2
  000b5	8b 55 dc	 mov	 edx, DWORD PTR tv86[ebp]
  000b8	52		 push	 edx
  000b9	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  000bc	d1 e0		 shl	 eax, 1
  000be	50		 push	 eax
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _bstr$[ebp]
  000c2	51		 push	 ecx
  000c3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAAXPAXHHHPB_WZZ ; COPOSDeviceMonitor::WriteTraceString
  000cc	83 c4 20	 add	 esp, 32			; 00000020H

; 1750 :             _T("%s Length %u"), pszPrefix, nLen );
; 1751 : 
; 1752 :         // If binary conversion in effect...
; 1753 :         if ( _nBinaryConversion != OPOS_BC_NONE )

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	83 b8 64 01 00
	00 00		 cmp	 DWORD PTR [eax+356], 0
  000d9	0f 84 72 02 00
	00		 je	 $LN1@WriteTrace

; 1754 :         {
; 1755 :             #define LONIBBLE(x) ((x) & 0x0F)
; 1756 :             #define HINIBBLE(x) ((x) & 0xF0)
; 1757 : 
; 1758 :             OLECHAR* pSource = bstr;                        // Get source pointer.

  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _bstr$[ebp]
  000e2	89 4d f0	 mov	 DWORD PTR _pSource$5[ebp], ecx

; 1759 :             LPBYTE pDest = new BYTE[ ( nLen + 1 ) / 2 + 1 ];// Create destination buffer.

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	99		 cdq
  000ec	2b c2		 sub	 eax, edx
  000ee	d1 f8		 sar	 eax, 1
  000f0	83 c0 01	 add	 eax, 1
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000f9	83 c4 04	 add	 esp, 4
  000fc	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  000ff	8b 55 e4	 mov	 edx, DWORD PTR $T2[ebp]
  00102	89 55 ec	 mov	 DWORD PTR _pDest$4[ebp], edx

; 1760 :             int nDestLen = nLen;

  00105	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  00108	89 45 e8	 mov	 DWORD PTR _nDestLen$3[ebp], eax

; 1761 :             i = 0;

  0010b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0

; 1762 : 
; 1763 :             // If decimal binary conversion...
; 1764 :             if ( _nBinaryConversion == OPOS_BC_DECIMAL && nDestLen % 3 == 0 )

  00112	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	83 b9 64 01 00
	00 02		 cmp	 DWORD PTR [ecx+356], 2
  0011c	0f 85 e7 00 00
	00		 jne	 $LN19@WriteTrace
  00122	8b 45 e8	 mov	 eax, DWORD PTR _nDestLen$3[ebp]
  00125	99		 cdq
  00126	b9 03 00 00 00	 mov	 ecx, 3
  0012b	f7 f9		 idiv	 ecx
  0012d	85 d2		 test	 edx, edx
  0012f	0f 85 d4 00 00
	00		 jne	 $LN19@WriteTrace

; 1765 :             {
; 1766 :                 nDestLen /= 3;                              // Bytes to create.

  00135	8b 45 e8	 mov	 eax, DWORD PTR _nDestLen$3[ebp]
  00138	99		 cdq
  00139	b9 03 00 00 00	 mov	 ecx, 3
  0013e	f7 f9		 idiv	 ecx
  00140	89 45 e8	 mov	 DWORD PTR _nDestLen$3[ebp], eax

; 1767 :                 for ( ; i < nDestLen; i++ )                 // Loop through all data.

  00143	eb 09		 jmp	 SHORT $LN7@WriteTrace
$LN5@WriteTrace:
  00145	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  00148	83 c2 01	 add	 edx, 1
  0014b	89 55 f4	 mov	 DWORD PTR _i$6[ebp], edx
$LN7@WriteTrace:
  0014e	8b 45 f4	 mov	 eax, DWORD PTR _i$6[ebp]
  00151	3b 45 e8	 cmp	 eax, DWORD PTR _nDestLen$3[ebp]
  00154	0f 8d aa 00 00
	00		 jge	 $LN6@WriteTrace

; 1768 :                 {                                           //
; 1769 :                     if ( !isdigit(pSource[0]) || !isdigit(pSource[1]) || !isdigit(pSource[2]) )

  0015a	b9 02 00 00 00	 mov	 ecx, 2
  0015f	6b d1 00	 imul	 edx, ecx, 0
  00162	8b 45 f0	 mov	 eax, DWORD PTR _pSource$5[ebp]
  00165	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 _isdigit
  0016f	83 c4 04	 add	 esp, 4
  00172	85 c0		 test	 eax, eax
  00174	74 37		 je	 SHORT $LN22@WriteTrace
  00176	ba 02 00 00 00	 mov	 edx, 2
  0017b	c1 e2 00	 shl	 edx, 0
  0017e	8b 45 f0	 mov	 eax, DWORD PTR _pSource$5[ebp]
  00181	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00185	51		 push	 ecx
  00186	e8 00 00 00 00	 call	 _isdigit
  0018b	83 c4 04	 add	 esp, 4
  0018e	85 c0		 test	 eax, eax
  00190	74 1b		 je	 SHORT $LN22@WriteTrace
  00192	ba 02 00 00 00	 mov	 edx, 2
  00197	d1 e2		 shl	 edx, 1
  00199	8b 45 f0	 mov	 eax, DWORD PTR _pSource$5[ebp]
  0019c	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  001a0	51		 push	 ecx
  001a1	e8 00 00 00 00	 call	 _isdigit
  001a6	83 c4 04	 add	 esp, 4
  001a9	85 c0		 test	 eax, eax
  001ab	75 02		 jne	 SHORT $LN21@WriteTrace
$LN22@WriteTrace:

; 1770 :                         break;

  001ad	eb 55		 jmp	 SHORT $LN6@WriteTrace
$LN21@WriteTrace:

; 1771 :                     pDest[i] = (BYTE)                       //  - Set destination character to

  001af	ba 02 00 00 00	 mov	 edx, 2
  001b4	6b c2 00	 imul	 eax, edx, 0
  001b7	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$5[ebp]
  001ba	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  001be	83 e2 0f	 and	 edx, 15			; 0000000fH
  001c1	6b c2 0a	 imul	 eax, edx, 10
  001c4	b9 02 00 00 00	 mov	 ecx, 2
  001c9	c1 e1 00	 shl	 ecx, 0
  001cc	8b 55 f0	 mov	 edx, DWORD PTR _pSource$5[ebp]
  001cf	0f b7 0c 0a	 movzx	 ecx, WORD PTR [edx+ecx]
  001d3	83 e1 0f	 and	 ecx, 15			; 0000000fH
  001d6	03 c1		 add	 eax, ecx
  001d8	6b d0 0a	 imul	 edx, eax, 10
  001db	b8 02 00 00 00	 mov	 eax, 2
  001e0	d1 e0		 shl	 eax, 1
  001e2	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$5[ebp]
  001e5	0f b7 04 01	 movzx	 eax, WORD PTR [ecx+eax]
  001e9	83 e0 0f	 and	 eax, 15			; 0000000fH
  001ec	03 d0		 add	 edx, eax
  001ee	8b 4d ec	 mov	 ecx, DWORD PTR _pDest$4[ebp]
  001f1	03 4d f4	 add	 ecx, DWORD PTR _i$6[ebp]
  001f4	88 11		 mov	 BYTE PTR [ecx], dl

; 1772 :                         ( ( LONIBBLE(pSource[0]) * 10 +     //      Hundreds digit * 100 +
; 1773 :                               LONIBBLE(pSource[1])          //      Tens     digit *  10 +
; 1774 :                             ) * 10 +                        //
; 1775 :                             LONIBBLE(pSource[2]) );         //      Units    digit.
; 1776 :                     pSource += 3;                           //  - Move on to next source pair.

  001f6	8b 55 f0	 mov	 edx, DWORD PTR _pSource$5[ebp]
  001f9	83 c2 06	 add	 edx, 6
  001fc	89 55 f0	 mov	 DWORD PTR _pSource$5[ebp], edx

; 1777 :                 }

  001ff	e9 41 ff ff ff	 jmp	 $LN5@WriteTrace
$LN6@WriteTrace:

; 1778 :             }

  00204	e9 a8 00 00 00	 jmp	 $LN20@WriteTrace
$LN19@WriteTrace:

; 1779 : 
; 1780 :             // If nibble binary conversion...
; 1781 :             else if ( nDestLen % 2 == 0 )

  00209	8b 45 e8	 mov	 eax, DWORD PTR _nDestLen$3[ebp]
  0020c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00211	79 05		 jns	 SHORT $LN34@WriteTrace
  00213	48		 dec	 eax
  00214	83 c8 fe	 or	 eax, -2			; fffffffeH
  00217	40		 inc	 eax
$LN34@WriteTrace:
  00218	85 c0		 test	 eax, eax
  0021a	0f 85 91 00 00
	00		 jne	 $LN20@WriteTrace

; 1782 :             {
; 1783 :                 nDestLen /= 2;                              // Bytes to create.

  00220	8b 45 e8	 mov	 eax, DWORD PTR _nDestLen$3[ebp]
  00223	99		 cdq
  00224	2b c2		 sub	 eax, edx
  00226	d1 f8		 sar	 eax, 1
  00228	89 45 e8	 mov	 DWORD PTR _nDestLen$3[ebp], eax

; 1784 :                 for ( ; i < nDestLen; i++ )                 // Loop through all data.

  0022b	eb 09		 jmp	 SHORT $LN10@WriteTrace
$LN8@WriteTrace:
  0022d	8b 4d f4	 mov	 ecx, DWORD PTR _i$6[ebp]
  00230	83 c1 01	 add	 ecx, 1
  00233	89 4d f4	 mov	 DWORD PTR _i$6[ebp], ecx
$LN10@WriteTrace:
  00236	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  00239	3b 55 e8	 cmp	 edx, DWORD PTR _nDestLen$3[ebp]
  0023c	7d 73		 jge	 SHORT $LN20@WriteTrace

; 1785 :                 {                                           //
; 1786 :                     if ( HINIBBLE(pSource[0]) != 0x30 || HINIBBLE(pSource[1]) != 0x30 )

  0023e	b8 02 00 00 00	 mov	 eax, 2
  00243	6b c8 00	 imul	 ecx, eax, 0
  00246	8b 55 f0	 mov	 edx, DWORD PTR _pSource$5[ebp]
  00249	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0024d	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00252	83 f8 30	 cmp	 eax, 48			; 00000030H
  00255	75 19		 jne	 SHORT $LN25@WriteTrace
  00257	b9 02 00 00 00	 mov	 ecx, 2
  0025c	c1 e1 00	 shl	 ecx, 0
  0025f	8b 55 f0	 mov	 edx, DWORD PTR _pSource$5[ebp]
  00262	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00266	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  0026b	83 f8 30	 cmp	 eax, 48			; 00000030H
  0026e	74 02		 je	 SHORT $LN24@WriteTrace
$LN25@WriteTrace:

; 1787 :                         break;

  00270	eb 3f		 jmp	 SHORT $LN20@WriteTrace
$LN24@WriteTrace:

; 1788 :                     pDest[i] = (BYTE)                       //  - Set destination character to

  00272	b9 02 00 00 00	 mov	 ecx, 2
  00277	6b d1 00	 imul	 edx, ecx, 0
  0027a	8b 45 f0	 mov	 eax, DWORD PTR _pSource$5[ebp]
  0027d	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00281	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00284	c1 e1 04	 shl	 ecx, 4
  00287	ba 02 00 00 00	 mov	 edx, 2
  0028c	c1 e2 00	 shl	 edx, 0
  0028f	8b 45 f0	 mov	 eax, DWORD PTR _pSource$5[ebp]
  00292	0f b7 14 10	 movzx	 edx, WORD PTR [eax+edx]
  00296	83 e2 0f	 and	 edx, 15			; 0000000fH
  00299	0b ca		 or	 ecx, edx
  0029b	8b 45 ec	 mov	 eax, DWORD PTR _pDest$4[ebp]
  0029e	03 45 f4	 add	 eax, DWORD PTR _i$6[ebp]
  002a1	88 08		 mov	 BYTE PTR [eax], cl

; 1789 :                         ( ( LONIBBLE(pSource[0]) << 4 ) |   //      first char's bits 3-0 as bits 7-4 ORed with
; 1790 :                             LONIBBLE(pSource[1]) );         //      second char's bits 3-0 as bits 3-0.
; 1791 :                     pSource += 2;                           //  - Move on to next source pair.

  002a3	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$5[ebp]
  002a6	83 c1 04	 add	 ecx, 4
  002a9	89 4d f0	 mov	 DWORD PTR _pSource$5[ebp], ecx

; 1792 :                 }

  002ac	e9 7c ff ff ff	 jmp	 $LN8@WriteTrace
$LN20@WriteTrace:

; 1793 :             }
; 1794 : 
; 1795 :             // If was a valid binary converted string...
; 1796 :             if ( i == nDestLen )

  002b1	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  002b4	3b 55 e8	 cmp	 edx, DWORD PTR _nDestLen$3[ebp]
  002b7	0f 85 82 00 00
	00		 jne	 $LN26@WriteTrace

; 1797 :             {
; 1798 :                 pDest[i] = '\0';                            // End the string with a NUL.

  002bd	8b 45 ec	 mov	 eax, DWORD PTR _pDest$4[ebp]
  002c0	03 45 f4	 add	 eax, DWORD PTR _i$6[ebp]
  002c3	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1799 : 
; 1800 :                 // Check the converted buffer for non-ascii characters, and output the string.
; 1801 :                 for ( i = 0; i < nDestLen; i++ )

  002c6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  002cd	eb 09		 jmp	 SHORT $LN13@WriteTrace
$LN11@WriteTrace:
  002cf	8b 4d f4	 mov	 ecx, DWORD PTR _i$6[ebp]
  002d2	83 c1 01	 add	 ecx, 1
  002d5	89 4d f4	 mov	 DWORD PTR _i$6[ebp], ecx
$LN13@WriteTrace:
  002d8	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  002db	3b 55 e8	 cmp	 edx, DWORD PTR _nDestLen$3[ebp]
  002de	7d 20		 jge	 SHORT $LN12@WriteTrace

; 1802 :                     if ( pDest[i] < 0x20 || 0x7F < pDest[i] )

  002e0	8b 45 ec	 mov	 eax, DWORD PTR _pDest$4[ebp]
  002e3	03 45 f4	 add	 eax, DWORD PTR _i$6[ebp]
  002e6	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002e9	83 f9 20	 cmp	 ecx, 32			; 00000020H
  002ec	7c 0e		 jl	 SHORT $LN28@WriteTrace
  002ee	8b 55 ec	 mov	 edx, DWORD PTR _pDest$4[ebp]
  002f1	03 55 f4	 add	 edx, DWORD PTR _i$6[ebp]
  002f4	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  002f7	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  002fa	7e 02		 jle	 SHORT $LN27@WriteTrace
$LN28@WriteTrace:

; 1803 :                         break;

  002fc	eb 02		 jmp	 SHORT $LN12@WriteTrace
$LN27@WriteTrace:
  002fe	eb cf		 jmp	 SHORT $LN11@WriteTrace
$LN12@WriteTrace:

; 1804 :                 WriteTraceString( pDest, nDestLen, i == nDestLen, 1 /*narrow string*/,

  00300	8b 4d f4	 mov	 ecx, DWORD PTR _i$6[ebp]
  00303	3b 4d e8	 cmp	 ecx, DWORD PTR _nDestLen$3[ebp]
  00306	75 09		 jne	 SHORT $LN32@WriteTrace
  00308	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv226[ebp], 1
  0030f	eb 07		 jmp	 SHORT $LN33@WriteTrace
$LN32@WriteTrace:
  00311	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN33@WriteTrace:
  00318	8b 55 f8	 mov	 edx, DWORD PTR _nLen$[ebp]
  0031b	52		 push	 edx
  0031c	8b 45 08	 mov	 eax, DWORD PTR _pszPrefix$[ebp]
  0031f	50		 push	 eax
  00320	68 00 00 00 00	 push	 OFFSET $SG194406
  00325	6a 01		 push	 1
  00327	8b 4d d8	 mov	 ecx, DWORD PTR tv226[ebp]
  0032a	51		 push	 ecx
  0032b	8b 55 e8	 mov	 edx, DWORD PTR _nDestLen$3[ebp]
  0032e	52		 push	 edx
  0032f	8b 45 ec	 mov	 eax, DWORD PTR _pDest$4[ebp]
  00332	50		 push	 eax
  00333	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00336	51		 push	 ecx
  00337	e8 00 00 00 00	 call	 ?WriteTraceString@COPOSDeviceMonitor@@QAAXPAXHHHPB_WZZ ; COPOSDeviceMonitor::WriteTraceString
  0033c	83 c4 20	 add	 esp, 32			; 00000020H
$LN26@WriteTrace:

; 1805 :                     _T("%s Length %u [BinConv]"), pszPrefix, nLen );
; 1806 :             }
; 1807 : 
; 1808 :             delete [] pDest;                                // Delete the destination buffer.

  0033f	8b 55 ec	 mov	 edx, DWORD PTR _pDest$4[ebp]
  00342	89 55 e0	 mov	 DWORD PTR $T1[ebp], edx
  00345	8b 45 e0	 mov	 eax, DWORD PTR $T1[ebp]
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0034e	83 c4 04	 add	 esp, 4
$LN1@WriteTrace:

; 1809 :         }
; 1810 :     }
; 1811 : }

  00351	5f		 pop	 edi
  00352	5e		 pop	 esi
  00353	83 c4 28	 add	 esp, 40			; 00000028H
  00356	3b ec		 cmp	 ebp, esp
  00358	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0035d	8b e5		 mov	 esp, ebp
  0035f	5d		 pop	 ebp
  00360	c2 08 00	 ret	 8
?WriteTraceString@COPOSDeviceMonitor@@QAEXPB_WPA_W@Z ENDP ; COPOSDeviceMonitor::WriteTraceString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_marker$1 = -8						; size = 4
_fTrace$ = -4						; size = 4
_this$ = 8						; size = 4
_pFormat$ = 12						; size = 4
?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ PROC		; COPOSDeviceMonitor::WriteTrace

; 1663 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1664 :     static TCHAR s_TraceFile[] = _T("C:\\OposCCO_DeviceMonitor.log");
; 1665 :     static BOOL s_bFirst = TRUE;
; 1666 :     if (s_bFirst)

  0001c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?s_bFirst@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4HA, 0
  00023	74 1e		 je	 SHORT $LN2@WriteTrace

; 1667 :     {
; 1668 :         ::DeleteFile(s_TraceFile);

  00025	8b f4		 mov	 esi, esp
  00027	68 00 00 00 00	 push	 OFFSET ?s_TraceFile@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4PA_WA
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileW@4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1669 :         s_bFirst = FALSE;

  00039	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_bFirst@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4HA, 0
$LN2@WriteTrace:

; 1670 :     }
; 1671 :     FILE* fTrace = _tfopen( s_TraceFile, _T("a") );

  00043	68 00 00 00 00	 push	 OFFSET $SG194333
  00048	68 00 00 00 00	 push	 OFFSET ?s_TraceFile@?1??WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ@4PA_WA
  0004d	e8 00 00 00 00	 call	 __wfopen
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 fc	 mov	 DWORD PTR _fTrace$[ebp], eax

; 1672 :     if (fTrace)

  00058	83 7d fc 00	 cmp	 DWORD PTR _fTrace$[ebp], 0
  0005c	74 34		 je	 SHORT $LN1@WriteTrace

; 1673 :     {
; 1674 :         va_list marker;
; 1675 :         va_start(marker, pFormat);

  0005e	8d 45 10	 lea	 eax, DWORD PTR _pFormat$[ebp+4]
  00061	89 45 f8	 mov	 DWORD PTR _marker$1[ebp], eax

; 1676 :         _vftprintf( fTrace, pFormat, marker );

  00064	8b 4d f8	 mov	 ecx, DWORD PTR _marker$1[ebp]
  00067	51		 push	 ecx
  00068	8b 55 0c	 mov	 edx, DWORD PTR _pFormat$[ebp]
  0006b	52		 push	 edx
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _fTrace$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _vfwprintf
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :         putc( '\n', fTrace );

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _fTrace$[ebp]
  0007b	51		 push	 ecx
  0007c	6a 0a		 push	 10			; 0000000aH
  0007e	e8 00 00 00 00	 call	 _putc
  00083	83 c4 08	 add	 esp, 8

; 1678 :         fclose(fTrace);

  00086	8b 55 fc	 mov	 edx, DWORD PTR _fTrace$[ebp]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 _fclose
  0008f	83 c4 04	 add	 esp, 4
$LN1@WriteTrace:

; 1679 :     }
; 1680 : }

  00092	5e		 pop	 esi
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ENDP		; COPOSDeviceMonitor::WriteTrace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.h
;	COMDAT ?SetRC@COPOSDeviceMonitor@@IAEJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nRC$ = 8						; size = 4
?SetRC@COPOSDeviceMonitor@@IAEJJ@Z PROC			; COPOSDeviceMonitor::SetRC, COMDAT
; _this$ = ecx

; 156  :         { return _nCOResultCode = nRC; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _nRC$[ebp]
  00014	89 88 f4 00 00
	00		 mov	 DWORD PTR [eax+244], ecx
  0001a	8b 45 08	 mov	 eax, DWORD PTR _nRC$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?SetRC@COPOSDeviceMonitor@@IAEJJ@Z ENDP			; COPOSDeviceMonitor::SetRC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_RC$ = -12						; size = 4
_this$ = -4						; size = 4
??1COPOSDeviceMonitor@@UAE@XZ PROC			; COPOSDeviceMonitor::~COPOSDeviceMonitor
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  :     DOTRACE( ( _T("*Destructing") ) );

  0001a	68 00 00 00 00	 push	 OFFSET $SG193367
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00028	83 c4 08	 add	 esp, 8

; 185  : 
; 186  :     s_nInstances--; // Decrement instance count at start of destructor.

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA ; COPOSDeviceMonitor::s_nInstances
  00031	83 e9 01	 sub	 ecx, 1
  00034	89 0d 00 00 00
	00		 mov	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA, ecx ; COPOSDeviceMonitor::s_nInstances

; 187  :     long RC;
; 188  :     if ( _bOpened )

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	0f b6 82 e4 00
	00 00		 movzx	 eax, BYTE PTR [edx+228]
  00044	85 c0		 test	 eax, eax
  00046	74 0d		 je	 SHORT $LN2@COPOSDevic

; 189  :         Close( &RC );

  00048	8d 4d f4	 lea	 ecx, DWORD PTR _RC$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ?Close@COPOSDeviceMonitor@@UAGJPAJ@Z ; COPOSDeviceMonitor::Close
$LN2@COPOSDevic:

; 190  :     EventUninit();

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?EventUninit@COPOSDeviceMonitor@@IAEXXZ ; COPOSDeviceMonitor::EventUninit

; 191  : 
; 192  :     DOTRACE( ( _T("") ) );

  0005d	68 00 00 00 00	 push	 OFFSET $SG193369
  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0006b	83 c4 08	 add	 esp, 8

; 193  :     TRACEEXIT;
; 194  : }

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  00077	e8 00 00 00 00	 call	 ??1?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@XZ
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00085	e8 00 00 00 00	 call	 ??1?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	83 c1 04	 add	 ecx, 4
  00090	e8 00 00 00 00	 call	 ??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  0009e	e8 00 00 00 00	 call	 ??1?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::~CComObjectRootEx<ATL::CComSingleThreadModel>
  000a3	52		 push	 edx
  000a4	8b cd		 mov	 ecx, ebp
  000a6	50		 push	 eax
  000a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@COPOSDevic
  000ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b2	58		 pop	 eax
  000b3	5a		 pop	 edx
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
  000c2	66 90		 npad	 2
$LN6@COPOSDevic:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN5@COPOSDevic
$LN5@COPOSDevic:
  000cc	f4 ff ff ff	 DD	 -12			; fffffff4H
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN4@COPOSDevic
$LN4@COPOSDevic:
  000d8	52		 DB	 82			; 00000052H
  000d9	43		 DB	 67			; 00000043H
  000da	00		 DB	 0
??1COPOSDeviceMonitor@@UAE@XZ ENDP			; COPOSDeviceMonitor::~COPOSDeviceMonitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_hRC$ = -8						; size = 4
_this$ = -4						; size = 4
?FinalConstruct@COPOSDeviceMonitor@@QAEJXZ PROC		; COPOSDeviceMonitor::FinalConstruct
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 160  :     TRACEINIT;
; 161  :     DOTRACE( ( _T("") ) );

  00017	68 00 00 00 00	 push	 OFFSET $SG193361
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00025	83 c4 08	 add	 esp, 8

; 162  :     DOTRACE( ( _T("*Constructing: %hs"), g_ControlDescription ) );

  00028	68 00 00 00 00	 push	 OFFSET ?g_ControlDescription@@3PADA ; g_ControlDescription
  0002d	68 00 00 00 00	 push	 OFFSET $SG193362
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  : 
; 164  :     _bOpened = false;

  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	c6 82 e4 00 00
	00 00		 mov	 BYTE PTR [edx+228], 0

; 165  :     _nOpenResult = 0;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 80 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+232], 0

; 166  :     _nSOMajor = 0;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 167  :     _nSOMinor = 0;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	c7 82 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+240], 0

; 168  :     _nCOResultCode = -1;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	c7 80 f4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+244], -1

; 169  :     _nCOFreezeEventCount = 0;

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	c7 81 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+252], 0

; 170  :     _bFreezeState = false;

  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	c6 82 00 01 00
	00 00		 mov	 BYTE PTR [edx+256], 0

; 171  :     IFDEBUG( _nBinaryConversion = OPOS_BC_NONE );

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	c7 80 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+356], 0

; 172  : 
; 173  :     HRESULT hRC = EventInit();

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?EventInit@COPOSDeviceMonitor@@IAEJXZ ; COPOSDeviceMonitor::EventInit
  000a8	89 45 f8	 mov	 DWORD PTR _hRC$[ebp], eax

; 174  : 
; 175  :     s_nInstances++; // Increment instance count at end of FinalConstruct.

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA ; COPOSDeviceMonitor::s_nInstances
  000b1	83 c1 01	 add	 ecx, 1
  000b4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?s_nInstances@COPOSDeviceMonitor@@1HA, ecx ; COPOSDeviceMonitor::s_nInstances

; 176  : 
; 177  :     return hRC;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _hRC$[ebp]

; 178  : }

  000bd	83 c4 08	 add	 esp, 8
  000c0	3b ec		 cmp	 ebp, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
?FinalConstruct@COPOSDeviceMonitor@@QAEJXZ ENDP		; COPOSDeviceMonitor::FinalConstruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorImpl.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COPOSDeviceMonitor@@QAE@XZ PROC			; COPOSDeviceMonitor::COPOSDeviceMonitor
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00017	e8 00 00 00 00	 call	 ??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0?$IDispatchImpl@UIOPOSDeviceMonitor@@$1?IID_IOPOSDeviceMonitor@@3U_GUID@@B$1?LIBID_OposDeviceMonitor_CCO@@3U3@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 04	 add	 ecx, 4
  0002a	e8 00 00 00 00	 call	 ??0?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 70	 add	 ecx, 112		; 00000070H
  00035	e8 00 00 00 00	 call	 ??0?$IPersistStreamInitImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 74	 add	 ecx, 116		; 00000074H
  00040	e8 00 00 00 00	 call	 ??0?$IOleControlImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 78	 add	 ecx, 120		; 00000078H
  0004b	e8 00 00 00 00	 call	 ??0?$IOleObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00056	e8 00 00 00 00	 call	 ??0?$IOleInPlaceActiveObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00064	e8 00 00 00 00	 call	 ??0?$IViewObjectExImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00072	e8 00 00 00 00	 call	 ??0?$IOleInPlaceObjectWindowlessImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00080	e8 00 00 00 00	 call	 ??0?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	81 c1 8c 00 00
	00		 add	 ecx, 140		; 0000008cH
  0008e	e8 00 00 00 00	 call	 ??0?$IPersistStorageImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0009c	e8 00 00 00 00	 call	 ??0?$ISpecifyPropertyPagesImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  000aa	e8 00 00 00 00	 call	 ??0?$IQuickActivateImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000b8	e8 00 00 00 00	 call	 ??0?$IDataObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  000c6	e8 00 00 00 00	 call	 ??0?$IProvideClassInfo2Impl@$1?CLSID_OPOSDeviceMonitor@@3U_GUID@@B$1?DIID__IOPOSDeviceMonitorEvents@@3U2@B$1?LIBID_OposDeviceMonitor_CCO@@3U2@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  000d4	e8 00 00 00 00	 call	 ??0?$IObjectSafetyImpl@VCOPOSDeviceMonitor@@$02@ATL@@QAE@XZ ; ATL::IObjectSafetyImpl<COPOSDeviceMonitor,3>::IObjectSafetyImpl<COPOSDeviceMonitor,3>
  000d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  000e2	e8 00 00 00 00	 call	 ??0?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ

; 152  :     IFDEBUG( : CProxy_IOPOSEvents< COPOSDeviceMonitor >(this) )

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  000f4	e8 00 00 00 00	 call	 ??0?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@PAVCOPOSDeviceMonitor@@@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::CProxy_IOPOSEvents<COPOSDeviceMonitor>

; 154  : }

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	83 c4 04	 add	 esp, 4
  000ff	3b ec		 cmp	 ebp, esp
  00101	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
??0COPOSDeviceMonitor@@QAE@XZ ENDP			; COPOSDeviceMonitor::COPOSDeviceMonitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@XZ PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::~CProxy_IOPOSEvents<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@XZ ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::~CProxy_IOPOSEvents<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z
_TEXT	SEGMENT
_hRC$1 = -48						; size = 4
_DispID$ = -40						; size = 4
_DispParms$ = -28					; size = 16
_pNameOrig$ = -8					; size = 4
_this$ = -4						; size = 4
_pUnkSink$ = 8						; size = 4
_rgvarg$ = 12						; size = 4
_cArgs$ = 16						; size = 4
_FirstDispID$ = 20					; size = 4
_pName$ = 24						; size = 4
_MyDispID$ = 28						; size = 4
?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent, COMDAT
; _this$ = ecx

; 183  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  :         IFDEBUG( const OLECHAR* pNameOrig = pName );

  0001c	8b 45 18	 mov	 eax, DWORD PTR _pName$[ebp]
  0001f	89 45 f8	 mov	 DWORD PTR _pNameOrig$[ebp], eax

; 185  : 
; 186  :         // Declare and initialize the dispatch parameters and dispatch ID.
; 187  :         OposDispParms DispParms( rgvarg, cArgs );

  00022	8b 4d 10	 mov	 ecx, DWORD PTR _cArgs$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 0c	 mov	 edx, DWORD PTR _rgvarg$[ebp]
  00029	52		 push	 edx
  0002a	8d 4d e4	 lea	 ecx, DWORD PTR _DispParms$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0OposDispParms@@QAE@PAVOposVariant@@H@Z ; OposDispParms::OposDispParms

; 188  :         DISPID DispID = FirstDispID;

  00032	8b 45 14	 mov	 eax, DWORD PTR _FirstDispID$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 4d d8	 mov	 DWORD PTR _DispID$[ebp], ecx

; 189  :         // If not first connection (not likely for our controls!) or first dispatch ID not yet looked up...
; 190  :         if ( _nCOConnectionIndex != 0 || FirstDispID < 0 )

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00041	75 08		 jne	 SHORT $LN3@FireTheEve
  00043	8b 45 14	 mov	 eax, DWORD PTR _FirstDispID$[ebp]
  00046	83 38 00	 cmp	 DWORD PTR [eax], 0
  00049	7d 66		 jge	 SHORT $LN2@FireTheEve
$LN3@FireTheEve:

; 191  :         {
; 192  :             // Get the dispatch ID of the event we want to call.
; 193  :             //   If not implemented, then assume that client used typelib to use our default DispIDs.
; 194  :             //   If other failure, the can't fire.
; 195  :             HRESULT hRC = _pCPDispatch->GetIDsOfNames( IID_NULL, const_cast<OLECHAR**>(&pName), 1, LOCALE_USER_DEFAULT, &DispID );

  0004b	8b f4		 mov	 esi, esp
  0004d	8d 4d d8	 lea	 ecx, DWORD PTR _DispID$[ebp]
  00050	51		 push	 ecx
  00051	68 00 04 00 00	 push	 1024			; 00000400H
  00056	6a 01		 push	 1
  00058	8d 55 18	 lea	 edx, DWORD PTR _pName$[ebp]
  0005b	52		 push	 edx
  0005c	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00067	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0006d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006f	50		 push	 eax
  00070	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00073	ff d2		 call	 edx
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	89 45 d0	 mov	 DWORD PTR _hRC$1[ebp], eax

; 196  :             if ( hRC == E_NOTIMPL )

  0007f	81 7d d0 01 40
	00 80		 cmp	 DWORD PTR _hRC$1[ebp], -2147467263 ; 80004001H
  00086	75 08		 jne	 SHORT $LN4@FireTheEve

; 197  :                 DispID = MyDispID;

  00088	8b 45 1c	 mov	 eax, DWORD PTR _MyDispID$[ebp]
  0008b	89 45 d8	 mov	 DWORD PTR _DispID$[ebp], eax
  0008e	eb 10		 jmp	 SHORT $LN5@FireTheEve
$LN4@FireTheEve:

; 198  :             else if ( hRC != S_OK )

  00090	83 7d d0 00	 cmp	 DWORD PTR _hRC$1[ebp], 0
  00094	74 0a		 je	 SHORT $LN5@FireTheEve

; 199  :                 return;

  00096	8d 4d e4	 lea	 ecx, DWORD PTR _DispParms$[ebp]
  00099	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
  0009e	eb 70		 jmp	 SHORT $LN1@FireTheEve
$LN5@FireTheEve:

; 200  :             // If first connection, then save in cache for next time.
; 201  :             if ( _nCOConnectionIndex == 0 )

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  000a7	75 08		 jne	 SHORT $LN2@FireTheEve

; 202  :                 FirstDispID = DispID;

  000a9	8b 55 14	 mov	 edx, DWORD PTR _FirstDispID$[ebp]
  000ac	8b 45 d8	 mov	 eax, DWORD PTR _DispID$[ebp]
  000af	89 02		 mov	 DWORD PTR [edx], eax
$LN2@FireTheEve:

; 203  :         }
; 204  :         // Call the event.
; 205  :         IFDEBUG( _pOposControl->DOTRACEV( ( _T("*FireTheEvent: Delivering %ls; Sink 0x%X; DispID %d"), pNameOrig, pUnkSink, DispID ) ) );

  000b1	8b 4d d8	 mov	 ecx, DWORD PTR _DispID$[ebp]
  000b4	51		 push	 ecx
  000b5	8b 55 08	 mov	 edx, DWORD PTR _pUnkSink$[ebp]
  000b8	52		 push	 edx
  000b9	8b 45 f8	 mov	 eax, DWORD PTR _pNameOrig$[ebp]
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_1GI@CMBOLMBG@?$AA?$CK?$AAF?$AAi?$AAr?$AAe?$AAT?$AAh?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5@
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  000ce	83 c4 14	 add	 esp, 20			; 00000014H

; 206  :         _pCPDispatch->Invoke( DispID, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &DispParms, NULL, NULL, NULL );

  000d1	8b f4		 mov	 esi, esp
  000d3	6a 00		 push	 0
  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	8d 45 e4	 lea	 eax, DWORD PTR _DispParms$[ebp]
  000dc	50		 push	 eax
  000dd	6a 01		 push	 1
  000df	68 00 04 00 00	 push	 1024			; 00000400H
  000e4	68 00 00 00 00	 push	 OFFSET _GUID_NULL
  000e9	8b 4d d8	 mov	 ecx, DWORD PTR _DispID$[ebp]
  000ec	51		 push	 ecx
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f0	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000f9	8b 00		 mov	 eax, DWORD PTR [eax]
  000fb	52		 push	 edx
  000fc	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ff	ff d1		 call	 ecx
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 207  :     }

  00108	8d 4d e4	 lea	 ecx, DWORD PTR _DispParms$[ebp]
  0010b	e8 00 00 00 00	 call	 ??1OposDispParms@@QAE@XZ ; OposDispParms::~OposDispParms
$LN1@FireTheEve:
  00110	52		 push	 edx
  00111	8b cd		 mov	 ecx, ebp
  00113	50		 push	 eax
  00114	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@FireTheEve
  0011a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011f	58		 pop	 eax
  00120	5a		 pop	 edx
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	83 c4 30	 add	 esp, 48			; 00000030H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 18 00	 ret	 24			; 00000018H
  00133	90		 npad	 1
$LN12@FireTheEve:
  00134	02 00 00 00	 DD	 2
  00138	00 00 00 00	 DD	 $LN11@FireTheEve
$LN11@FireTheEve:
  0013c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00140	10 00 00 00	 DD	 16			; 00000010H
  00144	00 00 00 00	 DD	 $LN9@FireTheEve
  00148	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN10@FireTheEve
$LN10@FireTheEve:
  00154	44		 DB	 68			; 00000044H
  00155	69		 DB	 105			; 00000069H
  00156	73		 DB	 115			; 00000073H
  00157	70		 DB	 112			; 00000070H
  00158	49		 DB	 73			; 00000049H
  00159	44		 DB	 68			; 00000044H
  0015a	00		 DB	 0
$LN9@FireTheEve:
  0015b	44		 DB	 68			; 00000044H
  0015c	69		 DB	 105			; 00000069H
  0015d	73		 DB	 115			; 00000073H
  0015e	70		 DB	 112			; 00000070H
  0015f	50		 DB	 80			; 00000050H
  00160	61		 DB	 97			; 00000061H
  00161	72		 DB	 114			; 00000072H
  00162	6d		 DB	 109			; 0000006dH
  00163	73		 DB	 115			; 00000073H
  00164	00		 DB	 0
?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Unadvise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwCookie$ = 12						; size = 4
?Unadvise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJK@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Unadvise, COMDAT

; 163  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 164  :         _pOposControl->DOTRACEV( ( _T("*Unadvise: Cookie 0x%X"), dwCookie ) );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@NKNAIIAP@?$AA?$CK?$AAU?$AAn?$AAa?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAo?$AAk@
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 165  :         return IConnectionPointImpl<T, &DIID__IOPOSDeviceMonitorEvents, CComDynamicUnkArray>::Unadvise(dwCookie);

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise

; 166  :     }

  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?Unadvise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJK@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Unadvise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Advise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJPAUIUnknown@@PAK@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_pUnkSink$ = 12						; size = 4
_pdwCookie$ = 16					; size = 4
?Advise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJPAUIUnknown@@PAK@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Advise, COMDAT

; 156  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 157  :         HRESULT hr = IConnectionPointImpl<T, &DIID__IOPOSDeviceMonitorEvents, CComDynamicUnkArray>::Advise( pUnkSink, pdwCookie );

  0000b	8b 45 10	 mov	 eax, DWORD PTR _pdwCookie$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _pUnkSink$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise
  0001c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 158  :         _pOposControl->DOTRACEV( ( _T("*Advise: Sink 0x%X; Cookie 0x%X"), pUnkSink, *pdwCookie ) );

  0001f	8b 45 10	 mov	 eax, DWORD PTR _pdwCookie$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _pUnkSink$[ebp]
  00028	52		 push	 edx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@IMKHEMDJ@?$AA?$CK?$AAA?$AAd?$AAv?$AAi?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAi?$AAn?$AAk?$AA?5?$AA0@
  0002e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ?WriteTrace@COPOSDeviceMonitor@@QAAXPB_WZZ ; COPOSDeviceMonitor::WriteTrace
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 159  :         return hr;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 160  :     }

  00040	83 c4 04	 add	 esp, 4
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?Advise@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@UAGJPAUIUnknown@@PAK@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Advise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ??0?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@PAVCOPOSDeviceMonitor@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pOposControl$ = 8					; size = 4
??0?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@PAVCOPOSDeviceMonitor@@@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::CProxy_IOPOSEvents<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx

; 144  :     CProxy_IOPOSEvents( IFDEBUG( COPOSDeviceMonitor* pOposControl ) )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 145  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@6B@

; 146  :         _DIDData = -1;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 147  :         _DIDDirectIO = -1;

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	c7 42 10 ff ff
	ff ff		 mov	 DWORD PTR [edx+16], -1

; 148  :         _DIDError = -1;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 14 ff ff
	ff ff		 mov	 DWORD PTR [eax+20], -1

; 149  :         _DIDOutput = -1;

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1

; 150  :         _DIDStatus = -1;

  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	c7 42 1c ff ff
	ff ff		 mov	 DWORD PTR [edx+28], -1

; 151  :         IFDEBUG( _pOposControl = pOposControl );

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _pOposControl$[ebp]
  00057	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 152  :     }

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
??0?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAE@PAVCOPOSDeviceMonitor@@@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::CProxy_IOPOSEvents<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z
_TEXT	SEGMENT
tv68 = -60						; size = 4
_sp$1 = -52						; size = 4
_nConnections$ = -44					; size = 4
_var$ = -36						; size = 24
_pT$ = -8						; size = 4
_this$ = -4						; size = 4
_Data$ = 8						; size = 4
?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent, COMDAT
; _this$ = ecx

; 123  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 124  :         T* pT = static_cast<T*>(this);

  0001b	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001f	74 0d		 je	 SHORT $LN7@Fire_Statu
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  00029	89 45 c4	 mov	 DWORD PTR tv68[ebp], eax
  0002c	eb 07		 jmp	 SHORT $LN8@Fire_Statu
$LN7@Fire_Statu:
  0002e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN8@Fire_Statu:
  00035	8b 4d c4	 mov	 ecx, DWORD PTR tv68[ebp]
  00038	89 4d f8	 mov	 DWORD PTR _pT$[ebp], ecx

; 125  :         OposVariant var;

  0003b	8d 4d dc	 lea	 ecx, DWORD PTR _var$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 126  :         int nConnections = m_vec.GetSize();

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 04	 add	 ecx, 4
  00049	e8 00 00 00 00	 call	 ?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ ; ATL::CComDynamicUnkArray::GetSize
  0004e	89 45 d4	 mov	 DWORD PTR _nConnections$[ebp], eax

; 127  : 
; 128  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  0005b	eb 0f		 jmp	 SHORT $LN4@Fire_Statu
$LN2@Fire_Statu:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00063	83 c1 01	 add	 ecx, 1
  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN4@Fire_Statu:
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00072	3b 4d d4	 cmp	 ecx, DWORD PTR _nConnections$[ebp]
  00075	0f 8d 87 00 00
	00		 jge	 $LN3@Fire_Statu

; 129  :         {
; 130  :             pT->Lock();

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  0007e	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00084	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 131  :             CComPtr<IUnknown> sp = m_vec.GetAt(_nCOConnectionIndex);

  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0008f	50		 push	 eax
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 04	 add	 ecx, 4
  00096	e8 00 00 00 00	 call	 ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
  0009b	50		 push	 eax
  0009c	8d 4d cc	 lea	 ecx, DWORD PTR _sp$1[ebp]
  0009f	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>

; 132  :             pT->Unlock();

  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  000a7	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000ad	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 133  :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	8b 55 cc	 mov	 edx, DWORD PTR _sp$1[ebp]
  000b8	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 134  :             if (_pCPDispatch != NULL)

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000be	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  000c2	74 31		 je	 SHORT $LN5@Fire_Statu

; 135  :             {
; 136  :                 var.SetLONG( Data );

  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _Data$[ebp]
  000c7	51		 push	 ecx
  000c8	8d 4d dc	 lea	 ecx, DWORD PTR _var$[ebp]
  000cb	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 137  :                 FireTheEvent( FEUNKNOWN &var, 1, _DIDStatus, L"StatusUpdateEvent", 5 );

  000d0	6a 05		 push	 5
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@PGFMOFKI@?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe@
  000d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000da	83 c2 1c	 add	 edx, 28			; 0000001cH
  000dd	52		 push	 edx
  000de	6a 01		 push	 1
  000e0	8d 45 dc	 lea	 eax, DWORD PTR _var$[ebp]
  000e3	50		 push	 eax
  000e4	8d 4d cc	 lea	 ecx, DWORD PTR _sp$1[ebp]
  000e7	e8 00 00 00 00	 call	 ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
  000ec	50		 push	 eax
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
$LN5@Fire_Statu:

; 138  :             }
; 139  :         }

  000f5	8d 4d cc	 lea	 ecx, DWORD PTR _sp$1[ebp]
  000f8	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
  000fd	e9 5b ff ff ff	 jmp	 $LN2@Fire_Statu
$LN3@Fire_Statu:

; 140  :     }

  00102	8d 4d dc	 lea	 ecx, DWORD PTR _var$[ebp]
  00105	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Fire_Statu
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	83 c4 3c	 add	 esp, 60			; 0000003cH
  0011f	3b ec		 cmp	 ebp, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN12@Fire_Statu:
  0012c	02 00 00 00	 DD	 2
  00130	00 00 00 00	 DD	 $LN11@Fire_Statu
$LN11@Fire_Statu:
  00134	dc ff ff ff	 DD	 -36			; ffffffdcH
  00138	18 00 00 00	 DD	 24			; 00000018H
  0013c	00 00 00 00	 DD	 $LN9@Fire_Statu
  00140	cc ff ff ff	 DD	 -52			; ffffffccH
  00144	04 00 00 00	 DD	 4
  00148	00 00 00 00	 DD	 $LN10@Fire_Statu
$LN10@Fire_Statu:
  0014c	73		 DB	 115			; 00000073H
  0014d	70		 DB	 112			; 00000070H
  0014e	00		 DB	 0
$LN9@Fire_Statu:
  0014f	76		 DB	 118			; 00000076H
  00150	61		 DB	 97			; 00000061H
  00151	72		 DB	 114			; 00000072H
  00152	00		 DB	 0
?Fire_StatusUpdateEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_StatusUpdateEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJJJPAJ@Z
_TEXT	SEGMENT
tv68 = -148						; size = 4
_hr$1 = -140						; size = 4
_sp$2 = -128						; size = 4
_nConnections$ = -120					; size = 4
_vars$ = -112						; size = 96
_pT$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ResultCode$ = 8					; size = 4
_ResultCodeExtended$ = 12				; size = 4
_ErrorLocus$ = 16					; size = 4
_pErrorResponse$ = 20					; size = 4
?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJJJPAJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent, COMDAT
; _this$ = ecx

; 97   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00011	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   :         T* pT = static_cast<T*>(this);

  0002b	83 7d f8 00	 cmp	 DWORD PTR _this$[ebp], 0
  0002f	74 10		 je	 SHORT $LN7@Fire_Error
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  00039	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
  0003f	eb 0a		 jmp	 SHORT $LN8@Fire_Error
$LN7@Fire_Error:
  00041	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
$LN8@Fire_Error:
  0004b	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv68[ebp]
  00051	89 4d f4	 mov	 DWORD PTR _pT$[ebp], ecx

; 99   :         OposVariant vars[4];

  00054	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  00059	6a 04		 push	 4
  0005b	6a 18		 push	 24			; 00000018H
  0005d	8d 55 90	 lea	 edx, DWORD PTR _vars$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 100  :         int nConnections = m_vec.GetSize();

  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 04	 add	 ecx, 4
  0006c	e8 00 00 00 00	 call	 ?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ ; ATL::CComDynamicUnkArray::GetSize
  00071	89 45 88	 mov	 DWORD PTR _nConnections$[ebp], eax

; 101  : 
; 102  :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00074	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  0007e	eb 0f		 jmp	 SHORT $LN4@Fire_Error
$LN2@Fire_Error:
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00086	83 c2 01	 add	 edx, 1
  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	89 50 20	 mov	 DWORD PTR [eax+32], edx
$LN4@Fire_Error:
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00095	3b 55 88	 cmp	 edx, DWORD PTR _nConnections$[ebp]
  00098	0f 8d d5 00 00
	00		 jge	 $LN3@Fire_Error

; 103  :         {
; 104  :             pT->Lock();

  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _pT$[ebp]
  000a1	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000a7	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 105  :             CComPtr<IUnknown> sp = m_vec.GetAt(_nCOConnectionIndex);

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000af	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000b2	51		 push	 ecx
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	83 c1 04	 add	 ecx, 4
  000b9	e8 00 00 00 00	 call	 ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
  000be	50		 push	 eax
  000bf	8d 4d 80	 lea	 ecx, DWORD PTR _sp$2[ebp]
  000c2	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>

; 106  :             pT->Unlock();

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR _pT$[ebp]
  000ca	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000d0	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 107  :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000d5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	8b 45 80	 mov	 eax, DWORD PTR _sp$2[ebp]
  000db	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 108  :             if (_pCPDispatch != NULL)

  000de	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  000e5	74 7f		 je	 SHORT $LN5@Fire_Error

; 109  :             {
; 110  :                 HRESULT hr;
; 111  :                 vars[3].SetLONG( ResultCode );

  000e7	8b 55 08	 mov	 edx, DWORD PTR _ResultCode$[ebp]
  000ea	52		 push	 edx
  000eb	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000f0	6b c8 03	 imul	 ecx, eax, 3
  000f3	8d 4c 0d 90	 lea	 ecx, DWORD PTR _vars$[ebp+ecx]
  000f7	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 112  :                 vars[2].SetLONG( ResultCodeExtended );

  000fc	8b 55 0c	 mov	 edx, DWORD PTR _ResultCodeExtended$[ebp]
  000ff	52		 push	 edx
  00100	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00105	d1 e0		 shl	 eax, 1
  00107	8d 4c 05 90	 lea	 ecx, DWORD PTR _vars$[ebp+eax]
  0010b	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 113  :                 vars[1].SetLONG( ErrorLocus );

  00110	8b 4d 10	 mov	 ecx, DWORD PTR _ErrorLocus$[ebp]
  00113	51		 push	 ecx
  00114	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00119	c1 e2 00	 shl	 edx, 0
  0011c	8d 4c 15 90	 lea	 ecx, DWORD PTR _vars$[ebp+edx]
  00120	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 114  :                 vars[0].SetLONG_Ptr( pErrorResponse, hr );

  00125	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _hr$1[ebp]
  0012b	50		 push	 eax
  0012c	8b 4d 14	 mov	 ecx, DWORD PTR _pErrorResponse$[ebp]
  0012f	51		 push	 ecx
  00130	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00135	6b c2 00	 imul	 eax, edx, 0
  00138	8d 4c 05 90	 lea	 ecx, DWORD PTR _vars$[ebp+eax]
  0013c	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 115  :                 FireTheEvent( FEUNKNOWN vars, 4, _DIDError, L"ErrorEvent", 3 );

  00141	6a 03		 push	 3
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@LODEBHDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt@
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	83 c1 14	 add	 ecx, 20			; 00000014H
  0014e	51		 push	 ecx
  0014f	6a 04		 push	 4
  00151	8d 55 90	 lea	 edx, DWORD PTR _vars$[ebp]
  00154	52		 push	 edx
  00155	8d 4d 80	 lea	 ecx, DWORD PTR _sp$2[ebp]
  00158	e8 00 00 00 00	 call	 ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
  0015d	50		 push	 eax
  0015e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
$LN5@Fire_Error:

; 116  :             }
; 117  :         }

  00166	8d 4d 80	 lea	 ecx, DWORD PTR _sp$2[ebp]
  00169	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
  0016e	e9 0d ff ff ff	 jmp	 $LN2@Fire_Error
$LN3@Fire_Error:

; 118  :     }

  00173	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00178	6a 04		 push	 4
  0017a	6a 18		 push	 24			; 00000018H
  0017c	8d 45 90	 lea	 eax, DWORD PTR _vars$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00185	52		 push	 edx
  00186	8b cd		 mov	 ecx, ebp
  00188	50		 push	 eax
  00189	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Fire_Error
  0018f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00194	58		 pop	 eax
  00195	5a		 pop	 edx
  00196	5f		 pop	 edi
  00197	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019a	33 cd		 xor	 ecx, ebp
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  001a7	3b ec		 cmp	 ebp, esp
  001a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 10 00	 ret	 16			; 00000010H
$LN13@Fire_Error:
  001b4	03 00 00 00	 DD	 3
  001b8	00 00 00 00	 DD	 $LN12@Fire_Error
$LN12@Fire_Error:
  001bc	90 ff ff ff	 DD	 -112			; ffffff90H
  001c0	60 00 00 00	 DD	 96			; 00000060H
  001c4	00 00 00 00	 DD	 $LN9@Fire_Error
  001c8	80 ff ff ff	 DD	 -128			; ffffff80H
  001cc	04 00 00 00	 DD	 4
  001d0	00 00 00 00	 DD	 $LN10@Fire_Error
  001d4	74 ff ff ff	 DD	 -140			; ffffff74H
  001d8	04 00 00 00	 DD	 4
  001dc	00 00 00 00	 DD	 $LN11@Fire_Error
$LN11@Fire_Error:
  001e0	68		 DB	 104			; 00000068H
  001e1	72		 DB	 114			; 00000072H
  001e2	00		 DB	 0
$LN10@Fire_Error:
  001e3	73		 DB	 115			; 00000073H
  001e4	70		 DB	 112			; 00000070H
  001e5	00		 DB	 0
$LN9@Fire_Error:
  001e6	76		 DB	 118			; 00000076H
  001e7	61		 DB	 97			; 00000061H
  001e8	72		 DB	 114			; 00000072H
  001e9	73		 DB	 115			; 00000073H
  001ea	00		 DB	 0
?Fire_ErrorEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJJJPAJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_ErrorEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJPAJPAPA_W@Z
_TEXT	SEGMENT
tv68 = -124						; size = 4
_hr$1 = -116						; size = 4
_sp$2 = -104						; size = 4
_nConnections$ = -96					; size = 4
_vars$ = -88						; size = 72
_pT$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_EventNumber$ = 8					; size = 4
_pData$ = 12						; size = 4
_pString$ = 16						; size = 4
?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJPAJPAPA_W@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  0000b	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 73   :         T* pT = static_cast<T*>(this);

  00025	83 7d f8 00	 cmp	 DWORD PTR _this$[ebp], 0
  00029	74 0d		 je	 SHORT $LN7@Fire_Direc
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  00033	89 45 84	 mov	 DWORD PTR tv68[ebp], eax
  00036	eb 07		 jmp	 SHORT $LN8@Fire_Direc
$LN7@Fire_Direc:
  00038	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN8@Fire_Direc:
  0003f	8b 4d 84	 mov	 ecx, DWORD PTR tv68[ebp]
  00042	89 4d f4	 mov	 DWORD PTR _pT$[ebp], ecx

; 74   :         OposVariant vars[3];

  00045	68 00 00 00 00	 push	 OFFSET ??0OposVariant@@QAE@XZ ; OposVariant::OposVariant
  0004a	6a 03		 push	 3
  0004c	6a 18		 push	 24			; 00000018H
  0004e	8d 55 a8	 lea	 edx, DWORD PTR _vars$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 75   :         int nConnections = m_vec.GetSize();

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 04	 add	 ecx, 4
  0005d	e8 00 00 00 00	 call	 ?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ ; ATL::CComDynamicUnkArray::GetSize
  00062	89 45 a0	 mov	 DWORD PTR _nConnections$[ebp], eax

; 76   : 
; 77   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  0006f	eb 0f		 jmp	 SHORT $LN4@Fire_Direc
$LN2@Fire_Direc:
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00077	83 c2 01	 add	 edx, 1
  0007a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	89 50 20	 mov	 DWORD PTR [eax+32], edx
$LN4@Fire_Direc:
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00086	3b 55 a0	 cmp	 edx, DWORD PTR _nConnections$[ebp]
  00089	0f 8d c1 00 00
	00		 jge	 $LN3@Fire_Direc

; 78   :         {
; 79   :             pT->Lock();

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR _pT$[ebp]
  00092	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00098	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 80   :             CComPtr<IUnknown> sp = m_vec.GetAt(_nCOConnectionIndex);

  0009d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000a3	51		 push	 ecx
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	83 c1 04	 add	 ecx, 4
  000aa	e8 00 00 00 00	 call	 ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
  000af	50		 push	 eax
  000b0	8d 4d 98	 lea	 ecx, DWORD PTR _sp$2[ebp]
  000b3	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>

; 81   :             pT->Unlock();

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR _pT$[ebp]
  000bb	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000c1	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 82   :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000c6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 45 98	 mov	 eax, DWORD PTR _sp$2[ebp]
  000cc	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 83   :             if (_pCPDispatch != NULL)

  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  000d6	74 6b		 je	 SHORT $LN5@Fire_Direc

; 84   :             {
; 85   :                 HRESULT hr;
; 86   :                 vars[2].SetLONG( EventNumber );

  000d8	8b 55 08	 mov	 edx, DWORD PTR _EventNumber$[ebp]
  000db	52		 push	 edx
  000dc	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000e1	d1 e0		 shl	 eax, 1
  000e3	8d 4c 05 a8	 lea	 ecx, DWORD PTR _vars$[ebp+eax]
  000e7	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 87   :                 vars[1].SetLONG_Ptr( pData, hr );

  000ec	8d 4d 8c	 lea	 ecx, DWORD PTR _hr$1[ebp]
  000ef	51		 push	 ecx
  000f0	8b 55 0c	 mov	 edx, DWORD PTR _pData$[ebp]
  000f3	52		 push	 edx
  000f4	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000f9	c1 e0 00	 shl	 eax, 0
  000fc	8d 4c 05 a8	 lea	 ecx, DWORD PTR _vars$[ebp+eax]
  00100	e8 00 00 00 00	 call	 ?SetLONG_Ptr@OposVariant@@QAEXPAJAAJ@Z ; OposVariant::SetLONG_Ptr

; 88   :                 vars[0].SetBSTR_InOutPtr( pString, hr );

  00105	8d 4d 8c	 lea	 ecx, DWORD PTR _hr$1[ebp]
  00108	51		 push	 ecx
  00109	8b 55 10	 mov	 edx, DWORD PTR _pString$[ebp]
  0010c	52		 push	 edx
  0010d	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00112	6b c8 00	 imul	 ecx, eax, 0
  00115	8d 4c 0d a8	 lea	 ecx, DWORD PTR _vars$[ebp+ecx]
  00119	e8 00 00 00 00	 call	 ?SetBSTR_InOutPtr@OposVariant@@QAE_NPAPA_WAAJ@Z ; OposVariant::SetBSTR_InOutPtr

; 89   :                 FireTheEvent( FEUNKNOWN vars, 3, _DIDDirectIO, L"DirectIOEvent", 2 );

  0011e	6a 02		 push	 2
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@CBGEBBBJ@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAO?$AAE?$AAv?$AAe?$AAn?$AAt@
  00125	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00128	83 c2 10	 add	 edx, 16			; 00000010H
  0012b	52		 push	 edx
  0012c	6a 03		 push	 3
  0012e	8d 45 a8	 lea	 eax, DWORD PTR _vars$[ebp]
  00131	50		 push	 eax
  00132	8d 4d 98	 lea	 ecx, DWORD PTR _sp$2[ebp]
  00135	e8 00 00 00 00	 call	 ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
  0013a	50		 push	 eax
  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
$LN5@Fire_Direc:

; 90   :             }
; 91   :         }

  00143	8d 4d 98	 lea	 ecx, DWORD PTR _sp$2[ebp]
  00146	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
  0014b	e9 21 ff ff ff	 jmp	 $LN2@Fire_Direc
$LN3@Fire_Direc:

; 92   :     }

  00150	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  00155	6a 03		 push	 3
  00157	6a 18		 push	 24			; 00000018H
  00159	8d 4d a8	 lea	 ecx, DWORD PTR _vars$[ebp]
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  00162	52		 push	 edx
  00163	8b cd		 mov	 ecx, ebp
  00165	50		 push	 eax
  00166	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Fire_Direc
  0016c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00171	58		 pop	 eax
  00172	5a		 pop	 edx
  00173	5f		 pop	 edi
  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	83 c4 7c	 add	 esp, 124		; 0000007cH
  00181	3b ec		 cmp	 ebp, esp
  00183	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c2 0c 00	 ret	 12			; 0000000cH
  0018e	66 90		 npad	 2
$LN13@Fire_Direc:
  00190	03 00 00 00	 DD	 3
  00194	00 00 00 00	 DD	 $LN12@Fire_Direc
$LN12@Fire_Direc:
  00198	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0019c	48 00 00 00	 DD	 72			; 00000048H
  001a0	00 00 00 00	 DD	 $LN9@Fire_Direc
  001a4	98 ff ff ff	 DD	 -104			; ffffff98H
  001a8	04 00 00 00	 DD	 4
  001ac	00 00 00 00	 DD	 $LN10@Fire_Direc
  001b0	8c ff ff ff	 DD	 -116			; ffffff8cH
  001b4	04 00 00 00	 DD	 4
  001b8	00 00 00 00	 DD	 $LN11@Fire_Direc
$LN11@Fire_Direc:
  001bc	68		 DB	 104			; 00000068H
  001bd	72		 DB	 114			; 00000072H
  001be	00		 DB	 0
$LN10@Fire_Direc:
  001bf	73		 DB	 115			; 00000073H
  001c0	70		 DB	 112			; 00000070H
  001c1	00		 DB	 0
$LN9@Fire_Direc:
  001c2	76		 DB	 118			; 00000076H
  001c3	61		 DB	 97			; 00000061H
  001c4	72		 DB	 114			; 00000072H
  001c5	73		 DB	 115			; 00000073H
  001c6	00		 DB	 0
?Fire_DirectIOEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJPAJPAPA_W@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DirectIOEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\zDeviceMonitor\DeviceMonitorCP.h
;	COMDAT ?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z
_TEXT	SEGMENT
tv68 = -60						; size = 4
_sp$1 = -52						; size = 4
_nConnections$ = -44					; size = 4
_var$ = -36						; size = 24
_pT$ = -8						; size = 4
_this$ = -4						; size = 4
_Status$ = 8						; size = 4
?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z PROC ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   :         T* pT = static_cast<T*>(this);

  0001b	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001f	74 0d		 je	 SHORT $LN7@Fire_DataE
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  00029	89 45 c4	 mov	 DWORD PTR tv68[ebp], eax
  0002c	eb 07		 jmp	 SHORT $LN8@Fire_DataE
$LN7@Fire_DataE:
  0002e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN8@Fire_DataE:
  00035	8b 4d c4	 mov	 ecx, DWORD PTR tv68[ebp]
  00038	89 4d f8	 mov	 DWORD PTR _pT$[ebp], ecx

; 52   :         OposVariant var;

  0003b	8d 4d dc	 lea	 ecx, DWORD PTR _var$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant

; 53   :         int nConnections = m_vec.GetSize();

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 04	 add	 ecx, 4
  00049	e8 00 00 00 00	 call	 ?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ ; ATL::CComDynamicUnkArray::GetSize
  0004e	89 45 d4	 mov	 DWORD PTR _nConnections$[ebp], eax

; 54   : 
; 55   :         for (_nCOConnectionIndex = 0; _nCOConnectionIndex < nConnections; _nCOConnectionIndex++)

  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  0005b	eb 0f		 jmp	 SHORT $LN4@Fire_DataE
$LN2@Fire_DataE:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00063	83 c1 01	 add	 ecx, 1
  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN4@Fire_DataE:
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00072	3b 4d d4	 cmp	 ecx, DWORD PTR _nConnections$[ebp]
  00075	0f 8d 87 00 00
	00		 jge	 $LN3@Fire_DataE

; 56   :         {
; 57   :             pT->Lock();

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  0007e	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00084	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 58   :             CComPtr<IUnknown> sp = m_vec.GetAt(_nCOConnectionIndex);

  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0008f	50		 push	 eax
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 04	 add	 ecx, 4
  00096	e8 00 00 00 00	 call	 ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
  0009b	50		 push	 eax
  0009c	8d 4d cc	 lea	 ecx, DWORD PTR _sp$1[ebp]
  0009f	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>

; 59   :             pT->Unlock();

  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  000a7	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000ad	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 60   :             _pCPDispatch = reinterpret_cast<IDispatch*>(sp.p);

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	8b 55 cc	 mov	 edx, DWORD PTR _sp$1[ebp]
  000b8	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 61   :             if (_pCPDispatch != NULL)

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000be	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  000c2	74 31		 je	 SHORT $LN5@Fire_DataE

; 62   :             {
; 63   :                 var.SetLONG( Status );

  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _Status$[ebp]
  000c7	51		 push	 ecx
  000c8	8d 4d dc	 lea	 ecx, DWORD PTR _var$[ebp]
  000cb	e8 00 00 00 00	 call	 ?SetLONG@OposVariant@@QAEXJ@Z ; OposVariant::SetLONG

; 64   :                 FireTheEvent( FEUNKNOWN &var, 1, _DIDData, L"DataEvent", 1 );

  000d0	6a 01		 push	 1
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@IEBMACEM@?$AAD?$AAa?$AAt?$AAa?$AAE?$AAv?$AAe?$AAn?$AAt@
  000d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000da	83 c2 0c	 add	 edx, 12			; 0000000cH
  000dd	52		 push	 edx
  000de	6a 01		 push	 1
  000e0	8d 45 dc	 lea	 eax, DWORD PTR _var$[ebp]
  000e3	50		 push	 eax
  000e4	8d 4d cc	 lea	 ecx, DWORD PTR _sp$1[ebp]
  000e7	e8 00 00 00 00	 call	 ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
  000ec	50		 push	 eax
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	e8 00 00 00 00	 call	 ?FireTheEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@IAEXPAUIUnknown@@PAVOposVariant@@IAAJPB_WJ@Z ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::FireTheEvent
$LN5@Fire_DataE:

; 65   :             }
; 66   :         }

  000f5	8d 4d cc	 lea	 ecx, DWORD PTR _sp$1[ebp]
  000f8	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
  000fd	e9 5b ff ff ff	 jmp	 $LN2@Fire_DataE
$LN3@Fire_DataE:

; 67   :     }

  00102	8d 4d dc	 lea	 ecx, DWORD PTR _var$[ebp]
  00105	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Fire_DataE
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	83 c4 3c	 add	 esp, 60			; 0000003cH
  0011f	3b ec		 cmp	 ebp, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN12@Fire_DataE:
  0012c	02 00 00 00	 DD	 2
  00130	00 00 00 00	 DD	 $LN11@Fire_DataE
$LN11@Fire_DataE:
  00134	dc ff ff ff	 DD	 -36			; ffffffdcH
  00138	18 00 00 00	 DD	 24			; 00000018H
  0013c	00 00 00 00	 DD	 $LN9@Fire_DataE
  00140	cc ff ff ff	 DD	 -52			; ffffffccH
  00144	04 00 00 00	 DD	 4
  00148	00 00 00 00	 DD	 $LN10@Fire_DataE
$LN10@Fire_DataE:
  0014c	73		 DB	 115			; 00000073H
  0014d	70		 DB	 112			; 00000070H
  0014e	00		 DB	 0
$LN9@Fire_DataE:
  0014f	76		 DB	 118			; 00000076H
  00150	61		 DB	 97			; 00000061H
  00151	72		 DB	 114			; 00000072H
  00152	00		 DB	 0
?Fire_DataEvent@?$CProxy_IOPOSEvents@VCOPOSDeviceMonitor@@@@QAEXJ@Z ENDP ; CProxy_IOPOSEvents<COPOSDeviceMonitor>::Fire_DataEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_ICPLocator@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@B@ATL@@QAE@XZ
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 04	 add	 ecx, 4
  0001c	e8 00 00 00 00	 call	 ??0CComDynamicUnkArray@ATL@@QAE@XZ ; ATL::CComDynamicUnkArray::CComDynamicUnkArray
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z
_TEXT	SEGMENT
tv210 = -56						; size = 4
tv150 = -52						; size = 4
tv81 = -48						; size = 4
tv75 = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
_hRes$ = -24						; size = 4
_pp$5 = -20						; size = 4
_pend$ = -16						; size = 4
_pcd$ = -12						; size = 4
_pT$ = -8						; size = 4
_pEnum$ = -4						; size = 4
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::EnumConnections, COMDAT

; 6412 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 6413 : 	if (ppEnum == NULL)

  00017	83 7d 0c 00	 cmp	 DWORD PTR _ppEnum$[ebp], 0
  0001b	75 0a		 jne	 SHORT $LN5@EnumConnec

; 6414 : 		return E_POINTER;

  0001d	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00022	e9 0a 02 00 00	 jmp	 $LN1@EnumConnec
$LN5@EnumConnec:

; 6415 : 	*ppEnum = NULL;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _ppEnum$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 6416 : 	CComObject<CComEnumConnections>* pEnum = NULL;

  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pEnum$[ebp], 0

; 6417 : 	pEnum = _ATL_NEW CComObject<CComEnumConnections>;

  00037	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0003c	6a 1c		 push	 28			; 0000001cH
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new
  00043	83 c4 08	 add	 esp, 8
  00046	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
  00049	83 7d e4 00	 cmp	 DWORD PTR $T4[ebp], 0
  0004d	74 0f		 je	 SHORT $LN11@EnumConnec
  0004f	6a 00		 push	 0
  00051	8b 4d e4	 mov	 ecx, DWORD PTR $T4[ebp]
  00054	e8 00 00 00 00	 call	 ??0?$CComObject@V?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z ; ATL::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >::CComObject<ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel> >
  00059	89 45 d4	 mov	 DWORD PTR tv75[ebp], eax
  0005c	eb 07		 jmp	 SHORT $LN12@EnumConnec
$LN11@EnumConnec:
  0005e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN12@EnumConnec:
  00065	8b 4d d4	 mov	 ecx, DWORD PTR tv75[ebp]
  00068	89 4d fc	 mov	 DWORD PTR _pEnum$[ebp], ecx

; 6418 : 	if (pEnum == NULL)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _pEnum$[ebp], 0
  0006f	75 0a		 jne	 SHORT $LN6@EnumConnec

; 6419 : 		return E_OUTOFMEMORY;

  00071	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00076	e9 b6 01 00 00	 jmp	 $LN1@EnumConnec
$LN6@EnumConnec:

; 6420 : 	T* pT = static_cast<T*>(this);

  0007b	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0007f	74 0e		 je	 SHORT $LN13@EnumConnec
  00081	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00084	81 ea b4 00 00
	00		 sub	 edx, 180		; 000000b4H
  0008a	89 55 d0	 mov	 DWORD PTR tv81[ebp], edx
  0008d	eb 07		 jmp	 SHORT $LN14@EnumConnec
$LN13@EnumConnec:
  0008f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN14@EnumConnec:
  00096	8b 45 d0	 mov	 eax, DWORD PTR tv81[ebp]
  00099	89 45 f8	 mov	 DWORD PTR _pT$[ebp], eax

; 6421 : 	pT->Lock();

  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  0009f	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000a5	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 6422 : 	CONNECTDATA* pcd = NULL;

  000aa	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pcd$[ebp], 0

; 6423 : 	pcd = _ATL_NEW CONNECTDATA[m_vec.end()-m_vec.begin()];

  000b1	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	83 c1 04	 add	 ecx, 4
  000bc	e8 00 00 00 00	 call	 ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
  000c1	8b f0		 mov	 esi, eax
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	83 c1 04	 add	 ecx, 4
  000c9	e8 00 00 00 00	 call	 ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
  000ce	2b f0		 sub	 esi, eax
  000d0	c1 fe 02	 sar	 esi, 2
  000d3	33 c9		 xor	 ecx, ecx
  000d5	8b c6		 mov	 eax, esi
  000d7	ba 08 00 00 00	 mov	 edx, 8
  000dc	f7 e2		 mul	 edx
  000de	0f 90 c1	 seto	 cl
  000e1	f7 d9		 neg	 ecx
  000e3	0b c8		 or	 ecx, eax
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  000eb	83 c4 08	 add	 esp, 8
  000ee	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
  000f1	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  000f4	89 45 f4	 mov	 DWORD PTR _pcd$[ebp], eax

; 6424 : 	if (pcd == NULL)

  000f7	83 7d f4 00	 cmp	 DWORD PTR _pcd$[ebp], 0
  000fb	75 48		 jne	 SHORT $LN7@EnumConnec

; 6425 : 	{
; 6426 : 		delete pEnum;

  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _pEnum$[ebp]
  00100	89 4d dc	 mov	 DWORD PTR $T2[ebp], ecx
  00103	83 7d dc 00	 cmp	 DWORD PTR $T2[ebp], 0
  00107	74 1d		 je	 SHORT $LN15@EnumConnec
  00109	8b f4		 mov	 esi, esp
  0010b	6a 01		 push	 1
  0010d	8b 55 dc	 mov	 edx, DWORD PTR $T2[ebp]
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  00115	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00118	ff d2		 call	 edx
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	89 45 cc	 mov	 DWORD PTR tv150[ebp], eax
  00124	eb 07		 jmp	 SHORT $LN16@EnumConnec
$LN15@EnumConnec:
  00126	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN16@EnumConnec:

; 6427 : 		pT->Unlock();

  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  00130	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00136	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 6428 : 		return E_OUTOFMEMORY;

  0013b	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00140	e9 ec 00 00 00	 jmp	 $LN1@EnumConnec
$LN7@EnumConnec:

; 6429 : 	}
; 6430 : 	CONNECTDATA* pend = pcd;

  00145	8b 45 f4	 mov	 eax, DWORD PTR _pcd$[ebp]
  00148	89 45 f0	 mov	 DWORD PTR _pend$[ebp], eax

; 6431 : 	// Copy the valid CONNECTDATA's
; 6432 : 	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)

  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	83 c1 04	 add	 ecx, 4
  00151	e8 00 00 00 00	 call	 ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
  00156	89 45 ec	 mov	 DWORD PTR _pp$5[ebp], eax
  00159	eb 09		 jmp	 SHORT $LN4@EnumConnec
$LN2@EnumConnec:
  0015b	8b 4d ec	 mov	 ecx, DWORD PTR _pp$5[ebp]
  0015e	83 c1 04	 add	 ecx, 4
  00161	89 4d ec	 mov	 DWORD PTR _pp$5[ebp], ecx
$LN4@EnumConnec:
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	83 c1 04	 add	 ecx, 4
  0016a	e8 00 00 00 00	 call	 ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
  0016f	39 45 ec	 cmp	 DWORD PTR _pp$5[ebp], eax
  00172	73 4e		 jae	 SHORT $LN3@EnumConnec

; 6433 : 	{
; 6434 : 		if (*pp != NULL)

  00174	8b 55 ec	 mov	 edx, DWORD PTR _pp$5[ebp]
  00177	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0017a	74 44		 je	 SHORT $LN8@EnumConnec

; 6435 : 		{
; 6436 : 			(*pp)->AddRef();

  0017c	8b 45 ec	 mov	 eax, DWORD PTR _pp$5[ebp]
  0017f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00181	8b 55 ec	 mov	 edx, DWORD PTR _pp$5[ebp]
  00184	8b 02		 mov	 eax, DWORD PTR [edx]
  00186	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00188	8b f4		 mov	 esi, esp
  0018a	50		 push	 eax
  0018b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0018e	ff d2		 call	 edx
  00190	3b f4		 cmp	 esi, esp
  00192	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 6437 : 			pend->pUnk = *pp;

  00197	8b 45 f0	 mov	 eax, DWORD PTR _pend$[ebp]
  0019a	8b 4d ec	 mov	 ecx, DWORD PTR _pp$5[ebp]
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	89 10		 mov	 DWORD PTR [eax], edx

; 6438 : 			pend->dwCookie = m_vec.GetCookie(pp);

  001a1	8b 45 ec	 mov	 eax, DWORD PTR _pp$5[ebp]
  001a4	50		 push	 eax
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	83 c1 04	 add	 ecx, 4
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 ?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::GetCookie
  001b1	8b 55 f0	 mov	 edx, DWORD PTR _pend$[ebp]
  001b4	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 6439 : 			pend++;

  001b7	8b 45 f0	 mov	 eax, DWORD PTR _pend$[ebp]
  001ba	83 c0 08	 add	 eax, 8
  001bd	89 45 f0	 mov	 DWORD PTR _pend$[ebp], eax
$LN8@EnumConnec:

; 6440 : 		}
; 6441 : 	}

  001c0	eb 99		 jmp	 SHORT $LN2@EnumConnec
$LN3@EnumConnec:

; 6442 : 	// don't copy the data, but transfer ownership to it
; 6443 : 	pEnum->Init(pcd, pend, NULL, AtlFlagTakeOwnership);

  001c2	6a 02		 push	 2
  001c4	6a 00		 push	 0
  001c6	8b 4d f0	 mov	 ecx, DWORD PTR _pend$[ebp]
  001c9	51		 push	 ecx
  001ca	8b 55 f4	 mov	 edx, DWORD PTR _pcd$[ebp]
  001cd	52		 push	 edx
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR _pEnum$[ebp]
  001d1	e8 00 00 00 00	 call	 ?Init@?$CComEnumImpl@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@@ATL@@QAEJPAUtagCONNECTDATA@@0PAUIUnknown@@W4CComEnumFlags@2@@Z ; ATL::CComEnumImpl<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA> >::Init

; 6444 : 	pT->Unlock();

  001d6	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  001d9	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  001df	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 6445 : 	HRESULT hRes = pEnum->_InternalQueryInterface(__uuidof(IEnumConnections), (void**)ppEnum);

  001e4	8b 45 0c	 mov	 eax, DWORD PTR _ppEnum$[ebp]
  001e7	50		 push	 eax
  001e8	68 00 00 00 00	 push	 OFFSET __GUID_b196b287_bab4_101a_b69c_00aa00341d07
  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _pEnum$[ebp]
  001f0	e8 00 00 00 00	 call	 ?_InternalQueryInterface@?$CComEnum@UIEnumConnections@@$1?_GUID_b196b287_bab4_101a_b69c_00aa00341d07@@3U__s_GUID@@BUtagCONNECTDATA@@V?$_Copy@UtagCONNECTDATA@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z ; ATL::CComEnum<IEnumConnections,&_GUID_b196b287_bab4_101a_b69c_00aa00341d07,tagCONNECTDATA,ATL::_Copy<tagCONNECTDATA>,ATL::CComSingleThreadModel>::_InternalQueryInterface
  001f5	89 45 e8	 mov	 DWORD PTR _hRes$[ebp], eax

; 6446 : 	if (FAILED(hRes))

  001f8	83 7d e8 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  001fc	7d 30		 jge	 SHORT $LN9@EnumConnec

; 6447 : 		delete pEnum;

  001fe	8b 4d fc	 mov	 ecx, DWORD PTR _pEnum$[ebp]
  00201	89 4d d8	 mov	 DWORD PTR $T1[ebp], ecx
  00204	83 7d d8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00208	74 1d		 je	 SHORT $LN17@EnumConnec
  0020a	8b f4		 mov	 esi, esp
  0020c	6a 01		 push	 1
  0020e	8b 55 d8	 mov	 edx, DWORD PTR $T1[ebp]
  00211	8b 02		 mov	 eax, DWORD PTR [edx]
  00213	8b 4d d8	 mov	 ecx, DWORD PTR $T1[ebp]
  00216	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00219	ff d2		 call	 edx
  0021b	3b f4		 cmp	 esi, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	89 45 c8	 mov	 DWORD PTR tv210[ebp], eax
  00225	eb 07		 jmp	 SHORT $LN9@EnumConnec
$LN17@EnumConnec:
  00227	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv210[ebp], 0
$LN9@EnumConnec:

; 6448 : 	return hRes;

  0022e	8b 45 e8	 mov	 eax, DWORD PTR _hRes$[ebp]
$LN1@EnumConnec:

; 6449 : }

  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	83 c4 38	 add	 esp, 56			; 00000038H
  00236	3b ec		 cmp	 ebp, esp
  00238	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c2 08 00	 ret	 8
?EnumConnections@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIEnumConnections@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::EnumConnections
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z
_TEXT	SEGMENT
tv84 = -20						; size = 4
tv68 = -16						; size = 4
_hRes$ = -12						; size = 4
_p$ = -8						; size = 4
_pT$ = -4						; size = 4
_this$ = 8						; size = 4
_dwCookie$ = 12						; size = 4
?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise, COMDAT

; 6397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 6398 : 	T* pT = static_cast<T*>(this);

  0001b	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001f	74 0d		 je	 SHORT $LN4@Unadvise
  00021	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00024	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  00029	89 45 f0	 mov	 DWORD PTR tv68[ebp], eax
  0002c	eb 07		 jmp	 SHORT $LN5@Unadvise
$LN4@Unadvise:
  0002e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN5@Unadvise:
  00035	8b 4d f0	 mov	 ecx, DWORD PTR tv68[ebp]
  00038	89 4d fc	 mov	 DWORD PTR _pT$[ebp], ecx

; 6399 : 	pT->Lock();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _pT$[ebp]
  0003e	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00044	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 6400 : 	IUnknown* p = m_vec.GetUnknown(dwCookie);

  00049	8b 55 0c	 mov	 edx, DWORD PTR _dwCookie$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 c0 04	 add	 eax, 4
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z ; ATL::CComDynamicUnkArray::GetUnknown
  00059	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 6401 : 	HRESULT hRes = m_vec.Remove(dwCookie) ? S_OK : CONNECT_E_NOCONNECTION;

  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCookie$[ebp]
  0005f	51		 push	 ecx
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	83 c1 04	 add	 ecx, 4
  00066	e8 00 00 00 00	 call	 ?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z ; ATL::CComDynamicUnkArray::Remove
  0006b	85 c0		 test	 eax, eax
  0006d	74 09		 je	 SHORT $LN6@Unadvise
  0006f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
  00076	eb 07		 jmp	 SHORT $LN7@Unadvise
$LN6@Unadvise:
  00078	c7 45 ec 00 02
	04 80		 mov	 DWORD PTR tv84[ebp], -2147220992 ; 80040200H
$LN7@Unadvise:
  0007f	8b 55 ec	 mov	 edx, DWORD PTR tv84[ebp]
  00082	89 55 f4	 mov	 DWORD PTR _hRes$[ebp], edx

; 6402 : 	pT->Unlock();

  00085	8b 4d fc	 mov	 ecx, DWORD PTR _pT$[ebp]
  00088	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  0008e	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 6403 : 	if (hRes == S_OK && p != NULL)

  00093	83 7d f4 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  00097	75 1d		 jne	 SHORT $LN2@Unadvise
  00099	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0009d	74 17		 je	 SHORT $LN2@Unadvise

; 6404 : 		p->Release();

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	8b f4		 mov	 esi, esp
  000a6	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  000a9	52		 push	 edx
  000aa	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ad	ff d0		 call	 eax
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Unadvise:

; 6405 : 	return hRes;

  000b6	8b 45 f4	 mov	 eax, DWORD PTR _hRes$[ebp]

; 6406 : }

  000b9	5e		 pop	 esi
  000ba	83 c4 14	 add	 esp, 20			; 00000014H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
?Unadvise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJK@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Unadvise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z
_TEXT	SEGMENT
tv94 = -56						; size = 4
tv68 = -52						; size = 4
_iid$ = -44						; size = 16
_hRes$ = -24						; size = 4
_p$ = -16						; size = 4
_pT$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pUnkSink$ = 12						; size = 4
_pdwCookie$ = 16					; size = 4
?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise, COMDAT

; 6368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6369 : 	T* pT = static_cast<T*>(this);

  00021	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00025	74 0d		 je	 SHORT $LN11@Advise
  00027	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  0002f	89 45 cc	 mov	 DWORD PTR tv68[ebp], eax
  00032	eb 07		 jmp	 SHORT $LN12@Advise
$LN11@Advise:
  00034	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN12@Advise:
  0003b	8b 4d cc	 mov	 ecx, DWORD PTR tv68[ebp]
  0003e	89 4d f8	 mov	 DWORD PTR _pT$[ebp], ecx

; 6370 : 	IUnknown* p = NULL;

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0

; 6371 : 	HRESULT hRes = S_OK;

  00048	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hRes$[ebp], 0

; 6372 : 	if (pdwCookie != NULL)

  0004f	83 7d 10 00	 cmp	 DWORD PTR _pdwCookie$[ebp], 0
  00053	74 09		 je	 SHORT $LN2@Advise

; 6373 : 		*pdwCookie = 0;

  00055	8b 55 10	 mov	 edx, DWORD PTR _pdwCookie$[ebp]
  00058	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN2@Advise:

; 6374 : 	if (pUnkSink == NULL || pdwCookie == NULL)

  0005e	83 7d 0c 00	 cmp	 DWORD PTR _pUnkSink$[ebp], 0
  00062	74 06		 je	 SHORT $LN4@Advise
  00064	83 7d 10 00	 cmp	 DWORD PTR _pdwCookie$[ebp], 0
  00068	75 0a		 jne	 SHORT $LN3@Advise
$LN4@Advise:

; 6375 : 		return E_POINTER;

  0006a	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  0006f	e9 d1 00 00 00	 jmp	 $LN1@Advise
$LN3@Advise:

; 6376 : 	IID iid;
; 6377 : 	GetConnectionInterface(&iid);

  00074	8b f4		 mov	 esi, esp
  00076	8d 45 d4	 lea	 eax, DWORD PTR _iid$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00082	50		 push	 eax
  00083	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00086	ff d1		 call	 ecx
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 6378 : 	hRes = pUnkSink->QueryInterface(iid, (void**)&p);

  0008f	8b f4		 mov	 esi, esp
  00091	8d 55 f0	 lea	 edx, DWORD PTR _p$[ebp]
  00094	52		 push	 edx
  00095	8d 45 d4	 lea	 eax, DWORD PTR _iid$[ebp]
  00098	50		 push	 eax
  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _pUnkSink$[ebp]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	8b 45 0c	 mov	 eax, DWORD PTR _pUnkSink$[ebp]
  000a1	50		 push	 eax
  000a2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000a4	ff d1		 call	 ecx
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	89 45 e8	 mov	 DWORD PTR _hRes$[ebp], eax

; 6379 : 	if (SUCCEEDED(hRes))

  000b0	83 7d e8 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  000b4	7c 6d		 jl	 SHORT $LN5@Advise

; 6380 : 	{
; 6381 : 		pT->Lock();

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  000b9	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000bf	e8 00 00 00 00	 call	 ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock

; 6382 : 		*pdwCookie = m_vec.Add(p);

  000c4	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  000c7	52		 push	 edx
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	83 c1 04	 add	 ecx, 4
  000ce	e8 00 00 00 00	 call	 ?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z ; ATL::CComDynamicUnkArray::Add
  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _pdwCookie$[ebp]
  000d6	89 01		 mov	 DWORD PTR [ecx], eax

; 6383 : 		hRes = (*pdwCookie != NULL) ? S_OK : CONNECT_E_ADVISELIMIT;

  000d8	8b 55 10	 mov	 edx, DWORD PTR _pdwCookie$[ebp]
  000db	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000de	74 09		 je	 SHORT $LN13@Advise
  000e0	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000e7	eb 07		 jmp	 SHORT $LN14@Advise
$LN13@Advise:
  000e9	c7 45 c8 01 02
	04 80		 mov	 DWORD PTR tv94[ebp], -2147220991 ; 80040201H
$LN14@Advise:
  000f0	8b 45 c8	 mov	 eax, DWORD PTR tv94[ebp]
  000f3	89 45 e8	 mov	 DWORD PTR _hRes$[ebp], eax

; 6384 : 		pT->Unlock();

  000f6	8b 4d f8	 mov	 ecx, DWORD PTR _pT$[ebp]
  000f9	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  000ff	e8 00 00 00 00	 call	 ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock

; 6385 : 		if (hRes != S_OK)

  00104	83 7d e8 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  00108	74 17		 je	 SHORT $LN7@Advise

; 6386 : 			p->Release();

  0010a	8b 4d f0	 mov	 ecx, DWORD PTR _p$[ebp]
  0010d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010f	8b f4		 mov	 esi, esp
  00111	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00114	50		 push	 eax
  00115	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00118	ff d1		 call	 ecx
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@Advise:

; 6387 : 	}

  00121	eb 10		 jmp	 SHORT $LN6@Advise
$LN5@Advise:

; 6388 : 	else if (hRes == E_NOINTERFACE)

  00123	81 7d e8 02 40
	00 80		 cmp	 DWORD PTR _hRes$[ebp], -2147467262 ; 80004002H
  0012a	75 07		 jne	 SHORT $LN6@Advise

; 6389 : 		hRes = CONNECT_E_CANNOTCONNECT;

  0012c	c7 45 e8 02 02
	04 80		 mov	 DWORD PTR _hRes$[ebp], -2147220990 ; 80040202H
$LN6@Advise:

; 6390 : 	if (FAILED(hRes))

  00133	83 7d e8 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  00137	7d 09		 jge	 SHORT $LN9@Advise

; 6391 : 		*pdwCookie = 0;

  00139	8b 55 10	 mov	 edx, DWORD PTR _pdwCookie$[ebp]
  0013c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN9@Advise:

; 6392 : 	return hRes;

  00142	8b 45 e8	 mov	 eax, DWORD PTR _hRes$[ebp]
$LN1@Advise:

; 6393 : }

  00145	52		 push	 edx
  00146	8b cd		 mov	 ecx, ebp
  00148	50		 push	 eax
  00149	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@Advise
  0014f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00154	58		 pop	 eax
  00155	5a		 pop	 edx
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015b	33 cd		 xor	 ecx, ebp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	83 c4 38	 add	 esp, 56			; 00000038H
  00165	3b ec		 cmp	 ebp, esp
  00167	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 0c 00	 ret	 12			; 0000000cH
  00172	66 90		 npad	 2
$LN18@Advise:
  00174	02 00 00 00	 DD	 2
  00178	00 00 00 00	 DD	 $LN17@Advise
$LN17@Advise:
  0017c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00180	04 00 00 00	 DD	 4
  00184	00 00 00 00	 DD	 $LN15@Advise
  00188	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0018c	10 00 00 00	 DD	 16			; 00000010H
  00190	00 00 00 00	 DD	 $LN16@Advise
$LN16@Advise:
  00194	69		 DB	 105			; 00000069H
  00195	69		 DB	 105			; 00000069H
  00196	64		 DB	 100			; 00000064H
  00197	00		 DB	 0
$LN15@Advise:
  00198	70		 DB	 112			; 00000070H
  00199	00		 DB	 0
?Advise@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAUIUnknown@@PAK@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::Advise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_pT$ = -4						; size = 4
_this$ = 8						; size = 4
_ppCPC$ = 12						; size = 4
?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer, COMDAT

; 6338 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 6339 : 		T* pT = static_cast<T*>(this);

  00015	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00019	74 0d		 je	 SHORT $LN3@GetConnect
  0001b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	2d b4 00 00 00	 sub	 eax, 180		; 000000b4H
  00023	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  00026	eb 07		 jmp	 SHORT $LN4@GetConnect
$LN3@GetConnect:
  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@GetConnect:
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  00032	89 4d fc	 mov	 DWORD PTR _pT$[ebp], ecx

; 6340 : 		// No need to check ppCPC for NULL since QI will do that for us
; 6341 : 		return pT->QueryInterface(__uuidof(IConnectionPointContainer), (void**)ppCPC);

  00035	8b f4		 mov	 esi, esp
  00037	8b 55 0c	 mov	 edx, DWORD PTR _ppCPC$[ebp]
  0003a	52		 push	 edx
  0003b	68 00 00 00 00	 push	 OFFSET __GUID_b196b284_bab4_101a_b69c_00aa00341d07
  00040	8b 45 fc	 mov	 eax, DWORD PTR _pT$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	8b 55 fc	 mov	 edx, DWORD PTR _pT$[ebp]
  00048	52		 push	 edx
  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	ff d0		 call	 eax
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 6342 : 	}

  00054	5e		 pop	 esi
  00055	83 c4 08	 add	 esp, 8
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
?GetConnectionPointContainer@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAPAUIConnectionPointContainer@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionPointContainer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_piid2$ = 12						; size = 4
?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface, COMDAT

; 6330 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6331 : 		if (piid2 == NULL)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _piid2$[ebp], 0
  00007	75 07		 jne	 SHORT $LN2@GetConnect

; 6332 : 			return E_POINTER;

  00009	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  0000e	eb 28		 jmp	 SHORT $LN1@GetConnect
$LN2@GetConnect:

; 6333 : 		*piid2 = *piid;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _piid2$[ebp]
  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _DIID__IOPOSDeviceMonitorEvents
  00019	89 08		 mov	 DWORD PTR [eax], ecx
  0001b	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _DIID__IOPOSDeviceMonitorEvents+4
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00024	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _DIID__IOPOSDeviceMonitorEvents+8
  0002a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0002d	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _DIID__IOPOSDeviceMonitorEvents+12
  00033	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 6334 : 		return S_OK;

  00036	33 c0		 xor	 eax, eax
$LN1@GetConnect:

; 6335 : 	}

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?GetConnectionInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJPAU_GUID@@@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::GetConnectionInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppvObject$ = 16					; size = 4
?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface, COMDAT

; 6308 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6309 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6310 : 		ATLASSERT(ppvObject != NULL);

  00004	83 7d 10 00	 cmp	 DWORD PTR _ppvObject$[ebp], 0
  00008	75 26		 jne	 SHORT $LN7@LocCPQuery
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@IINBGKAE@?$AAp?$AAp?$AAv?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00014	6a 00		 push	 0
  00016	68 a6 18 00 00	 push	 6310			; 000018a6H
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00020	6a 02		 push	 2
  00022	e8 00 00 00 00	 call	 __CrtDbgReportW
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	83 f8 01	 cmp	 eax, 1
  0002d	75 01		 jne	 SHORT $LN7@LocCPQuery
  0002f	cc		 int	 3
$LN7@LocCPQuery:

; 6311 : #endif
; 6312 : 		if (ppvObject == NULL)

  00030	83 7d 10 00	 cmp	 DWORD PTR _ppvObject$[ebp], 0
  00034	75 07		 jne	 SHORT $LN2@LocCPQuery

; 6313 : 			return E_POINTER;

  00036	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  0003b	eb 55		 jmp	 SHORT $LN1@LocCPQuery
$LN2@LocCPQuery:

; 6314 : 		*ppvObject = NULL;

  0003d	8b 4d 10	 mov	 ecx, DWORD PTR _ppvObject$[ebp]
  00040	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 6315 : 
; 6316 : 		if (InlineIsEqualGUID(riid, __uuidof(IConnectionPoint)) || InlineIsEqualUnknown(riid))

  00046	68 00 00 00 00	 push	 OFFSET __GUID_b196b286_bab4_101a_b69c_00aa00341d07
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _riid$[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _InlineIsEqualGUID
  00054	83 c4 08	 add	 esp, 8
  00057	85 c0		 test	 eax, eax
  00059	75 0d		 jne	 SHORT $LN5@LocCPQuery
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _riid$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z ; ATL::InlineIsEqualUnknown
  00064	85 c0		 test	 eax, eax
  00066	74 25		 je	 SHORT $LN3@LocCPQuery
$LN5@LocCPQuery:

; 6317 : 		{
; 6318 : 			*ppvObject = this;

  00068	8b 4d 10	 mov	 ecx, DWORD PTR _ppvObject$[ebp]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	89 11		 mov	 DWORD PTR [ecx], edx

; 6319 : 			this->AddRef();

  00070	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b f4		 mov	 esi, esp
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	52		 push	 edx
  0007b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007e	ff d0		 call	 eax
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 6320 : #if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 6321 : 			_AtlDebugInterfacesModule.AddThunk((IUnknown**)ppvObject, _T("IConnectionPointImpl"), riid);
; 6322 : #endif // _ATL_DEBUG_INTERFACES
; 6323 : 			return S_OK;

  00087	33 c0		 xor	 eax, eax
  00089	eb 07		 jmp	 SHORT $LN1@LocCPQuery

; 6324 : 		}

  0008b	eb 05		 jmp	 SHORT $LN1@LocCPQuery
$LN3@LocCPQuery:

; 6325 : 		else
; 6326 : 			return E_NOINTERFACE;

  0008d	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
$LN1@LocCPQuery:

; 6327 : 	}

  00092	5e		 pop	 esi
  00093	3b ec		 cmp	 ebp, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?_LocCPQueryInterface@?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::_LocCPQueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pp$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx

; 6354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6355 : 	IUnknown** pp = m_vec.begin();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 04	 add	 ecx, 4
  0001e	e8 00 00 00 00	 call	 ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
  00023	89 45 f8	 mov	 DWORD PTR _pp$[ebp], eax
$LN2@IConnectio:

; 6356 : 	while (pp < m_vec.end())

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	e8 00 00 00 00	 call	 ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
  00031	39 45 f8	 cmp	 DWORD PTR _pp$[ebp], eax
  00034	73 2e		 jae	 SHORT $LN1@IConnectio

; 6357 : 	{
; 6358 : 		if (*pp != NULL)

  00036	8b 45 f8	 mov	 eax, DWORD PTR _pp$[ebp]
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	74 1b		 je	 SHORT $LN4@IConnectio

; 6359 : 			(*pp)->Release();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pp$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	8b 45 f8	 mov	 eax, DWORD PTR _pp$[ebp]
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b f4		 mov	 esi, esp
  0004c	51		 push	 ecx
  0004d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00050	ff d0		 call	 eax
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@IConnectio:

; 6360 : 		pp++;

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _pp$[ebp]
  0005c	83 c1 04	 add	 ecx, 4
  0005f	89 4d f8	 mov	 DWORD PTR _pp$[ebp], ecx

; 6361 : 	}

  00062	eb c2		 jmp	 SHORT $LN2@IConnectio
$LN1@IConnectio:

; 6362 : }

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ??1CComDynamicUnkArray@ATL@@QAE@XZ ; ATL::CComDynamicUnkArray::~CComDynamicUnkArray
  0006f	5e		 pop	 esi
  00070	83 c4 08	 add	 esp, 8
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_ICPLocator@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@B@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_ICPLocator@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@B@ATL@@QAE@XZ PROC ; ATL::_ICPLocator<&DIID__IOPOSDeviceMonitorEvents>::_ICPLocator<&DIID__IOPOSDeviceMonitorEvents>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$_ICPLocator@$1?DIID__IOPOSDeviceMonitorEvents@@3U_GUID@@B@ATL@@QAE@XZ ENDP ; ATL::_ICPLocator<&DIID__IOPOSDeviceMonitorEvents>::_ICPLocator<&DIID__IOPOSDeviceMonitorEvents>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>::~IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>::~IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IPropertyNotifySinkCP@VCOPOSDeviceMonitor@@VCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>::IPropertyNotifySinkCP<COPOSDeviceMonitor,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_ICPLocator@$1?IID_IPropertyNotifySink@@3U_GUID@@B@ATL@@QAE@XZ
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 04	 add	 ecx, 4
  0001c	e8 00 00 00 00	 call	 ??0CComDynamicUnkArray@ATL@@QAE@XZ ; ATL::CComDynamicUnkArray::CComDynamicUnkArray
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pp$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>, COMDAT
; _this$ = ecx

; 6354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6355 : 	IUnknown** pp = m_vec.begin();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 04	 add	 ecx, 4
  0001e	e8 00 00 00 00	 call	 ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
  00023	89 45 f8	 mov	 DWORD PTR _pp$[ebp], eax
$LN2@IConnectio:

; 6356 : 	while (pp < m_vec.end())

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	e8 00 00 00 00	 call	 ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
  00031	39 45 f8	 cmp	 DWORD PTR _pp$[ebp], eax
  00034	73 2e		 jae	 SHORT $LN1@IConnectio

; 6357 : 	{
; 6358 : 		if (*pp != NULL)

  00036	8b 45 f8	 mov	 eax, DWORD PTR _pp$[ebp]
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	74 1b		 je	 SHORT $LN4@IConnectio

; 6359 : 			(*pp)->Release();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pp$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	8b 45 f8	 mov	 eax, DWORD PTR _pp$[ebp]
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b f4		 mov	 esi, esp
  0004c	51		 push	 ecx
  0004d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00050	ff d0		 call	 eax
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@IConnectio:

; 6360 : 		pp++;

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _pp$[ebp]
  0005c	83 c1 04	 add	 ecx, 4
  0005f	89 4d f8	 mov	 DWORD PTR _pp$[ebp], ecx

; 6361 : 	}

  00062	eb c2		 jmp	 SHORT $LN2@IConnectio
$LN1@IConnectio:

; 6362 : }

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ??1CComDynamicUnkArray@ATL@@QAE@XZ ; ATL::CComDynamicUnkArray::~CComDynamicUnkArray
  0006f	5e		 pop	 esi
  00070	83 c4 08	 add	 esp, 8
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??1?$IConnectionPointImpl@VCOPOSDeviceMonitor@@$1?IID_IPropertyNotifySink@@3U_GUID@@BVCComDynamicUnkArray@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>::~IConnectionPointImpl<COPOSDeviceMonitor,&IID_IPropertyNotifySink,ATL::CComDynamicUnkArray>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_ICPLocator@$1?IID_IPropertyNotifySink@@3U_GUID@@B@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_ICPLocator@$1?IID_IPropertyNotifySink@@3U_GUID@@B@ATL@@QAE@XZ PROC ; ATL::_ICPLocator<&IID_IPropertyNotifySink>::_ICPLocator<&IID_IPropertyNotifySink>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$_ICPLocator@$1?IID_IPropertyNotifySink@@3U_GUID@@B@ATL@@QAE@XZ ENDP ; ATL::_ICPLocator<&IID_IPropertyNotifySink>::_ICPLocator<&IID_IPropertyNotifySink>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??0?$IObjectSafetyImpl@VCOPOSDeviceMonitor@@$02@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IObjectSafetyImpl@VCOPOSDeviceMonitor@@$02@ATL@@QAE@XZ PROC ; ATL::IObjectSafetyImpl<COPOSDeviceMonitor,3>::IObjectSafetyImpl<COPOSDeviceMonitor,3>, COMDAT
; _this$ = ecx

; 3657 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IObjectSafety@@QAE@XZ

; 3656 : 	IObjectSafetyImpl() : m_dwCurrentSafety(0)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 3658 : 		ATLSTATIC_ASSERT((dwSupportedSafety != 0 &&
; 3659 : 				(~(INTERFACESAFE_FOR_UNTRUSTED_CALLER | INTERFACESAFE_FOR_UNTRUSTED_DATA) & dwSupportedSafety) == 0),
; 3660 : 					"Only INTERFACESAFE_FOR_UNTRUSTED_CALLER and/or INTERFACESAFE_FOR_UNTRUSTED_DATA are supported for dwSupportedSafety parameter.");
; 3661 : 	}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0?$IObjectSafetyImpl@VCOPOSDeviceMonitor@@$02@ATL@@QAE@XZ ENDP ; ATL::IObjectSafetyImpl<COPOSDeviceMonitor,3>::IObjectSafetyImpl<COPOSDeviceMonitor,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IProvideClassInfo2Impl@$1?CLSID_OPOSDeviceMonitor@@3U_GUID@@B$1?DIID__IOPOSDeviceMonitorEvents@@3U2@B$1?LIBID_OposDeviceMonitor_CCO@@3U2@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IProvideClassInfo2Impl@$1?CLSID_OPOSDeviceMonitor@@3U_GUID@@B$1?DIID__IOPOSDeviceMonitorEvents@@3U2@B$1?LIBID_OposDeviceMonitor_CCO@@3U2@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ PROC ; ATL::IProvideClassInfo2Impl<&CLSID_OPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>::IProvideClassInfo2Impl<&CLSID_OPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IProvideClassInfo2@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IProvideClassInfo2Impl@$1?CLSID_OPOSDeviceMonitor@@3U_GUID@@B$1?DIID__IOPOSDeviceMonitorEvents@@3U2@B$1?LIBID_OposDeviceMonitor_CCO@@3U2@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IProvideClassInfo2Impl<&CLSID_OPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>::IProvideClassInfo2Impl<&CLSID_OPOSDeviceMonitor,&DIID__IOPOSDeviceMonitorEvents,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IDataObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IDataObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IDataObjectImpl<COPOSDeviceMonitor>::IDataObjectImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IDataObject@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IDataObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IDataObjectImpl<COPOSDeviceMonitor>::IDataObjectImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IQuickActivateImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IQuickActivateImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IQuickActivateImpl<COPOSDeviceMonitor>::IQuickActivateImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IQuickActivate@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IQuickActivateImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IQuickActivateImpl<COPOSDeviceMonitor>::IQuickActivateImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$ISpecifyPropertyPagesImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ISpecifyPropertyPagesImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::ISpecifyPropertyPagesImpl<COPOSDeviceMonitor>::ISpecifyPropertyPagesImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0ISpecifyPropertyPages@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$ISpecifyPropertyPagesImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::ISpecifyPropertyPagesImpl<COPOSDeviceMonitor>::ISpecifyPropertyPagesImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IPersistStorageImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IPersistStorageImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IPersistStorageImpl<COPOSDeviceMonitor>::IPersistStorageImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IPersistStorage@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IPersistStorageImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IPersistStorageImpl<COPOSDeviceMonitor>::IPersistStorageImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::IConnectionPointContainerImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IConnectionPointContainer@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IConnectionPointContainerImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IConnectionPointContainerImpl<COPOSDeviceMonitor>::IConnectionPointContainerImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IOleInPlaceObjectWindowlessImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IOleInPlaceObjectWindowlessImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IOleInPlaceObjectWindowlessImpl<COPOSDeviceMonitor>::IOleInPlaceObjectWindowlessImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleInPlaceObjectWindowless@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IOleInPlaceObjectWindowlessImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IOleInPlaceObjectWindowlessImpl<COPOSDeviceMonitor>::IOleInPlaceObjectWindowlessImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IViewObjectExImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IViewObjectExImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IViewObjectExImpl<COPOSDeviceMonitor>::IViewObjectExImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IViewObjectEx@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IViewObjectExImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IViewObjectExImpl<COPOSDeviceMonitor>::IViewObjectExImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IOleInPlaceActiveObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IOleInPlaceActiveObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IOleInPlaceActiveObjectImpl<COPOSDeviceMonitor>::IOleInPlaceActiveObjectImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleInPlaceActiveObject@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IOleInPlaceActiveObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IOleInPlaceActiveObjectImpl<COPOSDeviceMonitor>::IOleInPlaceActiveObjectImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IOleObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IOleObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IOleObjectImpl<COPOSDeviceMonitor>::IOleObjectImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleObject@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IOleObjectImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IOleObjectImpl<COPOSDeviceMonitor>::IOleObjectImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IOleControlImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IOleControlImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IOleControlImpl<COPOSDeviceMonitor>::IOleControlImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleControl@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IOleControlImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IOleControlImpl<COPOSDeviceMonitor>::IOleControlImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IPersistStreamInitImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IPersistStreamInitImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ PROC ; ATL::IPersistStreamInitImpl<COPOSDeviceMonitor>::IPersistStreamInitImpl<COPOSDeviceMonitor>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IPersistStreamInit@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IPersistStreamInitImpl@VCOPOSDeviceMonitor@@@ATL@@QAE@XZ ENDP ; ATL::IPersistStreamInitImpl<COPOSDeviceMonitor>::IPersistStreamInitImpl<COPOSDeviceMonitor>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ PROC ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::~CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 48	 add	 ecx, 72			; 00000048H
  00014	e8 00 00 00 00	 call	 ??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UAE@XZ
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??1CComControlBase@ATL@@UAE@XZ ; ATL::CComControlBase::~CComControlBase
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@UAE@XZ ENDP ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::~CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??0?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ PROC ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >, COMDAT
; _this$ = ecx

; 1592 : 	CComControl() : CComControlBase(this->m_hWnd) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 4c	 add	 eax, 76			; 0000004cH
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z ; ATL::CComControlBase::CComControlBase
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 48	 add	 ecx, 72			; 00000048H
  00023	e8 00 00 00 00	 call	 ??0?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@QAE@XZ
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??0?$CComControl@VCOPOSDeviceMonitor@@V?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >::CComControl<COPOSDeviceMonitor,ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UAE@XZ PROC ; ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >::~CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@UAE@XZ ENDP ; ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >::~CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@QAE@XZ PROC ; ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CWindowImpl@VCOPOSDeviceMonitor@@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@3@@ATL@@QAE@XZ ENDP ; ATL::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImpl<COPOSDeviceMonitor,ATL::CWindow,ATL::CWinTraits<1442840576,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$IDispatchImpl@UIOPOSDeviceMonitor@@$1?IID_IOPOSDeviceMonitor@@3U_GUID@@B$1?LIBID_OposDeviceMonitor_CCO@@3U3@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$IDispatchImpl@UIOPOSDeviceMonitor@@$1?IID_IOPOSDeviceMonitor@@3U_GUID@@B$1?LIBID_OposDeviceMonitor_CCO@@3U3@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ PROC ; ATL::IDispatchImpl<IOPOSDeviceMonitor,&IID_IOPOSDeviceMonitor,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>::IDispatchImpl<IOPOSDeviceMonitor,&IID_IOPOSDeviceMonitor,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOPOSDeviceMonitor@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$IDispatchImpl@UIOPOSDeviceMonitor@@$1?IID_IOPOSDeviceMonitor@@3U_GUID@@B$1?LIBID_OposDeviceMonitor_CCO@@3U3@B$00$0A@VCComTypeInfoHolder@ATL@@@ATL@@QAE@XZ ENDP ; ATL::IDispatchImpl<IOPOSDeviceMonitor,&IID_IOPOSDeviceMonitor,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>::IDispatchImpl<IOPOSDeviceMonitor,&IID_IOPOSDeviceMonitor,&LIBID_OposDeviceMonitor_CCO,1,0,ATL::CComTypeInfoHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0OposVariantResult@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0OposVariantResult@@QAE@XZ PROC			; OposVariantResult::OposVariantResult, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0OposVariant@@QAE@XZ	; OposVariant::OposVariant
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0OposVariantResult@@QAE@XZ ENDP			; OposVariantResult::OposVariantResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??1OposVariantResult@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1OposVariantResult@@QAE@XZ PROC			; OposVariantResult::~OposVariantResult, COMDAT
; _this$ = ecx

; 150  :     ~OposVariantResult() { Clear(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Clear@OposVariant@@QAEJXZ ; OposVariant::Clear
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??1OposVariantResult@@QAE@XZ ENDP			; OposVariantResult::~OposVariantResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_EOposVariant@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EOposVariant@@QAEPAXI@Z PROC				; OposVariant::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00011	83 e0 02	 and	 eax, 2
  00014	74 41		 je	 SHORT $LN2@vector
  00016	68 00 00 00 00	 push	 OFFSET ??1OposVariant@@QAE@XZ ; OposVariant::~OposVariant
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00021	52		 push	 edx
  00022	6a 18		 push	 24			; 00000018H
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR ___flags$[ebp]
  00030	83 e1 01	 and	 ecx, 1
  00033	74 1a		 je	 SHORT $LN3@vector
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	6b 42 fc 18	 imul	 eax, DWORD PTR [edx-4], 24
  0003c	83 c0 04	 add	 eax, 4
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 e9 04	 sub	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0004c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 e8 04	 sub	 eax, 4
  00055	eb 21		 jmp	 SHORT $LN1@vector
$LN2@vector:
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1OposVariant@@QAE@XZ	; OposVariant::~OposVariant
  0005f	8b 55 08	 mov	 edx, DWORD PTR ___flags$[ebp]
  00062	83 e2 01	 and	 edx, 1
  00065	74 0e		 je	 SHORT $LN4@vector
  00067	6a 18		 push	 24			; 00000018H
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
$LN4@vector:
  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@vector:
  00078	83 c4 04	 add	 esp, 4
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
??_EOposVariant@@QAEPAXI@Z ENDP				; OposVariant::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ?Clear@OposVariant@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@OposVariant@@QAEJXZ PROC				; OposVariant::Clear, COMDAT
; _this$ = ecx

; 79   :     HRESULT Clear() { _bNeedClear = false; return VariantClear(this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
  00016	8b f4		 mov	 esi, esp
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5e		 pop	 esi
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?Clear@OposVariant@@QAEJXZ ENDP				; OposVariant::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??1OposVariant@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1OposVariant@@QAE@XZ PROC				; OposVariant::~OposVariant, COMDAT
; _this$ = ecx

; 78   :     ~OposVariant() { if (_bNeedClear) Clear(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  00015	85 c9		 test	 ecx, ecx
  00017	74 08		 je	 SHORT $LN1@OposVarian
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?Clear@OposVariant@@QAEJXZ ; OposVariant::Clear
$LN1@OposVarian:
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1OposVariant@@QAE@XZ ENDP				; OposVariant::~OposVariant
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\OposVariant.h
;	COMDAT ??0OposVariant@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0OposVariant@@QAE@XZ PROC				; OposVariant::OposVariant, COMDAT
; _this$ = ecx

; 77   :     OposVariant() { vt = VT_EMPTY; _bNeedClear = false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	33 c0		 xor	 eax, eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	66 89 01	 mov	 WORD PTR [ecx], ax
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c6 42 10 00	 mov	 BYTE PTR [edx+16], 0
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??0OposVariant@@QAE@XZ ENDP				; OposVariant::OposVariant
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOPOSDeviceMonitor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOPOSDeviceMonitor@@QAE@XZ PROC			; IOPOSDeviceMonitor::IOPOSDeviceMonitor, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOPOSDeviceMonitor_1_16@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOPOSDeviceMonitor@@QAE@XZ ENDP			; IOPOSDeviceMonitor::IOPOSDeviceMonitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOPOSDeviceMonitor_1_16@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOPOSDeviceMonitor_1_16@@QAE@XZ PROC			; IOPOSDeviceMonitor_1_16::IOPOSDeviceMonitor_1_16, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IDispatch@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOPOSDeviceMonitor_1_16@@QAE@XZ ENDP			; IOPOSDeviceMonitor_1_16::IOPOSDeviceMonitor_1_16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ PROC ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::~CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtr@UIDispatch@@@ATL@@QAE@XZ
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ ENDP ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::~CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ PROC ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>, COMDAT
; _this$ = ecx

; 616  :     CComQIPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 617  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtr@UIDispatch@@@ATL@@QAE@XZ ; ATL::CComPtr<IDispatch>::CComPtr<IDispatch>

; 618  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ ENDP ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IOleAdviseHolder>::~CComPtr<IOleAdviseHolder>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IOleAdviseHolder>::~CComPtrBase<IOleAdviseHolder>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IOleAdviseHolder>::~CComPtr<IOleAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IOleAdviseHolder>::CComPtr<IOleAdviseHolder>, COMDAT
; _this$ = ecx

; 316  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIOleAdviseHolder@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IOleAdviseHolder>::CComPtrBase<IOleAdviseHolder>

; 318  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IOleAdviseHolder>::CComPtr<IOleAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IOleAdviseHolder>::~CComPtrBase<IOleAdviseHolder>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIOleAdviseHolder@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IOleAdviseHolder>::~CComPtrBase<IOleAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIOleAdviseHolder@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIOleAdviseHolder@@@ATL@@IAE@XZ PROC	; ATL::CComPtrBase<IOleAdviseHolder>::CComPtrBase<IOleAdviseHolder>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIOleAdviseHolder@@@ATL@@IAE@XZ ENDP	; ATL::CComPtrBase<IOleAdviseHolder>::CComPtrBase<IOleAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IDataAdviseHolder>::~CComPtr<IDataAdviseHolder>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IDataAdviseHolder>::~CComPtrBase<IDataAdviseHolder>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IDataAdviseHolder>::~CComPtr<IDataAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IDataAdviseHolder>::CComPtr<IDataAdviseHolder>, COMDAT
; _this$ = ecx

; 316  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIDataAdviseHolder@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IDataAdviseHolder>::CComPtrBase<IDataAdviseHolder>

; 318  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IDataAdviseHolder>::CComPtr<IDataAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IDataAdviseHolder>::~CComPtrBase<IDataAdviseHolder>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIDataAdviseHolder@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IDataAdviseHolder>::~CComPtrBase<IDataAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIDataAdviseHolder@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIDataAdviseHolder@@@ATL@@IAE@XZ PROC	; ATL::CComPtrBase<IDataAdviseHolder>::CComPtrBase<IDataAdviseHolder>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIDataAdviseHolder@@@ATL@@IAE@XZ ENDP	; ATL::CComPtrBase<IDataAdviseHolder>::CComPtrBase<IDataAdviseHolder>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ PROC ; ATL::CComPtr<IOleInPlaceSiteWindowless>::~CComPtr<IOleInPlaceSiteWindowless>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::~CComPtrBase<IOleInPlaceSiteWindowless>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ENDP ; ATL::CComPtr<IOleInPlaceSiteWindowless>::~CComPtr<IOleInPlaceSiteWindowless>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ PROC ; ATL::CComPtr<IOleInPlaceSiteWindowless>::CComPtr<IOleInPlaceSiteWindowless>, COMDAT
; _this$ = ecx

; 316  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::CComPtrBase<IOleInPlaceSiteWindowless>

; 318  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ENDP ; ATL::CComPtr<IOleInPlaceSiteWindowless>::CComPtr<IOleInPlaceSiteWindowless>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ PROC ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::~CComPtrBase<IOleInPlaceSiteWindowless>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ENDP ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::~CComPtrBase<IOleInPlaceSiteWindowless>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@IAE@XZ PROC ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::CComPtrBase<IOleInPlaceSiteWindowless>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIOleInPlaceSiteWindowless@@@ATL@@IAE@XZ ENDP ; ATL::CComPtrBase<IOleInPlaceSiteWindowless>::CComPtrBase<IOleInPlaceSiteWindowless>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??1CComControlBase@ATL@@UAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
??1CComControlBase@ATL@@UAE@XZ PROC			; ATL::CComControlBase::~CComControlBase, COMDAT
; _this$ = ecx

; 209  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 		if (m_hWndCD != NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00025	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00028	74 18		 je	 SHORT $LN2@CComContro

; 211  : 			::DestroyWindow(m_hWndCD);

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00030	8b f4		 mov	 esi, esp
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@CComContro:

; 212  : 		ATLTRACE(atlTraceControls,2,_T("Control Destroyed\n"));

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@KBMKEOOB@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy@
  00047	6a 02		 push	 2
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
  0004e	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<64,0>::operator unsigned int
  00053	50		 push	 eax
  00054	68 d4 00 00 00	 push	 212			; 000000d4H
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0HA@DOAAAKDA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00061	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 213  : 	}

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 c1 18	 add	 ecx, 24			; 00000018H
  00075	e8 00 00 00 00	 call	 ??1?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	83 c1 14	 add	 ecx, 20			; 00000014H
  00080	e8 00 00 00 00	 call	 ??1?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 10	 add	 ecx, 16			; 00000010H
  0008b	e8 00 00 00 00	 call	 ??1?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00096	e8 00 00 00 00	 call	 ??1?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	83 c1 08	 add	 ecx, 8
  000a1	e8 00 00 00 00	 call	 ??1?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	83 c1 04	 add	 ecx, 4
  000ac	e8 00 00 00 00	 call	 ??1?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ
  000b1	5e		 pop	 esi
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
??1CComControlBase@ATL@@UAE@XZ ENDP			; ATL::CComControlBase::~CComControlBase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlctl.h
;	COMDAT ??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z PROC	; ATL::CComControlBase::CComControlBase, COMDAT
; _this$ = ecx

; 184  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ??0?$CComPtr@UIOleInPlaceSiteWindowless@@@ATL@@QAE@XZ ; ATL::CComPtr<IOleInPlaceSiteWindowless>::CComPtr<IOleInPlaceSiteWindowless>
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 08	 add	 ecx, 8
  0001f	e8 00 00 00 00	 call	 ??0?$CComPtr@UIDataAdviseHolder@@@ATL@@QAE@XZ ; ATL::CComPtr<IDataAdviseHolder>::CComPtr<IDataAdviseHolder>
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002a	e8 00 00 00 00	 call	 ??0?$CComPtr@UIOleAdviseHolder@@@ATL@@QAE@XZ ; ATL::CComPtr<IOleAdviseHolder>::CComPtr<IOleAdviseHolder>
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 10	 add	 ecx, 16			; 00000010H
  00035	e8 00 00 00 00	 call	 ??0?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ ; ATL::CComPtr<IOleClientSite>::CComPtr<IOleClientSite>
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 14	 add	 ecx, 20			; 00000014H
  00040	e8 00 00 00 00	 call	 ??0?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ ; ATL::CComPtr<IAdviseSink>::CComPtr<IAdviseSink>
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 18	 add	 ecx, 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??0?$CComQIPtr@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@ATL@@QAE@XZ ; ATL::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>::CComQIPtr<IDispatch,&_GUID_00020400_0000_0000_c000_000000000046>

; 183  : 	CComControlBase(_Inout_ HWND& h) : m_hWndCD(h)

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _h$[ebp]
  00056	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 185  : 		m_sizeExtent.cx = 2*2540;

  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	c7 42 24 d8 13
	00 00		 mov	 DWORD PTR [edx+36], 5080 ; 000013d8H

; 186  : 		m_sizeExtent.cy = 2*2540;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c7 40 28 d8 13
	00 00		 mov	 DWORD PTR [eax+40], 5080 ; 000013d8H

; 187  : 		m_sizeNatural = m_sizeExtent;

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00073	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
  0007c	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 188  : 		m_rcPos.left = 0;

  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 189  : 		m_rcPos.right = 0;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 190  : 		m_rcPos.top = 0;

  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 191  : 		m_rcPos.bottom = 0;

  0009d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 192  : 		m_nFreezeEvents = 0;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 193  : 		m_bNegotiatedWnd = 0;

  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000b7	83 e2 fe	 and	 edx, -2			; fffffffeH
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 194  : 		m_bWndLess = 0;

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000c6	83 e2 fd	 and	 edx, -3			; fffffffdH
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 195  : 		m_bInPlaceActive = 0;

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000d5	83 e2 fb	 and	 edx, -5			; fffffffbH
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000db	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 196  : 		m_bUIActive = 0;

  000de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000e4	83 e2 f7	 and	 edx, -9			; fffffff7H
  000e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 197  : 		m_bUsingWindowRgn = 0;

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000f3	83 e2 ef	 and	 edx, -17		; ffffffefH
  000f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 198  : 		m_bInPlaceSiteEx = 0;

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00102	83 e2 df	 and	 edx, -33		; ffffffdfH
  00105	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00108	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 199  : 		m_bWindowOnly = 0;

  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00111	83 e2 bf	 and	 edx, -65		; ffffffbfH
  00114	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00117	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 200  : 		m_bRequiresSave = 0;

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00120	81 e2 7f ff ff
	ff		 and	 edx, -129		; ffffff7fH
  00126	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00129	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 201  : 		m_bWasOnceWindowless = 0;

  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00132	81 e2 ff fe ff
	ff		 and	 edx, -257		; fffffeffH
  00138	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 202  : 		m_bAutoSize = 0;

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00144	81 e2 ff fd ff
	ff		 and	 edx, -513		; fffffdffH
  0014a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 203  : 		m_bRecomposeOnResize = 0;

  00150	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00156	81 e2 ff fb ff
	ff		 and	 edx, -1025		; fffffbffH
  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 204  : 		m_bResizeNatural = 0;

  00162	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00168	81 e2 ff f7 ff
	ff		 and	 edx, -2049		; fffff7ffH
  0016e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00171	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 205  : 		m_bDrawFromNatural = 0;

  00174	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0017a	81 e2 ff ef ff
	ff		 and	 edx, -4097		; ffffefffH
  00180	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00183	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 206  : 		m_bDrawGetDataInHimetric = 0;

  00186	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0018c	81 e2 ff df ff
	ff		 and	 edx, -8193		; ffffdfffH
  00192	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00195	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 207  : 	}

  00198	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	83 c4 04	 add	 esp, 4
  0019e	3b ec		 cmp	 ebp, esp
  001a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 04 00	 ret	 4
??0CComControlBase@ATL@@QAE@AAPAUHWND__@@@Z ENDP	; ATL::CComControlBase::CComControlBase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IObjectSafety@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IObjectSafety@@QAE@XZ PROC				; IObjectSafety::IObjectSafety, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IObjectSafety@@QAE@XZ ENDP				; IObjectSafety::IObjectSafety
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IAdviseSink>::~CComPtr<IAdviseSink>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIAdviseSink@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IAdviseSink>::~CComPtrBase<IAdviseSink>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IAdviseSink>::~CComPtr<IAdviseSink>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IAdviseSink>::CComPtr<IAdviseSink>, COMDAT
; _this$ = ecx

; 316  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIAdviseSink@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IAdviseSink>::CComPtrBase<IAdviseSink>

; 318  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIAdviseSink@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IAdviseSink>::CComPtr<IAdviseSink>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIAdviseSink@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIAdviseSink@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IAdviseSink>::~CComPtrBase<IAdviseSink>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIAdviseSink@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IAdviseSink>::~CComPtrBase<IAdviseSink>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIAdviseSink@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIAdviseSink@@@ATL@@IAE@XZ PROC	; ATL::CComPtrBase<IAdviseSink>::CComPtrBase<IAdviseSink>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIAdviseSink@@@ATL@@IAE@XZ ENDP	; ATL::CComPtrBase<IAdviseSink>::CComPtrBase<IAdviseSink>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IOleClientSite>::~CComPtr<IOleClientSite>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIOleClientSite@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IOleClientSite>::~CComPtrBase<IOleClientSite>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IOleClientSite>::~CComPtr<IOleClientSite>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IOleClientSite>::CComPtr<IOleClientSite>, COMDAT
; _this$ = ecx

; 316  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIOleClientSite@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IOleClientSite>::CComPtrBase<IOleClientSite>

; 318  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIOleClientSite@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IOleClientSite>::CComPtr<IOleClientSite>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIOleClientSite@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIOleClientSite@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IOleClientSite>::~CComPtrBase<IOleClientSite>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIOleClientSite@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IOleClientSite>::~CComPtrBase<IOleClientSite>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIOleClientSite@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIOleClientSite@@@ATL@@IAE@XZ PROC	; ATL::CComPtrBase<IOleClientSite>::CComPtrBase<IOleClientSite>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIOleClientSite@@@ATL@@IAE@XZ ENDP	; ATL::CComPtrBase<IOleClientSite>::CComPtrBase<IOleClientSite>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ PROC ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::~CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ ; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ ENDP ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::~CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ PROC ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >, COMDAT
; _this$ = ecx

; 3439 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ ; ATL::CWindowImplRoot<ATL::CWindow>::CWindowImplRoot<ATL::CWindow>

; 3438 : 	CWindowImplBaseT() : m_pfnSuperWindowProc(::DefWindowProc)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__DefWindowProcW@16
  0001f	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 3440 : 	}

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ ENDP ; ATL::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >::CWindowImplBaseT<ATL::CWindow,ATL::CWinTraits<1442840576,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ PROC	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>, COMDAT
; _this$ = ecx

; 3227 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3228 : #ifdef _DEBUG
; 3229 : 		if(this->m_hWnd != NULL)	// should be cleared in WindowProc

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00025	74 57		 je	 SHORT $LN1@CWindowImp

; 3230 : 		{
; 3231 : 			ATLTRACE(atlTraceWindowing, 0, _T("ERROR - Object deleted before window was destroyed\n"));

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_1GI@EDPGCMOP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5@
  0002c	6a 00		 push	 0
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
  00033	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<32,0>::operator unsigned int
  00038	50		 push	 eax
  00039	68 9f 0c 00 00	 push	 3231			; 00000c9fH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0HA@JEDONBAF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00043	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00046	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 3232 : 			ATLASSERT(FALSE);

  00054	33 c9		 xor	 ecx, ecx
  00056	75 26		 jne	 SHORT $LN1@CWindowImp
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_13COJANIEC@?$AA0@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00062	6a 00		 push	 0
  00064	68 a0 0c 00 00	 push	 3232			; 00000ca0H
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_1OA@EJAAKNNE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0006e	6a 02		 push	 2
  00070	e8 00 00 00 00	 call	 __CrtDbgReportW
  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	83 f8 01	 cmp	 eax, 1
  0007b	75 01		 jne	 SHORT $LN1@CWindowImp
  0007d	cc		 int	 3
$LN1@CWindowImp:

; 3233 : 		}
; 3234 : #endif //_DEBUG
; 3235 : 	}

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	83 c1 08	 add	 ecx, 8
  00084	e8 00 00 00 00	 call	 ??1CWndProcThunk@ATL@@QAE@XZ
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ ENDP	; ATL::CWindowImplRoot<ATL::CWindow>::~CWindowImplRoot<ATL::CWindow>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ PROC	; ATL::CWindowImplRoot<ATL::CWindow>::CWindowImplRoot<ATL::CWindow>, COMDAT
; _this$ = ecx

; 3223 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 00		 push	 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e8 00 00 00 00	 call	 ??0CWindow@ATL@@QAE@PAUHWND__@@@Z ; ATL::CWindow::CWindow
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0CMessageMap@ATL@@QAE@XZ
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 08	 add	 ecx, 8
  00029	e8 00 00 00 00	 call	 ??0CWndProcThunk@ATL@@QAE@XZ

; 3222 : 	CWindowImplRoot() : m_pCurrentMsg(NULL), m_dwState(0)

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 3224 : 	}

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CWindowImplRoot<ATL::CWindow>::CWindowImplRoot<ATL::CWindow>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMessageMap@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMessageMap@ATL@@QAE@XZ PROC				; ATL::CMessageMap::CMessageMap, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0CMessageMap@ATL@@QAE@XZ ENDP				; ATL::CMessageMap::CMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CWndProcThunk@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWndProcThunk@ATL@@QAE@XZ PROC			; ATL::CWndProcThunk::~CWndProcThunk, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00014	e8 00 00 00 00	 call	 ??1CDynamicStdCallThunk2@ATL@@QAE@XZ ; ATL::CDynamicStdCallThunk2::~CDynamicStdCallThunk2
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1CWndProcThunk@ATL@@QAE@XZ ENDP			; ATL::CWndProcThunk::~CWndProcThunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CWndProcThunk@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWndProcThunk@ATL@@QAE@XZ PROC			; ATL::CWndProcThunk::CWndProcThunk, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00014	e8 00 00 00 00	 call	 ??0CDynamicStdCallThunk2@ATL@@QAE@XZ ; ATL::CDynamicStdCallThunk2::CDynamicStdCallThunk2
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CWndProcThunk@ATL@@QAE@XZ ENDP			; ATL::CWndProcThunk::CWndProcThunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ??0CWindow@ATL@@QAE@PAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
??0CWindow@ATL@@QAE@PAUHWND__@@@Z PROC			; ATL::CWindow::CWindow, COMDAT
; _this$ = ecx

; 795  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 794  : 		m_hWnd(hWnd)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 796  : 	}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0CWindow@ATL@@QAE@PAUHWND__@@@Z ENDP			; ATL::CWindow::CWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ?GetWindowLongPtrW@@YAJPAUHWND__@@H@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_nIndex$ = 12						; size = 4
?GetWindowLongPtrW@@YAJPAUHWND__@@H@Z PROC		; GetWindowLongPtrW, COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 87   : 	return( ::GetWindowLongW( hWnd, nIndex ) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongW@8
  00014	3b f4		 cmp	 esi, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 88   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?GetWindowLongPtrW@@YAJPAUHWND__@@H@Z ENDP		; GetWindowLongPtrW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwin.h
;	COMDAT ?SetWindowLongPtrW@@YAJPAUHWND__@@HJ@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_nIndex$ = 12						; size = 4
_dwNewLong$ = 16					; size = 4
?SetWindowLongPtrW@@YAJPAUHWND__@@HJ@Z PROC		; SetWindowLongPtrW, COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 67   : 	return( ::SetWindowLongW( hWnd, nIndex, LONG( dwNewLong ) ) );

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR _dwNewLong$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongW@12
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 68   : }

  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?SetWindowLongPtrW@@YAJPAUHWND__@@HJ@Z ENDP		; SetWindowLongPtrW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ PROC		; ATL::CComDynamicUnkArray::GetSize, COMDAT
; _this$ = ecx

; 6205 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6206 : 		return m_nSize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 6207 : 	}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSize@CComDynamicUnkArray@ATL@@QBEHXZ ENDP		; ATL::CComDynamicUnkArray::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z PROC ; ATL::CComDynamicUnkArray::GetAt, COMDAT
; _this$ = ecx

; 6196 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6197 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $LN5@GetAt
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001d	7c 26		 jl	 SHORT $LN6@GetAt
$LN5@GetAt:
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00029	6a 00		 push	 0
  0002b	68 35 18 00 00	 push	 6197			; 00001835H
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00035	6a 02		 push	 2
  00037	e8 00 00 00 00	 call	 __CrtDbgReportW
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	83 f8 01	 cmp	 eax, 1
  00042	75 01		 jne	 SHORT $LN6@GetAt
  00044	cc		 int	 3
$LN6@GetAt:

; 6198 : 		if (nIndex >= 0 && nIndex < m_nSize)

  00045	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00049	7c 1a		 jl	 SHORT $LN2@GetAt
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00051	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00054	7d 0f		 jge	 SHORT $LN2@GetAt

; 6199 : 			return m_ppUnk[nIndex];

  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0005e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00061	eb 04		 jmp	 SHORT $LN1@GetAt
  00063	eb 02		 jmp	 SHORT $LN1@GetAt
$LN2@GetAt:

; 6200 : 		else
; 6201 : 			return NULL;

  00065	33 c0		 xor	 eax, eax
$LN1@GetAt:

; 6202 : 
; 6203 : 	}

  00067	83 c4 04	 add	 esp, 4
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ENDP ; ATL::CComDynamicUnkArray::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ PROC	; ATL::CComDynamicUnkArray::end, COMDAT
; _this$ = ecx

; 6191 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6192 : 		return &m_ppUnk[m_nSize];

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 6193 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ENDP	; ATL::CComDynamicUnkArray::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ PROC ; ATL::CComDynamicUnkArray::begin, COMDAT
; _this$ = ecx

; 6187 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6188 : 		return m_ppUnk;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 6189 : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ENDP ; ATL::CComDynamicUnkArray::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwCookie$ = 12						; size = 4
?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z PROC ; ATL::CComDynamicUnkArray::GetUnknown, COMDAT

; 6177 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6178 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6179 : 		ATLASSERT(dwCookie != 0 && dwCookie <= (DWORD)m_nSize);

  00003	83 7d 0c 00	 cmp	 DWORD PTR _dwCookie$[ebp], 0
  00007	74 0b		 je	 SHORT $LN5@GetUnknown
  00009	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCookie$[ebp]
  0000f	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00012	76 26		 jbe	 SHORT $LN6@GetUnknown
$LN5@GetUnknown:
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@CDNFCAGD@?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 23 18 00 00	 push	 6179			; 00001823H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  0002a	6a 02		 push	 2
  0002c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	83 f8 01	 cmp	 eax, 1
  00037	75 01		 jne	 SHORT $LN6@GetUnknown
  00039	cc		 int	 3
$LN6@GetUnknown:

; 6180 : #endif
; 6181 : 		if (dwCookie != 0 && dwCookie <= (DWORD)m_nSize)

  0003a	83 7d 0c 00	 cmp	 DWORD PTR _dwCookie$[ebp], 0
  0003e	74 1e		 je	 SHORT $LN2@GetUnknown
  00040	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCookie$[ebp]
  00046	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00049	77 13		 ja	 SHORT $LN2@GetUnknown

; 6182 : 			return GetAt(dwCookie-1); // cookie minus one is an index into the array

  0004b	8b 55 0c	 mov	 edx, DWORD PTR _dwCookie$[ebp]
  0004e	83 ea 01	 sub	 edx, 1
  00051	52		 push	 edx
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?GetAt@CComDynamicUnkArray@ATL@@QAEPAUIUnknown@@H@Z ; ATL::CComDynamicUnkArray::GetAt
  0005a	eb 04		 jmp	 SHORT $LN1@GetUnknown
  0005c	eb 02		 jmp	 SHORT $LN1@GetUnknown
$LN2@GetUnknown:

; 6183 : 		else
; 6184 : 			return NULL;

  0005e	33 c0		 xor	 eax, eax
$LN1@GetUnknown:

; 6185 : 	}

  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?GetUnknown@CComDynamicUnkArray@ATL@@QAGPAUIUnknown@@K@Z ENDP ; ATL::CComDynamicUnkArray::GetUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z
_TEXT	SEGMENT
_dwCookie$1 = -8					; size = 4
_ppUnk$2 = -4						; size = 4
_this$ = 8						; size = 4
_ppFind$ = 12						; size = 4
?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z PROC ; ATL::CComDynamicUnkArray::GetCookie, COMDAT

; 6160 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 6161 : 		ATLASSERT(ppFind && *ppFind);

  00014	83 7d 0c 00	 cmp	 DWORD PTR _ppFind$[ebp], 0
  00018	74 08		 je	 SHORT $LN8@GetCookie
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _ppFind$[ebp]
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	75 26		 jne	 SHORT $LN9@GetCookie
$LN8@GetCookie:
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@GFEBMKPP@?$AAp?$AAp?$AAF?$AAi?$AAn?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAp?$AAp?$AAF?$AAi@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0002c	6a 00		 push	 0
  0002e	68 11 18 00 00	 push	 6161			; 00001811H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00038	6a 02		 push	 2
  0003a	e8 00 00 00 00	 call	 __CrtDbgReportW
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
  00042	83 f8 01	 cmp	 eax, 1
  00045	75 01		 jne	 SHORT $LN9@GetCookie
  00047	cc		 int	 3
$LN9@GetCookie:

; 6162 : 		if (ppFind && *ppFind)

  00048	83 7d 0c 00	 cmp	 DWORD PTR _ppFind$[ebp], 0
  0004c	74 55		 je	 SHORT $LN5@GetCookie
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _ppFind$[ebp]
  00051	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00054	74 4d		 je	 SHORT $LN5@GetCookie

; 6163 : 		{
; 6164 : 			IUnknown** ppUnk = NULL;

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ppUnk$2[ebp], 0

; 6165 : 			DWORD dwCookie = 1;

  0005d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dwCookie$1[ebp], 1

; 6166 : 			// find IUnknown* in array
; 6167 : 			for (ppUnk = begin(); ppUnk < end(); ppUnk++)

  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
  0006c	89 45 fc	 mov	 DWORD PTR _ppUnk$2[ebp], eax
  0006f	eb 09		 jmp	 SHORT $LN4@GetCookie
$LN2@GetCookie:
  00071	8b 45 fc	 mov	 eax, DWORD PTR _ppUnk$2[ebp]
  00074	83 c0 04	 add	 eax, 4
  00077	89 45 fc	 mov	 DWORD PTR _ppUnk$2[ebp], eax
$LN4@GetCookie:
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
  00082	39 45 fc	 cmp	 DWORD PTR _ppUnk$2[ebp], eax
  00085	73 1c		 jae	 SHORT $LN5@GetCookie

; 6168 : 			{
; 6169 : 				if (*ppUnk == *ppFind)

  00087	8b 4d fc	 mov	 ecx, DWORD PTR _ppUnk$2[ebp]
  0008a	8b 55 0c	 mov	 edx, DWORD PTR _ppFind$[ebp]
  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	3b 02		 cmp	 eax, DWORD PTR [edx]
  00091	75 05		 jne	 SHORT $LN6@GetCookie

; 6170 : 					return dwCookie; // cookie minus one is an index into the array

  00093	8b 45 f8	 mov	 eax, DWORD PTR _dwCookie$1[ebp]
  00096	eb 0d		 jmp	 SHORT $LN1@GetCookie
$LN6@GetCookie:

; 6171 : 				dwCookie++;

  00098	8b 4d f8	 mov	 ecx, DWORD PTR _dwCookie$1[ebp]
  0009b	83 c1 01	 add	 ecx, 1
  0009e	89 4d f8	 mov	 DWORD PTR _dwCookie$1[ebp], ecx

; 6172 : 			}

  000a1	eb ce		 jmp	 SHORT $LN2@GetCookie
$LN5@GetCookie:

; 6173 : 		}
; 6174 : 		return 0;

  000a3	33 c0		 xor	 eax, eax
$LN1@GetCookie:

; 6175 : 	}

  000a5	83 c4 08	 add	 esp, 8
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetCookie@CComDynamicUnkArray@ATL@@QAGKPAPAUIUnknown@@@Z ENDP ; ATL::CComDynamicUnkArray::GetCookie
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_this$ = -4						; size = 4
_dwCookie$ = 8						; size = 4
?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z PROC		; ATL::CComDynamicUnkArray::Remove, COMDAT
; _this$ = ecx

; 6267 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6268 : 	DWORD idx = dwCookie -1;

  00017	8b 45 08	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  0001a	83 e8 01	 sub	 eax, 1
  0001d	89 45 f8	 mov	 DWORD PTR _idx$[ebp], eax

; 6269 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 6270 : 	ATLASSERT(idx < dwCookie && idx < (DWORD)m_nSize);

  00020	8b 4d f8	 mov	 ecx, DWORD PTR _idx$[ebp]
  00023	3b 4d 08	 cmp	 ecx, DWORD PTR _dwCookie$[ebp]
  00026	73 0b		 jae	 SHORT $LN6@Remove
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _idx$[ebp]
  0002e	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00031	72 26		 jb	 SHORT $LN7@Remove
$LN6@Remove:
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@PKGIEOJK@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAo?$AAk?$AAi?$AAe?$AA?5@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0003d	6a 00		 push	 0
  0003f	68 7e 18 00 00	 push	 6270			; 0000187eH
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00049	6a 02		 push	 2
  0004b	e8 00 00 00 00	 call	 __CrtDbgReportW
  00050	83 c4 18	 add	 esp, 24			; 00000018H
  00053	83 f8 01	 cmp	 eax, 1
  00056	75 01		 jne	 SHORT $LN7@Remove
  00058	cc		 int	 3
$LN7@Remove:

; 6271 : #endif
; 6272 : 	if (idx < dwCookie && idx < (DWORD)m_nSize)

  00059	8b 55 f8	 mov	 edx, DWORD PTR _idx$[ebp]
  0005c	3b 55 08	 cmp	 edx, DWORD PTR _dwCookie$[ebp]
  0005f	73 35		 jae	 SHORT $LN2@Remove
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _idx$[ebp]
  00067	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0006a	73 2a		 jae	 SHORT $LN2@Remove

; 6273 : 	{
; 6274 : 		// cookie minus one is index into array
; 6275 : 		if (m_ppUnk[idx] == NULL)

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 02		 mov	 eax, DWORD PTR [edx]
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _idx$[ebp]
  00074	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00078	75 04		 jne	 SHORT $LN4@Remove

; 6276 : 			return FALSE;

  0007a	33 c0		 xor	 eax, eax
  0007c	eb 1a		 jmp	 SHORT $LN1@Remove
$LN4@Remove:

; 6277 : 		m_ppUnk[idx] = NULL;

  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 02		 mov	 eax, DWORD PTR [edx]
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _idx$[ebp]
  00086	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0

; 6278 : 		return TRUE;

  0008d	b8 01 00 00 00	 mov	 eax, 1
  00092	eb 04		 jmp	 SHORT $LN1@Remove

; 6279 : 	}

  00094	eb 02		 jmp	 SHORT $LN1@Remove
$LN2@Remove:

; 6280 : 	else
; 6281 : 		return FALSE;

  00096	33 c0		 xor	 eax, eax
$LN1@Remove:

; 6282 : }

  00098	83 c4 08	 add	 esp, 8
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?Remove@CComDynamicUnkArray@ATL@@QAEHK@Z ENDP		; ATL::CComDynamicUnkArray::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z
_TEXT	SEGMENT
_hr$ = -28						; size = 4
_nAlloc$ = -20						; size = 4
_dwCookie$ = -12					; size = 4
_pp$ = -8						; size = 4
_this$ = -4						; size = 4
_pUnk$ = 8						; size = 4
?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z PROC	; ATL::CComDynamicUnkArray::Add, COMDAT
; _this$ = ecx

; 6223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6224 : 	IUnknown** pp = NULL;

  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pp$[ebp], 0

; 6225 : 	if (m_nSize == 0)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	75 3e		 jne	 SHORT $LN5@Add

; 6226 : 	{
; 6227 : 		// Create array with _DEFAULT_VECTORLENGTH number of items.
; 6228 : 		ATLTRY(pp = (IUnknown**)calloc(sizeof(IUnknown*),_DEFAULT_VECTORLENGTH));

  00033	6a 04		 push	 4
  00035	6a 04		 push	 4
  00037	e8 00 00 00 00	 call	 _calloc
  0003c	83 c4 08	 add	 esp, 8
  0003f	89 45 f8	 mov	 DWORD PTR _pp$[ebp], eax

; 6229 : 		if (pp == NULL)

  00042	83 7d f8 00	 cmp	 DWORD PTR _pp$[ebp], 0
  00046	75 07		 jne	 SHORT $LN6@Add

; 6230 : 			return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 0d 01 00 00	 jmp	 $LN1@Add
$LN6@Add:

; 6231 : 		memset(pp, 0, sizeof(IUnknown*)*_DEFAULT_VECTORLENGTH);

  0004f	6a 10		 push	 16			; 00000010H
  00051	6a 00		 push	 0
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _pp$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _memset
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6232 : 		m_ppUnk = pp;

  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 45 f8	 mov	 eax, DWORD PTR _pp$[ebp]
  00065	89 02		 mov	 DWORD PTR [edx], eax

; 6233 : 		m_nSize = _DEFAULT_VECTORLENGTH;

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	c7 41 04 04 00
	00 00		 mov	 DWORD PTR [ecx+4], 4
$LN5@Add:

; 6234 : 	}
; 6235 : 	// Walk array and use empty slots if any.
; 6236 : 	DWORD dwCookie = 1;

  00071	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwCookie$[ebp], 1

; 6237 : 	for (pp = begin(); pp < end(); pp++)

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?begin@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::begin
  00080	89 45 f8	 mov	 DWORD PTR _pp$[ebp], eax
  00083	eb 09		 jmp	 SHORT $LN4@Add
$LN2@Add:
  00085	8b 55 f8	 mov	 edx, DWORD PTR _pp$[ebp]
  00088	83 c2 04	 add	 edx, 4
  0008b	89 55 f8	 mov	 DWORD PTR _pp$[ebp], edx
$LN4@Add:
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?end@CComDynamicUnkArray@ATL@@QAEPAPAUIUnknown@@XZ ; ATL::CComDynamicUnkArray::end
  00096	39 45 f8	 cmp	 DWORD PTR _pp$[ebp], eax
  00099	73 23		 jae	 SHORT $LN3@Add

; 6238 : 	{
; 6239 : 		if (*pp == NULL)

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _pp$[ebp]
  0009e	83 38 00	 cmp	 DWORD PTR [eax], 0
  000a1	75 10		 jne	 SHORT $LN7@Add

; 6240 : 		{
; 6241 : 			*pp = pUnk;

  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _pp$[ebp]
  000a6	8b 55 08	 mov	 edx, DWORD PTR _pUnk$[ebp]
  000a9	89 11		 mov	 DWORD PTR [ecx], edx

; 6242 : 			return dwCookie; // cookie minus one is index into array

  000ab	8b 45 f4	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  000ae	e9 a9 00 00 00	 jmp	 $LN1@Add
$LN7@Add:

; 6243 : 		}
; 6244 : 		dwCookie++;

  000b3	8b 45 f4	 mov	 eax, DWORD PTR _dwCookie$[ebp]
  000b6	83 c0 01	 add	 eax, 1
  000b9	89 45 f4	 mov	 DWORD PTR _dwCookie$[ebp], eax

; 6245 : 	}

  000bc	eb c7		 jmp	 SHORT $LN2@Add
$LN3@Add:

; 6246 : 	// No empty slots so resize array.
; 6247 : 	// # of new slots is double of current size.
; 6248 : 	int nAlloc = 0;

  000be	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nAlloc$[ebp], 0

; 6249 : 	HRESULT hr = AtlMultiply(&nAlloc, m_nSize, 2);

  000c5	6a 02		 push	 2
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cd	52		 push	 edx
  000ce	8d 45 ec	 lea	 eax, DWORD PTR _nAlloc$[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??$AtlMultiply@H@ATL@@YAJPAHHH@Z ; ATL::AtlMultiply<int>
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 6250 : 	if (FAILED(hr))

  000dd	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e1	7d 04		 jge	 SHORT $LN8@Add

; 6251 : 	{
; 6252 : 		return 0;

  000e3	33 c0		 xor	 eax, eax
  000e5	eb 75		 jmp	 SHORT $LN1@Add
$LN8@Add:

; 6253 : 	}
; 6254 : 
; 6255 : 	pp = (IUnknown**)_recalloc(m_ppUnk, sizeof(IUnknown*),nAlloc);

  000e7	8b 4d ec	 mov	 ecx, DWORD PTR _nAlloc$[ebp]
  000ea	51		 push	 ecx
  000eb	6a 04		 push	 4
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 __recalloc
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fb	89 45 f8	 mov	 DWORD PTR _pp$[ebp], eax

; 6256 : 	if (pp == NULL)

  000fe	83 7d f8 00	 cmp	 DWORD PTR _pp$[ebp], 0
  00102	75 04		 jne	 SHORT $LN9@Add

; 6257 : 		return 0;

  00104	33 c0		 xor	 eax, eax
  00106	eb 54		 jmp	 SHORT $LN1@Add
$LN9@Add:

; 6258 : 	m_ppUnk = pp;

  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8b 55 f8	 mov	 edx, DWORD PTR _pp$[ebp]
  0010e	89 11		 mov	 DWORD PTR [ecx], edx

; 6259 : 	memset(&m_ppUnk[m_nSize], 0, sizeof(IUnknown*)*m_nSize);

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00116	c1 e1 02	 shl	 ecx, 2
  00119	51		 push	 ecx
  0011a	6a 00		 push	 0
  0011c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	8b 11		 mov	 edx, DWORD PTR [ecx]
  00127	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _memset
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6260 : 	m_ppUnk[m_nSize] = pUnk;

  00133	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00139	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013e	8b 45 08	 mov	 eax, DWORD PTR _pUnk$[ebp]
  00141	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 6261 : 	dwCookie = m_nSize+1;

  00144	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0014a	83 c2 01	 add	 edx, 1
  0014d	89 55 f4	 mov	 DWORD PTR _dwCookie$[ebp], edx

; 6262 : 	m_nSize = nAlloc;

  00150	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00153	8b 4d ec	 mov	 ecx, DWORD PTR _nAlloc$[ebp]
  00156	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 6263 : 	return dwCookie; // cookie minus one is index into array

  00159	8b 45 f4	 mov	 eax, DWORD PTR _dwCookie$[ebp]
$LN1@Add:

; 6264 : }

  0015c	52		 push	 edx
  0015d	8b cd		 mov	 ecx, ebp
  0015f	50		 push	 eax
  00160	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Add
  00166	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016b	58		 pop	 eax
  0016c	5a		 pop	 edx
  0016d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00170	3b ec		 cmp	 ebp, esp
  00172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 04 00	 ret	 4
  0017d	0f 1f 00	 npad	 3
$LN13@Add:
  00180	01 00 00 00	 DD	 1
  00184	00 00 00 00	 DD	 $LN12@Add
$LN12@Add:
  00188	ec ff ff ff	 DD	 -20			; ffffffecH
  0018c	04 00 00 00	 DD	 4
  00190	00 00 00 00	 DD	 $LN11@Add
$LN11@Add:
  00194	6e		 DB	 110			; 0000006eH
  00195	41		 DB	 65			; 00000041H
  00196	6c		 DB	 108			; 0000006cH
  00197	6c		 DB	 108			; 0000006cH
  00198	6f		 DB	 111			; 0000006fH
  00199	63		 DB	 99			; 00000063H
  0019a	00		 DB	 0
?Add@CComDynamicUnkArray@ATL@@QAEKPAUIUnknown@@@Z ENDP	; ATL::CComDynamicUnkArray::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1CComDynamicUnkArray@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComDynamicUnkArray@ATL@@QAE@XZ PROC			; ATL::CComDynamicUnkArray::~CComDynamicUnkArray, COMDAT
; _this$ = ecx

; 6151 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6152 : 		if (m_nSize > 0)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	7e 0e		 jle	 SHORT $LN1@CComDynami

; 6153 : 			free(m_ppUnk);

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 _free
  00022	83 c4 04	 add	 esp, 4
$LN1@CComDynami:

; 6154 : 	}

  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CComDynamicUnkArray@ATL@@QAE@XZ ENDP			; ATL::CComDynamicUnkArray::~CComDynamicUnkArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??0CComDynamicUnkArray@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComDynamicUnkArray@ATL@@QAE@XZ PROC			; ATL::CComDynamicUnkArray::CComDynamicUnkArray, COMDAT
; _this$ = ecx

; 6144 : 	CComDynamicUnkArray()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6145 : 	{
; 6146 : 		m_nSize = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 6147 : 		m_ppUnk = NULL;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 6148 : 	}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CComDynamicUnkArray@ATL@@QAE@XZ ENDP			; ATL::CComDynamicUnkArray::CComDynamicUnkArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z PROC ; ATL::_Copy<tagCONNECTDATA>::destroy, COMDAT

; 5435 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5436 : 		if (p->pUnk)

  00004	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00007	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000a	74 1b		 je	 SHORT $LN1@destroy

; 5437 : 		{
; 5438 : 			p->pUnk->Release();

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 12		 mov	 edx, DWORD PTR [edx]
  00018	8b f4		 mov	 esi, esp
  0001a	51		 push	 ecx
  0001b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001e	ff d0		 call	 eax
  00020	3b f4		 cmp	 esi, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@destroy:

; 5439 : 		}
; 5440 : 	}

  00027	5e		 pop	 esi
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?destroy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ENDP ; ATL::_Copy<tagCONNECTDATA>::destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?init@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?init@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z PROC ; ATL::_Copy<tagCONNECTDATA>::init, COMDAT

; 5432 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5433 : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?init@?$_Copy@UtagCONNECTDATA@@@ATL@@SAXPAUtagCONNECTDATA@@@Z ENDP ; ATL::_Copy<tagCONNECTDATA>::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
___atl_condVal$1 = -4					; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z PROC ; ATL::_Copy<tagCONNECTDATA>::copy, COMDAT

; 5422 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
$LN4@copy:

; 5423 : 		ATLENSURE(p1 != NULL && p2 != NULL);

  00015	83 7d 08 00	 cmp	 DWORD PTR _p1$[ebp], 0
  00019	74 0f		 je	 SHORT $LN11@copy
  0001b	83 7d 0c 00	 cmp	 DWORD PTR _p2$[ebp], 0
  0001f	74 09		 je	 SHORT $LN11@copy
  00021	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN12@copy
$LN11@copy:
  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN12@copy:
  00031	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00034	89 45 fc	 mov	 DWORD PTR ___atl_condVal$1[ebp], eax
$LN7@copy:
  00037	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  0003b	75 26		 jne	 SHORT $LN5@copy
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00047	6a 00		 push	 0
  00049	68 2f 15 00 00	 push	 5423			; 0000152fH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00053	6a 02		 push	 2
  00055	e8 00 00 00 00	 call	 __CrtDbgReportW
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 01		 jne	 SHORT $LN5@copy
  00062	cc		 int	 3
$LN5@copy:
  00063	33 d2		 xor	 edx, edx
  00065	75 d0		 jne	 SHORT $LN7@copy
  00067	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  0006b	75 0a		 jne	 SHORT $LN2@copy
  0006d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00072	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@copy:
  00077	33 c0		 xor	 eax, eax
  00079	75 9a		 jne	 SHORT $LN4@copy

; 5424 : 		*p1 = *p2;

  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00086	89 11		 mov	 DWORD PTR [ecx], edx
  00088	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5425 : 		if (p1->pUnk)

  0008b	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  0008e	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00091	74 1b		 je	 SHORT $LN9@copy

; 5426 : 		{
; 5427 : 			p1->pUnk->AddRef();

  00093	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	8b 55 08	 mov	 edx, DWORD PTR _p1$[ebp]
  0009b	8b 02		 mov	 eax, DWORD PTR [edx]
  0009d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009f	8b f4		 mov	 esi, esp
  000a1	50		 push	 eax
  000a2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a5	ff d2		 call	 edx
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@copy:

; 5428 : 		}
; 5429 : 		return S_OK;

  000ae	33 c0		 xor	 eax, eax
$LN10@copy:

; 5430 : 	}

  000b0	5e		 pop	 esi
  000b1	83 c4 08	 add	 esp, 8
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?copy@?$_Copy@UtagCONNECTDATA@@@ATL@@SAJPAUtagCONNECTDATA@@PBU3@@Z ENDP ; ATL::_Copy<tagCONNECTDATA>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00011	83 e0 02	 and	 eax, 2
  00014	74 41		 je	 SHORT $LN2@vector
  00016	68 00 00 00 00	 push	 OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00021	52		 push	 edx
  00022	6a 0c		 push	 12			; 0000000cH
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_I@YGXPAXIIP6EX0@Z@Z
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR ___flags$[ebp]
  00030	83 e1 01	 and	 ecx, 1
  00033	74 1a		 je	 SHORT $LN3@vector
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	6b 42 fc 0c	 imul	 eax, DWORD PTR [edx-4], 12
  0003c	83 c0 04	 add	 eax, 4
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 e9 04	 sub	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0004c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 e8 04	 sub	 eax, 4
  00055	eb 21		 jmp	 SHORT $LN1@vector
$LN2@vector:
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
  0005f	8b 55 08	 mov	 edx, DWORD PTR ___flags$[ebp]
  00062	83 e2 01	 and	 edx, 1
  00065	74 0e		 je	 SHORT $LN4@vector
  00067	6a 0c		 push	 12			; 0000000cH
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
$LN4@vector:
  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@vector:
  00078	83 c4 04	 add	 esp, 4
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CComBSTR@ATL@@QAE@XZ	; ATL::CComBSTR::~CComBSTR
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1ModuleLockHelper@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ModuleLockHelper@ATL@@QAE@XZ PROC			; ATL::ModuleLockHelper::~ModuleLockHelper, COMDAT
; _this$ = ecx

; 2896 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2897 : #ifndef _ATL_STATIC_LIB_IMPL
; 2898 : 		_pAtlModule->Unlock();

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	8b f4		 mov	 esi, esp
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  0001e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00021	ff d0		 call	 eax
  00023	3b f4		 cmp	 esi, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2899 : #endif
; 2900 : 	}

  0002a	5e		 pop	 esi
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1ModuleLockHelper@ATL@@QAE@XZ ENDP			; ATL::ModuleLockHelper::~ModuleLockHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??0ModuleLockHelper@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ModuleLockHelper@ATL@@QAE@XZ PROC			; ATL::ModuleLockHelper::ModuleLockHelper, COMDAT
; _this$ = ecx

; 2888 : 	ModuleLockHelper()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2889 : 	{
; 2890 : #ifndef _ATL_STATIC_LIB_IMPL
; 2891 : 		_pAtlModule->Lock();

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	8b f4		 mov	 esi, esp
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_pAtlModule@ATL@@3PAVCAtlModule@1@A ; ATL::_pAtlModule
  0001e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00021	ff d0		 call	 eax
  00023	3b f4		 cmp	 esi, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2892 : #endif
; 2893 : 	}

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5e		 pop	 esi
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0ModuleLockHelper@ATL@@QAE@XZ ENDP			; ATL::ModuleLockHelper::ModuleLockHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::CComObjectRootEx<ATL::CComSingleThreadModel>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CComObjectRootBase@ATL@@QAE@XZ ; ATL::CComObjectRootBase::CComObjectRootBase
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::CComObjectRootEx<ATL::CComSingleThreadModel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock, COMDAT
; _this$ = ecx

; 2740 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2741 : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Unlock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock, COMDAT
; _this$ = ecx

; 2737 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2738 : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Lock@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_AtlInitialConstruct@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AtlInitialConstruct@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEJXZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::_AtlInitialConstruct, COMDAT
; _this$ = ecx

; 2732 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2733 : 		return S_OK;

  0000e	33 c0		 xor	 eax, eax

; 2734 : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?_AtlInitialConstruct@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEJXZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::_AtlInitialConstruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT
_nRef$ = -8						; size = 4
_this$ = -4						; size = 4
?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalRelease, COMDAT
; _this$ = ecx

; 2718 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2719 : #ifdef _DEBUG
; 2720 : 		long nRef = _ThreadModel::Decrement(&m_dwRef);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z ; ATL::CComSingleThreadModel::Decrement
  00020	89 45 f8	 mov	 DWORD PTR _nRef$[ebp], eax

; 2721 : 		if (nRef < -(LONG_MAX / 2))

  00023	81 7d f8 01 00
	00 c0		 cmp	 DWORD PTR _nRef$[ebp], -1073741823 ; c0000001H
  0002a	7d 2a		 jge	 SHORT $LN2@InternalRe

; 2722 : 		{
; 2723 : 			ATLASSERT(0 && _T("Release called on a pointer that has already been released"));

  0002c	33 c9		 xor	 ecx, ecx
  0002e	75 26		 jne	 SHORT $LN2@InternalRe
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_1IG@BMPHLDAM@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAL?$AA?$CC?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0003a	6a 00		 push	 0
  0003c	68 a3 0a 00 00	 push	 2723			; 00000aa3H
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00046	6a 02		 push	 2
  00048	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	83 f8 01	 cmp	 eax, 1
  00053	75 01		 jne	 SHORT $LN2@InternalRe
  00055	cc		 int	 3
$LN2@InternalRe:

; 2724 : 		}
; 2725 : 		return nRef;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _nRef$[ebp]

; 2726 : #else
; 2727 : 		return _ThreadModel::Decrement(&m_dwRef);
; 2728 : #endif
; 2729 : 	}

  00059	83 c4 08	 add	 esp, 8
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalRelease
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalAddRef, COMDAT
; _this$ = ecx

; 2713 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@InternalAd:

; 2714 : 		ATLASSUME(m_dwRef != -1L);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00014	75 26		 jne	 SHORT $LN2@InternalAd
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@CFNLNIPO@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AAL@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00020	6a 00		 push	 0
  00022	68 9a 0a 00 00	 push	 2714			; 00000a9aH
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  0002c	6a 02		 push	 2
  0002e	e8 00 00 00 00	 call	 __CrtDbgReportW
  00033	83 c4 18	 add	 esp, 24			; 00000018H
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 01		 jne	 SHORT $LN2@InternalAd
  0003b	cc		 int	 3
$LN2@InternalAd:
  0003c	33 d2		 xor	 edx, edx
  0003e	75 ce		 jne	 SHORT $LN4@InternalAd

; 2715 : 		return _ThreadModel::Increment(&m_dwRef);

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z ; ATL::CComSingleThreadModel::Increment

; 2716 : 	}

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::InternalAddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ PROC ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::~CComObjectRootEx<ATL::CComSingleThreadModel>, COMDAT
; _this$ = ecx

; 2710 : 	~CComObjectRootEx() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CComObjectRootBase@ATL@@QAE@XZ ; ATL::CComObjectRootBase::~CComObjectRootBase
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CComObjectRootEx<ATL::CComSingleThreadModel>::~CComObjectRootEx<ATL::CComSingleThreadModel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ PROC ; ATL::CComObjectRootBase::InternalFinalConstructRelease, COMDAT
; _this$ = ecx

; 2517 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@InternalFi:

; 2518 : 		ATLASSUME(m_dwRef == 0);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 26		 je	 SHORT $LN2@InternalFi
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MDGGGAPK@?$AAm?$AA_?$AAd?$AAw?$AAR?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00020	6a 00		 push	 0
  00022	68 d6 09 00 00	 push	 2518			; 000009d6H
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  0002c	6a 02		 push	 2
  0002e	e8 00 00 00 00	 call	 __CrtDbgReportW
  00033	83 c4 18	 add	 esp, 24			; 00000018H
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 01		 jne	 SHORT $LN2@InternalFi
  0003b	cc		 int	 3
$LN2@InternalFi:
  0003c	33 d2		 xor	 edx, edx
  0003e	75 ce		 jne	 SHORT $LN4@InternalFi

; 2519 : 	}

  00040	83 c4 04	 add	 esp, 4
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ ENDP ; ATL::CComObjectRootBase::InternalFinalConstructRelease
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ PROC ; ATL::CComObjectRootBase::InternalFinalConstructAddRef, COMDAT
; _this$ = ecx

; 2514 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2515 : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ ENDP ; ATL::CComObjectRootBase::InternalFinalConstructAddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z PROC		; ATL::CComObjectRootBase::SetVoid, COMDAT
; _this$ = ecx

; 2511 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2512 : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z ENDP		; ATL::CComObjectRootBase::SetVoid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_hRes$ = -4						; size = 4
_pThis$ = 8						; size = 4
_pEntries$ = 12						; size = 4
_iid$ = 16						; size = 4
_ppvObject$ = 20					; size = 4
?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z PROC ; ATL::CComObjectRootBase::InternalQueryInterface, COMDAT

; 2475 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2476 : 		// Only Assert here. AtlInternalQueryInterface will return the correct HRESULT if ppvObject == NULL
; 2477 : #ifndef _ATL_OLEDB_CONFORMANCE_TESTS
; 2478 : 		ATLASSERT(ppvObject != NULL);

  0000b	83 7d 14 00	 cmp	 DWORD PTR _ppvObject$[ebp], 0
  0000f	75 26		 jne	 SHORT $LN3@InternalQu
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@IINBGKAE@?$AAp?$AAp?$AAv?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001b	6a 00		 push	 0
  0001d	68 ae 09 00 00	 push	 2478			; 000009aeH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00027	6a 02		 push	 2
  00029	e8 00 00 00 00	 call	 __CrtDbgReportW
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 01		 jne	 SHORT $LN3@InternalQu
  00036	cc		 int	 3
$LN3@InternalQu:

; 2479 : #endif
; 2480 : 		ATLASSERT(pThis != NULL);

  00037	83 7d 08 00	 cmp	 DWORD PTR _pThis$[ebp], 0
  0003b	75 26		 jne	 SHORT $LN4@InternalQu
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@PEGMCOIG@?$AAp?$AAT?$AAh?$AAi?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00047	6a 00		 push	 0
  00049	68 b0 09 00 00	 push	 2480			; 000009b0H
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00053	6a 02		 push	 2
  00055	e8 00 00 00 00	 call	 __CrtDbgReportW
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 01		 jne	 SHORT $LN4@InternalQu
  00062	cc		 int	 3
$LN4@InternalQu:

; 2481 : 		// First entry in the com map should be a simple map entry
; 2482 : 		ATLASSERT(pEntries->pFunc == _ATL_SIMPLEMAPENTRY);

  00063	8b 55 0c	 mov	 edx, DWORD PTR _pEntries$[ebp]
  00066	83 7a 08 01	 cmp	 DWORD PTR [edx+8], 1
  0006a	74 26		 je	 SHORT $LN5@InternalQu
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1GE@KALDMMBC@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?9?$AA?$DO?$AAp?$AAF?$AAu?$AAn?$AAc@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00076	6a 00		 push	 0
  00078	68 b2 09 00 00	 push	 2482			; 000009b2H
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@IGOCHCBG@?$AAC?$AA?3?$AA?2?$AAD?$AAe?$AAv?$AAe?$AAl?$AAo?$AAp?$AA?2?$AAO?$AAP?$AAO?$AAS@
  00082	6a 02		 push	 2
  00084	e8 00 00 00 00	 call	 __CrtDbgReportW
  00089	83 c4 18	 add	 esp, 24			; 00000018H
  0008c	83 f8 01	 cmp	 eax, 1
  0008f	75 01		 jne	 SHORT $LN5@InternalQu
  00091	cc		 int	 3
$LN5@InternalQu:

; 2483 : 	#if defined(_ATL_DEBUG_INTERFACES) || defined(_ATL_DEBUG_QI)
; 2484 : 		LPCTSTR pszClassName = (LPCTSTR) pEntries[-1].dw;
; 2485 : 		(pszClassName);
; 2486 : 	#endif // _ATL_DEBUG_INTERFACES
; 2487 : 		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);

  00092	8b 4d 14	 mov	 ecx, DWORD PTR _ppvObject$[ebp]
  00095	51		 push	 ecx
  00096	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00099	52		 push	 edx
  0009a	8b 45 0c	 mov	 eax, DWORD PTR _pEntries$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _pThis$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ; ATL::AtlInternalQueryInterface
  000a7	89 45 fc	 mov	 DWORD PTR _hRes$[ebp], eax

; 2488 : 	#if defined(_ATL_DEBUG_INTERFACES) && !defined(_ATL_STATIC_LIB_IMPL)
; 2489 : 		_AtlDebugInterfacesModule.AddThunk((IUnknown**)ppvObject, pszClassName, iid);
; 2490 : 	#endif // _ATL_DEBUG_INTERFACES
; 2491 : 		return _ATLDUMPIID(iid, pszClassName, hRes);

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _hRes$[ebp]

; 2492 : 	}

  000ad	83 c4 04	 add	 esp, 4
  000b0	3b ec		 cmp	 ebp, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 10 00	 ret	 16			; 00000010H
?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z ENDP ; ATL::CComObjectRootBase::InternalQueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ PROC	; ATL::CComObjectRootBase::FinalRelease, COMDAT
; _this$ = ecx

; 2446 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2447 : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ ENDP	; ATL::CComObjectRootBase::FinalRelease
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ PROC	; ATL::CComObjectRootBase::_AtlFinalConstruct, COMDAT
; _this$ = ecx

; 2442 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2443 : 		return S_OK;

  0000e	33 c0		 xor	 eax, eax

; 2444 : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ ENDP	; ATL::CComObjectRootBase::_AtlFinalConstruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ PROC	; ATL::CComObjectRootBase::FinalConstruct, COMDAT
; _this$ = ecx

; 2436 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2437 : 		return S_OK;

  0000e	33 c0		 xor	 eax, eax

; 2438 : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ ENDP	; ATL::CComObjectRootBase::FinalConstruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??1CComObjectRootBase@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComObjectRootBase@ATL@@QAE@XZ PROC			; ATL::CComObjectRootBase::~CComObjectRootBase, COMDAT
; _this$ = ecx

; 2433 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2434 : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1CComObjectRootBase@ATL@@QAE@XZ ENDP			; ATL::CComObjectRootBase::~CComObjectRootBase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\ATL\atlcom.h
;	COMDAT ??0CComObjectRootBase@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComObjectRootBase@ATL@@QAE@XZ PROC			; ATL::CComObjectRootBase::CComObjectRootBase, COMDAT
; _this$ = ecx

; 2428 : 	CComObjectRootBase()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2429 : 	{
; 2430 : 		m_dwRef = 0L;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2431 : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CComObjectRootBase@ATL@@QAE@XZ ENDP			; ATL::CComObjectRootBase::CComObjectRootBase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
;	COMDAT ??1CDynamicStdCallThunk2@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDynamicStdCallThunk2@ATL@@QAE@XZ PROC		; ATL::CDynamicStdCallThunk2::~CDynamicStdCallThunk2, COMDAT
; _this$ = ecx

; 249  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 250  : 		if (pThunk)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0b		 je	 SHORT $LN1@CDynamicSt

; 251  : 		{
; 252  : #ifdef USE_ATL_THUNK2
; 253  : 			AtlThunk_FreeData(pThunk);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 _AtlThunk_FreeData@4
$LN1@CDynamicSt:

; 254  : #else
; 255  : 			delete pThunk;
; 256  : #endif
; 257  : 		}
; 258  : 	}

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1CDynamicStdCallThunk2@ATL@@QAE@XZ ENDP		; ATL::CDynamicStdCallThunk2::~CDynamicStdCallThunk2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlstdthunk.h
;	COMDAT ??0CDynamicStdCallThunk2@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDynamicStdCallThunk2@ATL@@QAE@XZ PROC		; ATL::CDynamicStdCallThunk2::CDynamicStdCallThunk2, COMDAT
; _this$ = ecx

; 236  : 	CDynamicStdCallThunk2()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : #else
; 238  : 	CDynamicStdCallThunk()
; 239  : #endif
; 240  : 	{
; 241  : 		pThunk = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 242  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CDynamicStdCallThunk2@ATL@@QAE@XZ ENDP		; ATL::CDynamicStdCallThunk2::CDynamicStdCallThunk2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC ; ATL::CComModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 4754 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4755 : 		return _AtlBaseModule.m_hInst;

  0000e	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4

; 4756 : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?GetModuleInstance@CComModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CComModule::GetModuleInstance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__F_AtlWinModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlWinModule'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  00008	e8 00 00 00 00	 call	 ??1CAtlWinModule@ATL@@QAE@XZ ; ATL::CAtlWinModule::~CAtlWinModule
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__F_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlWinModule''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlWinModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlWinModule'', COMDAT

; 2972 : __declspec(selectany) CAtlWinModule _AtlWinModule;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
  00008	e8 00 00 00 00	 call	 ??0CAtlWinModule@ATL@@QAE@XZ ; ATL::CAtlWinModule::CAtlWinModule
  0000d	68 00 00 00 00	 push	 OFFSET ??__F_AtlWinModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlWinModule''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??__E_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlWinModule''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CAtlWinModule@ATL@@QAEXXZ PROC			; ATL::CAtlWinModule::Term, COMDAT
; _this$ = ecx

; 2956 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2957 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A ; ATL::_AtlBaseModule
  00013	e8 00 00 00 00	 call	 ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
  00018	50		 push	 eax
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm

; 2958 : 	}

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?Term@CAtlWinModule@ATL@@QAEXXZ ENDP			; ATL::CAtlWinModule::Term
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::~CAtlWinModule, COMDAT
; _this$ = ecx

; 2951 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2952 : 		Term();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Term@CAtlWinModule@ATL@@QAEXXZ ; ATL::CAtlWinModule::Term

; 2953 : 	}

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??1CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::~CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
??0CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2937 : 	CAtlWinModule()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ

; 2938 : 	{
; 2939 : 		cbSize = sizeof(_ATL_WIN_MODULE);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 00 2c 00 00
	00		 mov	 DWORD PTR [eax], 44	; 0000002cH

; 2940 : 		HRESULT hr = AtlWinModuleInit(this);

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
  00031	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2941 : 		if (FAILED(hr))

  00034	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00038	7d 3a		 jge	 SHORT $LN1@CAtlWinMod

; 2942 : 		{
; 2943 : 			ATLASSERT(0);

  0003a	33 d2		 xor	 edx, edx
  0003c	75 26		 jne	 SHORT $LN4@CAtlWinMod
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_13COJANIEC@?$AA0@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00048	6a 00		 push	 0
  0004a	68 7f 0b 00 00	 push	 2943			; 00000b7fH
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00054	6a 02		 push	 2
  00056	e8 00 00 00 00	 call	 __CrtDbgReportW
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 01		 jne	 SHORT $LN4@CAtlWinMod
  00063	cc		 int	 3
$LN4@CAtlWinMod:

; 2944 : 			CAtlBaseModule::m_bInitFailed = true;

  00064	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2945 : 			cbSize = 0;

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@CAtlWinMod:

; 2946 : 			return;
; 2947 : 		}
; 2948 : 	}

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	83 c4 08	 add	 esp, 8
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__F_AtlComModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlComModule'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  00008	e8 00 00 00 00	 call	 ??1CAtlComModule@ATL@@QAE@XZ ; ATL::CAtlComModule::~CAtlComModule
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__F_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlComModule''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlComModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlComModule'', COMDAT

; 2716 : __declspec(selectany) CAtlComModule _AtlComModule;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
  00008	e8 00 00 00 00	 call	 ??0CAtlComModule@ATL@@QAE@XZ ; ATL::CAtlComModule::CAtlComModule
  0000d	68 00 00 00 00	 push	 OFFSET ??__F_AtlComModule@ATL@@YAXXZ ; ATL::`dynamic atexit destructor for '_AtlComModule''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??__E_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlComModule''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlComModule@ATL@@QAEXXZ
_TEXT	SEGMENT
_factory$1 = -16					; size = 4
_pCache$2 = -12						; size = 4
_ppEntry$3 = -8						; size = 4
_this$ = -4						; size = 4
?Term@CAtlComModule@ATL@@QAEXXZ PROC			; ATL::CAtlComModule::Term, COMDAT
; _this$ = ecx

; 2613 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2614 : 		if (cbSize == 0)

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00021	75 05		 jne	 SHORT $LN5@Term

; 2615 : 			return;

  00023	e9 88 00 00 00	 jmp	 $LN1@Term
$LN5@Term:

; 2616 : 
; 2617 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002e	89 55 f8	 mov	 DWORD PTR _ppEntry$3[ebp], edx
  00031	eb 09		 jmp	 SHORT $LN4@Term
$LN2@Term:
  00033	8b 45 f8	 mov	 eax, DWORD PTR _ppEntry$3[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 f8	 mov	 DWORD PTR _ppEntry$3[ebp], eax
$LN4@Term:
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	8b 55 f8	 mov	 edx, DWORD PTR _ppEntry$3[ebp]
  00042	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00045	73 55		 jae	 SHORT $LN3@Term

; 2618 : 		{
; 2619 : 			if (*ppEntry != NULL)

  00047	8b 45 f8	 mov	 eax, DWORD PTR _ppEntry$3[ebp]
  0004a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004d	74 4b		 je	 SHORT $LN6@Term

; 2620 : 			{
; 2621 : 				_ATL_OBJMAP_CACHE* pCache = (**ppEntry).pCache;

  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _ppEntry$3[ebp]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00057	89 45 f4	 mov	 DWORD PTR _pCache$2[ebp], eax

; 2622 : 
; 2623 : 				if (pCache->pCF != NULL)

  0005a	8b 4d f4	 mov	 ecx, DWORD PTR _pCache$2[ebp]
  0005d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00060	74 38		 je	 SHORT $LN6@Term

; 2624 : 				{
; 2625 : 					// Decode factory pointer if it's not null
; 2626 : 					IUnknown *factory = reinterpret_cast<IUnknown*>(::DecodePointer(pCache->pCF));

  00062	8b f4		 mov	 esi, esp
  00064	8b 55 f4	 mov	 edx, DWORD PTR _pCache$2[ebp]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]
  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DecodePointer@4
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 45 f0	 mov	 DWORD PTR _factory$1[ebp], eax

; 2627 : 					_Analysis_assume_(factory != nullptr);
; 2628 : 					factory->Release();

  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _factory$1[ebp]
  0007d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007f	8b f4		 mov	 esi, esp
  00081	8b 45 f0	 mov	 eax, DWORD PTR _factory$1[ebp]
  00084	50		 push	 eax
  00085	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00088	ff d1		 call	 ecx
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2629 : 					pCache->pCF = NULL;

  00091	8b 55 f4	 mov	 edx, DWORD PTR _pCache$2[ebp]
  00094	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN6@Term:

; 2630 : 				}
; 2631 : 			}
; 2632 : 		}

  0009a	eb 97		 jmp	 SHORT $LN2@Term
$LN3@Term:

; 2633 : 		m_csObjMap.Term();

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	83 c1 10	 add	 ecx, 16			; 00000010H
  000a2	e8 00 00 00 00	 call	 ?Term@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Term

; 2634 : 		// Set to 0 to indicate that this function has been called
; 2635 : 		// At this point no one should be concerned about cbsize
; 2636 : 		// having the correct value
; 2637 : 		cbSize = 0;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Term:

; 2638 : 	}

  000b0	5e		 pop	 esi
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?Term@CAtlComModule@ATL@@QAEXXZ ENDP			; ATL::CAtlComModule::Term
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??1CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::~CAtlComModule, COMDAT
; _this$ = ecx

; 2607 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2608 : 		Term();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Term@CAtlComModule@ATL@@QAEXXZ ; ATL::CAtlComModule::Term

; 2609 : 	}

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??1_ATL_COM_MODULE70@ATL@@QAE@XZ
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??1CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::~CAtlComModule
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
??0CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::CAtlComModule, COMDAT
; _this$ = ecx

; 2586 : 	CAtlComModule() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0_ATL_COM_MODULE70@ATL@@QAE@XZ

; 2587 : 	{
; 2588 : 		cbSize = 0;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2589 : 
; 2590 : 		m_hInstTypeLib = reinterpret_cast<HINSTANCE>(&__ImageBase);

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ___ImageBase

; 2591 : 
; 2592 : 		m_ppAutoObjMapFirst = &__pobjMapEntryFirst + 1;

  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	c7 42 08 04 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ___pobjMapEntryFirst+4

; 2593 : 		m_ppAutoObjMapLast = &__pobjMapEntryLast;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET ___pobjMapEntryLast

; 2594 : 
; 2595 : 		if (FAILED(m_csObjMap.Init()))

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	e8 00 00 00 00	 call	 ?Init@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Init
  00058	85 c0		 test	 eax, eax
  0005a	7d 60		 jge	 SHORT $LN2@CAtlComMod

; 2596 : 		{
; 2597 : 			ATLTRACE(atlTraceCOM, 0, _T("ERROR : Unable to initialize critical section in CAtlComModule\n"));

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1IA@KEEOONGN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@
  00061	6a 00		 push	 0
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
  00068	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$01$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<2,0>::operator unsigned int
  0006d	50		 push	 eax
  0006e	68 25 0a 00 00	 push	 2597			; 00000a25H
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@KEBNGHII@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00078	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0007b	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00086	83 c4 10	 add	 esp, 16			; 00000010H

; 2598 : 			ATLASSERT(0);

  00089	33 c9		 xor	 ecx, ecx
  0008b	75 26		 jne	 SHORT $LN4@CAtlComMod
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_13COJANIEC@?$AA0@
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00097	6a 00		 push	 0
  00099	68 26 0a 00 00	 push	 2598			; 00000a26H
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a3	6a 02		 push	 2
  000a5	e8 00 00 00 00	 call	 __CrtDbgReportW
  000aa	83 c4 18	 add	 esp, 24			; 00000018H
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	75 01		 jne	 SHORT $LN4@CAtlComMod
  000b2	cc		 int	 3
$LN4@CAtlComMod:

; 2599 : 			CAtlBaseModule::m_bInitFailed = true;

  000b3	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2600 : 			return;

  000ba	eb 09		 jmp	 SHORT $LN1@CAtlComMod
$LN2@CAtlComMod:

; 2601 : 		}
; 2602 : 		// Set cbSize on success.
; 2603 : 		cbSize = sizeof(_ATL_COM_MODULE);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	c7 00 28 00 00
	00		 mov	 DWORD PTR [eax], 40	; 00000028H
$LN1@CAtlComMod:

; 2604 : 	}

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
??0CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::CAtlComModule
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z
_TEXT	SEGMENT
tv76 = -4						; size = 4
_rguid1$ = 8						; size = 4
?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z PROC		; ATL::InlineIsEqualUnknown, COMDAT

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 667  :    return (

  0000b	b8 04 00 00 00	 mov	 eax, 4
  00010	6b c8 00	 imul	 ecx, eax, 0
  00013	8b 55 08	 mov	 edx, DWORD PTR _rguid1$[ebp]
  00016	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  0001a	75 41		 jne	 SHORT $LN3@InlineIsEq
  0001c	b8 04 00 00 00	 mov	 eax, 4
  00021	c1 e0 00	 shl	 eax, 0
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00027	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  0002b	75 30		 jne	 SHORT $LN3@InlineIsEq
  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	d1 e2		 shl	 edx, 1
  00034	8b 45 08	 mov	 eax, DWORD PTR _rguid1$[ebp]
  00037	81 3c 10 c0 00
	00 00		 cmp	 DWORD PTR [eax+edx], 192 ; 000000c0H
  0003e	75 1d		 jne	 SHORT $LN3@InlineIsEq
  00040	b9 04 00 00 00	 mov	 ecx, 4
  00045	6b d1 03	 imul	 edx, ecx, 3
  00048	8b 45 08	 mov	 eax, DWORD PTR _rguid1$[ebp]
  0004b	81 3c 10 00 00
	00 46		 cmp	 DWORD PTR [eax+edx], 1174405120 ; 46000000H
  00052	75 09		 jne	 SHORT $LN3@InlineIsEq
  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0005b	eb 07		 jmp	 SHORT $LN4@InlineIsEq
$LN3@InlineIsEq:
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@InlineIsEq:
  00064	8b 45 fc	 mov	 eax, DWORD PTR tv76[ebp]

; 668  : 	  ((PLONG) &rguid1)[0] == 0 &&
; 669  : 	  ((PLONG) &rguid1)[1] == 0 &&
; 670  : #ifdef _ATL_BYTESWAP
; 671  : 	  ((PLONG) &rguid1)[2] == 0xC0000000 &&
; 672  : 	  ((PLONG) &rguid1)[3] == 0x00000046);
; 673  : #else
; 674  : 	  ((PLONG) &rguid1)[2] == 0x000000C0 &&
; 675  : 	  ((PLONG) &rguid1)[3] == 0x46000000);
; 676  : #endif
; 677  : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z ENDP		; ATL::InlineIsEqualUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_pWinModule$ = 8					; size = 4
_hInst$ = 12						; size = 4
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z PROC ; ATL::AtlWinModuleTerm, COMDAT

; 7652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 7653 : 	if (pWinModule == NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pWinModule$[ebp], 0
  00010	75 0a		 jne	 SHORT $LN5@AtlWinModu

; 7654 : 		return E_INVALIDARG;

  00012	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00017	e9 86 00 00 00	 jmp	 $LN1@AtlWinModu
$LN5@AtlWinModu:

; 7655 : 	if (pWinModule->cbSize == 0)

  0001c	8b 45 08	 mov	 eax, DWORD PTR _pWinModule$[ebp]
  0001f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00022	75 04		 jne	 SHORT $LN6@AtlWinModu

; 7656 : 		return S_OK;

  00024	33 c0		 xor	 eax, eax
  00026	eb 7a		 jmp	 SHORT $LN1@AtlWinModu
$LN6@AtlWinModu:

; 7657 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0002b	83 39 2c	 cmp	 DWORD PTR [ecx], 44	; 0000002cH
  0002e	74 07		 je	 SHORT $LN7@AtlWinModu

; 7658 : 		return E_INVALIDARG;

  00030	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00035	eb 6b		 jmp	 SHORT $LN1@AtlWinModu
$LN7@AtlWinModu:

; 7659 : 
; 7660 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0003e	eb 09		 jmp	 SHORT $LN4@AtlWinModu
$LN2@AtlWinModu:
  00040	8b 55 fc	 mov	 edx, DWORD PTR _i$1[ebp]
  00043	83 c2 01	 add	 edx, 1
  00046	89 55 fc	 mov	 DWORD PTR _i$1[ebp], edx
$LN4@AtlWinModu:
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0004c	83 c1 20	 add	 ecx, 32			; 00000020H
  0004f	e8 00 00 00 00	 call	 ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
  00054	39 45 fc	 cmp	 DWORD PTR _i$1[ebp], eax
  00057	7d 28		 jge	 SHORT $LN3@AtlWinModu

; 7661 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

  00059	8b f4		 mov	 esi, esp
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _hInst$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00062	51		 push	 ecx
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  00066	83 c1 20	 add	 ecx, 32			; 00000020H
  00069	e8 00 00 00 00	 call	 ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
  0006e	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassW@8
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	eb bf		 jmp	 SHORT $LN2@AtlWinModu
$LN3@AtlWinModu:

; 7662 : 	pWinModule->m_rgWindowClassAtoms.RemoveAll();

  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  00084	83 c1 20	 add	 ecx, 32			; 00000020H
  00087	e8 00 00 00 00	 call	 ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 7663 : 	pWinModule->m_csWindowCreate.Term();

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0008f	83 c1 04	 add	 ecx, 4
  00092	e8 00 00 00 00	 call	 ?Term@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Term

; 7664 : 	pWinModule->cbSize = 0;

  00097	8b 45 08	 mov	 eax, DWORD PTR _pWinModule$[ebp]
  0009a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 7665 : 	return S_OK;

  000a0	33 c0		 xor	 eax, eax
$LN1@AtlWinModu:

; 7666 : }

  000a2	5e		 pop	 esi
  000a3	83 c4 04	 add	 esp, 4
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_hr$ = -4						; size = 4
_pWinModule$ = 8					; size = 4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z PROC ; ATL::AtlWinModuleInit, COMDAT

; 8396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 8397 : 	if (pWinModule == NULL)

  0001b	83 7d 08 00	 cmp	 DWORD PTR _pWinModule$[ebp], 0
  0001f	75 0a		 jne	 SHORT $LN2@AtlWinModu

; 8398 : 		return E_INVALIDARG;

  00021	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00026	e9 87 00 00 00	 jmp	 $LN1@AtlWinModu
$LN2@AtlWinModu:

; 8399 : 
; 8400 : 	// check only in the DLL
; 8401 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

  0002b	8b 45 08	 mov	 eax, DWORD PTR _pWinModule$[ebp]
  0002e	83 38 2c	 cmp	 DWORD PTR [eax], 44	; 0000002cH
  00031	74 07		 je	 SHORT $LN3@AtlWinModu

; 8402 : 		return E_INVALIDARG;

  00033	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00038	eb 78		 jmp	 SHORT $LN1@AtlWinModu
$LN3@AtlWinModu:

; 8403 : 
; 8404 : 	pWinModule->m_pCreateWndList = NULL;

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  0003d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 8405 : 
; 8406 : 	HRESULT hr = pWinModule->m_csWindowCreate.Init();

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _pWinModule$[ebp]
  00047	83 c1 04	 add	 ecx, 4
  0004a	e8 00 00 00 00	 call	 ?Init@CComCriticalSection@ATL@@QAEJXZ ; ATL::CComCriticalSection::Init
  0004f	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8407 : 	if (FAILED(hr))

  00052	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00056	7d 57		 jge	 SHORT $LN4@AtlWinModu

; 8408 : 	{
; 8409 : 		ATLTRACE(atlTraceWindowing, 0, _T("ERROR : Unable to initialize critical section in AtlWinModuleInit\n"));

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_1IG@OPJAFKJH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5@
  0005d	6a 00		 push	 0
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
  00064	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<32,0>::operator unsigned int
  00069	50		 push	 eax
  0006a	68 d9 20 00 00	 push	 8409			; 000020d9H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@KEBNGHII@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00074	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00077	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00082	83 c4 10	 add	 esp, 16			; 00000010H

; 8410 : 		ATLASSERT(0);

  00085	33 d2		 xor	 edx, edx
  00087	75 26		 jne	 SHORT $LN4@AtlWinModu
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_13COJANIEC@?$AA0@
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00093	6a 00		 push	 0
  00095	68 da 20 00 00	 push	 8410			; 000020daH
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009f	6a 02		 push	 2
  000a1	e8 00 00 00 00	 call	 __CrtDbgReportW
  000a6	83 c4 18	 add	 esp, 24			; 00000018H
  000a9	83 f8 01	 cmp	 eax, 1
  000ac	75 01		 jne	 SHORT $LN4@AtlWinModu
  000ae	cc		 int	 3
$LN4@AtlWinModu:

; 8411 : 	}
; 8412 : 	return hr;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$LN1@AtlWinModu:

; 8413 : }

  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ENDP ; ATL::AtlWinModuleInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv143 = -20						; size = 4
_pUnk$1 = -16						; size = 4
_bBlind$2 = -12						; size = 4
_hRes$ = -8						; size = 4
_pUnk$3 = -4						; size = 4
_pThis$ = 8						; size = 4
_pEntries$ = 12						; size = 4
_iid$ = 16						; size = 4
_ppvObject$ = 20					; size = 4
?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z PROC ; ATL::AtlInternalQueryInterface, COMDAT

; 8265 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 8266 : 	ATLASSERT(pThis != NULL);

  0001b	83 7d 08 00	 cmp	 DWORD PTR _pThis$[ebp], 0
  0001f	75 26		 jne	 SHORT $LN16@AtlInterna
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@PEGMCOIG@?$AAp?$AAT?$AAh?$AAi?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0002b	6a 00		 push	 0
  0002d	68 4a 20 00 00	 push	 8266			; 0000204aH
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00037	6a 02		 push	 2
  00039	e8 00 00 00 00	 call	 __CrtDbgReportW
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
  00041	83 f8 01	 cmp	 eax, 1
  00044	75 01		 jne	 SHORT $LN16@AtlInterna
  00046	cc		 int	 3
$LN16@AtlInterna:

; 8267 : 	ATLASSERT(pEntries!= NULL);

  00047	83 7d 0c 00	 cmp	 DWORD PTR _pEntries$[ebp], 0
  0004b	75 26		 jne	 SHORT $LN17@AtlInterna
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@ENABKMAI@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00057	6a 00		 push	 0
  00059	68 4b 20 00 00	 push	 8267			; 0000204bH
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00063	6a 02		 push	 2
  00065	e8 00 00 00 00	 call	 __CrtDbgReportW
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 01		 jne	 SHORT $LN17@AtlInterna
  00072	cc		 int	 3
$LN17@AtlInterna:

; 8268 : 
; 8269 : 	if(pThis == NULL || pEntries == NULL)

  00073	83 7d 08 00	 cmp	 DWORD PTR _pThis$[ebp], 0
  00077	74 06		 je	 SHORT $LN6@AtlInterna
  00079	83 7d 0c 00	 cmp	 DWORD PTR _pEntries$[ebp], 0
  0007d	75 0a		 jne	 SHORT $LN5@AtlInterna
$LN6@AtlInterna:

; 8270 : 		return E_INVALIDARG;

  0007f	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00084	e9 90 01 00 00	 jmp	 $LN1@AtlInterna
$LN5@AtlInterna:

; 8271 : 
; 8272 : 	// First entry in the com map should be a simple map entry
; 8273 : 	ATLASSERT(pEntries->pFunc == _ATL_SIMPLEMAPENTRY);

  00089	8b 55 0c	 mov	 edx, DWORD PTR _pEntries$[ebp]
  0008c	83 7a 08 01	 cmp	 DWORD PTR [edx+8], 1
  00090	74 26		 je	 SHORT $LN18@AtlInterna
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_1GE@KALDMMBC@?$AAp?$AAE?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?9?$AA?$DO?$AAp?$AAF?$AAu?$AAn?$AAc@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0009c	6a 00		 push	 0
  0009e	68 51 20 00 00	 push	 8273			; 00002051H
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a8	6a 02		 push	 2
  000aa	e8 00 00 00 00	 call	 __CrtDbgReportW
  000af	83 c4 18	 add	 esp, 24			; 00000018H
  000b2	83 f8 01	 cmp	 eax, 1
  000b5	75 01		 jne	 SHORT $LN18@AtlInterna
  000b7	cc		 int	 3
$LN18@AtlInterna:

; 8274 : 
; 8275 : 	if (ppvObject == NULL)

  000b8	83 7d 14 00	 cmp	 DWORD PTR _ppvObject$[ebp], 0
  000bc	75 0a		 jne	 SHORT $LN7@AtlInterna

; 8276 : 		return E_POINTER;

  000be	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  000c3	e9 51 01 00 00	 jmp	 $LN1@AtlInterna
$LN7@AtlInterna:

; 8277 : 
; 8278 : 	if (InlineIsEqualUnknown(iid)) // use first interface

  000c8	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ?InlineIsEqualUnknown@ATL@@YGHABU_GUID@@@Z ; ATL::InlineIsEqualUnknown
  000d1	85 c0		 test	 eax, eax
  000d3	74 32		 je	 SHORT $LN8@AtlInterna

; 8279 : 	{
; 8280 : 		IUnknown* pUnk = (IUnknown*)((INT_PTR)pThis+pEntries->dw);

  000d5	8b 55 0c	 mov	 edx, DWORD PTR _pEntries$[ebp]
  000d8	8b 45 08	 mov	 eax, DWORD PTR _pThis$[ebp]
  000db	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000de	89 45 fc	 mov	 DWORD PTR _pUnk$3[ebp], eax

; 8281 : 		pUnk->AddRef();

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _pUnk$3[ebp]
  000e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e6	8b f4		 mov	 esi, esp
  000e8	8b 45 fc	 mov	 eax, DWORD PTR _pUnk$3[ebp]
  000eb	50		 push	 eax
  000ec	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ef	ff d1		 call	 ecx
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 8282 : 		*ppvObject = pUnk;

  000f8	8b 55 14	 mov	 edx, DWORD PTR _ppvObject$[ebp]
  000fb	8b 45 fc	 mov	 eax, DWORD PTR _pUnk$3[ebp]
  000fe	89 02		 mov	 DWORD PTR [edx], eax

; 8283 : 		return S_OK;

  00100	33 c0		 xor	 eax, eax
  00102	e9 12 01 00 00	 jmp	 $LN1@AtlInterna
$LN8@AtlInterna:

; 8284 : 	}

  00107	eb 09		 jmp	 SHORT $LN4@AtlInterna
$LN2@AtlInterna:

; 8285 : 
; 8286 : 	HRESULT hRes;
; 8287 : 
; 8288 : 	for (;; pEntries++)

  00109	8b 4d 0c	 mov	 ecx, DWORD PTR _pEntries$[ebp]
  0010c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0010f	89 4d 0c	 mov	 DWORD PTR _pEntries$[ebp], ecx
$LN4@AtlInterna:

; 8289 : 	{
; 8290 : 		if (pEntries->pFunc == NULL)

  00112	8b 55 0c	 mov	 edx, DWORD PTR _pEntries$[ebp]
  00115	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00119	75 0c		 jne	 SHORT $LN9@AtlInterna

; 8291 : 		{
; 8292 : 			hRes = E_NOINTERFACE;

  0011b	c7 45 f8 02 40
	00 80		 mov	 DWORD PTR _hRes$[ebp], -2147467262 ; 80004002H

; 8293 : 			break;

  00122	e9 e6 00 00 00	 jmp	 $LN3@AtlInterna
$LN9@AtlInterna:

; 8294 : 		}
; 8295 : 
; 8296 : 		BOOL bBlind = (pEntries->piid == NULL);

  00127	8b 45 0c	 mov	 eax, DWORD PTR _pEntries$[ebp]
  0012a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0012d	75 09		 jne	 SHORT $LN19@AtlInterna
  0012f	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv143[ebp], 1
  00136	eb 07		 jmp	 SHORT $LN20@AtlInterna
$LN19@AtlInterna:
  00138	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN20@AtlInterna:
  0013f	8b 4d ec	 mov	 ecx, DWORD PTR tv143[ebp]
  00142	89 4d f4	 mov	 DWORD PTR _bBlind$2[ebp], ecx

; 8297 : 		if (bBlind || InlineIsEqualGUID(*(pEntries->piid), iid))

  00145	83 7d f4 00	 cmp	 DWORD PTR _bBlind$2[ebp], 0
  00149	75 1a		 jne	 SHORT $LN11@AtlInterna
  0014b	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0014e	52		 push	 edx
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _pEntries$[ebp]
  00152	8b 08		 mov	 ecx, DWORD PTR [eax]
  00154	51		 push	 ecx
  00155	e8 00 00 00 00	 call	 _InlineIsEqualGUID
  0015a	83 c4 08	 add	 esp, 8
  0015d	85 c0		 test	 eax, eax
  0015f	0f 84 a3 00 00
	00		 je	 $LN10@AtlInterna
$LN11@AtlInterna:

; 8298 : 		{
; 8299 : 			if (pEntries->pFunc == _ATL_SIMPLEMAPENTRY) //offset

  00165	8b 55 0c	 mov	 edx, DWORD PTR _pEntries$[ebp]
  00168	83 7a 08 01	 cmp	 DWORD PTR [edx+8], 1
  0016c	75 5b		 jne	 SHORT $LN12@AtlInterna

; 8300 : 			{
; 8301 : 				ATLASSERT(!bBlind);

  0016e	83 7d f4 00	 cmp	 DWORD PTR _bBlind$2[ebp], 0
  00172	74 26		 je	 SHORT $LN21@AtlInterna
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@JJDNGNLN@?$AA?$CB?$AAb?$AAB?$AAl?$AAi?$AAn?$AAd@
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0017e	6a 00		 push	 0
  00180	68 6d 20 00 00	 push	 8301			; 0000206dH
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@CIBKFAMP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0018a	6a 02		 push	 2
  0018c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00191	83 c4 18	 add	 esp, 24			; 00000018H
  00194	83 f8 01	 cmp	 eax, 1
  00197	75 01		 jne	 SHORT $LN21@AtlInterna
  00199	cc		 int	 3
$LN21@AtlInterna:

; 8302 : 				IUnknown* pUnk = (IUnknown*)((INT_PTR)pThis+pEntries->dw);

  0019a	8b 4d 0c	 mov	 ecx, DWORD PTR _pEntries$[ebp]
  0019d	8b 55 08	 mov	 edx, DWORD PTR _pThis$[ebp]
  001a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a3	89 55 f0	 mov	 DWORD PTR _pUnk$1[ebp], edx

; 8303 : 				pUnk->AddRef();

  001a6	8b 45 f0	 mov	 eax, DWORD PTR _pUnk$1[ebp]
  001a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ab	8b f4		 mov	 esi, esp
  001ad	8b 55 f0	 mov	 edx, DWORD PTR _pUnk$1[ebp]
  001b0	52		 push	 edx
  001b1	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001b4	ff d0		 call	 eax
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 8304 : 				*ppvObject = pUnk;

  001bd	8b 4d 14	 mov	 ecx, DWORD PTR _ppvObject$[ebp]
  001c0	8b 55 f0	 mov	 edx, DWORD PTR _pUnk$1[ebp]
  001c3	89 11		 mov	 DWORD PTR [ecx], edx

; 8305 : 				return S_OK;

  001c5	33 c0		 xor	 eax, eax
  001c7	eb 50		 jmp	 SHORT $LN1@AtlInterna
$LN12@AtlInterna:

; 8306 : 			}
; 8307 : 
; 8308 : 			// Actual function call
; 8309 : 
; 8310 : 			hRes = pEntries->pFunc(pThis,

  001c9	8b f4		 mov	 esi, esp
  001cb	8b 45 0c	 mov	 eax, DWORD PTR _pEntries$[ebp]
  001ce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d1	51		 push	 ecx
  001d2	8b 55 14	 mov	 edx, DWORD PTR _ppvObject$[ebp]
  001d5	52		 push	 edx
  001d6	8b 45 10	 mov	 eax, DWORD PTR _iid$[ebp]
  001d9	50		 push	 eax
  001da	8b 4d 08	 mov	 ecx, DWORD PTR _pThis$[ebp]
  001dd	51		 push	 ecx
  001de	8b 55 0c	 mov	 edx, DWORD PTR _pEntries$[ebp]
  001e1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e4	ff d0		 call	 eax
  001e6	3b f4		 cmp	 esi, esp
  001e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ed	89 45 f8	 mov	 DWORD PTR _hRes$[ebp], eax

; 8311 : 				iid, ppvObject, pEntries->dw);
; 8312 : 			if (hRes == S_OK)

  001f0	83 7d f8 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  001f4	75 04		 jne	 SHORT $LN13@AtlInterna

; 8313 : 				return S_OK;

  001f6	33 c0		 xor	 eax, eax
  001f8	eb 1f		 jmp	 SHORT $LN1@AtlInterna
$LN13@AtlInterna:

; 8314 : 			if (!bBlind && FAILED(hRes))

  001fa	83 7d f4 00	 cmp	 DWORD PTR _bBlind$2[ebp], 0
  001fe	75 08		 jne	 SHORT $LN10@AtlInterna
  00200	83 7d f8 00	 cmp	 DWORD PTR _hRes$[ebp], 0
  00204	7d 02		 jge	 SHORT $LN10@AtlInterna

; 8315 : 				break;

  00206	eb 05		 jmp	 SHORT $LN3@AtlInterna
$LN10@AtlInterna:

; 8316 : 		}
; 8317 : 	}

  00208	e9 fc fe ff ff	 jmp	 $LN2@AtlInterna
$LN3@AtlInterna:

; 8318 : 
; 8319 : 	*ppvObject = NULL;

  0020d	8b 4d 14	 mov	 ecx, DWORD PTR _ppvObject$[ebp]
  00210	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 8320 : 
; 8321 : 	return hRes;

  00216	8b 45 f8	 mov	 eax, DWORD PTR _hRes$[ebp]
$LN1@AtlInterna:

; 8322 : }

  00219	5e		 pop	 esi
  0021a	83 c4 14	 add	 esp, 20			; 00000014H
  0021d	3b ec		 cmp	 ebp, esp
  0021f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c2 10 00	 ret	 16			; 00000010H
?AtlInternalQueryInterface@ATL@@YGJPAXPBU_ATL_INTMAP_ENTRY@1@ABU_GUID@@PAPAX@Z ENDP ; ATL::AtlInternalQueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 20	 add	 ecx, 32			; 00000020H
  00014	e8 00 00 00 00	 call	 ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 04	 add	 ecx, 4
  0001f	e8 00 00 00 00	 call	 ??1CComCriticalSection@ATL@@QAE@XZ ; ATL::CComCriticalSection::~CComCriticalSection
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ??0CComCriticalSection@ATL@@QAE@XZ ; ATL::CComCriticalSection::CComCriticalSection
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 20	 add	 ecx, 32			; 00000020H
  0001f	e8 00 00 00 00	 call	 ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 236  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00012	7c 0b		 jl	 SHORT $LN5@operator
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001d	7c 26		 jl	 SHORT $LN6@operator
$LN5@operator:
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00029	6a 00		 push	 0
  0002b	68 ed 00 00 00	 push	 237			; 000000edH
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_1OK@FGCLCILL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00035	6a 02		 push	 2
  00037	e8 00 00 00 00	 call	 __CrtDbgReportW
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	83 f8 01	 cmp	 eax, 1
  00042	75 01		 jne	 SHORT $LN6@operator
  00044	cc		 int	 3
$LN6@operator:

; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

  00045	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00049	7c 0b		 jl	 SHORT $LN3@operator
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00051	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00054	7c 0c		 jl	 SHORT $LN2@operator
$LN3@operator:

; 239  : 		{
; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

  00056	6a 01		 push	 1
  00058	68 8c 00 00 c0	 push	 -1073741684		; c000008cH
  0005d	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
$LN2@operator:

; 241  : 		}
; 242  : 		return m_aT[nIndex];

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 02		 mov	 eax, DWORD PTR [edx]
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0006a	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
$LN4@operator:

; 243  : 	}

  0006d	83 c4 04	 add	 esp, 4
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 215  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 216  : 		if(m_aT != NULL)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 36		 je	 SHORT $LN5@RemoveAll

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00026	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002b	83 c1 01	 add	 ecx, 1
  0002e	89 4d f8	 mov	 DWORD PTR _i$1[ebp], ecx
$LN4@RemoveAll:
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00037	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0003a	7d 02		 jge	 SHORT $LN3@RemoveAll

; 219  : 				m_aT[i].~T();

  0003c	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 220  : 			free(m_aT);

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _free
  00049	83 c4 04	 add	 esp, 4

; 221  : 			m_aT = NULL;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN5@RemoveAll:

; 222  : 		}
; 223  : 		m_nSize = 0;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 224  : 		m_nAllocSize = 0;

  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 225  :     }

  00069	83 c4 08	 add	 esp, 8
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize, COMDAT
; _this$ = ecx

; 160  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 		return m_nSize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 162  : 	}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 311  : 	RemoveAll();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 312  : }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlsimpcoll.h
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 120  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 121  : 	}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_ATL_COM_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 10	 add	 ecx, 16			; 00000010H
  00014	e8 00 00 00 00	 call	 ??1CComCriticalSection@ATL@@QAE@XZ ; ATL::CComCriticalSection::~CComCriticalSection
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1_ATL_COM_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_COM_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 10	 add	 ecx, 16			; 00000010H
  00014	e8 00 00 00 00	 call	 ??0CComCriticalSection@ATL@@QAE@XZ ; ATL::CComCriticalSection::CComCriticalSection
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0_ATL_COM_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z PROC	; ATL::CComSingleThreadModel::Decrement, COMDAT

; 443  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 444  : 		return --(*p);

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	83 e9 01	 sub	 ecx, 1
  0000b	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0000e	89 0a		 mov	 DWORD PTR [edx], ecx
  00010	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 445  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z ENDP	; ATL::CComSingleThreadModel::Decrement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlbase.h
;	COMDAT ?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z PROC	; ATL::CComSingleThreadModel::Increment, COMDAT

; 439  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 440  : 		return ++(*p);

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	83 c1 01	 add	 ecx, 1
  0000b	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0000e	89 0a		 mov	 DWORD PTR [edx], ecx
  00010	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 441  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z ENDP	; ATL::CComSingleThreadModel::Increment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1673 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1674 :     ::SysFreeString(m_str);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1675 : }

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IUnknown>::~CComPtr<IUnknown>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IUnknown>::~CComPtrBase<IUnknown>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IUnknown>::~CComPtr<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z PROC ; ATL::CComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx

; 328  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  :         if(this->p!=lp)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	3b 4d 08	 cmp	 ecx, DWORD PTR _lp$[ebp]
  0001f	74 1f		 je	 SHORT $LN2@operator

; 330  :         {
; 331  :             CComPtr(lp).Swap(*this);

  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _lp$[ebp]
  00028	50		 push	 eax
  00029	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ?Swap@?$CComPtrBase@UIUnknown@@@ATL@@IAEXAAV12@@Z ; ATL::CComPtrBase<IUnknown>::Swap
  00038	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0003b	e8 00 00 00 00	 call	 ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
$LN2@operator:

; 332  :         }
; 333  :         return *this;

  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ; ATL::CComPtrBase<IUnknown>::operator IUnknown *

; 334  :     }

  00048	83 c4 08	 add	 esp, 8
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z ENDP ; ATL::CComPtr<IUnknown>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CComPtr@UIUnknown@@@ATL@@QAE@ABV01@@Z PROC		; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>, COMDAT
; _this$ = ecx

; 325  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  :         CComPtrBase<T>(lp.p)

  0000e	8b 45 08	 mov	 eax, DWORD PTR _lp$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z ; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>

; 326  :     }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CComPtr@UIUnknown@@@ATL@@QAE@ABV01@@Z ENDP		; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z PROC	; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>, COMDAT
; _this$ = ecx

; 321  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 320  :         CComPtrBase<T>(lp)

  0000e	8b 45 08	 mov	 eax, DWORD PTR _lp$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z ; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>

; 322  :     }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z ENDP	; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>, COMDAT
; _this$ = ecx

; 316  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>

; 318  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IUnknown>::CComPtr<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ PROC ; ATL::CComPtrBase<IUnknown>::operator IUnknown *, COMDAT
; _this$ = ecx

; 187  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         return p;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 189  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ ENDP ; ATL::CComPtrBase<IUnknown>::operator IUnknown *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ PROC		; ATL::CComPtrBase<IUnknown>::~CComPtrBase<IUnknown>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ ENDP		; ATL::CComPtrBase<IUnknown>::~CComPtrBase<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ?Swap@?$CComPtrBase@UIUnknown@@@ATL@@IAEXAAV12@@Z
_TEXT	SEGMENT
_pTemp$ = -8						; size = 4
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?Swap@?$CComPtrBase@UIUnknown@@@ATL@@IAEXAAV12@@Z PROC	; ATL::CComPtrBase<IUnknown>::Swap, COMDAT
; _this$ = ecx

; 174  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 175  :         T* pTemp = p;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR _pTemp$[ebp], ecx

; 176  :         p = other.p;

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	89 0a		 mov	 DWORD PTR [edx], ecx

; 177  :         other.p = pTemp;

  00029	8b 55 08	 mov	 edx, DWORD PTR _other$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _pTemp$[ebp]
  0002f	89 02		 mov	 DWORD PTR [edx], eax

; 178  :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?Swap@?$CComPtrBase@UIUnknown@@@ATL@@IAEXAAV12@@Z ENDP	; ATL::CComPtrBase<IUnknown>::Swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z PROC ; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>, COMDAT
; _this$ = ecx

; 167  :     CComPtrBase(_Inout_opt_ T* lp) throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 168  :     {
; 169  :         p = lp;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _lp$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 170  :         if (p != NULL)

  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0001d	74 1b		 je	 SHORT $LN1@CComPtrBas

; 171  :             p->AddRef();

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002b	8b f4		 mov	 esi, esp
  0002d	50		 push	 eax
  0002e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00031	ff d2		 call	 edx
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 172  :     }

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	5e		 pop	 esi
  0003e	83 c4 04	 add	 esp, 4
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z ENDP ; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ PROC		; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ ENDP		; ATL::CComPtrBase<IUnknown>::CComPtrBase<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CComPtr@UIDispatch@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtr@UIDispatch@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IDispatch>::~CComPtr<IDispatch>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CComPtrBase@UIDispatch@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IDispatch>::~CComPtrBase<IDispatch>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CComPtr@UIDispatch@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IDispatch>::~CComPtr<IDispatch>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIDispatch@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtr@UIDispatch@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IDispatch>::CComPtr<IDispatch>, COMDAT
; _this$ = ecx

; 373  :     CComPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :     {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@XZ ; ATL::CComPtrBase<IDispatch>::CComPtrBase<IDispatch>

; 375  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CComPtr@UIDispatch@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IDispatch>::CComPtr<IDispatch>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIDispatch@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CComPtrBase@UIDispatch@@@ATL@@QAE@XZ PROC		; ATL::CComPtrBase<IDispatch>::~CComPtrBase<IDispatch>, COMDAT
; _this$ = ecx

; 182  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :         if (p)

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 1b		 je	 SHORT $LN1@CComPtrBas

; 184  :             p->Release();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@CComPtrBas:

; 185  :     }

  00032	5e		 pop	 esi
  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$CComPtrBase@UIDispatch@@@ATL@@QAE@XZ ENDP		; ATL::CComPtrBase<IDispatch>::~CComPtrBase<IDispatch>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@XZ PROC		; ATL::CComPtrBase<IDispatch>::CComPtrBase<IDispatch>, COMDAT
; _this$ = ecx

; 163  :     CComPtrBase() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     {
; 165  :         p = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 166  :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CComPtrBase@UIDispatch@@@ATL@@IAE@XZ ENDP		; ATL::CComPtrBase<IDispatch>::CComPtrBase<IDispatch>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IQuickActivate@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IQuickActivate@@QAE@XZ PROC				; IQuickActivate::IQuickActivate, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IQuickActivate@@QAE@XZ ENDP				; IQuickActivate::IQuickActivate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IViewObjectEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IViewObjectEx@@QAE@XZ PROC				; IViewObjectEx::IViewObjectEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IViewObject2@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IViewObjectEx@@QAE@XZ ENDP				; IViewObjectEx::IViewObjectEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOleInPlaceObjectWindowless@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOleInPlaceObjectWindowless@@QAE@XZ PROC		; IOleInPlaceObjectWindowless::IOleInPlaceObjectWindowless, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleInPlaceObject@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOleInPlaceObjectWindowless@@QAE@XZ ENDP		; IOleInPlaceObjectWindowless::IOleInPlaceObjectWindowless
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IPersistStreamInit@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPersistStreamInit@@QAE@XZ PROC			; IPersistStreamInit::IPersistStreamInit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IPersistStreamInit@@QAE@XZ ENDP			; IPersistStreamInit::IPersistStreamInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ISpecifyPropertyPages@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISpecifyPropertyPages@@QAE@XZ PROC			; ISpecifyPropertyPages::ISpecifyPropertyPages, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0ISpecifyPropertyPages@@QAE@XZ ENDP			; ISpecifyPropertyPages::ISpecifyPropertyPages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOleControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOleControl@@QAE@XZ PROC				; IOleControl::IOleControl, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOleControl@@QAE@XZ ENDP				; IOleControl::IOleControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IProvideClassInfo2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IProvideClassInfo2@@QAE@XZ PROC			; IProvideClassInfo2::IProvideClassInfo2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IProvideClassInfo@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IProvideClassInfo2@@QAE@XZ ENDP			; IProvideClassInfo2::IProvideClassInfo2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IProvideClassInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IProvideClassInfo@@QAE@XZ PROC			; IProvideClassInfo::IProvideClassInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IProvideClassInfo@@QAE@XZ ENDP			; IProvideClassInfo::IProvideClassInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IConnectionPointContainer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IConnectionPointContainer@@QAE@XZ PROC		; IConnectionPointContainer::IConnectionPointContainer, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IConnectionPointContainer@@QAE@XZ ENDP		; IConnectionPointContainer::IConnectionPointContainer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IEnumConnections@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IEnumConnections@@QAE@XZ PROC			; IEnumConnections::IEnumConnections, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IEnumConnections@@QAE@XZ ENDP			; IEnumConnections::IEnumConnections
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC ; ATL::CAtlBaseModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 289  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 290  : 		return m_hInst;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 291  : 	}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CAtlBaseModule::GetModuleInstance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Term, COMDAT
; _this$ = ecx

; 154  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 		DeleteCriticalSection(&m_sec);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b f4		 mov	 esi, esp
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 156  : 		return S_OK;

  00022	33 c0		 xor	 eax, eax

; 157  : 	}

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Term@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Term
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
;	COMDAT ?Init@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
_hRes$ = -8						; size = 4
_this$ = -4						; size = 4
?Init@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Init, COMDAT
; _this$ = ecx

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 144  : 		HRESULT hRes = S_OK;

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hRes$[ebp], 0

; 145  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	85 c0		 test	 eax, eax
  00031	75 1b		 jne	 SHORT $LN2@Init

; 146  : 		{
; 147  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

  00033	8b f4		 mov	 esi, esp
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 f8	 mov	 DWORD PTR _hRes$[ebp], eax
$LN2@Init:

; 148  : 		}
; 149  : 
; 150  : 		return hRes;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _hRes$[ebp]

; 151  : 	}

  00051	5e		 pop	 esi
  00052	83 c4 08	 add	 esp, 8
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?Init@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
;	COMDAT ??1CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComCriticalSection@ATL@@QAE@XZ PROC			; ATL::CComCriticalSection::~CComCriticalSection, COMDAT
; _this$ = ecx

; 129  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 130  : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::~CComCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlcore.h
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComCriticalSection@ATL@@QAE@XZ PROC			; ATL::CComCriticalSection::CComCriticalSection, COMDAT
; _this$ = ecx

; 123  : 	CComCriticalSection() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 124  : 	{
; 125  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

  0000e	6a 18		 push	 24			; 00000018H
  00010	6a 00		 push	 0
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _memset
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : 	}

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::CComCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
_lpCriticalSection$ = 8					; size = 4
_dwSpinCount$ = 12					; size = 4
_Flags$ = 16						; size = 4
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR _Flags$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSpinCount$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _lpCriticalSection$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionEx@12
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 731  : #else
; 732  : 	UNREFERENCED_PARAMETER(Flags);
; 733  : 
; 734  : 	// ...otherwise fall back to using InitializeCriticalSectionAndSpinCount.
; 735  : 	return ::InitializeCriticalSectionAndSpinCount(lpCriticalSection, dwSpinCount);
; 736  : #endif
; 737  : }

  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
_dwExceptionCode$ = 8					; size = 4
_dwExceptionFlags$ = 12					; size = 4
?_AtlRaiseException@ATL@@YAXKK@Z PROC			; ATL::_AtlRaiseException, COMDAT

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 31   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

  00004	8b f4		 mov	 esi, esp
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _dwExceptionFlags$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _dwExceptionCode$[ebp]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RaiseException@16
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : }

  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ
_TEXT	SEGMENT
_ptr$ = -16						; size = 4
_ple$ = -8						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 436  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 437  : 		CPreserveLastError ple;

  0001a	8d 4d f8	 lea	 ecx, DWORD PTR _ple$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError

; 438  : 		va_list ptr; va_start(ptr, pszFmt);

  00022	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  00025	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax

; 439  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  00028	8b 4d f0	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 14	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 10	 mov	 eax, DWORD PTR _nLevel$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z ; ATL::CTrace::TraceV
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 440  : 		va_end(ptr);

  0004d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 441  : 	}

  00054	8d 4d f8	 lea	 ecx, DWORD PTR _ple$[ebp]
  00057	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  0005c	52		 push	 edx
  0005d	8b cd		 mov	 ecx, ebp
  0005f	50		 push	 eax
  00060	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  00066	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006b	58		 pop	 eax
  0006c	5a		 pop	 edx
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
  0007b	90		 npad	 1
$LN5@operator:
  0007c	01 00 00 00	 DD	 1
  00080	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  00084	f8 ff ff ff	 DD	 -8			; fffffff8H
  00088	04 00 00 00	 DD	 4
  0008c	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  00090	70		 DB	 112			; 00000070H
  00091	6c		 DB	 108			; 0000006cH
  00092	65		 DB	 101			; 00000065H
  00093	00		 DB	 0
??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _nLineNo$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 412  : 	}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		SetLastError(m_dwLastError);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 398  : 	}

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  0000f	8b f4		 mov	 esi, esp
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5e		 pop	 esi
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -12						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00021	6a 02		 push	 2
  00023	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00026	50		 push	 eax
  00027	8d 4d f4	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	85 c0		 test	 eax, eax
  00035	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00037	32 c0		 xor	 al, al
  00039	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0003b	8b 55 f4	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00047	52		 push	 edx
  00048	8b cd		 mov	 ecx, ebp
  0004a	50		 push	 eax
  0004b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Allocate
  00051	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00056	58		 pop	 eax
  00057	5a		 pop	 edx
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN6@Allocate:
  00068	01 00 00 00	 DD	 1
  0006c	00 00 00 00	 DD	 $LN5@Allocate
$LN5@Allocate:
  00070	f4 ff ff ff	 DD	 -12			; fffffff4H
  00074	04 00 00 00	 DD	 4
  00078	00 00 00 00	 DD	 $LN4@Allocate
$LN4@Allocate:
  0007c	6e		 DB	 110			; 0000006eH
  0007d	42		 DB	 66			; 00000042H
  0007e	79		 DB	 121			; 00000079H
  0007f	74		 DB	 116			; 00000074H
  00080	65		 DB	 101			; 00000065H
  00081	73		 DB	 115			; 00000073H
  00082	00		 DB	 0
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 436  : 	}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00019	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 410  : 	}

  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 26		 je	 SHORT $LN4@AllocateBy
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00020	6a 00		 push	 0
  00022	68 7e 01 00 00	 push	 382			; 0000017eH
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@EFJOHFCD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0002c	6a 02		 push	 2
  0002e	e8 00 00 00 00	 call	 __CrtDbgReportW
  00033	83 c4 18	 add	 esp, 24			; 00000018H
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 01		 jne	 SHORT $LN4@AllocateBy
  0003b	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003c	8b 55 08	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00045	83 c4 04	 add	 esp, 4
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00053	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00055	32 c0		 xor	 al, al
  00057	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00059	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005b	83 c4 04	 add	 esp, 4
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 351  : 	}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z
_TEXT	SEGMENT
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 		if (pszCategory == nullptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  00007	75 02		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  00009	eb 74		 jmp	 SHORT $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  0000b	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00012	72 2c		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  00014	33 c0		 xor	 eax, eax
  00016	75 26		 jne	 SHORT $LN5@RegisterCa
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00022	6a 00		 push	 0
  00024	68 51 01 00 00	 push	 337			; 00000151H
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@DGDFBHKA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0002e	6a 02		 push	 2
  00030	e8 00 00 00 00	 call	 __CrtDbgReportW
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 01		 jne	 SHORT $LN5@RegisterCa
  0003d	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  0003e	eb 3f		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00040	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  0004a	8b 45 0c	 mov	 eax, DWORD PTR _nCategory$[ebp]
  0004d	89 82 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx], eax

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _pszCategory$[ebp]
  00056	51		 push	 ecx
  00057	6a 7f		 push	 127			; 0000007fH
  00059	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00063	81 c2 04 00 00
	00		 add	 edx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _wcscpy_s
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	
; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);
; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);
; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00077	83 c0 01	 add	 eax, 1
  0007a	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z
_TEXT	SEGMENT
_vsnwprintf_result$ = -20				; size = 4
_wszBuf$ = -12						; size = 4
_cchNeeded$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 281  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 282  : #if _MSC_VER < 1900
; 283  : 		int cchNeeded = _vscwprintf(pwszFmt, args);
; 284  : #else
; 285  : 		// Explicitly request the legacy wide format specifiers mode from the CRT,
; 286  : 		// for compatibility with previous versions.  While the CRT supports two
; 287  : 		// modes, the ATL and MFC functions that accept format strings only support
; 288  : 		// legacy mode format strings.
; 289  : 		int cchNeeded = __stdio_common_vswprintf(

  0001a	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  0001d	50		 push	 eax
  0001e	6a 00		 push	 0
  00020	8b 4d 18	 mov	 ecx, DWORD PTR _pwszFmt$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002d	8b 10		 mov	 edx, DWORD PTR [eax]
  0002f	83 ca 02	 or	 edx, 2
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	83 ca 04	 or	 edx, 4
  00038	50		 push	 eax
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  0003f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00042	89 45 fc	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 290  : 			_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS |
; 291  : 			_CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR |
; 292  : 			_CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS,
; 293  : 			NULL, 0, pwszFmt, NULL, args);
; 294  : #endif
; 295  : 		if (cchNeeded < 0)

  00045	83 7d fc 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  00049	7d 05		 jge	 SHORT $LN2@TraceV

; 296  : 		{
; 297  : 			return;

  0004b	e9 b2 00 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 298  : 		}
; 299  : 
; 300  : 		CHeapPtr<wchar_t> wszBuf;

  00050	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00053	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 301  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  00058	8b 4d fc	 mov	 ecx, DWORD PTR _cchNeeded$[ebp]
  0005b	83 c1 01	 add	 ecx, 1
  0005e	51		 push	 ecx
  0005f	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00062	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00067	0f b6 d0	 movzx	 edx, al
  0006a	85 d2		 test	 edx, edx
  0006c	75 0d		 jne	 SHORT $LN3@TraceV

; 302  : 		{
; 303  : 			return;

  0006e	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00071	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00076	e9 87 00 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 304  : 		}
; 305  : 
; 306  : 		wszBuf[0] = '\0';

  0007b	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0007e	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00083	b9 02 00 00 00	 mov	 ecx, 2
  00088	6b d1 00	 imul	 edx, ecx, 0
  0008b	33 c9		 xor	 ecx, ecx
  0008d	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 307  : 
; 308  : #if _MSC_VER < 1900
; 309  : 		if (_vsnwprintf_s(wszBuf, cchNeeded + 1, cchNeeded, pwszFmt, args) == -1)
; 310  : #else
; 311  : 		// Explicitly request the legacy wide format specifiers mode from the CRT,
; 312  : 		// for compatibility with previous versions.  While the CRT supports two
; 313  : 		// modes, the ATL and MFC functions that accept format strings only support
; 314  : 		// legacy mode format strings.
; 315  : 		int const vsnwprintf_result = __stdio_common_vsnwprintf_s(

  00091	8b 55 1c	 mov	 edx, DWORD PTR _args$[ebp]
  00094	52		 push	 edx
  00095	6a 00		 push	 0
  00097	8b 45 18	 mov	 eax, DWORD PTR _pwszFmt$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _cchNeeded$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  000a2	83 c2 01	 add	 edx, 1
  000a5	52		 push	 edx
  000a6	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000a9	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  000b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b6	83 c9 04	 or	 ecx, 4
  000b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000bc	52		 push	 edx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ___stdio_common_vsnwprintf_s
  000c3	83 c4 20	 add	 esp, 32			; 00000020H
  000c6	89 45 ec	 mov	 DWORD PTR _vsnwprintf_result$[ebp], eax

; 316  : 			_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS |
; 317  : 			_CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS,
; 318  : 			wszBuf, cchNeeded + 1, cchNeeded, pwszFmt, NULL, args);
; 319  : 		if (vsnwprintf_result < 0)

  000c9	83 7d ec 00	 cmp	 DWORD PTR _vsnwprintf_result$[ebp], 0
  000cd	7d 0a		 jge	 SHORT $LN4@TraceV

; 320  : #endif
; 321  : 		{
; 322  : 			return;

  000cf	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000d2	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000d7	eb 29		 jmp	 SHORT $LN1@TraceV
$LN4@TraceV:

; 323  : 		}
; 324  : 
; 325  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  000d9	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000dc	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  000e1	50		 push	 eax
  000e2	8b 45 14	 mov	 eax, DWORD PTR _nLevel$[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d 10	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  000e9	51		 push	 ecx
  000ea	8b 55 0c	 mov	 edx, DWORD PTR _nLine$[ebp]
  000ed	52		 push	 edx
  000ee	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  000f7	83 c4 14	 add	 esp, 20			; 00000014H

; 326  : 	}

  000fa	8d 4d f4	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000fd	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  00102	52		 push	 edx
  00103	8b cd		 mov	 ecx, ebp
  00105	50		 push	 eax
  00106	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@TraceV
  0010c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00111	58		 pop	 eax
  00112	5a		 pop	 edx
  00113	83 c4 14	 add	 esp, 20			; 00000014H
  00116	3b ec		 cmp	 ebp, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
  00121	0f 1f 00	 npad	 3
$LN8@TraceV:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN7@TraceV
$LN7@TraceV:
  0012c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN6@TraceV
$LN6@TraceV:
  00138	77		 DB	 119			; 00000077H
  00139	73		 DB	 115			; 00000073H
  0013a	7a		 DB	 122			; 0000007aH
  0013b	42		 DB	 66			; 00000042H
  0013c	75		 DB	 117			; 00000075H
  0013d	66		 DB	 102			; 00000066H
  0013e	00		 DB	 0
?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2608					; size = 520
_wszBuf$ = -2080					; size = 4
_chCount$ = -2072					; size = 4
_pwszCategoryName$ = -2068				; size = 4
_categoryLength$ = -2064				; size = 4
_wszCategory$ = -2056					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 0a 00
	00		 sub	 esp, 2612		; 00000a34H
  00009	57		 push	 edi
  0000a	8d bd cc f5 ff
	ff		 lea	 edi, DWORD PTR [ebp-2612]
  00010	b9 8d 02 00 00	 mov	 ecx, 653		; 0000028dH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00026	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  0002d	74 15		 je	 SHORT $LN3@TraceV
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00034	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00037	72 0b		 jb	 SHORT $LN3@TraceV
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  0003f	23 4d 10	 and	 ecx, DWORD PTR _dwCategory$[ebp]
  00042	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  00044	e9 c0 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  00049	68 00 08 00 00	 push	 2048			; 00000800H
  0004e	6a 00		 push	 0
  00050	8d 95 f8 f7 ff
	ff		 lea	 edx, DWORD PTR _wszCategory$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _memset
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  0005f	c7 85 f0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  00069	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00072	83 c4 04	 add	 esp, 4
  00075	89 85 ec f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  0007b	83 bd ec f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00082	74 36		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00084	8b 8d ec f7 ff
	ff		 mov	 ecx, DWORD PTR _pwszCategoryName$[ebp]
  0008a	51		 push	 ecx
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  00090	68 00 04 00 00	 push	 1024			; 00000400H
  00095	8d 95 f8 f7 ff
	ff		 lea	 edx, DWORD PTR _wszCategory$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _swprintf_s
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	89 85 f0 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000aa	83 bd f0 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000b1	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000b3	e9 51 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}

  000b8	eb 31		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 166  : 		else
; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000ba	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  000bd	50		 push	 eax
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000c3	68 00 04 00 00	 push	 1024			; 00000400H
  000c8	8d 8d f8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _swprintf_s
  000d4	83 c4 10	 add	 esp, 16			; 00000010H
  000d7	89 85 f0 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000dd	83 bd f0 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000e4	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000e6	e9 1e 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000eb	8b 55 18	 mov	 edx, DWORD PTR _pwszMessage$[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 _wcslen
  000f4	83 c4 04	 add	 esp, 4
  000f7	8b 8d f0 f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  000fd	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  00101	89 95 e8 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], edx

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  00107	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0010d	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  00112	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR _chCount$[ebp]
  00118	50		 push	 eax
  00119	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0011f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00124	0f b6 c8	 movzx	 ecx, al
  00127	85 c9		 test	 ecx, ecx
  00129	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  0012b	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00131	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00136	e9 ce 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  0013b	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00141	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00146	ba 02 00 00 00	 mov	 edx, 2
  0014b	6b ca 00	 imul	 ecx, edx, 0
  0014e	33 d2		 xor	 edx, edx
  00150	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  00154	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  00157	50		 push	 eax
  00158	8d 8d f8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0015e	51		 push	 ecx
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  00164	8b 95 e8 f7 ff
	ff		 mov	 edx, DWORD PTR _chCount$[ebp]
  0016a	52		 push	 edx
  0016b	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00171	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _swprintf_s
  0017c	83 c4 14	 add	 esp, 20			; 00000014H
  0017f	83 f8 ff	 cmp	 eax, -1
  00182	75 0d		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  00184	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0018a	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0018f	eb 78		 jmp	 SHORT $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  00191	68 08 02 00 00	 push	 520			; 00000208H
  00196	6a 00		 push	 0
  00198	8d 85 d0 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _memset
  001a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  001a7	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  001aa	51		 push	 ecx
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001b0	68 04 01 00 00	 push	 260			; 00000104H
  001b5	8d 95 d0 f5 ff
	ff		 lea	 edx, DWORD PTR _fileName$[ebp]
  001bb	52		 push	 edx
  001bc	e8 00 00 00 00	 call	 _swprintf_s
  001c1	83 c4 10	 add	 esp, 16			; 00000010H
  001c4	83 f8 ff	 cmp	 eax, -1
  001c7	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001c9	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001cf	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001d4	eb 33		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001d6	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001dc	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001e1	50		 push	 eax
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001e7	6a 00		 push	 0
  001e9	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  001ec	50		 push	 eax
  001ed	8d 8d d0 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001f3	51		 push	 ecx
  001f4	6a 00		 push	 0
  001f6	e8 00 00 00 00	 call	 __CrtDbgReportW
  001fb	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	}

  001fe	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00204	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  00209	52		 push	 edx
  0020a	8b cd		 mov	 ecx, ebp
  0020c	50		 push	 eax
  0020d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@TraceV
  00213	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00218	58		 pop	 eax
  00219	5a		 pop	 edx
  0021a	5f		 pop	 edi
  0021b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021e	33 cd		 xor	 ecx, ebp
  00220	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00225	81 c4 34 0a 00
	00		 add	 esp, 2612		; 00000a34H
  0022b	3b ec		 cmp	 ebp, esp
  0022d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c3		 ret	 0
  00236	66 90		 npad	 2
$LN16@TraceV:
  00238	03 00 00 00	 DD	 3
  0023c	00 00 00 00	 DD	 $LN15@TraceV
$LN15@TraceV:
  00240	f8 f7 ff ff	 DD	 -2056			; fffff7f8H
  00244	00 08 00 00	 DD	 2048			; 00000800H
  00248	00 00 00 00	 DD	 $LN12@TraceV
  0024c	e0 f7 ff ff	 DD	 -2080			; fffff7e0H
  00250	04 00 00 00	 DD	 4
  00254	00 00 00 00	 DD	 $LN13@TraceV
  00258	d0 f5 ff ff	 DD	 -2608			; fffff5d0H
  0025c	08 02 00 00	 DD	 520			; 00000208H
  00260	00 00 00 00	 DD	 $LN14@TraceV
$LN14@TraceV:
  00264	66		 DB	 102			; 00000066H
  00265	69		 DB	 105			; 00000069H
  00266	6c		 DB	 108			; 0000006cH
  00267	65		 DB	 101			; 00000065H
  00268	4e		 DB	 78			; 0000004eH
  00269	61		 DB	 97			; 00000061H
  0026a	6d		 DB	 109			; 0000006dH
  0026b	65		 DB	 101			; 00000065H
  0026c	00		 DB	 0
$LN13@TraceV:
  0026d	77		 DB	 119			; 00000077H
  0026e	73		 DB	 115			; 00000073H
  0026f	7a		 DB	 122			; 0000007aH
  00270	42		 DB	 66			; 00000042H
  00271	75		 DB	 117			; 00000075H
  00272	66		 DB	 102			; 00000066H
  00273	00		 DB	 0
$LN12@TraceV:
  00274	77		 DB	 119			; 00000077H
  00275	73		 DB	 115			; 00000073H
  00276	7a		 DB	 122			; 0000007aH
  00277	43		 DB	 67			; 00000043H
  00278	61		 DB	 97			; 00000061H
  00279	74		 DB	 116			; 00000074H
  0027a	65		 DB	 101			; 00000065H
  0027b	67		 DB	 103			; 00000067H
  0027c	6f		 DB	 111			; 0000006fH
  0027d	72		 DB	 114			; 00000072H
  0027e	79		 DB	 121			; 00000079H
  0027f	00		 DB	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00012	eb 09		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  00014	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00017	83 c0 01	 add	 eax, 1
  0001a	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00020	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00026	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  00028	69 55 fc 04 01
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 260
  0002f	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx]
  00035	3b 45 08	 cmp	 eax, DWORD PTR _nCategory$[ebp]
  00038	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  0003a	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  00041	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00046	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  00048	eb ca		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  0004a	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceISAPI@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceISAPI@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceISAPI'', COMDAT

; 119  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceISAPI> atlTraceISAPI(_T("atlTraceISAPI"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG94192
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceISAPI@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceISAPI''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 40 00	 push	 4194304			; 00400000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceSync@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceSync@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceSync'', COMDAT

; 118  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceSync> atlTraceSync(_T("atlTraceSync"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG94143
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceSync@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceSync''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 20 00	 push	 2097152			; 00200000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceSecurity@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceSecurity@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceSecurity'', COMDAT

; 117  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceSecurity> atlTraceSecurity(_T("atlTraceSecurity"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG94094
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceSecurity@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceSecurity''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 10 00	 push	 1048576			; 00100000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceUtil@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceUtil@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceUtil'', COMDAT

; 116  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceUtil> atlTraceUtil(_T("atlTraceUtil"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG94045
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceUtil@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceUtil''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceMap@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceMap@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceMap'', COMDAT

; 115  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceMap> atlTraceMap(_T("atlTraceMap"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG94040
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceMap@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceMap''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 04 00	 push	 262144			; 00040000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceString@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceString@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceString'', COMDAT

; 114  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceString> atlTraceString(_T("atlTraceString"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93991
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceString@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceString''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 02 00	 push	 131072			; 00020000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceStencil@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceStencil@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceStencil'', COMDAT

; 113  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceStencil> atlTraceStencil(_T("atlTraceStencil"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93942
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceStencil@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceStencil''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 01 00	 push	 65536			; 00010000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceCache@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceCache@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceCache'', COMDAT

; 112  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceCache> atlTraceCache(_T("atlTraceCache"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93893
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceCache@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceCache''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 80 00 00	 push	 32768			; 00008000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceTime@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceTime@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceTime'', COMDAT

; 111  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceTime> atlTraceTime(_T("atlTraceTime"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93844
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceTime@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceTime''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 40 00 00	 push	 16384			; 00004000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93795
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000e	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 20 00 00	 push	 8192			; 00002000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceAllocation@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceAllocation@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceAllocation'', COMDAT

; 109  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceAllocation> atlTraceAllocation(_T("atlTraceAllocation"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93746
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceAllocation@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceAllocation''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 10 00 00	 push	 4096			; 00001000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceNotImpl@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceNotImpl@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceNotImpl'', COMDAT

; 108  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceNotImpl> atlTraceNotImpl(_T("atlTraceNotImpl"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93697
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceNotImpl@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceNotImpl''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 08 00 00	 push	 2048			; 00000800H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceSnapin@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceSnapin@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceSnapin'', COMDAT

; 107  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceSnapin> atlTraceSnapin(_T("atlTraceSnapin"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93648
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceSnapin@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceSnapin''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 04 00 00	 push	 1024			; 00000400H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceDBProvider@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceDBProvider@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceDBProvider'', COMDAT

; 106  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceDBProvider> atlTraceDBProvider(_T("atlTraceDBProvider"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93599
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceDBProvider@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceDBProvider''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 02 00 00	 push	 512			; 00000200H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceDBClient@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceDBClient@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceDBClient'', COMDAT

; 105  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceDBClient> atlTraceDBClient(_T("atlTraceDBClient"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93550
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceDBClient@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceDBClient''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 01 00 00	 push	 256			; 00000100H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceHosting@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceHosting@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceHosting'', COMDAT

; 104  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceHosting> atlTraceHosting(_T("atlTraceHosting"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93501
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceHosting@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceHosting''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 80 00 00 00	 push	 128			; 00000080H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceControls@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceControls@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceControls'', COMDAT

; 103  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceControls> atlTraceControls(_T("atlTraceControls"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93452
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceControls@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceControls''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<64,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<64,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 40		 push	 64			; 00000040H
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceWindowing@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceWindowing@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceWindowing'', COMDAT

; 102  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceWindowing> atlTraceWindowing(_T("atlTraceWindowing"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93403
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceWindowing@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceWindowing''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<32,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<32,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 20		 push	 32			; 00000020H
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceRefcount@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceRefcount@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceRefcount'', COMDAT

; 101  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceRefcount> atlTraceRefcount(_T("atlTraceRefcount"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93354
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceRefcount@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceRefcount''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 10		 push	 16			; 00000010H
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceRegistrar@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceRegistrar@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceRegistrar'', COMDAT

; 100  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceRegistrar> atlTraceRegistrar(_T("atlTraceRegistrar"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93305
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceRegistrar@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceRegistrar''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 08		 push	 8
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceQI@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceQI@ATL@@YAXXZ PROC				; ATL::`dynamic initializer for 'atlTraceQI'', COMDAT

; 99   : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceQI> atlTraceQI(_T("atlTraceQI"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93256
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceQI@ATL@@YAXXZ ENDP				; ATL::`dynamic initializer for 'atlTraceQI''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 04		 push	 4
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceCOM@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceCOM@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceCOM'', COMDAT

; 98   : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceCom> atlTraceCOM(_T("atlTraceCOM"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93207
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceCOM@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceCOM''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$01$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$01$0A@@ATL@@QAEIXZ PROC		; ATL::CTraceCategoryEx<2,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000e	b8 02 00 00 00	 mov	 eax, 2

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??B?$CTraceCategoryEx@$01$0A@@ATL@@QAEIXZ ENDP		; ATL::CTraceCategoryEx<2,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 02		 push	 2
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceGeneral@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceGeneral@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceGeneral'', COMDAT

; 97   : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceGeneral> atlTraceGeneral(_T("atlTraceGeneral"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG93134
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceGeneral@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceGeneral''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 01		 push	 1
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 08 00	 push	 524288			; 00080000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 		free(p);

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _free
  0000c	83 c4 04	 add	 esp, 4

; 268  : 	}

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 261  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  : 		return malloc(nBytes);

  00003	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _malloc
  0000c	83 c4 04	 add	 esp, 4

; 263  : 	}

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00014	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  00017	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  0001d	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  00020	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00024	77 06		 ja	 SHORT $LN4@AtlMultipl
  00026	83 7d f8 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  0002a	76 0f		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  0002c	68 16 02 00 00	 push	 534			; 00000216H
  00031	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  00036	83 c4 04	 add	 esp, 4
  00039	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _i64Result$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  00041	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00043	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  00045	83 c4 08	 add	 esp, 8
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@H@ATL@@YAJPAHHH@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@H@ATL@@YAJPAHHH@Z PROC			; ATL::AtlMultiply<int>, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 121  : 	__int64 i64Result=static_cast<__int64>(iLeft) * static_cast<__int64>(iRight);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  00018	99		 cdq
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx
  0001d	8b 45 10	 mov	 eax, DWORD PTR _iRight$[ebp]
  00020	99		 cdq
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 __allmul
  0002a	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  0002d	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 122  : 	if(i64Result>INT_MAX || i64Result < INT_MIN)

  00030	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00034	7f 1c		 jg	 SHORT $LN3@AtlMultipl
  00036	7c 09		 jl	 SHORT $LN5@AtlMultipl
  00038	81 7d f8 ff ff
	ff 7f		 cmp	 DWORD PTR _i64Result$[ebp], 2147483647 ; 7fffffffH
  0003f	77 11		 ja	 SHORT $LN3@AtlMultipl
$LN5@AtlMultipl:
  00041	83 7d fc ff	 cmp	 DWORD PTR _i64Result$[ebp+4], -1
  00045	7f 1a		 jg	 SHORT $LN2@AtlMultipl
  00047	7c 09		 jl	 SHORT $LN3@AtlMultipl
  00049	81 7d f8 00 00
	00 80		 cmp	 DWORD PTR _i64Result$[ebp], -2147483648 ; 80000000H
  00050	73 0f		 jae	 SHORT $LN2@AtlMultipl
$LN3@AtlMultipl:

; 123  : 	{
; 124  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  00052	68 16 02 00 00	 push	 534			; 00000216H
  00057	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0005c	83 c4 04	 add	 esp, 4
  0005f	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 125  : 	}
; 126  : 	*piResult=static_cast<int>(i64Result);

  00061	8b 55 f8	 mov	 edx, DWORD PTR _i64Result$[ebp]
  00064	8b 45 08	 mov	 eax, DWORD PTR _piResult$[ebp]
  00067	89 10		 mov	 DWORD PTR [eax], edx

; 127  : 	return S_OK;

  00069	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 128  : }

  0006b	5e		 pop	 esi
  0006c	83 c4 08	 add	 esp, 8
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
??$AtlMultiply@H@ATL@@YAJPAHHH@Z ENDP			; ATL::AtlMultiply<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1523 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1524 :             int _Result;
; 1525 :             va_list _ArgList;
; 1526 :             __crt_va_start(_ArgList, _Format);

  0001b	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1527 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 __vswprintf_s_l
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1528 :             __crt_va_end(_ArgList);

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1529 :             return _Result;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1530 :         }

  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1256 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1257 :         int const _Result = __stdio_common_vswprintf_s(

  00014	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00030	52		 push	 edx
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ___stdio_common_vswprintf_s
  00039	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003c	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1258 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1259 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1260 : 
; 1261 :         return _Result < 0 ? -1 : _Result;

  0003f	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00043	7d 09		 jge	 SHORT $LN3@vswprintf_
  00045	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  0004c	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  00051	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  00054	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1262 :     }

  00057	83 c4 08	 add	 esp, 8
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vsnwprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnwprintf PROC					; COMDAT

; 1129 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1130 :         return _vsnwprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vsnwprintf_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1131 :     }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
__vsnwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __snwprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snwprintf PROC					; COMDAT

; 1657 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1658 :         int _Result;
; 1659 :         va_list _ArgList;
; 1660 :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1661 : 
; 1662 :         _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 __vsnwprintf_l
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1663 : 
; 1664 :         __crt_va_end(_ArgList);

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1665 :         return _Result;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1666 :     }

  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__snwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vsnwprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnwprintf_l PROC					; COMDAT

; 1061 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1062 :         int const _Result = __stdio_common_vswprintf(

  00014	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002d	8b 10		 mov	 edx, DWORD PTR [eax]
  0002f	83 ca 01	 or	 edx, 1
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1063 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1064 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1065 : 
; 1066 :         return _Result < 0 ? -1 : _Result;

  00042	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00046	7d 09		 jge	 SHORT $LN3@vsnwprintf
  00048	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0004f	eb 06		 jmp	 SHORT $LN4@vsnwprintf
$LN3@vsnwprintf:
  00051	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  00054	89 4d f8	 mov	 DWORD PTR tv74[ebp], ecx
$LN4@vsnwprintf:
  00057	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1067 :     }

  0005a	83 c4 08	 add	 esp, 8
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
__vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT _vfwprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vfwprintf PROC						; COMDAT

; 322  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :         return _vfwprintf_l(_Stream, _Format, NULL, _ArgList);

  00003	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __vfwprintf_l
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 324  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_vfwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vfwprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfwprintf_l PROC					; COMDAT

; 308  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 309  :         return __stdio_common_vfwprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfwprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 310  :     }

  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__vfwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T1 = -12						; size = 8
_dwExceptionCode$ = -4					; size = 4
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 96   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00017	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00027	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
  0002c	50		 push	 eax
  0002d	6a 60		 push	 96			; 00000060H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@ECNMIKGK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00034	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00037	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 97   : 	ATLASSERT( false );

  00045	33 c9		 xor	 ecx, ecx
  00047	75 23		 jne	 SHORT $LN7@AtlThrowIm
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00053	6a 00		 push	 0
  00055	6a 61		 push	 97			; 00000061H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1OG@DEDHKNLM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0005c	6a 02		 push	 2
  0005e	e8 00 00 00 00	 call	 __CrtDbgReportW
  00063	83 c4 18	 add	 esp, 24			; 00000018H
  00066	83 f8 01	 cmp	 eax, 1
  00069	75 01		 jne	 SHORT $LN7@AtlThrowIm
  0006b	cc		 int	 3
$LN7@AtlThrowIm:

; 98   : 	DWORD dwExceptionCode;
; 99   : 	switch(hr)

  0006c	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0006f	89 45 f0	 mov	 DWORD PTR tv85[ebp], eax
  00072	81 7d f0 0e 00
	07 80		 cmp	 DWORD PTR tv85[ebp], -2147024882 ; 8007000eH
  00079	74 02		 je	 SHORT $LN4@AtlThrowIm
  0007b	eb 09		 jmp	 SHORT $LN5@AtlThrowIm
$LN4@AtlThrowIm:

; 100  : 	{
; 101  : 	case E_OUTOFMEMORY:
; 102  : 		dwExceptionCode = STATUS_NO_MEMORY;

  0007d	c7 45 fc 17 00
	00 c0		 mov	 DWORD PTR _dwExceptionCode$[ebp], -1073741801 ; c0000017H

; 103  : 		break;

  00084	eb 07		 jmp	 SHORT $LN2@AtlThrowIm
$LN5@AtlThrowIm:

; 104  : 	default:
; 105  : 		dwExceptionCode = EXCEPTION_ILLEGAL_INSTRUCTION;

  00086	c7 45 fc 1d 00
	00 c0		 mov	 DWORD PTR _dwExceptionCode$[ebp], -1073741795 ; c000001dH
$LN2@AtlThrowIm:

; 106  : 	}
; 107  : 	_AtlRaiseException((DWORD)dwExceptionCode);

  0008d	6a 01		 push	 1
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _dwExceptionCode$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?_AtlRaiseException@ATL@@YAXKK@Z ; ATL::_AtlRaiseException
$LN6@AtlThrowIm:

; 108  : }

  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IViewObject2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IViewObject2@@QAE@XZ PROC				; IViewObject2::IViewObject2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IViewObject@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IViewObject2@@QAE@XZ ENDP				; IViewObject2::IViewObject2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IViewObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IViewObject@@QAE@XZ PROC				; IViewObject::IViewObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IViewObject@@QAE@XZ ENDP				; IViewObject::IViewObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOleInPlaceObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOleInPlaceObject@@QAE@XZ PROC			; IOleInPlaceObject::IOleInPlaceObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleWindow@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOleInPlaceObject@@QAE@XZ ENDP			; IOleInPlaceObject::IOleInPlaceObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOleInPlaceActiveObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOleInPlaceActiveObject@@QAE@XZ PROC			; IOleInPlaceActiveObject::IOleInPlaceActiveObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IOleWindow@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOleInPlaceActiveObject@@QAE@XZ ENDP			; IOleInPlaceActiveObject::IOleInPlaceActiveObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOleWindow@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOleWindow@@QAE@XZ PROC				; IOleWindow::IOleWindow, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOleWindow@@QAE@XZ ENDP				; IOleWindow::IOleWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IOleObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOleObject@@QAE@XZ PROC				; IOleObject::IOleObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IOleObject@@QAE@XZ ENDP				; IOleObject::IOleObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IDispatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDispatch@@QAE@XZ PROC				; IDispatch::IDispatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IDispatch@@QAE@XZ ENDP				; IDispatch::IDispatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IDataObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDataObject@@QAE@XZ PROC				; IDataObject::IDataObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IDataObject@@QAE@XZ ENDP				; IDataObject::IDataObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IPersistStorage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPersistStorage@@QAE@XZ PROC				; IPersistStorage::IPersistStorage, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IPersistStorage@@QAE@XZ ENDP				; IPersistStorage::IPersistStorage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPersist@@QAE@XZ PROC				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 29051: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000f	7f 08		 jg	 SHORT $LN3@HRESULT_FR
  00011	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
  00017	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001c	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00022	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00028	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0002e	89 4d fc	 mov	 DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
  00031	8b 45 fc	 mov	 eax, DWORD PTR tv68[ebp]
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared\guiddef.h
;	COMDAT _InlineIsEqualGUID
_TEXT	SEGMENT
tv84 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_InlineIsEqualGUID PROC					; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 152  :    return (

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	ba 04 00 00 00	 mov	 edx, 4
  00019	6b c2 00	 imul	 eax, edx, 0
  0001c	8b 55 08	 mov	 edx, DWORD PTR _rguid1$[ebp]
  0001f	8b 75 0c	 mov	 esi, DWORD PTR _rguid2$[ebp]
  00022	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00025	3b 0c 06	 cmp	 ecx, DWORD PTR [esi+eax]
  00028	75 61		 jne	 SHORT $LN3@InlineIsEq
  0002a	ba 04 00 00 00	 mov	 edx, 4
  0002f	c1 e2 00	 shl	 edx, 0
  00032	b8 04 00 00 00	 mov	 eax, 4
  00037	c1 e0 00	 shl	 eax, 0
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0003d	8b 75 0c	 mov	 esi, DWORD PTR _rguid2$[ebp]
  00040	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00043	3b 14 06	 cmp	 edx, DWORD PTR [esi+eax]
  00046	75 43		 jne	 SHORT $LN3@InlineIsEq
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	d1 e0		 shl	 eax, 1
  0004f	b9 04 00 00 00	 mov	 ecx, 4
  00054	d1 e1		 shl	 ecx, 1
  00056	8b 55 08	 mov	 edx, DWORD PTR _rguid1$[ebp]
  00059	8b 75 0c	 mov	 esi, DWORD PTR _rguid2$[ebp]
  0005c	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0005f	3b 04 0e	 cmp	 eax, DWORD PTR [esi+ecx]
  00062	75 27		 jne	 SHORT $LN3@InlineIsEq
  00064	b9 04 00 00 00	 mov	 ecx, 4
  00069	6b d1 03	 imul	 edx, ecx, 3
  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	6b c8 03	 imul	 ecx, eax, 3
  00074	8b 45 08	 mov	 eax, DWORD PTR _rguid1$[ebp]
  00077	8b 75 0c	 mov	 esi, DWORD PTR _rguid2$[ebp]
  0007a	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0007d	3b 14 0e	 cmp	 edx, DWORD PTR [esi+ecx]
  00080	75 09		 jne	 SHORT $LN3@InlineIsEq
  00082	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  00089	eb 07		 jmp	 SHORT $LN4@InlineIsEq
$LN3@InlineIsEq:
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN4@InlineIsEq:
  00092	8b 45 fc	 mov	 eax, DWORD PTR tv84[ebp]

; 153  :       ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
; 154  :       ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
; 155  :       ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
; 156  :       ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
; 157  : }

  00095	5e		 pop	 esi
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_InlineIsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_I@YGXPAXIIP6EX0@Z@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
tv68 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_I@YGXPAXIIP6EX0@Z@Z PROC				; `vector destructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	8b 45 0c	 mov	 eax, DWORD PTR ___s$[ebp]
  00018	0f af 45 10	 imul	 eax, DWORD PTR ___n$[ebp]
  0001c	03 45 08	 add	 eax, DWORD PTR ___t$[ebp]
  0001f	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
$LN2@vector:
  00022	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00025	89 4d fc	 mov	 DWORD PTR tv68[ebp], ecx
  00028	8b 55 10	 mov	 edx, DWORD PTR ___n$[ebp]
  0002b	83 ea 01	 sub	 edx, 1
  0002e	89 55 10	 mov	 DWORD PTR ___n$[ebp], edx
  00031	83 7d fc 00	 cmp	 DWORD PTR tv68[ebp], 0
  00035	76 09		 jbe	 SHORT $LN5@vector
  00037	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  0003e	eb 07		 jmp	 SHORT $LN6@vector
$LN5@vector:
  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN6@vector:
  00047	83 7d f8 00	 cmp	 DWORD PTR tv69[ebp], 0
  0004b	74 1a		 je	 SHORT $LN1@vector
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00050	2b 45 0c	 sub	 eax, DWORD PTR ___s$[ebp]
  00053	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00056	8b f4		 mov	 esi, esp
  00058	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0005b	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	eb bb		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00067	5e		 pop	 esi
  00068	83 c4 08	 add	 esp, 8
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 10 00	 ret	 16			; 00000010H
??_I@YGXPAXIIP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
$LN2@vector:
  00015	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00024	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00028	76 09		 jbe	 SHORT $LN5@vector
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00031	eb 07		 jmp	 SHORT $LN6@vector
$LN5@vector:
  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN6@vector:
  0003a	83 7d f8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0003e	74 1a		 je	 SHORT $LN1@vector
  00040	8b f4		 mov	 esi, esp
  00042	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00045	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00052	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00055	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00058	eb bb		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0005a	5e		 pop	 esi
  0005b	83 c4 08	 add	 esp, 8
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
