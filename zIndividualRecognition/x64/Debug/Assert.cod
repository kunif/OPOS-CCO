; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG93165 DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'F', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, '!', 00H, 0aH, 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, 0aH, 00H, 'L', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'u', 00H, 0aH, 00H, 'E', 00H, 'x', 00H, 'p'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ':', 00H, ' ', 00H, '<', 00H, '%', 00H, 's', 00H, '>'
	DB	00H, 0aH, 00H, 0aH, 00H, 'P', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 'A', 00H, 'b', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, ',', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	't', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 'g', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'u', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+6
$SG93166 DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'O', 00H, 'P', 00H
	DB	'O', 00H, 'S', 00H, ' ', 00H, 'C', 00H, 'C', 00H, 'O', 00H, 00H
	DB	00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vswprintf_c_l
PUBLIC	_vswprintf_l
PUBLIC	__vswprintf_l
PUBLIC	_swprintf
PUBLIC	?_assert@@YAXPEB_W0I@Z				; _assert
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	__imp_TerminateProcess:PROC
EXTRN	__imp_GetActiveWindow:PROC
EXTRN	__imp_MessageBoxW:PROC
EXTRN	__stdio_common_vswprintf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vswprintf_c_l DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$_vswprintf_c_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vswprintf_l DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$_vswprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__vswprintf_l DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$__vswprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_swprintf DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$_swprintf
pdata	ENDS
pdata	SEGMENT
$pdata$?_assert@@YAXPEB_W0I@Z DD imagerel $LN8
	DD	imagerel $LN8+253
	DD	imagerel $unwind$?_assert@@YAXPEB_W0I@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$?_assert@@YAXPEB_W0I@Z DD 034019H
	DD	01060117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
CONST	SEGMENT
?_assert@@YAXPEB_W0I@Z$rtcName$0 DB 062H		; _assert
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
?_assert@@YAXPEB_W0I@Z$rtcVarDesc DD 040H		; _assert
	DD	07d0H
	DQ	FLAT:?_assert@@YAXPEB_W0I@Z$rtcName$0
	ORG $+48
?_assert@@YAXPEB_W0I@Z$rtcFrameData DD 01H		; _assert
	DD	00H
	DQ	FLAT:?_assert@@YAXPEB_W0I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_swprintf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_swprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
_swprintf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:_swprintf$rtcName$0
	ORG $+48
_swprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_swprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__vswprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vswprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vswprintf_c_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Develop\OPOS-CCO\Common\Assert.cpp
_TEXT	SEGMENT
buffer$ = 64
nCode$ = 2068
__$ArrayPad$ = 2080
expr$ = 2112
filename$ = 2120
lineno$ = 2128
?_assert@@YAXPEB_W0I@Z PROC				; _assert

; 48   : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 30 08
	00 00		 sub	 rsp, 2096		; 00000830H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 0c 02 00 00	 mov	 ecx, 524		; 0000020cH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 40
	08 00 00	 mov	 rcx, QWORD PTR [rsp+2112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 84 24 20
	08 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 49   :     TCHAR buffer[1000]; // Hope this doesn't overflow...
; 50   :     _stprintf( buffer,

  00040	48 8b 84 24 40
	08 00 00	 mov	 rax, QWORD PTR expr$[rsp]
  00048	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004d	44 8b 8c 24 50
	08 00 00	 mov	 r9d, DWORD PTR lineno$[rsp]
  00055	4c 8b 84 24 48
	08 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG93165
  00064	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buffer$[rsp]
  00069	e8 00 00 00 00	 call	 _swprintf

; 51   :         _T("Assertion Failed!\n")
; 52   :         _T("File: %s\n")
; 53   :         _T("Line: %u\n")
; 54   :         _T("Expression: <%s>\n\n")
; 55   :         _T("Press Abort to end program, Retry to debug, Ignore to continue"),
; 56   :         filename, lineno, expr );
; 57   : 
; 58   :     int nCode = MessageBox( GetActiveWindow(), buffer,

  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetActiveWindow
  00074	41 b9 12 00 01
	00		 mov	 r9d, 65554		; 00010012H
  0007a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG93166
  00081	48 8d 54 24 40	 lea	 rdx, QWORD PTR buffer$[rsp]
  00086	48 8b c8	 mov	 rcx, rax
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW
  0008f	89 84 24 14 08
	00 00		 mov	 DWORD PTR nCode$[rsp], eax

; 59   :         _T("Assertion within OPOS CCO"),
; 60   :         MB_ABORTRETRYIGNORE | MB_ICONHAND | MB_SETFOREGROUND );
; 61   : 
; 62   :     /* Retry: call the debugger */
; 63   :     if ( nCode == IDRETRY )

  00096	83 bc 24 14 08
	00 00 04	 cmp	 DWORD PTR nCode$[rsp], 4
  0009e	75 08		 jne	 SHORT $LN5@assert

; 64   :     {
; 65   :         DebugBreak();

  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak

; 66   :         return;

  000a6	eb 2d		 jmp	 SHORT $LN1@assert
$LN5@assert:

; 67   :     }
; 68   : 
; 69   :     /* Ignore: continue execution */
; 70   :     if ( nCode == IDIGNORE )

  000a8	83 bc 24 14 08
	00 00 05	 cmp	 DWORD PTR nCode$[rsp], 5
  000b0	75 02		 jne	 SHORT $LN6@assert

; 71   :         return;

  000b2	eb 21		 jmp	 SHORT $LN1@assert
$LN6@assert:

; 72   : 
; 73   :     /* Abort: abort the program */
; 74   :     TerminateProcess( GetCurrentProcess(), 1 );

  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  000ba	ba 01 00 00 00	 mov	 edx, 1
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TerminateProcess
$LN2@assert:

; 75   : 
; 76   : #pragma warning(disable: 4702)              // unreachable code
; 77   : 
; 78   :     for (;; )                               // Just in case...
; 79   :         Sleep(100000);

  000c8	b9 a0 86 01 00	 mov	 ecx, 100000		; 000186a0H
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
  000d3	eb f3		 jmp	 SHORT $LN2@assert
$LN1@assert:

; 80   : }

  000d5	48 8b cc	 mov	 rcx, rsp
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_assert@@YAXPEB_W0I@Z$rtcFrameData
  000df	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e4	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ec	48 33 cc	 xor	 rcx, rsp
  000ef	e8 00 00 00 00	 call	 __security_check_cookie
  000f4	48 81 c4 30 08
	00 00		 add	 rsp, 2096		; 00000830H
  000fb	5f		 pop	 rdi
  000fc	c3		 ret	 0
?_assert@@YAXPEB_W0I@Z ENDP				; _assert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Buffer$ = 96
_Format$ = 104
_swprintf PROC						; COMDAT

; 1445 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 1446 :         int _Result;
; 1447 :         va_list _ArgList;
; 1448 :         __crt_va_start(_ArgList, _Format);

  0002d	48 8d 44 24 70	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00032	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1449 :         _Result = __vswprintf_l(_Buffer, _Format, NULL, _ArgList);

  00037	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Format$[rsp]
  00044	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00049	e8 00 00 00 00	 call	 __vswprintf_l
  0004e	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1450 :         __crt_va_end(_ArgList);

  00052	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1451 :         return _Result;

  0005b	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1452 :     }

  0005f	8b f8		 mov	 edi, eax
  00061	48 8b cc	 mov	 rcx, rsp
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_swprintf$rtcFrameData
  0006b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00070	8b c7		 mov	 eax, edi
  00072	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
_swprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
__vswprintf_l PROC					; COMDAT

; 1208 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1209 :         return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0003c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00041	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0004d	e8 00 00 00 00	 call	 _vswprintf_l

; 1210 :     }

  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
__vswprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT _vswprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vswprintf_l PROC					; COMDAT

; 1192 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1193 :         return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Locale$[rsp]
  0003c	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Format$[rsp]
  00041	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  00046	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0004b	e8 00 00 00 00	 call	 _vswprintf_c_l

; 1194 :     }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
_vswprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_wstdio.h
;	COMDAT _vswprintf_c_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vswprintf_c_l PROC					; COMDAT

; 1155 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1156 :         int const _Result = __stdio_common_vswprintf(

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00041	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00046	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0004b	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00050	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00055	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00058	e8 00 00 00 00	 call	 __stdio_common_vswprintf
  0005d	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1157 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1158 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1159 : 
; 1160 :         return _Result < 0 ? -1 : _Result;

  00061	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00066	7d 0a		 jge	 SHORT $LN3@vswprintf_
  00068	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv73[rsp], -1
  00070	eb 08		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00072	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00076	89 44 24 34	 mov	 DWORD PTR tv73[rsp], eax
$LN4@vswprintf_:
  0007a	8b 44 24 34	 mov	 eax, DWORD PTR tv73[rsp]

; 1161 :     }

  0007e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
_vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
  00000	40 57		 push	 rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
