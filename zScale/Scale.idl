/****************************************************************************
**
** Scale.idl -- IDL source for Scale.ocx
**
**     Date                   Modification                          Author
** -----------|----------------------------------------------------|----------
**  1999/03/20 Initial version.                                     C. Monroe
**  2008/01/15 Enhance for independent interfaces.
**  2008/08/30 More interface updates.
**  2013/09/29 Update license section.
**  2019/01/20 Update year annotation of license.
**  2019/01/20 Version 1.15.000.
**
*****************************************************************************
**
{{Begin License}}

Copyright 2019 Monroe Consulting Services, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

{{End License}}
*/

// This file will be processed by the MIDL tool to
// produce the type library (Scale.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


///////////////////////////////////////////////////////////////////////////////
//// Interfaces
///////////////////////////////////////////////////////////////////////////////

// Separate Dependent Interfaces implementation:
//  - First interface with the APIs defined from original through that release.
//  - Later interfaces derive from previous and add their releases' new APIs.
//  - Current interface derives from previous and adds its release's new APIs.

//
//========== Previous Interface: 1.5 ==========
//

    [
        object,
        uuid(CCB91171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.5 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSScale_1_5 : IDispatch
    {
    // Methods for use only by the Service Object
        [id(1), hidden, helpstring("method SOData")] HRESULT SOData( [in] long Status );
        [id(2), hidden, helpstring("method SODirectIO")] HRESULT SODirectIO( [in] long EventNumber, [in, out] long* pData, [in, out] BSTR* pString );
        [id(3), hidden, helpstring("method SOError")] HRESULT SOError( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(4), hidden, helpstring("method SOOutputCompleteDummy")] HRESULT SOOutputCompleteDummy( [in] long OutputID );
        [id(5), hidden, helpstring("method SOStatusUpdate")] HRESULT SOStatusUpdate( [in] long Data );
        [id(9), hidden, helpstring("method SOProcessID")] HRESULT SOProcessID( [out, retval] long* pProcessID );
    // Release 1.0
        [propget, id(49), helpstring("property OpenResult")]
        HRESULT OpenResult( [out, retval] long* pOpenResult );
        [propget, id(13), helpstring("property CheckHealthText")]
        HRESULT CheckHealthText( [out, retval] BSTR* pCheckHealthText );
        [propget, id(14), helpstring("property Claimed")]
        HRESULT Claimed( [out, retval] VARIANT_BOOL* pClaimed );
        [propget, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [out, retval] VARIANT_BOOL* pDeviceEnabled );
        [propput, id(17), helpstring("property DeviceEnabled")]
        HRESULT DeviceEnabled( [in] VARIANT_BOOL DeviceEnabled );
        [propget, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [out, retval] VARIANT_BOOL* pFreezeEvents );
        [propput, id(18), helpstring("property FreezeEvents")]
        HRESULT FreezeEvents( [in] VARIANT_BOOL FreezeEvents );
        [propget, id(22), helpstring("property ResultCode")]
        HRESULT ResultCode( [out, retval] long* pResultCode );
        [propget, id(23), helpstring("property ResultCodeExtended")]
        HRESULT ResultCodeExtended( [out, retval] long* pResultCodeExtended );
        [propget, id(24), helpstring("property State")]
        HRESULT State( [out, retval] long* pState );
        [propget, id(25), helpstring("property ControlObjectDescription")]
        HRESULT ControlObjectDescription( [out, retval] BSTR* pControlObjectDescription );
        [propget, id(26), helpstring("property ControlObjectVersion")]
        HRESULT ControlObjectVersion( [out, retval] long* pControlObjectVersion );
        [propget, id(27), helpstring("property ServiceObjectDescription")]
        HRESULT ServiceObjectDescription( [out, retval] BSTR* pServiceObjectDescription );
        [propget, id(28), helpstring("property ServiceObjectVersion")]
        HRESULT ServiceObjectVersion( [out, retval] long* pServiceObjectVersion );
        [propget, id(29), helpstring("property DeviceDescription")]
        HRESULT DeviceDescription( [out, retval] BSTR* pDeviceDescription );
        [propget, id(30), helpstring("property DeviceName")]
        HRESULT DeviceName( [out, retval] BSTR* pDeviceName );
        [id(31), helpstring("method CheckHealth")]
        HRESULT CheckHealth( 
            [in] long Level, 
            [out, retval] long* pRC );
        [id(32), helpstring("method ClaimDevice")]
        HRESULT ClaimDevice( 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(33), helpstring("method ClearInput")]
        HRESULT ClearInput( 
            [out, retval] long* pRC );
            // Previous API is in release 1.3, but is placed with 1.0 for compatibility with previous releases.
        [id(35), helpstring("method Close")]
        HRESULT Close( 
            [out, retval] long* pRC );
        [id(36), helpstring("method DirectIO")]
        HRESULT DirectIO( 
            [in] long Command, 
            [in, out] long* pData, 
            [in, out] BSTR* pString, 
            [out, retval] long* pRC );
        [id(37), helpstring("method Open")]
        HRESULT Open( 
            [in] BSTR DeviceName, 
            [out, retval] long* pRC );
        [id(38), helpstring("method ReleaseDevice")]
        HRESULT ReleaseDevice( 
            [out, retval] long* pRC );
        [propget, id(57), helpstring("property MaximumWeight")]
        HRESULT MaximumWeight( [out, retval] long* pMaximumWeight );
        [propget, id(61), helpstring("property WeightUnit")]
        HRESULT WeightUnit( [out, retval] long* pWeightUnit );
        [propget, id(62), helpstring("property WeightUnits")]
        HRESULT WeightUnits( [out, retval] long* pWeightUnits );
        [id(71), helpstring("method ReadWeight")]
        HRESULT ReadWeight( 
            [out] long* pWeightData, 
            [in] long Timeout, 
            [out, retval] long* pRC );
    // Release 1.1
    // Release 1.2
        [propget, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [out, retval] long* pBinaryConversion );
        [propput, id(11), helpstring("property BinaryConversion")]
        HRESULT BinaryConversion( [in] long BinaryConversion );
        [propget, id(51), helpstring("property CapDisplay")]
        HRESULT CapDisplay( [out, retval] VARIANT_BOOL* pCapDisplay );
    // Release 1.3
        [propget, id(10), helpstring("property AutoDisable")]
        HRESULT AutoDisable( [out, retval] VARIANT_BOOL* pAutoDisable );
        [propput, id(10), helpstring("property AutoDisable")]
        HRESULT AutoDisable( [in] VARIANT_BOOL AutoDisable );
        [propget, id(12), helpstring("property CapPowerReporting")]
        HRESULT CapPowerReporting( [out, retval] long* pCapPowerReporting );
        [propget, id(15), helpstring("property DataCount")]
        HRESULT DataCount( [out, retval] long* pDataCount );
        [propget, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [out, retval] VARIANT_BOOL* pDataEventEnabled );
        [propput, id(16), helpstring("property DataEventEnabled")]
        HRESULT DataEventEnabled( [in] VARIANT_BOOL DataEventEnabled );
        [propget, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [out, retval] long* pPowerNotify );
        [propput, id(20), helpstring("property PowerNotify")]
        HRESULT PowerNotify( [in] long PowerNotify );
        [propget, id(21), helpstring("property PowerState")]
        HRESULT PowerState( [out, retval] long* pPowerState );
        [propget, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [out, retval] VARIANT_BOOL* pAsyncMode );
        [propput, id(50), helpstring("property AsyncMode")]
        HRESULT AsyncMode( [in] VARIANT_BOOL AsyncMode );
        [propget, id(52), helpstring("property CapDisplayText")]
        HRESULT CapDisplayText( [out, retval] VARIANT_BOOL* pCapDisplayText );
        [propget, id(53), helpstring("property CapPriceCalculating")]
        HRESULT CapPriceCalculating( [out, retval] VARIANT_BOOL* pCapPriceCalculating );
        [propget, id(54), helpstring("property CapTareWeight")]
        HRESULT CapTareWeight( [out, retval] VARIANT_BOOL* pCapTareWeight );
        [propget, id(55), helpstring("property CapZeroScale")]
        HRESULT CapZeroScale( [out, retval] VARIANT_BOOL* pCapZeroScale );
        [propget, id(56), helpstring("property MaxDisplayTextChars")]
        HRESULT MaxDisplayTextChars( [out, retval] long* pMaxDisplayTextChars );
        [propget, id(58), helpstring("property SalesPrice")]
        HRESULT SalesPrice( [out, retval] CURRENCY* pSalesPrice );
        [propget, id(59), helpstring("property TareWeight")]
        HRESULT TareWeight( [out, retval] long* pTareWeight );
        [propput, id(59), helpstring("property TareWeight")]
        HRESULT TareWeight( [in] long TareWeight );
        [propget, id(60), helpstring("property UnitPrice")]
        HRESULT UnitPrice( [out, retval] CURRENCY* pUnitPrice );
        [propput, id(60), helpstring("property UnitPrice")]
        HRESULT UnitPrice( [in] CURRENCY UnitPrice );
        [id(70), helpstring("method DisplayText")]
        HRESULT DisplayText( 
            [in] BSTR Data, 
            [out, retval] long* pRC );
        [id(72), helpstring("method ZeroScale")]
        HRESULT ZeroScale( 
            [out, retval] long* pRC );
    // Release 1.4
    // Release 1.5
    // Release 1.6
    // Release 1.7
    };

//
//========== Previous Interface: 1.8 ==========
//

    [
        object,
        uuid(CCB92171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.8 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSScale_1_8 : IOPOSScale_1_5
    {
    // Release 1.8
        [propget, id(39), helpstring("property CapStatisticsReporting")]
        HRESULT CapStatisticsReporting( [out, retval] VARIANT_BOOL* pCapStatisticsReporting );
        [propget, id(40), helpstring("property CapUpdateStatistics")]
        HRESULT CapUpdateStatistics( [out, retval] VARIANT_BOOL* pCapUpdateStatistics );
        [id(41), helpstring("method ResetStatistics")]
        HRESULT ResetStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
        [id(42), helpstring("method RetrieveStatistics")]
        HRESULT RetrieveStatistics( 
            [in, out] BSTR* pStatisticsBuffer, 
            [out, retval] long* pRC );
        [id(43), helpstring("method UpdateStatistics")]
        HRESULT UpdateStatistics( 
            [in] BSTR StatisticsBuffer, 
            [out, retval] long* pRC );
    };

//
//========== Previous Interface: 1.9 ==========
//

    [
        object,
        uuid(CCB93171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.9 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSScale_1_9 : IOPOSScale_1_8
    {
    // Release 1.9
        [propget, id(44), helpstring("property CapCompareFirmwareVersion")]
        HRESULT CapCompareFirmwareVersion( [out, retval] VARIANT_BOOL* pCapCompareFirmwareVersion );
        [propget, id(45), helpstring("property CapUpdateFirmware")]
        HRESULT CapUpdateFirmware( [out, retval] VARIANT_BOOL* pCapUpdateFirmware );
        [id(46), helpstring("method CompareFirmwareVersion")]
        HRESULT CompareFirmwareVersion( 
            [in] BSTR FirmwareFileName, 
            [out] long* pResult, 
            [out, retval] long* pRC );
        [id(47), helpstring("method UpdateFirmware")]
        HRESULT UpdateFirmware( 
            [in] BSTR FirmwareFileName, 
            [out, retval] long* pRC );
        [propget, id(63), helpstring("property CapStatusUpdate")]
        HRESULT CapStatusUpdate( [out, retval] VARIANT_BOOL* pCapStatusUpdate );
        [propget, id(64), helpstring("property ScaleLiveWeight")]
        HRESULT ScaleLiveWeight( [out, retval] long* pScaleLiveWeight );
        [propget, id(65), helpstring("property StatusNotify")]
        HRESULT StatusNotify( [out, retval] long* pStatusNotify );
        [propput, id(65), helpstring("property StatusNotify")]
        HRESULT StatusNotify( [in] long StatusNotify );
    // Release 1.10
    // Release 1.11
    // Release 1.12
    };

    [
        object,
        uuid(CCB94171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.9 Interface (Old Invariant)"),
        pointer_default(unique),
        hidden
    ]
    interface IOPOSScale_1_9_zz : IOPOSScale_1_9
    {
    };

//
//========== Previous Interface: 1.13 ==========
//

    [
        object,
        uuid(CCB95171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.13 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSScale_1_13 : IOPOSScale_1_9
    {
    // Release 1.13
        [propget, id(66), helpstring("property ZeroValid")]
        HRESULT ZeroValid( [out, retval] VARIANT_BOOL* pZeroValid );
        [propput, id(66), helpstring("property ZeroValid")]
        HRESULT ZeroValid( [in] VARIANT_BOOL ZeroValid );
    };

    [
        object,
        uuid(CCB96171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.13 Interface (Old Invariant)"),
        pointer_default(unique),
        hidden
    ]
    interface IOPOSScale_1_13_zz : IOPOSScale_1_13
    {
    };

//
//========== Current Interface: 1.14 ==========
//

    [
        object,
        uuid(CCB97171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale 1.14 Interface"),
        pointer_default(unique)
    ]
    interface IOPOSScale_1_14 : IOPOSScale_1_13
    {
    // Release 1.14
        [propget, id(67), helpstring("property CapFreezeValue")]
        HRESULT CapFreezeValue( [out, retval] VARIANT_BOOL* pCapFreezeValue );
        [propget, id(68), helpstring("property CapReadLiveWeightWithTare")]
        HRESULT CapReadLiveWeightWithTare( [out, retval] VARIANT_BOOL* pCapReadLiveWeightWithTare );
        [propget, id(69), helpstring("property CapSetPriceCalculationMode")]
        HRESULT CapSetPriceCalculationMode( [out, retval] VARIANT_BOOL* pCapSetPriceCalculationMode );
        [propget, id(90), helpstring("property CapSetUnitPriceWithWeightUnit")]
        HRESULT CapSetUnitPriceWithWeightUnit( [out, retval] VARIANT_BOOL* pCapSetUnitPriceWithWeightUnit );
        [propget, id(91), helpstring("property CapSpecialTare")]
        HRESULT CapSpecialTare( [out, retval] VARIANT_BOOL* pCapSpecialTare );
        [propget, id(92), helpstring("property CapTarePriority")]
        HRESULT CapTarePriority( [out, retval] VARIANT_BOOL* pCapTarePriority );
        [propget, id(93), helpstring("property MinimumWeight")]
        HRESULT MinimumWeight( [out, retval] long* pMinimumWeight );
        [id(73), helpstring("method DoPriceCalculating")]
        HRESULT DoPriceCalculating( 
            [out] long* pWeightData, 
            [out] long* pTare, 
            [out] CURRENCY* pUnitPrice, 
            [out] CURRENCY* pUnitPriceX, 
            [out] long* pWeightUnitX, 
            [out] long* pWeightNumeratorX, 
            [out] long* pWeightDenominatorX, 
            [out] CURRENCY* pPrice, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(74), helpstring("method FreezeValue")]
        HRESULT FreezeValue( 
            [in] long Item, 
            [in] VARIANT_BOOL Freeze, 
            [out, retval] long* pRC );
        [id(75), helpstring("method ReadLiveWeightWithTare")]
        HRESULT ReadLiveWeightWithTare( 
            [out] long* pWeightData, 
            [out] long* pTare, 
            [in] long Timeout, 
            [out, retval] long* pRC );
        [id(76), helpstring("method SetPriceCalculationMode")]
        HRESULT SetPriceCalculationMode( 
            [in] long Mode, 
            [out, retval] long* pRC );
        [id(77), helpstring("method SetSpecialTare")]
        HRESULT SetSpecialTare( 
            [in] long Mode, 
            [in] long Data, 
            [out, retval] long* pRC );
        [id(78), helpstring("method SetTarePriority")]
        HRESULT SetTarePriority( 
            [in] long Priority, 
            [out, retval] long* pRC );
        [id(79), helpstring("method SetUnitPriceWithWeightUnit")]
        HRESULT SetUnitPriceWithWeightUnit( 
            [in] CURRENCY UnitPrice, 
            [in] long WeightUnit, 
            [in] long WeightNumerator, 
            [in] long WeightDenominator, 
            [out, retval] long* pRC );
    // Release 1.15
    };

//
//---------- IOPOSScale Interface: Invariant Name ----------
//
    [
        object,
        uuid(CCB98171-B81E-11D2-AB74-0040054C3719),
        dual,
        helpstring("IOPOSScale Current Interface"),
        pointer_default(unique)
    ]
    interface IOPOSScale : IOPOSScale_1_14
    {
    };


///////////////////////////////////////////////////////////////////////////////
//// Library
///////////////////////////////////////////////////////////////////////////////

[
    uuid(CCB90170-B81E-11D2-AB74-0040054C3719),
    version(1.0),
    helpstring("OPOS Scale Control 1.15.000 [Public, by CRM/MCS]")
]
library OposScale_CCO
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    //*************************************************************************
    //** Event interface
    //*************************************************************************
    [
        uuid(CCB90173-B81E-11D2-AB74-0040054C3719),
        helpstring("_IOPOSScaleEvents Interface")
    ]
    dispinterface _IOPOSScaleEvents
    {
        properties:
        methods:
        [id(1), helpstring("method DataEvent")]
            void DataEvent( [in] long Status );
        [id(2), helpstring("method DirectIOEvent")]
            void DirectIOEvent( [in] long EventNumber, [in, out] long *pData, [in, out] BSTR *pString );
        [id(3), helpstring("method ErrorEvent")]
            void ErrorEvent( [in] long ResultCode, [in] long ResultCodeExtended, [in] long ErrorLocus, [in, out] long* pErrorResponse );
        [id(5), helpstring("method StatusUpdateEvent")]
            void StatusUpdateEvent( [in] long Data );
    };

    //*************************************************************************
    //** COM Class
    //*************************************************************************
    [
        uuid(CCB90172-B81E-11D2-AB74-0040054C3719),
        helpstring("OPOS Scale Control 1.15.000 [Public, by CRM/MCS]")
    ]
    coclass OPOSScale
    {
        [default] interface IOPOSScale;
        interface IOPOSScale_1_14;
        interface IOPOSScale_1_13;
        interface IOPOSScale_1_13_zz; // (Old invariant interface.)
        interface IOPOSScale_1_9;
        interface IOPOSScale_1_9_zz; // (Old invariant interface.)
        interface IOPOSScale_1_8;
        interface IOPOSScale_1_5;
        [default, source] dispinterface _IOPOSScaleEvents;
    };
};

// End Scale.idl
